"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/google-auth-library";
exports.ids = ["vendor-chunks/google-auth-library"];
exports.modules = {

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js":
/*!***********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/authclient.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AuthClient = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports.DEFAULT_UNIVERSE = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst transporters_1 = __webpack_require__(/*! ../transporters */ \"(rsc)/./node_modules/google-auth-library/build/src/transporters.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-auth-library/build/src/util.js\");\n/**\n * The default cloud universe\n *\n * @see {@link AuthJSONOptions.universe_domain}\n */ exports.DEFAULT_UNIVERSE = \"googleapis.com\";\n/**\n * The default {@link AuthClientOptions.eagerRefreshThresholdMillis}\n */ exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\nclass AuthClient extends events_1.EventEmitter {\n    constructor(opts = {}){\n        var _a, _b, _c, _d, _e;\n        super();\n        this.credentials = {};\n        this.eagerRefreshThresholdMillis = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;\n        this.forceRefreshOnFailure = false;\n        this.universeDomain = exports.DEFAULT_UNIVERSE;\n        const options = (0, util_1.originalOrCamelOptions)(opts);\n        // Shared auth options\n        this.apiKey = opts.apiKey;\n        this.projectId = (_a = options.get(\"project_id\")) !== null && _a !== void 0 ? _a : null;\n        this.quotaProjectId = options.get(\"quota_project_id\");\n        this.credentials = (_b = options.get(\"credentials\")) !== null && _b !== void 0 ? _b : {};\n        this.universeDomain = (_c = options.get(\"universe_domain\")) !== null && _c !== void 0 ? _c : exports.DEFAULT_UNIVERSE;\n        // Shared client options\n        this.transporter = (_d = opts.transporter) !== null && _d !== void 0 ? _d : new transporters_1.DefaultTransporter();\n        if (opts.transporterOptions) {\n            this.transporter.defaults = opts.transporterOptions;\n        }\n        if (opts.eagerRefreshThresholdMillis) {\n            this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = (_e = opts.forceRefreshOnFailure) !== null && _e !== void 0 ? _e : false;\n    }\n    /**\n     * Return the {@link Gaxios `Gaxios`} instance from the {@link AuthClient.transporter}.\n     *\n     * @expiremental\n     */ get gaxios() {\n        if (this.transporter instanceof gaxios_1.Gaxios) {\n            return this.transporter;\n        } else if (this.transporter instanceof transporters_1.DefaultTransporter) {\n            return this.transporter.instance;\n        } else if (\"instance\" in this.transporter && this.transporter.instance instanceof gaxios_1.Gaxios) {\n            return this.transporter.instance;\n        }\n        return null;\n    }\n    /**\n     * Sets the auth credentials.\n     */ setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    /**\n     * Append additional headers, e.g., x-goog-user-project, shared across the\n     * classes inheriting AuthClient. This method should be used by any method\n     * that overrides getRequestMetadataAsync(), which is a shared helper for\n     * setting request information in both gRPC and HTTP API calls.\n     *\n     * @param headers object to append additional headers to.\n     */ addSharedMetadataHeaders(headers) {\n        // quota_project_id, stored in application_default_credentials.json, is set in\n        // the x-goog-user-project header, to indicate an alternate account for\n        // billing and quota:\n        if (!headers[\"x-goog-user-project\"] && // don't override a value the user sets.\n        this.quotaProjectId) {\n            headers[\"x-goog-user-project\"] = this.quotaProjectId;\n        }\n        return headers;\n    }\n    /**\n     * Retry config for Auth-related requests.\n     *\n     * @remarks\n     *\n     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n     * config as some downstream APIs would prefer if customers explicitly enable retries,\n     * such as GCS.\n     */ static get RETRY_CONFIG() {\n        return {\n            retry: true,\n            retryConfig: {\n                httpMethodsToRetry: [\n                    \"GET\",\n                    \"PUT\",\n                    \"POST\",\n                    \"HEAD\",\n                    \"OPTIONS\",\n                    \"DELETE\"\n                ]\n            }\n        };\n    }\n}\nexports.AuthClient = AuthClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/awsclient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/awsclient.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _a, _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = __webpack_require__(/*! ./awsrequestsigner */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/awsrequestsigner.js\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst defaultawssecuritycredentialssupplier_1 = __webpack_require__(/*! ./defaultawssecuritycredentialssupplier */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-auth-library/build/src/util.js\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */ class AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates an AwsClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid AWS credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        super(options, additionalOptions);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const credentialSource = opts.get(\"credential_source\");\n        const awsSecurityCredentialsSupplier = opts.get(\"aws_security_credentials_supplier\");\n        // Validate credential sourcing configuration.\n        if (!credentialSource && !awsSecurityCredentialsSupplier) {\n            throw new Error(\"A credential source or AWS security credentials supplier must be specified.\");\n        }\n        if (credentialSource && awsSecurityCredentialsSupplier) {\n            throw new Error(\"Only one of credential source or AWS security credentials supplier can be specified.\");\n        }\n        if (awsSecurityCredentialsSupplier) {\n            this.awsSecurityCredentialsSupplier = awsSecurityCredentialsSupplier;\n            this.regionalCredVerificationUrl = __classPrivateFieldGet(_a, _a, \"f\", _AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL);\n            this.credentialSourceType = \"programmatic\";\n        } else {\n            const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n            this.environmentId = credentialSourceOpts.get(\"environment_id\");\n            // This is only required if the AWS region is not available in the\n            // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n            const regionUrl = credentialSourceOpts.get(\"region_url\");\n            // This is only required if AWS security credentials are not available in\n            // environment variables.\n            const securityCredentialsUrl = credentialSourceOpts.get(\"url\");\n            const imdsV2SessionTokenUrl = credentialSourceOpts.get(\"imdsv2_session_token_url\");\n            this.awsSecurityCredentialsSupplier = new defaultawssecuritycredentialssupplier_1.DefaultAwsSecurityCredentialsSupplier({\n                regionUrl: regionUrl,\n                securityCredentialsUrl: securityCredentialsUrl,\n                imdsV2SessionTokenUrl: imdsV2SessionTokenUrl\n            });\n            this.regionalCredVerificationUrl = credentialSourceOpts.get(\"regional_cred_verification_url\");\n            this.credentialSourceType = \"aws\";\n            // Data validators.\n            this.validateEnvironmentId();\n        }\n        this.awsRequestSigner = null;\n        this.region = \"\";\n    }\n    validateEnvironmentId() {\n        var _b;\n        const match = (_b = this.environmentId) === null || _b === void 0 ? void 0 : _b.match(/^(aws)(\\d+)$/);\n        if (!match || !this.regionalCredVerificationUrl) {\n            throw new Error('No valid AWS \"credential_source\" provided');\n        } else if (parseInt(match[2], 10) !== 1) {\n            throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n        }\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint. This will call the\n     * {@link AwsSecurityCredentialsSupplier} to retrieve an AWS region and AWS\n     * Security Credentials, then use them to create a signed AWS STS request that\n     * can be exchanged for a GCP access token.\n     * @return A promise that resolves with the external subject token.\n     */ async retrieveSubjectToken() {\n        // Initialize AWS request signer if not already initialized.\n        if (!this.awsRequestSigner) {\n            this.region = await this.awsSecurityCredentialsSupplier.getAwsRegion(this.supplierContext);\n            this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async ()=>{\n                return this.awsSecurityCredentialsSupplier.getAwsSecurityCredentials(this.supplierContext);\n            }, this.region);\n        }\n        // Generate signed request to AWS STS GetCallerIdentity API.\n        // Use the required regional endpoint. Otherwise, the request will fail.\n        const options = await this.awsRequestSigner.getRequestOptions({\n            ..._a.RETRY_CONFIG,\n            url: this.regionalCredVerificationUrl.replace(\"{region}\", this.region),\n            method: \"POST\"\n        });\n        // The GCP STS endpoint expects the headers to be formatted as:\n        // [\n        //   {key: 'x-amz-date', value: '...'},\n        //   {key: 'Authorization', value: '...'},\n        //   ...\n        // ]\n        // And then serialized as:\n        // encodeURIComponent(JSON.stringify({\n        //   url: '...',\n        //   method: 'POST',\n        //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n        // }))\n        const reformattedHeader = [];\n        const extendedHeaders = Object.assign({\n            // The full, canonical resource name of the workload identity pool\n            // provider, with or without the HTTPS prefix.\n            // Including this header as part of the signature is recommended to\n            // ensure data integrity.\n            \"x-goog-cloud-target-resource\": this.audience\n        }, options.headers);\n        // Reformat header to GCP STS expected format.\n        for(const key in extendedHeaders){\n            reformattedHeader.push({\n                key,\n                value: extendedHeaders[key]\n            });\n        }\n        // Serialize the reformatted signed request.\n        return encodeURIComponent(JSON.stringify({\n            url: options.url,\n            method: options.method,\n            headers: reformattedHeader\n        }));\n    }\n}\nexports.AwsClient = AwsClient;\n_a = AwsClient;\n_AwsClient_DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL = {\n    value: \"https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15\"\n};\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/ AwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = \"169.254.169.254\";\n/**\n * @deprecated AWS client no validates the EC2 metadata address.\n **/ AwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = \"fd00:ec2::254\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9hd3NjbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakMsSUFBSUEseUJBQXlCLElBQUssSUFBSSxJQUFJLENBQUNBLHNCQUFzQixJQUFLLFNBQVVDLFFBQVEsRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLENBQUM7SUFDcEcsSUFBSUQsU0FBUyxPQUFPLENBQUNDLEdBQUcsTUFBTSxJQUFJQyxVQUFVO0lBQzVDLElBQUksT0FBT0gsVUFBVSxhQUFhRCxhQUFhQyxTQUFTLENBQUNFLElBQUksQ0FBQ0YsTUFBTUksR0FBRyxDQUFDTCxXQUFXLE1BQU0sSUFBSUksVUFBVTtJQUN2RyxPQUFPRixTQUFTLE1BQU1DLElBQUlELFNBQVMsTUFBTUMsRUFBRUcsSUFBSSxDQUFDTixZQUFZRyxJQUFJQSxFQUFFSSxLQUFLLEdBQUdOLE1BQU1PLEdBQUcsQ0FBQ1I7QUFDeEY7QUFDQSxJQUFJUyxJQUFJQztBQUNSQyw4Q0FBNkM7SUFBRUosT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE0saUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRSxxQkFBcUJDLG1CQUFPQSxDQUFDLHVHQUFvQjtBQUN2RCxNQUFNQyx1QkFBdUJELG1CQUFPQSxDQUFDLDJHQUFzQjtBQUMzRCxNQUFNRSwwQ0FBMENGLG1CQUFPQSxDQUFDLGlKQUF5QztBQUNqRyxNQUFNRyxTQUFTSCxtQkFBT0EsQ0FBQywyRUFBUztBQUNoQzs7OztDQUlDLEdBQ0QsTUFBTUYsa0JBQWtCRyxxQkFBcUJHLHlCQUF5QjtJQUNsRTs7Ozs7Ozs7OztLQVVDLEdBQ0RDLFlBQVlDLE9BQU8sRUFBRUMsaUJBQWlCLENBQUU7UUFDcEMsS0FBSyxDQUFDRCxTQUFTQztRQUNmLE1BQU1DLE9BQU8sQ0FBQyxHQUFHTCxPQUFPTSxzQkFBc0IsRUFBRUg7UUFDaEQsTUFBTUksbUJBQW1CRixLQUFLaEIsR0FBRyxDQUFDO1FBQ2xDLE1BQU1tQixpQ0FBaUNILEtBQUtoQixHQUFHLENBQUM7UUFDaEQsOENBQThDO1FBQzlDLElBQUksQ0FBQ2tCLG9CQUFvQixDQUFDQyxnQ0FBZ0M7WUFDdEQsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EsSUFBSUYsb0JBQW9CQyxnQ0FBZ0M7WUFDcEQsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EsSUFBSUQsZ0NBQWdDO1lBQ2hDLElBQUksQ0FBQ0EsOEJBQThCLEdBQUdBO1lBQ3RDLElBQUksQ0FBQ0UsMkJBQTJCLEdBQzVCOUIsdUJBQXVCVSxJQUFJQSxJQUFJLEtBQUtDO1lBQ3hDLElBQUksQ0FBQ29CLG9CQUFvQixHQUFHO1FBQ2hDLE9BQ0s7WUFDRCxNQUFNQyx1QkFBdUIsQ0FBQyxHQUFHWixPQUFPTSxzQkFBc0IsRUFBRUM7WUFDaEUsSUFBSSxDQUFDTSxhQUFhLEdBQUdELHFCQUFxQnZCLEdBQUcsQ0FBQztZQUM5QyxrRUFBa0U7WUFDbEUsMERBQTBEO1lBQzFELE1BQU15QixZQUFZRixxQkFBcUJ2QixHQUFHLENBQUM7WUFDM0MseUVBQXlFO1lBQ3pFLHlCQUF5QjtZQUN6QixNQUFNMEIseUJBQXlCSCxxQkFBcUJ2QixHQUFHLENBQUM7WUFDeEQsTUFBTTJCLHdCQUF3QkoscUJBQXFCdkIsR0FBRyxDQUFDO1lBQ3ZELElBQUksQ0FBQ21CLDhCQUE4QixHQUMvQixJQUFJVCx3Q0FBd0NrQixxQ0FBcUMsQ0FBQztnQkFDOUVILFdBQVdBO2dCQUNYQyx3QkFBd0JBO2dCQUN4QkMsdUJBQXVCQTtZQUMzQjtZQUNKLElBQUksQ0FBQ04sMkJBQTJCLEdBQUdFLHFCQUFxQnZCLEdBQUcsQ0FBQztZQUM1RCxJQUFJLENBQUNzQixvQkFBb0IsR0FBRztZQUM1QixtQkFBbUI7WUFDbkIsSUFBSSxDQUFDTyxxQkFBcUI7UUFDOUI7UUFDQSxJQUFJLENBQUNDLGdCQUFnQixHQUFHO1FBQ3hCLElBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBQ2xCO0lBQ0FGLHdCQUF3QjtRQUNwQixJQUFJRztRQUNKLE1BQU1DLFFBQVEsQ0FBQ0QsS0FBSyxJQUFJLENBQUNSLGFBQWEsTUFBTSxRQUFRUSxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdDLEtBQUssQ0FBQztRQUN0RixJQUFJLENBQUNBLFNBQVMsQ0FBQyxJQUFJLENBQUNaLDJCQUEyQixFQUFFO1lBQzdDLE1BQU0sSUFBSUQsTUFBTTtRQUNwQixPQUNLLElBQUljLFNBQVNELEtBQUssQ0FBQyxFQUFFLEVBQUUsUUFBUSxHQUFHO1lBQ25DLE1BQU0sSUFBSWIsTUFBTSxDQUFDLGFBQWEsRUFBRWEsS0FBSyxDQUFDLEVBQUUsQ0FBQyx3Q0FBd0MsQ0FBQztRQUN0RjtJQUNKO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE1BQU1FLHVCQUF1QjtRQUN6Qiw0REFBNEQ7UUFDNUQsSUFBSSxDQUFDLElBQUksQ0FBQ0wsZ0JBQWdCLEVBQUU7WUFDeEIsSUFBSSxDQUFDQyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUNaLDhCQUE4QixDQUFDaUIsWUFBWSxDQUFDLElBQUksQ0FBQ0MsZUFBZTtZQUN6RixJQUFJLENBQUNQLGdCQUFnQixHQUFHLElBQUl2QixtQkFBbUIrQixnQkFBZ0IsQ0FBQztnQkFDNUQsT0FBTyxJQUFJLENBQUNuQiw4QkFBOEIsQ0FBQ29CLHlCQUF5QixDQUFDLElBQUksQ0FBQ0YsZUFBZTtZQUM3RixHQUFHLElBQUksQ0FBQ04sTUFBTTtRQUNsQjtRQUNBLDREQUE0RDtRQUM1RCx3RUFBd0U7UUFDeEUsTUFBTWpCLFVBQVUsTUFBTSxJQUFJLENBQUNnQixnQkFBZ0IsQ0FBQ1UsaUJBQWlCLENBQUM7WUFDMUQsR0FBR3ZDLEdBQUd3QyxZQUFZO1lBQ2xCQyxLQUFLLElBQUksQ0FBQ3JCLDJCQUEyQixDQUFDc0IsT0FBTyxDQUFDLFlBQVksSUFBSSxDQUFDWixNQUFNO1lBQ3JFYSxRQUFRO1FBQ1o7UUFDQSwrREFBK0Q7UUFDL0QsSUFBSTtRQUNKLHVDQUF1QztRQUN2QywwQ0FBMEM7UUFDMUMsUUFBUTtRQUNSLElBQUk7UUFDSiwwQkFBMEI7UUFDMUIsc0NBQXNDO1FBQ3RDLGdCQUFnQjtRQUNoQixvQkFBb0I7UUFDcEIsc0RBQXNEO1FBQ3RELE1BQU07UUFDTixNQUFNQyxvQkFBb0IsRUFBRTtRQUM1QixNQUFNQyxrQkFBa0IzQyxPQUFPNEMsTUFBTSxDQUFDO1lBQ2xDLGtFQUFrRTtZQUNsRSw4Q0FBOEM7WUFDOUMsbUVBQW1FO1lBQ25FLHlCQUF5QjtZQUN6QixnQ0FBZ0MsSUFBSSxDQUFDQyxRQUFRO1FBQ2pELEdBQUdsQyxRQUFRbUMsT0FBTztRQUNsQiw4Q0FBOEM7UUFDOUMsSUFBSyxNQUFNQyxPQUFPSixnQkFBaUI7WUFDL0JELGtCQUFrQk0sSUFBSSxDQUFDO2dCQUNuQkQ7Z0JBQ0FuRCxPQUFPK0MsZUFBZSxDQUFDSSxJQUFJO1lBQy9CO1FBQ0o7UUFDQSw0Q0FBNEM7UUFDNUMsT0FBT0UsbUJBQW1CQyxLQUFLQyxTQUFTLENBQUM7WUFDckNaLEtBQUs1QixRQUFRNEIsR0FBRztZQUNoQkUsUUFBUTlCLFFBQVE4QixNQUFNO1lBQ3RCSyxTQUFTSjtRQUNiO0lBQ0o7QUFDSjtBQUNBeEMsaUJBQWlCLEdBQUdDO0FBQ3BCTCxLQUFLSztBQUNMSiw4REFBOEQ7SUFBRUgsT0FBTztBQUFpRjtBQUN4Sjs7RUFFRSxHQUNGTyxVQUFVaUQsNkJBQTZCLEdBQUc7QUFDMUM7O0VBRUUsR0FDRmpELFVBQVVrRCw2QkFBNkIsR0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtY29tbWVudGVyLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvYXdzY2xpZW50LmpzPzQ4YjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0ID0gKHRoaXMgJiYgdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KSB8fCBmdW5jdGlvbiAocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgZ2V0dGVyXCIpO1xuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59O1xudmFyIF9hLCBfQXdzQ2xpZW50X0RFRkFVTFRfQVdTX1JFR0lPTkFMX0NSRURFTlRJQUxfVkVSSUZJQ0FUSU9OX1VSTDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXdzQ2xpZW50ID0gdm9pZCAwO1xuY29uc3QgYXdzcmVxdWVzdHNpZ25lcl8xID0gcmVxdWlyZShcIi4vYXdzcmVxdWVzdHNpZ25lclwiKTtcbmNvbnN0IGJhc2VleHRlcm5hbGNsaWVudF8xID0gcmVxdWlyZShcIi4vYmFzZWV4dGVybmFsY2xpZW50XCIpO1xuY29uc3QgZGVmYXVsdGF3c3NlY3VyaXR5Y3JlZGVudGlhbHNzdXBwbGllcl8xID0gcmVxdWlyZShcIi4vZGVmYXVsdGF3c3NlY3VyaXR5Y3JlZGVudGlhbHNzdXBwbGllclwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuLyoqXG4gKiBBV1MgZXh0ZXJuYWwgYWNjb3VudCBjbGllbnQuIFRoaXMgaXMgdXNlZCBmb3IgQVdTIHdvcmtsb2Fkcywgd2hlcmVcbiAqIEFXUyBTVFMgR2V0Q2FsbGVySWRlbnRpdHkgc2VyaWFsaXplZCBzaWduZWQgcmVxdWVzdHMgYXJlIGV4Y2hhbmdlZCBmb3JcbiAqIEdDUCBhY2Nlc3MgdG9rZW4uXG4gKi9cbmNsYXNzIEF3c0NsaWVudCBleHRlbmRzIGJhc2VleHRlcm5hbGNsaWVudF8xLkJhc2VFeHRlcm5hbEFjY291bnRDbGllbnQge1xuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlcyBhbiBBd3NDbGllbnQgaW5zdGFuY2UgdXNpbmcgdGhlIHByb3ZpZGVkIEpTT05cbiAgICAgKiBvYmplY3QgbG9hZGVkIGZyb20gYW4gZXh0ZXJuYWwgYWNjb3VudCBjcmVkZW50aWFscyBmaWxlLlxuICAgICAqIEFuIGVycm9yIGlzIHRocm93biBpZiB0aGUgY3JlZGVudGlhbCBpcyBub3QgYSB2YWxpZCBBV1MgY3JlZGVudGlhbC5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgZXh0ZXJuYWwgYWNjb3VudCBvcHRpb25zIG9iamVjdCB0eXBpY2FsbHkgbG9hZGVkXG4gICAgICogICBmcm9tIHRoZSBleHRlcm5hbCBhY2NvdW50IEpTT04gY3JlZGVudGlhbCBmaWxlLlxuICAgICAqIEBwYXJhbSBhZGRpdGlvbmFsT3B0aW9ucyAqKkRFUFJFQ0FURUQsIGFsbCBvcHRpb25zIGFyZSBhdmFpbGFibGUgaW4gdGhlXG4gICAgICogICBgb3B0aW9uc2AgcGFyYW1ldGVyLioqIE9wdGlvbmFsIGFkZGl0aW9uYWwgYmVoYXZpb3IgY3VzdG9taXphdGlvbiBvcHRpb25zLlxuICAgICAqICAgVGhlc2UgY3VycmVudGx5IGN1c3RvbWl6ZSBleHBpcmF0aW9uIHRocmVzaG9sZCB0aW1lIGFuZCB3aGV0aGVyIHRvIHJldHJ5XG4gICAgICogICBvbiA0MDEvNDAzIEFQSSByZXF1ZXN0IGVycm9ycy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBhZGRpdGlvbmFsT3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zLCBhZGRpdGlvbmFsT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSAoMCwgdXRpbF8xLm9yaWdpbmFsT3JDYW1lbE9wdGlvbnMpKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBjcmVkZW50aWFsU291cmNlID0gb3B0cy5nZXQoJ2NyZWRlbnRpYWxfc291cmNlJyk7XG4gICAgICAgIGNvbnN0IGF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllciA9IG9wdHMuZ2V0KCdhd3Nfc2VjdXJpdHlfY3JlZGVudGlhbHNfc3VwcGxpZXInKTtcbiAgICAgICAgLy8gVmFsaWRhdGUgY3JlZGVudGlhbCBzb3VyY2luZyBjb25maWd1cmF0aW9uLlxuICAgICAgICBpZiAoIWNyZWRlbnRpYWxTb3VyY2UgJiYgIWF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBIGNyZWRlbnRpYWwgc291cmNlIG9yIEFXUyBzZWN1cml0eSBjcmVkZW50aWFscyBzdXBwbGllciBtdXN0IGJlIHNwZWNpZmllZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3JlZGVudGlhbFNvdXJjZSAmJiBhd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBvbmUgb2YgY3JlZGVudGlhbCBzb3VyY2Ugb3IgQVdTIHNlY3VyaXR5IGNyZWRlbnRpYWxzIHN1cHBsaWVyIGNhbiBiZSBzcGVjaWZpZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcikge1xuICAgICAgICAgICAgdGhpcy5hd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXIgPSBhd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXI7XG4gICAgICAgICAgICB0aGlzLnJlZ2lvbmFsQ3JlZFZlcmlmaWNhdGlvblVybCA9XG4gICAgICAgICAgICAgICAgX19jbGFzc1ByaXZhdGVGaWVsZEdldChfYSwgX2EsIFwiZlwiLCBfQXdzQ2xpZW50X0RFRkFVTFRfQVdTX1JFR0lPTkFMX0NSRURFTlRJQUxfVkVSSUZJQ0FUSU9OX1VSTCk7XG4gICAgICAgICAgICB0aGlzLmNyZWRlbnRpYWxTb3VyY2VUeXBlID0gJ3Byb2dyYW1tYXRpYyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjcmVkZW50aWFsU291cmNlT3B0cyA9ICgwLCB1dGlsXzEub3JpZ2luYWxPckNhbWVsT3B0aW9ucykoY3JlZGVudGlhbFNvdXJjZSk7XG4gICAgICAgICAgICB0aGlzLmVudmlyb25tZW50SWQgPSBjcmVkZW50aWFsU291cmNlT3B0cy5nZXQoJ2Vudmlyb25tZW50X2lkJyk7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIG9ubHkgcmVxdWlyZWQgaWYgdGhlIEFXUyByZWdpb24gaXMgbm90IGF2YWlsYWJsZSBpbiB0aGVcbiAgICAgICAgICAgIC8vIEFXU19SRUdJT04gb3IgQVdTX0RFRkFVTFRfUkVHSU9OIGVudmlyb25tZW50IHZhcmlhYmxlcy5cbiAgICAgICAgICAgIGNvbnN0IHJlZ2lvblVybCA9IGNyZWRlbnRpYWxTb3VyY2VPcHRzLmdldCgncmVnaW9uX3VybCcpO1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBvbmx5IHJlcXVpcmVkIGlmIEFXUyBzZWN1cml0eSBjcmVkZW50aWFscyBhcmUgbm90IGF2YWlsYWJsZSBpblxuICAgICAgICAgICAgLy8gZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICAgICAgICAgICAgY29uc3Qgc2VjdXJpdHlDcmVkZW50aWFsc1VybCA9IGNyZWRlbnRpYWxTb3VyY2VPcHRzLmdldCgndXJsJyk7XG4gICAgICAgICAgICBjb25zdCBpbWRzVjJTZXNzaW9uVG9rZW5VcmwgPSBjcmVkZW50aWFsU291cmNlT3B0cy5nZXQoJ2ltZHN2Ml9zZXNzaW9uX3Rva2VuX3VybCcpO1xuICAgICAgICAgICAgdGhpcy5hd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXIgPVxuICAgICAgICAgICAgICAgIG5ldyBkZWZhdWx0YXdzc2VjdXJpdHljcmVkZW50aWFsc3N1cHBsaWVyXzEuRGVmYXVsdEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcih7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2lvblVybDogcmVnaW9uVXJsLFxuICAgICAgICAgICAgICAgICAgICBzZWN1cml0eUNyZWRlbnRpYWxzVXJsOiBzZWN1cml0eUNyZWRlbnRpYWxzVXJsLFxuICAgICAgICAgICAgICAgICAgICBpbWRzVjJTZXNzaW9uVG9rZW5Vcmw6IGltZHNWMlNlc3Npb25Ub2tlblVybCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucmVnaW9uYWxDcmVkVmVyaWZpY2F0aW9uVXJsID0gY3JlZGVudGlhbFNvdXJjZU9wdHMuZ2V0KCdyZWdpb25hbF9jcmVkX3ZlcmlmaWNhdGlvbl91cmwnKTtcbiAgICAgICAgICAgIHRoaXMuY3JlZGVudGlhbFNvdXJjZVR5cGUgPSAnYXdzJztcbiAgICAgICAgICAgIC8vIERhdGEgdmFsaWRhdG9ycy5cbiAgICAgICAgICAgIHRoaXMudmFsaWRhdGVFbnZpcm9ubWVudElkKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hd3NSZXF1ZXN0U2lnbmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWdpb24gPSAnJztcbiAgICB9XG4gICAgdmFsaWRhdGVFbnZpcm9ubWVudElkKCkge1xuICAgICAgICB2YXIgX2I7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gKF9iID0gdGhpcy5lbnZpcm9ubWVudElkKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubWF0Y2goL14oYXdzKShcXGQrKSQvKTtcbiAgICAgICAgaWYgKCFtYXRjaCB8fCAhdGhpcy5yZWdpb25hbENyZWRWZXJpZmljYXRpb25VcmwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdmFsaWQgQVdTIFwiY3JlZGVudGlhbF9zb3VyY2VcIiBwcm92aWRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcnNlSW50KG1hdGNoWzJdLCAxMCkgIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYXdzIHZlcnNpb24gXCIke21hdGNoWzJdfVwiIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGN1cnJlbnQgYnVpbGQuYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gYW4gZXh0ZXJuYWwgc3ViamVjdCB0b2tlbiBpcyBuZWVkZWQgdG8gYmUgZXhjaGFuZ2VkIGZvciBhXG4gICAgICogR0NQIGFjY2VzcyB0b2tlbiB2aWEgR0NQIFNUUyBlbmRwb2ludC4gVGhpcyB3aWxsIGNhbGwgdGhlXG4gICAgICoge0BsaW5rIEF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllcn0gdG8gcmV0cmlldmUgYW4gQVdTIHJlZ2lvbiBhbmQgQVdTXG4gICAgICogU2VjdXJpdHkgQ3JlZGVudGlhbHMsIHRoZW4gdXNlIHRoZW0gdG8gY3JlYXRlIGEgc2lnbmVkIEFXUyBTVFMgcmVxdWVzdCB0aGF0XG4gICAgICogY2FuIGJlIGV4Y2hhbmdlZCBmb3IgYSBHQ1AgYWNjZXNzIHRva2VuLlxuICAgICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZXh0ZXJuYWwgc3ViamVjdCB0b2tlbi5cbiAgICAgKi9cbiAgICBhc3luYyByZXRyaWV2ZVN1YmplY3RUb2tlbigpIHtcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBBV1MgcmVxdWVzdCBzaWduZXIgaWYgbm90IGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAgICAgIGlmICghdGhpcy5hd3NSZXF1ZXN0U2lnbmVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lvbiA9IGF3YWl0IHRoaXMuYXdzU2VjdXJpdHlDcmVkZW50aWFsc1N1cHBsaWVyLmdldEF3c1JlZ2lvbih0aGlzLnN1cHBsaWVyQ29udGV4dCk7XG4gICAgICAgICAgICB0aGlzLmF3c1JlcXVlc3RTaWduZXIgPSBuZXcgYXdzcmVxdWVzdHNpZ25lcl8xLkF3c1JlcXVlc3RTaWduZXIoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmF3c1NlY3VyaXR5Q3JlZGVudGlhbHNTdXBwbGllci5nZXRBd3NTZWN1cml0eUNyZWRlbnRpYWxzKHRoaXMuc3VwcGxpZXJDb250ZXh0KTtcbiAgICAgICAgICAgIH0sIHRoaXMucmVnaW9uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBHZW5lcmF0ZSBzaWduZWQgcmVxdWVzdCB0byBBV1MgU1RTIEdldENhbGxlcklkZW50aXR5IEFQSS5cbiAgICAgICAgLy8gVXNlIHRoZSByZXF1aXJlZCByZWdpb25hbCBlbmRwb2ludC4gT3RoZXJ3aXNlLCB0aGUgcmVxdWVzdCB3aWxsIGZhaWwuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBhd2FpdCB0aGlzLmF3c1JlcXVlc3RTaWduZXIuZ2V0UmVxdWVzdE9wdGlvbnMoe1xuICAgICAgICAgICAgLi4uX2EuUkVUUllfQ09ORklHLFxuICAgICAgICAgICAgdXJsOiB0aGlzLnJlZ2lvbmFsQ3JlZFZlcmlmaWNhdGlvblVybC5yZXBsYWNlKCd7cmVnaW9ufScsIHRoaXMucmVnaW9uKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVGhlIEdDUCBTVFMgZW5kcG9pbnQgZXhwZWN0cyB0aGUgaGVhZGVycyB0byBiZSBmb3JtYXR0ZWQgYXM6XG4gICAgICAgIC8vIFtcbiAgICAgICAgLy8gICB7a2V5OiAneC1hbXotZGF0ZScsIHZhbHVlOiAnLi4uJ30sXG4gICAgICAgIC8vICAge2tleTogJ0F1dGhvcml6YXRpb24nLCB2YWx1ZTogJy4uLid9LFxuICAgICAgICAvLyAgIC4uLlxuICAgICAgICAvLyBdXG4gICAgICAgIC8vIEFuZCB0aGVuIHNlcmlhbGl6ZWQgYXM6XG4gICAgICAgIC8vIGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIC8vICAgdXJsOiAnLi4uJyxcbiAgICAgICAgLy8gICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgLy8gICBoZWFkZXJzOiBbe2tleTogJ3gtYW16LWRhdGUnLCB2YWx1ZTogJy4uLid9LCAuLi5dXG4gICAgICAgIC8vIH0pKVxuICAgICAgICBjb25zdCByZWZvcm1hdHRlZEhlYWRlciA9IFtdO1xuICAgICAgICBjb25zdCBleHRlbmRlZEhlYWRlcnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIC8vIFRoZSBmdWxsLCBjYW5vbmljYWwgcmVzb3VyY2UgbmFtZSBvZiB0aGUgd29ya2xvYWQgaWRlbnRpdHkgcG9vbFxuICAgICAgICAgICAgLy8gcHJvdmlkZXIsIHdpdGggb3Igd2l0aG91dCB0aGUgSFRUUFMgcHJlZml4LlxuICAgICAgICAgICAgLy8gSW5jbHVkaW5nIHRoaXMgaGVhZGVyIGFzIHBhcnQgb2YgdGhlIHNpZ25hdHVyZSBpcyByZWNvbW1lbmRlZCB0b1xuICAgICAgICAgICAgLy8gZW5zdXJlIGRhdGEgaW50ZWdyaXR5LlxuICAgICAgICAgICAgJ3gtZ29vZy1jbG91ZC10YXJnZXQtcmVzb3VyY2UnOiB0aGlzLmF1ZGllbmNlLFxuICAgICAgICB9LCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAvLyBSZWZvcm1hdCBoZWFkZXIgdG8gR0NQIFNUUyBleHBlY3RlZCBmb3JtYXQuXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGV4dGVuZGVkSGVhZGVycykge1xuICAgICAgICAgICAgcmVmb3JtYXR0ZWRIZWFkZXIucHVzaCh7XG4gICAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBleHRlbmRlZEhlYWRlcnNba2V5XSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlcmlhbGl6ZSB0aGUgcmVmb3JtYXR0ZWQgc2lnbmVkIHJlcXVlc3QuXG4gICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgdXJsOiBvcHRpb25zLnVybCxcbiAgICAgICAgICAgIG1ldGhvZDogb3B0aW9ucy5tZXRob2QsXG4gICAgICAgICAgICBoZWFkZXJzOiByZWZvcm1hdHRlZEhlYWRlcixcbiAgICAgICAgfSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuQXdzQ2xpZW50ID0gQXdzQ2xpZW50O1xuX2EgPSBBd3NDbGllbnQ7XG5fQXdzQ2xpZW50X0RFRkFVTFRfQVdTX1JFR0lPTkFMX0NSRURFTlRJQUxfVkVSSUZJQ0FUSU9OX1VSTCA9IHsgdmFsdWU6ICdodHRwczovL3N0cy57cmVnaW9ufS5hbWF6b25hd3MuY29tP0FjdGlvbj1HZXRDYWxsZXJJZGVudGl0eSZWZXJzaW9uPTIwMTEtMDYtMTUnIH07XG4vKipcbiAqIEBkZXByZWNhdGVkIEFXUyBjbGllbnQgbm8gdmFsaWRhdGVzIHRoZSBFQzIgbWV0YWRhdGEgYWRkcmVzcy5cbiAqKi9cbkF3c0NsaWVudC5BV1NfRUMyX01FVEFEQVRBX0lQVjRfQUREUkVTUyA9ICcxNjkuMjU0LjE2OS4yNTQnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBBV1MgY2xpZW50IG5vIHZhbGlkYXRlcyB0aGUgRUMyIG1ldGFkYXRhIGFkZHJlc3MuXG4gKiovXG5Bd3NDbGllbnQuQVdTX0VDMl9NRVRBREFUQV9JUFY2X0FERFJFU1MgPSAnZmQwMDplYzI6OjI1NCc7XG4iXSwibmFtZXMiOlsiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsInJlY2VpdmVyIiwic3RhdGUiLCJraW5kIiwiZiIsIlR5cGVFcnJvciIsImhhcyIsImNhbGwiLCJ2YWx1ZSIsImdldCIsIl9hIiwiX0F3c0NsaWVudF9ERUZBVUxUX0FXU19SRUdJT05BTF9DUkVERU5USUFMX1ZFUklGSUNBVElPTl9VUkwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJBd3NDbGllbnQiLCJhd3NyZXF1ZXN0c2lnbmVyXzEiLCJyZXF1aXJlIiwiYmFzZWV4dGVybmFsY2xpZW50XzEiLCJkZWZhdWx0YXdzc2VjdXJpdHljcmVkZW50aWFsc3N1cHBsaWVyXzEiLCJ1dGlsXzEiLCJCYXNlRXh0ZXJuYWxBY2NvdW50Q2xpZW50IiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiYWRkaXRpb25hbE9wdGlvbnMiLCJvcHRzIiwib3JpZ2luYWxPckNhbWVsT3B0aW9ucyIsImNyZWRlbnRpYWxTb3VyY2UiLCJhd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXIiLCJFcnJvciIsInJlZ2lvbmFsQ3JlZFZlcmlmaWNhdGlvblVybCIsImNyZWRlbnRpYWxTb3VyY2VUeXBlIiwiY3JlZGVudGlhbFNvdXJjZU9wdHMiLCJlbnZpcm9ubWVudElkIiwicmVnaW9uVXJsIiwic2VjdXJpdHlDcmVkZW50aWFsc1VybCIsImltZHNWMlNlc3Npb25Ub2tlblVybCIsIkRlZmF1bHRBd3NTZWN1cml0eUNyZWRlbnRpYWxzU3VwcGxpZXIiLCJ2YWxpZGF0ZUVudmlyb25tZW50SWQiLCJhd3NSZXF1ZXN0U2lnbmVyIiwicmVnaW9uIiwiX2IiLCJtYXRjaCIsInBhcnNlSW50IiwicmV0cmlldmVTdWJqZWN0VG9rZW4iLCJnZXRBd3NSZWdpb24iLCJzdXBwbGllckNvbnRleHQiLCJBd3NSZXF1ZXN0U2lnbmVyIiwiZ2V0QXdzU2VjdXJpdHlDcmVkZW50aWFscyIsImdldFJlcXVlc3RPcHRpb25zIiwiUkVUUllfQ09ORklHIiwidXJsIiwicmVwbGFjZSIsIm1ldGhvZCIsInJlZm9ybWF0dGVkSGVhZGVyIiwiZXh0ZW5kZWRIZWFkZXJzIiwiYXNzaWduIiwiYXVkaWVuY2UiLCJoZWFkZXJzIiwia2V5IiwicHVzaCIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJBV1NfRUMyX01FVEFEQVRBX0lQVjRfQUREUkVTUyIsIkFXU19FQzJfTUVUQURBVEFfSVBWNl9BRERSRVNTIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/awsclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/awsrequestsigner.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/awsrequestsigner.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AwsRequestSigner = void 0;\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(rsc)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\n/** AWS Signature Version 4 signing algorithm identifier.  */ const AWS_ALGORITHM = \"AWS4-HMAC-SHA256\";\n/**\n * The termination string for the AWS credential scope value as defined in\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n */ const AWS_REQUEST_TYPE = \"aws4_request\";\n/**\n * Implements an AWS API request signer based on the AWS Signature Version 4\n * signing process.\n * https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */ class AwsRequestSigner {\n    /**\n     * Instantiates an AWS API request signer used to send authenticated signed\n     * requests to AWS APIs based on the AWS Signature Version 4 signing process.\n     * This also provides a mechanism to generate the signed request without\n     * sending it.\n     * @param getCredentials A mechanism to retrieve AWS security credentials\n     *   when needed.\n     * @param region The AWS region to use.\n     */ constructor(getCredentials, region){\n        this.getCredentials = getCredentials;\n        this.region = region;\n        this.crypto = (0, crypto_1.createCrypto)();\n    }\n    /**\n     * Generates the signed request for the provided HTTP request for calling\n     * an AWS API. This follows the steps described at:\n     * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html\n     * @param amzOptions The AWS request options that need to be signed.\n     * @return A promise that resolves with the GaxiosOptions containing the\n     *   signed HTTP request parameters.\n     */ async getRequestOptions(amzOptions) {\n        if (!amzOptions.url) {\n            throw new Error('\"url\" is required in \"amzOptions\"');\n        }\n        // Stringify JSON requests. This will be set in the request body of the\n        // generated signed request.\n        const requestPayloadData = typeof amzOptions.data === \"object\" ? JSON.stringify(amzOptions.data) : amzOptions.data;\n        const url = amzOptions.url;\n        const method = amzOptions.method || \"GET\";\n        const requestPayload = amzOptions.body || requestPayloadData;\n        const additionalAmzHeaders = amzOptions.headers;\n        const awsSecurityCredentials = await this.getCredentials();\n        const uri = new URL(url);\n        const headerMap = await generateAuthenticationHeaderMap({\n            crypto: this.crypto,\n            host: uri.host,\n            canonicalUri: uri.pathname,\n            canonicalQuerystring: uri.search.substr(1),\n            method,\n            region: this.region,\n            securityCredentials: awsSecurityCredentials,\n            requestPayload,\n            additionalAmzHeaders\n        });\n        // Append additional optional headers, eg. X-Amz-Target, Content-Type, etc.\n        const headers = Object.assign(// Add x-amz-date if available.\n        headerMap.amzDate ? {\n            \"x-amz-date\": headerMap.amzDate\n        } : {}, {\n            Authorization: headerMap.authorizationHeader,\n            host: uri.host\n        }, additionalAmzHeaders || {});\n        if (awsSecurityCredentials.token) {\n            Object.assign(headers, {\n                \"x-amz-security-token\": awsSecurityCredentials.token\n            });\n        }\n        const awsSignedReq = {\n            url,\n            method: method,\n            headers\n        };\n        if (typeof requestPayload !== \"undefined\") {\n            awsSignedReq.body = requestPayload;\n        }\n        return awsSignedReq;\n    }\n}\nexports.AwsRequestSigner = AwsRequestSigner;\n/**\n * Creates the HMAC-SHA256 hash of the provided message using the\n * provided key.\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The HMAC-SHA256 key to use.\n * @param msg The message to hash.\n * @return The computed hash bytes.\n */ async function sign(crypto, key, msg) {\n    return await crypto.signWithHmacSha256(key, msg);\n}\n/**\n * Calculates the signing key used to calculate the signature for\n * AWS Signature Version 4 based on:\n * https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n *\n * @param crypto The crypto instance used to facilitate cryptographic\n *   operations.\n * @param key The AWS secret access key.\n * @param dateStamp The '%Y%m%d' date format.\n * @param region The AWS region.\n * @param serviceName The AWS service name, eg. sts.\n * @return The signing key bytes.\n */ async function getSigningKey(crypto, key, dateStamp, region, serviceName) {\n    const kDate = await sign(crypto, `AWS4${key}`, dateStamp);\n    const kRegion = await sign(crypto, kDate, region);\n    const kService = await sign(crypto, kRegion, serviceName);\n    const kSigning = await sign(crypto, kService, \"aws4_request\");\n    return kSigning;\n}\n/**\n * Generates the authentication header map needed for generating the AWS\n * Signature Version 4 signed request.\n *\n * @param option The options needed to compute the authentication header map.\n * @return The AWS authentication header map which constitutes of the following\n *   components: amz-date, authorization header and canonical query string.\n */ async function generateAuthenticationHeaderMap(options) {\n    const additionalAmzHeaders = options.additionalAmzHeaders || {};\n    const requestPayload = options.requestPayload || \"\";\n    // iam.amazonaws.com host => iam service.\n    // sts.us-east-2.amazonaws.com => sts service.\n    const serviceName = options.host.split(\".\")[0];\n    const now = new Date();\n    // Format: '%Y%m%dT%H%M%SZ'.\n    const amzDate = now.toISOString().replace(/[-:]/g, \"\").replace(/\\.[0-9]+/, \"\");\n    // Format: '%Y%m%d'.\n    const dateStamp = now.toISOString().replace(/[-]/g, \"\").replace(/T.*/, \"\");\n    // Change all additional headers to be lower case.\n    const reformattedAdditionalAmzHeaders = {};\n    Object.keys(additionalAmzHeaders).forEach((key)=>{\n        reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];\n    });\n    // Add AWS token if available.\n    if (options.securityCredentials.token) {\n        reformattedAdditionalAmzHeaders[\"x-amz-security-token\"] = options.securityCredentials.token;\n    }\n    // Header keys need to be sorted alphabetically.\n    const amzHeaders = Object.assign({\n        host: options.host\n    }, // Previously the date was not fixed with x-amz- and could be provided manually.\n    // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req\n    reformattedAdditionalAmzHeaders.date ? {} : {\n        \"x-amz-date\": amzDate\n    }, reformattedAdditionalAmzHeaders);\n    let canonicalHeaders = \"\";\n    const signedHeadersList = Object.keys(amzHeaders).sort();\n    signedHeadersList.forEach((key)=>{\n        canonicalHeaders += `${key}:${amzHeaders[key]}\\n`;\n    });\n    const signedHeaders = signedHeadersList.join(\";\");\n    const payloadHash = await options.crypto.sha256DigestHex(requestPayload);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n    const canonicalRequest = `${options.method}\\n` + `${options.canonicalUri}\\n` + `${options.canonicalQuerystring}\\n` + `${canonicalHeaders}\\n` + `${signedHeaders}\\n` + `${payloadHash}`;\n    const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n    const stringToSign = `${AWS_ALGORITHM}\\n` + `${amzDate}\\n` + `${credentialScope}\\n` + await options.crypto.sha256DigestHex(canonicalRequest);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n    const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);\n    const signature = await sign(options.crypto, signingKey, stringToSign);\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/` + `${credentialScope}, SignedHeaders=${signedHeaders}, ` + `Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;\n    return {\n        // Do not return x-amz-date if date is available.\n        amzDate: reformattedAdditionalAmzHeaders.date ? undefined : amzDate,\n        authorizationHeader,\n        canonicalQuerystring: options.canonicalQuerystring\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/awsrequestsigner.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/baseexternalclient.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _BaseExternalAccountClient_instances, _BaseExternalAccountClient_pendingAccessToken, _BaseExternalAccountClient_internalRefreshAccessTokenAsync;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseExternalAccountClient = exports.DEFAULT_UNIVERSE = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst sts = __webpack_require__(/*! ./stscredentials */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/stscredentials.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-auth-library/build/src/util.js\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */ const STS_GRANT_TYPE = \"urn:ietf:params:oauth:grant-type:token-exchange\";\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */ const STS_REQUEST_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:access_token\";\n/** The default OAuth scope to request when none is provided. */ const DEFAULT_OAUTH_SCOPE = \"https://www.googleapis.com/auth/cloud-platform\";\n/** Default impersonated token lifespan in seconds.*/ const DEFAULT_TOKEN_LIFESPAN = 3600;\n/**\n * Offset to take into account network delays and server clock skews.\n */ exports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */ exports.EXTERNAL_ACCOUNT_TYPE = \"external_account\";\n/**\n * Cloud resource manager URL used to retrieve project information.\n *\n * @deprecated use {@link BaseExternalAccountClient.cloudResourceManagerURL} instead\n **/ exports.CLOUD_RESOURCE_MANAGER = \"https://cloudresourcemanager.googleapis.com/v1/projects/\";\n/** The workforce audience pattern. */ const WORKFORCE_AUDIENCE_PATTERN = \"//iam\\\\.googleapis\\\\.com/locations/[^/]+/workforcePools/[^/]+/providers/.+\";\nconst DEFAULT_TOKEN_URL = \"https://sts.{universeDomain}/v1/token\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = __webpack_require__(/*! ../../../package.json */ \"(rsc)/./node_modules/google-auth-library/package.json\");\n/**\n * For backwards compatibility.\n */ var authclient_2 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", ({\n    enumerable: true,\n    get: function() {\n        return authclient_2.DEFAULT_UNIVERSE;\n    }\n}));\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */ class BaseExternalAccountClient extends authclient_1.AuthClient {\n    /**\n     * Instantiate a BaseExternalAccountClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        var _a;\n        super({\n            ...options,\n            ...additionalOptions\n        });\n        _BaseExternalAccountClient_instances.add(this);\n        /**\n         * A pending access token request. Used for concurrent calls.\n         */ _BaseExternalAccountClient_pendingAccessToken.set(this, null);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const type = opts.get(\"type\");\n        if (type && type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n            throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` + `received \"${options.type}\"`);\n        }\n        const clientId = opts.get(\"client_id\");\n        const clientSecret = opts.get(\"client_secret\");\n        const tokenUrl = (_a = opts.get(\"token_url\")) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace(\"{universeDomain}\", this.universeDomain);\n        const subjectTokenType = opts.get(\"subject_token_type\");\n        const workforcePoolUserProject = opts.get(\"workforce_pool_user_project\");\n        const serviceAccountImpersonationUrl = opts.get(\"service_account_impersonation_url\");\n        const serviceAccountImpersonation = opts.get(\"service_account_impersonation\");\n        const serviceAccountImpersonationLifetime = (0, util_1.originalOrCamelOptions)(serviceAccountImpersonation).get(\"token_lifetime_seconds\");\n        this.cloudResourceManagerURL = new URL(opts.get(\"cloud_resource_manager_url\") || `https://cloudresourcemanager.${this.universeDomain}/v1/projects/`);\n        if (clientId) {\n            this.clientAuth = {\n                confidentialClientType: \"basic\",\n                clientId,\n                clientSecret\n            };\n        }\n        this.stsCredential = new sts.StsCredentials(tokenUrl, this.clientAuth);\n        this.scopes = opts.get(\"scopes\") || [\n            DEFAULT_OAUTH_SCOPE\n        ];\n        this.cachedAccessToken = null;\n        this.audience = opts.get(\"audience\");\n        this.subjectTokenType = subjectTokenType;\n        this.workforcePoolUserProject = workforcePoolUserProject;\n        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n        if (this.workforcePoolUserProject && !this.audience.match(workforceAudiencePattern)) {\n            throw new Error(\"workforcePoolUserProject should not be set for non-workforce pool \" + \"credentials.\");\n        }\n        this.serviceAccountImpersonationUrl = serviceAccountImpersonationUrl;\n        this.serviceAccountImpersonationLifetime = serviceAccountImpersonationLifetime;\n        if (this.serviceAccountImpersonationLifetime) {\n            this.configLifetimeRequested = true;\n        } else {\n            this.configLifetimeRequested = false;\n            this.serviceAccountImpersonationLifetime = DEFAULT_TOKEN_LIFESPAN;\n        }\n        this.projectNumber = this.getProjectNumber(this.audience);\n        this.supplierContext = {\n            audience: this.audience,\n            subjectTokenType: this.subjectTokenType,\n            transporter: this.transporter\n        };\n    }\n    /** The service account email to be impersonated, if available. */ getServiceAccountEmail() {\n        var _a;\n        if (this.serviceAccountImpersonationUrl) {\n            if (this.serviceAccountImpersonationUrl.length > 256) {\n                /**\n                 * Prevents DOS attacks.\n                 * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/84}\n                 **/ throw new RangeError(`URL is too long: ${this.serviceAccountImpersonationUrl}`);\n            }\n            // Parse email from URL. The formal looks as follows:\n            // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n            const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\n            const result = re.exec(this.serviceAccountImpersonationUrl);\n            return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n        }\n        return null;\n    }\n    /**\n     * Provides a mechanism to inject GCP access tokens directly.\n     * When the provided credential expires, a new credential, using the\n     * external account options, is retrieved.\n     * @param credentials The Credentials object to set on the current client.\n     */ setCredentials(credentials) {\n        super.setCredentials(credentials);\n        this.cachedAccessToken = credentials;\n    }\n    /**\n     * @return A promise that resolves with the current GCP access token\n     *   response. If the current credential is expired, a new one is retrieved.\n     */ async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */ async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then((r)=>callback(null, r), (e)=>{\n                return callback(e, e.response);\n            });\n        } else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * @return A promise that resolves with the project ID corresponding to the\n     *   current workload identity pool or current workforce pool if\n     *   determinable. For workforce pool credential, it returns the project ID\n     *   corresponding to the workforcePoolUserProject.\n     *   This is introduced to match the current pattern of using the Auth\n     *   library:\n     *   const projectId = await auth.getProjectId();\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n     *   const res = await client.request({ url });\n     *   The resource may not have permission\n     *   (resourcemanager.projects.get) to call this API or the required\n     *   scopes may not be selected:\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n     */ async getProjectId() {\n        const projectNumber = this.projectNumber || this.workforcePoolUserProject;\n        if (this.projectId) {\n            // Return previously determined project ID.\n            return this.projectId;\n        } else if (projectNumber) {\n            // Preferable not to use request() to avoid retrial policies.\n            const headers = await this.getRequestHeaders();\n            const response = await this.transporter.request({\n                ...BaseExternalAccountClient.RETRY_CONFIG,\n                headers,\n                url: `${this.cloudResourceManagerURL.toString()}${projectNumber}`,\n                responseType: \"json\"\n            });\n            this.projectId = response.data.projectId;\n            return this.projectId;\n        }\n        return null;\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n     * @return A promise that resolves with the successful response.\n     */ async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders[\"x-goog-user-project\"]) {\n                opts.headers[\"x-goog-user-project\"] = requestHeaders[\"x-goog-user-project\"];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        } catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * External credentials are exchanged for GCP access tokens via the token\n     * exchange endpoint and other settings provided in the client options\n     * object.\n     * If the service_account_impersonation_url is provided, an additional\n     * step to exchange the external account GCP access token for a service\n     * account impersonated token is performed.\n     * @return A promise that resolves with the fresh GCP access tokens.\n     */ async refreshAccessTokenAsync() {\n        // Use an existing access token request, or cache a new one\n        __classPrivateFieldSet(this, _BaseExternalAccountClient_pendingAccessToken, __classPrivateFieldGet(this, _BaseExternalAccountClient_pendingAccessToken, \"f\") || __classPrivateFieldGet(this, _BaseExternalAccountClient_instances, \"m\", _BaseExternalAccountClient_internalRefreshAccessTokenAsync).call(this), \"f\");\n        try {\n            return await __classPrivateFieldGet(this, _BaseExternalAccountClient_pendingAccessToken, \"f\");\n        } finally{\n            // clear pending access token for future requests\n            __classPrivateFieldSet(this, _BaseExternalAccountClient_pendingAccessToken, null, \"f\");\n        }\n    }\n    /**\n     * Returns the workload identity pool project number if it is determinable\n     * from the audience resource name.\n     * @param audience The STS audience used to determine the project number.\n     * @return The project number associated with the workload identity pool, if\n     *   this can be determined from the STS audience field. Otherwise, null is\n     *   returned.\n     */ getProjectNumber(audience) {\n        // STS audience pattern:\n        // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n        const match = audience.match(/\\/projects\\/([^/]+)/);\n        if (!match) {\n            return null;\n        }\n        return match[1];\n    }\n    /**\n     * Exchanges an external account GCP access token for a service\n     * account impersonated access token using iamcredentials\n     * GenerateAccessToken API.\n     * @param token The access token to exchange for a service account access\n     *   token.\n     * @return A promise that resolves with the service account impersonated\n     *   credentials response.\n     */ async getImpersonatedAccessToken(token) {\n        const opts = {\n            ...BaseExternalAccountClient.RETRY_CONFIG,\n            url: this.serviceAccountImpersonationUrl,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`\n            },\n            data: {\n                scope: this.getScopesArray(),\n                lifetime: this.serviceAccountImpersonationLifetime + \"s\"\n            },\n            responseType: \"json\"\n        };\n        const response = await this.transporter.request(opts);\n        const successResponse = response.data;\n        return {\n            access_token: successResponse.accessToken,\n            // Convert from ISO format to timestamp.\n            expiry_date: new Date(successResponse.expireTime).getTime(),\n            res: response\n        };\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param accessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */ isExpired(accessToken) {\n        const now = new Date().getTime();\n        return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n    }\n    /**\n     * @return The list of scopes for the requested GCP access token.\n     */ getScopesArray() {\n        // Since scopes can be provided as string or array, the type should\n        // be normalized.\n        if (typeof this.scopes === \"string\") {\n            return [\n                this.scopes\n            ];\n        }\n        return this.scopes || [\n            DEFAULT_OAUTH_SCOPE\n        ];\n    }\n    getMetricsHeaderValue() {\n        const nodeVersion = process.version.replace(/^v/, \"\");\n        const saImpersonation = this.serviceAccountImpersonationUrl !== undefined;\n        const credentialSourceType = this.credentialSourceType ? this.credentialSourceType : \"unknown\";\n        return `gl-node/${nodeVersion} auth/${pkg.version} google-byoid-sdk source/${credentialSourceType} sa-impersonation/${saImpersonation} config-lifetime/${this.configLifetimeRequested}`;\n    }\n}\nexports.BaseExternalAccountClient = BaseExternalAccountClient;\n_BaseExternalAccountClient_pendingAccessToken = new WeakMap(), _BaseExternalAccountClient_instances = new WeakSet(), _BaseExternalAccountClient_internalRefreshAccessTokenAsync = async function _BaseExternalAccountClient_internalRefreshAccessTokenAsync() {\n    // Retrieve the external credential.\n    const subjectToken = await this.retrieveSubjectToken();\n    // Construct the STS credentials options.\n    const stsCredentialsOptions = {\n        grantType: STS_GRANT_TYPE,\n        audience: this.audience,\n        requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n        subjectToken,\n        subjectTokenType: this.subjectTokenType,\n        // generateAccessToken requires the provided access token to have\n        // scopes:\n        // https://www.googleapis.com/auth/iam or\n        // https://www.googleapis.com/auth/cloud-platform\n        // The new service account access token scopes will match the user\n        // provided ones.\n        scope: this.serviceAccountImpersonationUrl ? [\n            DEFAULT_OAUTH_SCOPE\n        ] : this.getScopesArray()\n    };\n    // Exchange the external credentials for a GCP access token.\n    // Client auth is prioritized over passing the workforcePoolUserProject\n    // parameter for STS token exchange.\n    const additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? {\n        userProject: this.workforcePoolUserProject\n    } : undefined;\n    const additionalHeaders = {\n        \"x-goog-api-client\": this.getMetricsHeaderValue()\n    };\n    const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, additionalHeaders, additionalOptions);\n    if (this.serviceAccountImpersonationUrl) {\n        this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n    } else if (stsResponse.expires_in) {\n        // Save response in cached access token.\n        this.cachedAccessToken = {\n            access_token: stsResponse.access_token,\n            expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n            res: stsResponse.res\n        };\n    } else {\n        // Save response in cached access token.\n        this.cachedAccessToken = {\n            access_token: stsResponse.access_token,\n            res: stsResponse.res\n        };\n    }\n    // Save credentials.\n    this.credentials = {};\n    Object.assign(this.credentials, this.cachedAccessToken);\n    delete this.credentials.res;\n    // Trigger tokens event to notify external listeners.\n    this.emit(\"tokens\", {\n        refresh_token: null,\n        expiry_date: this.cachedAccessToken.expiry_date,\n        access_token: this.cachedAccessToken.access_token,\n        token_type: \"Bearer\",\n        id_token: null\n    });\n    // Return the cached access token.\n    return this.cachedAccessToken;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/computeclient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/computeclient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Compute = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(rsc)/./node_modules/gcp-metadata/build/src/index.js\");\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://cloud.google.com/compute/docs/access/authenticate-workloads#applications\n     */ constructor(options = {}){\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = {\n            expiry_date: 1,\n            refresh_token: \"compute-placeholder\"\n        };\n        this.serviceAccountEmail = options.serviceAccountEmail || \"default\";\n        this.scopes = Array.isArray(options.scopes) ? options.scopes : options.scopes ? [\n            options.scopes\n        ] : [];\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */ async refreshTokenNoCache(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n        let data;\n        try {\n            const instanceOptions = {\n                property: tokenPath\n            };\n            if (this.scopes.length > 0) {\n                instanceOptions.params = {\n                    scopes: this.scopes.join(\",\")\n                };\n            }\n            data = await gcpMetadata.instance(instanceOptions);\n        } catch (e) {\n            if (e instanceof gaxios_1.GaxiosError) {\n                e.message = `Could not refresh access token: ${e.message}`;\n                this.wrapError(e);\n            }\n            throw e;\n        }\n        const tokens = data;\n        if (data && data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit(\"tokens\", tokens);\n        return {\n            tokens,\n            res: null\n        };\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */ async fetchIdToken(targetAudience) {\n        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity` + `?format=full&audience=${targetAudience}`;\n        let idToken;\n        try {\n            const instanceOptions = {\n                property: idTokenPath\n            };\n            idToken = await gcpMetadata.instance(instanceOptions);\n        } catch (e) {\n            if (e instanceof Error) {\n                e.message = `Could not fetch ID token: ${e.message}`;\n            }\n            throw e;\n        }\n        return idToken;\n    }\n    wrapError(e) {\n        const res = e.response;\n        if (res && res.status) {\n            e.status = res.status;\n            if (res.status === 403) {\n                e.message = \"A Forbidden error was returned while attempting to retrieve an access \" + \"token for the Compute Engine built-in service account. This may be because the Compute \" + \"Engine instance does not have the correct permission scopes specified: \" + e.message;\n            } else if (res.status === 404) {\n                e.message = \"A Not Found error was returned while attempting to retrieve an access\" + \"token for the Compute Engine built-in service account. This may be because the Compute \" + \"Engine instance does not have any permission scopes specified: \" + e.message;\n            }\n        }\n    }\n}\nexports.Compute = Compute;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/computeclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _DefaultAwsSecurityCredentialsSupplier_instances, _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DefaultAwsSecurityCredentialsSupplier = void 0;\n/**\n * Internal AWS security credentials supplier implementation used by {@link AwsClient}\n * when a credential source is provided instead of a user defined supplier.\n * The logic is summarized as:\n * 1. If imdsv2_session_token_url is provided in the credential source, then\n *    fetch the aws session token and include it in the headers of the\n *    metadata requests. This is a requirement for IDMSv2 but optional\n *    for IDMSv1.\n * 2. Retrieve AWS region from availability-zone.\n * 3a. Check AWS credentials in environment variables. If not found, get\n *     from security-credentials endpoint.\n * 3b. Get AWS credentials from security-credentials endpoint. In order\n *     to retrieve this, the AWS role needs to be determined by calling\n *     security-credentials endpoint without any argument. Then the\n *     credentials can be retrieved via: security-credentials/role_name\n * 4. Generate the signed request to AWS STS GetCallerIdentity action.\n * 5. Inject x-goog-cloud-target-resource into header and serialize the\n *    signed request. This will be the subject-token to pass to GCP STS.\n */ class DefaultAwsSecurityCredentialsSupplier {\n    /**\n     * Instantiates a new DefaultAwsSecurityCredentialsSupplier using information\n     * from the credential_source stored in the ADC file.\n     * @param opts The default aws security credentials supplier options object to\n     *   build the supplier with.\n     */ constructor(opts){\n        _DefaultAwsSecurityCredentialsSupplier_instances.add(this);\n        this.regionUrl = opts.regionUrl;\n        this.securityCredentialsUrl = opts.securityCredentialsUrl;\n        this.imdsV2SessionTokenUrl = opts.imdsV2SessionTokenUrl;\n        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n    }\n    /**\n     * Returns the active AWS region. This first checks to see if the region\n     * is available as an environment variable. If it is not, then the supplier\n     * will call the region URL.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link AwsClient}, contains the requested audience and subject token type\n     *   for the external account identity.\n     * @return A promise that resolves with the AWS region string.\n     */ async getAwsRegion(context) {\n        // Priority order for region determination:\n        // AWS_REGION > AWS_DEFAULT_REGION > metadata server.\n        if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get)) {\n            return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get);\n        }\n        const metadataHeaders = {};\n        if (!__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get) && this.imdsV2SessionTokenUrl) {\n            metadataHeaders[\"x-aws-ec2-metadata-token\"] = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n        }\n        if (!this.regionUrl) {\n            throw new Error(\"Unable to determine AWS region due to missing \" + '\"options.credential_source.region_url\"');\n        }\n        const opts = {\n            ...this.additionalGaxiosOptions,\n            url: this.regionUrl,\n            method: \"GET\",\n            responseType: \"text\",\n            headers: metadataHeaders\n        };\n        const response = await context.transporter.request(opts);\n        // Remove last character. For example, if us-east-2b is returned,\n        // the region would be us-east-2.\n        return response.data.substr(0, response.data.length - 1);\n    }\n    /**\n     * Returns AWS security credentials. This first checks to see if the credentials\n     * is available as environment variables. If it is not, then the supplier\n     * will call the security credentials URL.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link AwsClient}, contains the requested audience and subject token type\n     *   for the external account identity.\n     * @return A promise that resolves with the AWS security credentials.\n     */ async getAwsSecurityCredentials(context) {\n        // Check environment variables for permanent credentials first.\n        // https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html\n        if (__classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get)) {\n            return __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"a\", _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get);\n        }\n        const metadataHeaders = {};\n        if (this.imdsV2SessionTokenUrl) {\n            metadataHeaders[\"x-aws-ec2-metadata-token\"] = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);\n        }\n        // Since the role on a VM can change, we don't need to cache it.\n        const roleName = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName).call(this, metadataHeaders, context.transporter);\n        // Temporary credentials typically last for several hours.\n        // Expiration is returned in response.\n        // Consider future optimization of this logic to cache AWS tokens\n        // until their natural expiration.\n        const awsCreds = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, \"m\", _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials).call(this, roleName, metadataHeaders, context.transporter);\n        return {\n            accessKeyId: awsCreds.AccessKeyId,\n            secretAccessKey: awsCreds.SecretAccessKey,\n            token: awsCreds.Token\n        };\n    }\n}\nexports.DefaultAwsSecurityCredentialsSupplier = DefaultAwsSecurityCredentialsSupplier;\n_DefaultAwsSecurityCredentialsSupplier_instances = new WeakSet(), _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken = /**\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the IMDSv2 Session Token.\n */ async function _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken(transporter) {\n    const opts = {\n        ...this.additionalGaxiosOptions,\n        url: this.imdsV2SessionTokenUrl,\n        method: \"PUT\",\n        responseType: \"text\",\n        headers: {\n            \"x-aws-ec2-metadata-token-ttl-seconds\": \"300\"\n        }\n    };\n    const response = await transporter.request(opts);\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName = /**\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the assigned role to the current\n *   AWS VM. This is needed for calling the security-credentials endpoint.\n */ async function _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName(headers, transporter) {\n    if (!this.securityCredentialsUrl) {\n        throw new Error(\"Unable to determine AWS role name due to missing \" + '\"options.credential_source.url\"');\n    }\n    const opts = {\n        ...this.additionalGaxiosOptions,\n        url: this.securityCredentialsUrl,\n        method: \"GET\",\n        responseType: \"text\",\n        headers: headers\n    };\n    const response = await transporter.request(opts);\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials = /**\n * Retrieves the temporary AWS credentials by calling the security-credentials\n * endpoint as specified in the `credential_source` object.\n * @param roleName The role attached to the current VM.\n * @param headers The headers to be used in the metadata request.\n * @param transporter The transporter to use for requests.\n * @return A promise that resolves with the temporary AWS credentials\n *   needed for creating the GetCallerIdentity signed request.\n */ async function _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials(roleName, headers, transporter) {\n    const response = await transporter.request({\n        ...this.additionalGaxiosOptions,\n        url: `${this.securityCredentialsUrl}/${roleName}`,\n        responseType: \"json\",\n        headers: headers\n    });\n    return response.data;\n}, _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_regionFromEnv_get() {\n    // The AWS region can be provided through AWS_REGION or AWS_DEFAULT_REGION.\n    // Only one is required.\n    return process.env[\"AWS_REGION\"] || process.env[\"AWS_DEFAULT_REGION\"] || null;\n}, _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get = function _DefaultAwsSecurityCredentialsSupplier_securityCredentialsFromEnv_get() {\n    // Both AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required.\n    if (process.env[\"AWS_ACCESS_KEY_ID\"] && process.env[\"AWS_SECRET_ACCESS_KEY\"]) {\n        return {\n            accessKeyId: process.env[\"AWS_ACCESS_KEY_ID\"],\n            secretAccessKey: process.env[\"AWS_SECRET_ACCESS_KEY\"],\n            token: process.env[\"AWS_SESSION_TOKEN\"]\n        };\n    }\n    return null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/downscopedclient.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/downscopedclient.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DownscopedClient = exports.EXPIRATION_TIME_OFFSET = exports.MAX_ACCESS_BOUNDARY_RULES_COUNT = void 0;\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst sts = __webpack_require__(/*! ./stscredentials */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/stscredentials.js\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */ const STS_GRANT_TYPE = \"urn:ietf:params:oauth:grant-type:token-exchange\";\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */ const STS_REQUEST_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:access_token\";\n/**\n * The requested token exchange subject_token_type: rfc8693#section-2.1\n */ const STS_SUBJECT_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:access_token\";\n/**\n * The maximum number of access boundary rules a Credential Access Boundary\n * can contain.\n */ exports.MAX_ACCESS_BOUNDARY_RULES_COUNT = 10;\n/**\n * Offset to take into account network delays and server clock skews.\n */ exports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * Defines a set of Google credentials that are downscoped from an existing set\n * of Google OAuth2 credentials. This is useful to restrict the Identity and\n * Access Management (IAM) permissions that a short-lived credential can use.\n * The common pattern of usage is to have a token broker with elevated access\n * generate these downscoped credentials from higher access source credentials\n * and pass the downscoped short-lived access tokens to a token consumer via\n * some secure authenticated channel for limited access to Google Cloud Storage\n * resources.\n */ class DownscopedClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates a downscoped client object using the provided source\n     * AuthClient and credential access boundary rules.\n     * To downscope permissions of a source AuthClient, a Credential Access\n     * Boundary that specifies which resources the new credential can access, as\n     * well as an upper bound on the permissions that are available on each\n     * resource, has to be defined. A downscoped client can then be instantiated\n     * using the source AuthClient and the Credential Access Boundary.\n     * @param authClient The source AuthClient to be downscoped based on the\n     *   provided Credential Access Boundary rules.\n     * @param credentialAccessBoundary The Credential Access Boundary which\n     *   contains a list of access boundary rules. Each rule contains information\n     *   on the resource that the rule applies to, the upper bound of the\n     *   permissions that are available on that resource and an optional\n     *   condition to further restrict permissions.\n     * @param additionalOptions **DEPRECATED, set this in the provided `authClient`.**\n     *   Optional additional behavior customization options.\n     * @param quotaProjectId **DEPRECATED, set this in the provided `authClient`.**\n     *   Optional quota project id for setting up in the x-goog-user-project header.\n     */ constructor(authClient, credentialAccessBoundary, additionalOptions, quotaProjectId){\n        super({\n            ...additionalOptions,\n            quotaProjectId\n        });\n        this.authClient = authClient;\n        this.credentialAccessBoundary = credentialAccessBoundary;\n        // Check 1-10 Access Boundary Rules are defined within Credential Access\n        // Boundary.\n        if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length === 0) {\n            throw new Error(\"At least one access boundary rule needs to be defined.\");\n        } else if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length > exports.MAX_ACCESS_BOUNDARY_RULES_COUNT) {\n            throw new Error(\"The provided access boundary has more than \" + `${exports.MAX_ACCESS_BOUNDARY_RULES_COUNT} access boundary rules.`);\n        }\n        // Check at least one permission should be defined in each Access Boundary\n        // Rule.\n        for (const rule of credentialAccessBoundary.accessBoundary.accessBoundaryRules){\n            if (rule.availablePermissions.length === 0) {\n                throw new Error(\"At least one permission should be defined in access boundary rules.\");\n            }\n        }\n        this.stsCredential = new sts.StsCredentials(`https://sts.${this.universeDomain}/v1/token`);\n        this.cachedDownscopedAccessToken = null;\n    }\n    /**\n     * Provides a mechanism to inject Downscoped access tokens directly.\n     * The expiry_date field is required to facilitate determination of the token\n     * expiration which would make it easier for the token consumer to handle.\n     * @param credentials The Credentials object to set on the current client.\n     */ setCredentials(credentials) {\n        if (!credentials.expiry_date) {\n            throw new Error(\"The access token expiry_date field is missing in the provided \" + \"credentials.\");\n        }\n        super.setCredentials(credentials);\n        this.cachedDownscopedAccessToken = credentials;\n    }\n    async getAccessToken() {\n        // If the cached access token is unavailable or expired, force refresh.\n        // The Downscoped access token will be returned in\n        // DownscopedAccessTokenResponse format.\n        if (!this.cachedDownscopedAccessToken || this.isExpired(this.cachedDownscopedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return Downscoped access token in DownscopedAccessTokenResponse format.\n        return {\n            token: this.cachedDownscopedAccessToken.access_token,\n            expirationTime: this.cachedDownscopedAccessToken.expiry_date,\n            res: this.cachedDownscopedAccessToken.res\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */ async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then((r)=>callback(null, r), (e)=>{\n                return callback(e, e.response);\n            });\n        } else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure\n     * @return A promise that resolves with the successful response.\n     */ async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders[\"x-goog-user-project\"]) {\n                opts.headers[\"x-goog-user-project\"] = requestHeaders[\"x-goog-user-project\"];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        } catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * GCP access tokens are retrieved from authclient object/source credential.\n     * Then GCP access tokens are exchanged for downscoped access tokens via the\n     * token exchange endpoint.\n     * @return A promise that resolves with the fresh downscoped access token.\n     */ async refreshAccessTokenAsync() {\n        var _a;\n        // Retrieve GCP access token from source credential.\n        const subjectToken = (await this.authClient.getAccessToken()).token;\n        // Construct the STS credentials options.\n        const stsCredentialsOptions = {\n            grantType: STS_GRANT_TYPE,\n            requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n            subjectToken: subjectToken,\n            subjectTokenType: STS_SUBJECT_TOKEN_TYPE\n        };\n        // Exchange the source AuthClient access token for a Downscoped access\n        // token.\n        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, this.credentialAccessBoundary);\n        /**\n         * The STS endpoint will only return the expiration time for the downscoped\n         * access token if the original access token represents a service account.\n         * The downscoped token's expiration time will always match the source\n         * credential expiration. When no expires_in is returned, we can copy the\n         * source credential's expiration time.\n         */ const sourceCredExpireDate = ((_a = this.authClient.credentials) === null || _a === void 0 ? void 0 : _a.expiry_date) || null;\n        const expiryDate = stsResponse.expires_in ? new Date().getTime() + stsResponse.expires_in * 1000 : sourceCredExpireDate;\n        // Save response in cached access token.\n        this.cachedDownscopedAccessToken = {\n            access_token: stsResponse.access_token,\n            expiry_date: expiryDate,\n            res: stsResponse.res\n        };\n        // Save credentials.\n        this.credentials = {};\n        Object.assign(this.credentials, this.cachedDownscopedAccessToken);\n        delete this.credentials.res;\n        // Trigger tokens event to notify external listeners.\n        this.emit(\"tokens\", {\n            refresh_token: null,\n            expiry_date: this.cachedDownscopedAccessToken.expiry_date,\n            access_token: this.cachedDownscopedAccessToken.access_token,\n            token_type: \"Bearer\",\n            id_token: null\n        });\n        // Return the cached access token.\n        return this.cachedDownscopedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param downscopedAccessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */ isExpired(downscopedAccessToken) {\n        const now = new Date().getTime();\n        return downscopedAccessToken.expiry_date ? now >= downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n    }\n}\nexports.DownscopedClient = DownscopedClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/downscopedclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/envDetect.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/envDetect.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GCPEnv = void 0;\nexports.clear = clear;\nexports.getEnv = getEnv;\nconst gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(rsc)/./node_modules/gcp-metadata/build/src/index.js\");\nvar GCPEnv;\n(function(GCPEnv) {\n    GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n    GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n    GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n    GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n    GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\n    GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv || (exports.GCPEnv = GCPEnv = {}));\nlet envPromise;\nfunction clear() {\n    envPromise = undefined;\n}\nasync function getEnv() {\n    if (envPromise) {\n        return envPromise;\n    }\n    envPromise = getEnvMemoized();\n    return envPromise;\n}\nasync function getEnvMemoized() {\n    let env = GCPEnv.NONE;\n    if (isAppEngine()) {\n        env = GCPEnv.APP_ENGINE;\n    } else if (isCloudFunction()) {\n        env = GCPEnv.CLOUD_FUNCTIONS;\n    } else if (await isComputeEngine()) {\n        if (await isKubernetesEngine()) {\n            env = GCPEnv.KUBERNETES_ENGINE;\n        } else if (isCloudRun()) {\n            env = GCPEnv.CLOUD_RUN;\n        } else {\n            env = GCPEnv.COMPUTE_ENGINE;\n        }\n    } else {\n        env = GCPEnv.NONE;\n    }\n    return env;\n}\nfunction isAppEngine() {\n    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\nfunction isCloudFunction() {\n    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\n/**\n * This check only verifies that the environment is running knative.\n * This must be run *after* checking for Kubernetes, otherwise it will\n * return a false positive.\n */ function isCloudRun() {\n    return !!process.env.K_CONFIGURATION;\n}\nasync function isKubernetesEngine() {\n    try {\n        await gcpMetadata.instance(\"attributes/cluster-name\");\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nasync function isComputeEngine() {\n    return gcpMetadata.isAvailable();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9lbnZEZXRlY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUcsS0FBSztBQUN0QkEsYUFBYSxHQUFHRztBQUNoQkgsY0FBYyxHQUFHSTtBQUNqQixNQUFNQyxjQUFjQyxtQkFBT0EsQ0FBQywwRUFBYztBQUMxQyxJQUFJSjtBQUNILFVBQVVBLE1BQU07SUFDYkEsTUFBTSxDQUFDLGFBQWEsR0FBRztJQUN2QkEsTUFBTSxDQUFDLG9CQUFvQixHQUFHO0lBQzlCQSxNQUFNLENBQUMsa0JBQWtCLEdBQUc7SUFDNUJBLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRztJQUMzQkEsTUFBTSxDQUFDLFlBQVksR0FBRztJQUN0QkEsTUFBTSxDQUFDLE9BQU8sR0FBRztBQUNyQixHQUFHQSxVQUFXRixDQUFBQSxjQUFjLEdBQUdFLFNBQVMsQ0FBQztBQUN6QyxJQUFJSztBQUNKLFNBQVNKO0lBQ0xJLGFBQWFDO0FBQ2pCO0FBQ0EsZUFBZUo7SUFDWCxJQUFJRyxZQUFZO1FBQ1osT0FBT0E7SUFDWDtJQUNBQSxhQUFhRTtJQUNiLE9BQU9GO0FBQ1g7QUFDQSxlQUFlRTtJQUNYLElBQUlDLE1BQU1SLE9BQU9TLElBQUk7SUFDckIsSUFBSUMsZUFBZTtRQUNmRixNQUFNUixPQUFPVyxVQUFVO0lBQzNCLE9BQ0ssSUFBSUMsbUJBQW1CO1FBQ3hCSixNQUFNUixPQUFPYSxlQUFlO0lBQ2hDLE9BQ0ssSUFBSSxNQUFNQyxtQkFBbUI7UUFDOUIsSUFBSSxNQUFNQyxzQkFBc0I7WUFDNUJQLE1BQU1SLE9BQU9nQixpQkFBaUI7UUFDbEMsT0FDSyxJQUFJQyxjQUFjO1lBQ25CVCxNQUFNUixPQUFPa0IsU0FBUztRQUMxQixPQUNLO1lBQ0RWLE1BQU1SLE9BQU9tQixjQUFjO1FBQy9CO0lBQ0osT0FDSztRQUNEWCxNQUFNUixPQUFPUyxJQUFJO0lBQ3JCO0lBQ0EsT0FBT0Q7QUFDWDtBQUNBLFNBQVNFO0lBQ0wsT0FBTyxDQUFDLENBQUVVLENBQUFBLFFBQVFaLEdBQUcsQ0FBQ2EsV0FBVyxJQUFJRCxRQUFRWixHQUFHLENBQUNjLGVBQWU7QUFDcEU7QUFDQSxTQUFTVjtJQUNMLE9BQU8sQ0FBQyxDQUFFUSxDQUFBQSxRQUFRWixHQUFHLENBQUNlLGFBQWEsSUFBSUgsUUFBUVosR0FBRyxDQUFDZ0IsZUFBZTtBQUN0RTtBQUNBOzs7O0NBSUMsR0FDRCxTQUFTUDtJQUNMLE9BQU8sQ0FBQyxDQUFDRyxRQUFRWixHQUFHLENBQUNpQixlQUFlO0FBQ3hDO0FBQ0EsZUFBZVY7SUFDWCxJQUFJO1FBQ0EsTUFBTVosWUFBWXVCLFFBQVEsQ0FBQztRQUMzQixPQUFPO0lBQ1gsRUFDQSxPQUFPQyxHQUFHO1FBQ04sT0FBTztJQUNYO0FBQ0o7QUFDQSxlQUFlYjtJQUNYLE9BQU9YLFlBQVl5QixXQUFXO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1jb21tZW50ZXIvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9lbnZEZXRlY3QuanM/Y2UzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HQ1BFbnYgPSB2b2lkIDA7XG5leHBvcnRzLmNsZWFyID0gY2xlYXI7XG5leHBvcnRzLmdldEVudiA9IGdldEVudjtcbmNvbnN0IGdjcE1ldGFkYXRhID0gcmVxdWlyZShcImdjcC1tZXRhZGF0YVwiKTtcbnZhciBHQ1BFbnY7XG4oZnVuY3Rpb24gKEdDUEVudikge1xuICAgIEdDUEVudltcIkFQUF9FTkdJTkVcIl0gPSBcIkFQUF9FTkdJTkVcIjtcbiAgICBHQ1BFbnZbXCJLVUJFUk5FVEVTX0VOR0lORVwiXSA9IFwiS1VCRVJORVRFU19FTkdJTkVcIjtcbiAgICBHQ1BFbnZbXCJDTE9VRF9GVU5DVElPTlNcIl0gPSBcIkNMT1VEX0ZVTkNUSU9OU1wiO1xuICAgIEdDUEVudltcIkNPTVBVVEVfRU5HSU5FXCJdID0gXCJDT01QVVRFX0VOR0lORVwiO1xuICAgIEdDUEVudltcIkNMT1VEX1JVTlwiXSA9IFwiQ0xPVURfUlVOXCI7XG4gICAgR0NQRW52W1wiTk9ORVwiXSA9IFwiTk9ORVwiO1xufSkoR0NQRW52IHx8IChleHBvcnRzLkdDUEVudiA9IEdDUEVudiA9IHt9KSk7XG5sZXQgZW52UHJvbWlzZTtcbmZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGVudlByb21pc2UgPSB1bmRlZmluZWQ7XG59XG5hc3luYyBmdW5jdGlvbiBnZXRFbnYoKSB7XG4gICAgaWYgKGVudlByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIGVudlByb21pc2U7XG4gICAgfVxuICAgIGVudlByb21pc2UgPSBnZXRFbnZNZW1vaXplZCgpO1xuICAgIHJldHVybiBlbnZQcm9taXNlO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0RW52TWVtb2l6ZWQoKSB7XG4gICAgbGV0IGVudiA9IEdDUEVudi5OT05FO1xuICAgIGlmIChpc0FwcEVuZ2luZSgpKSB7XG4gICAgICAgIGVudiA9IEdDUEVudi5BUFBfRU5HSU5FO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0Nsb3VkRnVuY3Rpb24oKSkge1xuICAgICAgICBlbnYgPSBHQ1BFbnYuQ0xPVURfRlVOQ1RJT05TO1xuICAgIH1cbiAgICBlbHNlIGlmIChhd2FpdCBpc0NvbXB1dGVFbmdpbmUoKSkge1xuICAgICAgICBpZiAoYXdhaXQgaXNLdWJlcm5ldGVzRW5naW5lKCkpIHtcbiAgICAgICAgICAgIGVudiA9IEdDUEVudi5LVUJFUk5FVEVTX0VOR0lORTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0Nsb3VkUnVuKCkpIHtcbiAgICAgICAgICAgIGVudiA9IEdDUEVudi5DTE9VRF9SVU47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbnYgPSBHQ1BFbnYuQ09NUFVURV9FTkdJTkU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVudiA9IEdDUEVudi5OT05FO1xuICAgIH1cbiAgICByZXR1cm4gZW52O1xufVxuZnVuY3Rpb24gaXNBcHBFbmdpbmUoKSB7XG4gICAgcmV0dXJuICEhKHByb2Nlc3MuZW52LkdBRV9TRVJWSUNFIHx8IHByb2Nlc3MuZW52LkdBRV9NT0RVTEVfTkFNRSk7XG59XG5mdW5jdGlvbiBpc0Nsb3VkRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICEhKHByb2Nlc3MuZW52LkZVTkNUSU9OX05BTUUgfHwgcHJvY2Vzcy5lbnYuRlVOQ1RJT05fVEFSR0VUKTtcbn1cbi8qKlxuICogVGhpcyBjaGVjayBvbmx5IHZlcmlmaWVzIHRoYXQgdGhlIGVudmlyb25tZW50IGlzIHJ1bm5pbmcga25hdGl2ZS5cbiAqIFRoaXMgbXVzdCBiZSBydW4gKmFmdGVyKiBjaGVja2luZyBmb3IgS3ViZXJuZXRlcywgb3RoZXJ3aXNlIGl0IHdpbGxcbiAqIHJldHVybiBhIGZhbHNlIHBvc2l0aXZlLlxuICovXG5mdW5jdGlvbiBpc0Nsb3VkUnVuKCkge1xuICAgIHJldHVybiAhIXByb2Nlc3MuZW52LktfQ09ORklHVVJBVElPTjtcbn1cbmFzeW5jIGZ1bmN0aW9uIGlzS3ViZXJuZXRlc0VuZ2luZSgpIHtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBnY3BNZXRhZGF0YS5pbnN0YW5jZSgnYXR0cmlidXRlcy9jbHVzdGVyLW5hbWUnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5hc3luYyBmdW5jdGlvbiBpc0NvbXB1dGVFbmdpbmUoKSB7XG4gICAgcmV0dXJuIGdjcE1ldGFkYXRhLmlzQXZhaWxhYmxlKCk7XG59XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJHQ1BFbnYiLCJjbGVhciIsImdldEVudiIsImdjcE1ldGFkYXRhIiwicmVxdWlyZSIsImVudlByb21pc2UiLCJ1bmRlZmluZWQiLCJnZXRFbnZNZW1vaXplZCIsImVudiIsIk5PTkUiLCJpc0FwcEVuZ2luZSIsIkFQUF9FTkdJTkUiLCJpc0Nsb3VkRnVuY3Rpb24iLCJDTE9VRF9GVU5DVElPTlMiLCJpc0NvbXB1dGVFbmdpbmUiLCJpc0t1YmVybmV0ZXNFbmdpbmUiLCJLVUJFUk5FVEVTX0VOR0lORSIsImlzQ2xvdWRSdW4iLCJDTE9VRF9SVU4iLCJDT01QVVRFX0VOR0lORSIsInByb2Nlc3MiLCJHQUVfU0VSVklDRSIsIkdBRV9NT0RVTEVfTkFNRSIsIkZVTkNUSU9OX05BTUUiLCJGVU5DVElPTl9UQVJHRVQiLCJLX0NPTkZJR1VSQVRJT04iLCJpbnN0YW5jZSIsImUiLCJpc0F2YWlsYWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/envDetect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/executable-response.js":
/*!********************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/executable-response.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidSubjectTokenError = exports.InvalidMessageFieldError = exports.InvalidCodeFieldError = exports.InvalidTokenTypeFieldError = exports.InvalidExpirationTimeFieldError = exports.InvalidSuccessFieldError = exports.InvalidVersionFieldError = exports.ExecutableResponseError = exports.ExecutableResponse = void 0;\nconst SAML_SUBJECT_TOKEN_TYPE = \"urn:ietf:params:oauth:token-type:saml2\";\nconst OIDC_SUBJECT_TOKEN_TYPE1 = \"urn:ietf:params:oauth:token-type:id_token\";\nconst OIDC_SUBJECT_TOKEN_TYPE2 = \"urn:ietf:params:oauth:token-type:jwt\";\n/**\n * Defines the response of a 3rd party executable run by the pluggable auth client.\n */ class ExecutableResponse {\n    /**\n     * Instantiates an ExecutableResponse instance using the provided JSON object\n     * from the output of the executable.\n     * @param responseJson Response from a 3rd party executable, loaded from a\n     * run of the executable or a cached output file.\n     */ constructor(responseJson){\n        // Check that the required fields exist in the json response.\n        if (!responseJson.version) {\n            throw new InvalidVersionFieldError(\"Executable response must contain a 'version' field.\");\n        }\n        if (responseJson.success === undefined) {\n            throw new InvalidSuccessFieldError(\"Executable response must contain a 'success' field.\");\n        }\n        this.version = responseJson.version;\n        this.success = responseJson.success;\n        // Validate required fields for a successful response.\n        if (this.success) {\n            this.expirationTime = responseJson.expiration_time;\n            this.tokenType = responseJson.token_type;\n            // Validate token type field.\n            if (this.tokenType !== SAML_SUBJECT_TOKEN_TYPE && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE1 && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE2) {\n                throw new InvalidTokenTypeFieldError(\"Executable response must contain a 'token_type' field when successful \" + `and it must be one of ${OIDC_SUBJECT_TOKEN_TYPE1}, ${OIDC_SUBJECT_TOKEN_TYPE2}, or ${SAML_SUBJECT_TOKEN_TYPE}.`);\n            }\n            // Validate subject token.\n            if (this.tokenType === SAML_SUBJECT_TOKEN_TYPE) {\n                if (!responseJson.saml_response) {\n                    throw new InvalidSubjectTokenError(`Executable response must contain a 'saml_response' field when token_type=${SAML_SUBJECT_TOKEN_TYPE}.`);\n                }\n                this.subjectToken = responseJson.saml_response;\n            } else {\n                if (!responseJson.id_token) {\n                    throw new InvalidSubjectTokenError(\"Executable response must contain a 'id_token' field when \" + `token_type=${OIDC_SUBJECT_TOKEN_TYPE1} or ${OIDC_SUBJECT_TOKEN_TYPE2}.`);\n                }\n                this.subjectToken = responseJson.id_token;\n            }\n        } else {\n            // Both code and message must be provided for unsuccessful responses.\n            if (!responseJson.code) {\n                throw new InvalidCodeFieldError(\"Executable response must contain a 'code' field when unsuccessful.\");\n            }\n            if (!responseJson.message) {\n                throw new InvalidMessageFieldError(\"Executable response must contain a 'message' field when unsuccessful.\");\n            }\n            this.errorCode = responseJson.code;\n            this.errorMessage = responseJson.message;\n        }\n    }\n    /**\n     * @return A boolean representing if the response has a valid token. Returns\n     * true when the response was successful and the token is not expired.\n     */ isValid() {\n        return !this.isExpired() && this.success;\n    }\n    /**\n     * @return A boolean representing if the response is expired. Returns true if the\n     * provided timeout has passed.\n     */ isExpired() {\n        return this.expirationTime !== undefined && this.expirationTime < Math.round(Date.now() / 1000);\n    }\n}\nexports.ExecutableResponse = ExecutableResponse;\n/**\n * An error thrown by the ExecutableResponse class.\n */ class ExecutableResponseError extends Error {\n    constructor(message){\n        super(message);\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nexports.ExecutableResponseError = ExecutableResponseError;\n/**\n * An error thrown when the 'version' field in an executable response is missing or invalid.\n */ class InvalidVersionFieldError extends ExecutableResponseError {\n}\nexports.InvalidVersionFieldError = InvalidVersionFieldError;\n/**\n * An error thrown when the 'success' field in an executable response is missing or invalid.\n */ class InvalidSuccessFieldError extends ExecutableResponseError {\n}\nexports.InvalidSuccessFieldError = InvalidSuccessFieldError;\n/**\n * An error thrown when the 'expiration_time' field in an executable response is missing or invalid.\n */ class InvalidExpirationTimeFieldError extends ExecutableResponseError {\n}\nexports.InvalidExpirationTimeFieldError = InvalidExpirationTimeFieldError;\n/**\n * An error thrown when the 'token_type' field in an executable response is missing or invalid.\n */ class InvalidTokenTypeFieldError extends ExecutableResponseError {\n}\nexports.InvalidTokenTypeFieldError = InvalidTokenTypeFieldError;\n/**\n * An error thrown when the 'code' field in an executable response is missing or invalid.\n */ class InvalidCodeFieldError extends ExecutableResponseError {\n}\nexports.InvalidCodeFieldError = InvalidCodeFieldError;\n/**\n * An error thrown when the 'message' field in an executable response is missing or invalid.\n */ class InvalidMessageFieldError extends ExecutableResponseError {\n}\nexports.InvalidMessageFieldError = InvalidMessageFieldError;\n/**\n * An error thrown when the subject token in an executable response is missing or invalid.\n */ class InvalidSubjectTokenError extends ExecutableResponseError {\n}\nexports.InvalidSubjectTokenError = InvalidSubjectTokenError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9leGVjdXRhYmxlLXJlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0NBQWdDLEdBQUdBLGdDQUFnQyxHQUFHQSw2QkFBNkIsR0FBR0Esa0NBQWtDLEdBQUdBLHVDQUF1QyxHQUFHQSxnQ0FBZ0MsR0FBR0EsZ0NBQWdDLEdBQUdBLCtCQUErQixHQUFHQSwwQkFBMEIsR0FBRyxLQUFLO0FBQy9ULE1BQU1XLDBCQUEwQjtBQUNoQyxNQUFNQywyQkFBMkI7QUFDakMsTUFBTUMsMkJBQTJCO0FBQ2pDOztDQUVDLEdBQ0QsTUFBTUg7SUFDRjs7Ozs7S0FLQyxHQUNESSxZQUFZQyxZQUFZLENBQUU7UUFDdEIsNkRBQTZEO1FBQzdELElBQUksQ0FBQ0EsYUFBYUMsT0FBTyxFQUFFO1lBQ3ZCLE1BQU0sSUFBSVIseUJBQXlCO1FBQ3ZDO1FBQ0EsSUFBSU8sYUFBYUUsT0FBTyxLQUFLQyxXQUFXO1lBQ3BDLE1BQU0sSUFBSVgseUJBQXlCO1FBQ3ZDO1FBQ0EsSUFBSSxDQUFDUyxPQUFPLEdBQUdELGFBQWFDLE9BQU87UUFDbkMsSUFBSSxDQUFDQyxPQUFPLEdBQUdGLGFBQWFFLE9BQU87UUFDbkMsc0RBQXNEO1FBQ3RELElBQUksSUFBSSxDQUFDQSxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUNFLGNBQWMsR0FBR0osYUFBYUssZUFBZTtZQUNsRCxJQUFJLENBQUNDLFNBQVMsR0FBR04sYUFBYU8sVUFBVTtZQUN4Qyw2QkFBNkI7WUFDN0IsSUFBSSxJQUFJLENBQUNELFNBQVMsS0FBS1YsMkJBQ25CLElBQUksQ0FBQ1UsU0FBUyxLQUFLVCw0QkFDbkIsSUFBSSxDQUFDUyxTQUFTLEtBQUtSLDBCQUEwQjtnQkFDN0MsTUFBTSxJQUFJUiwyQkFBMkIsMkVBQ2pDLENBQUMsc0JBQXNCLEVBQUVPLHlCQUF5QixFQUFFLEVBQUVDLHlCQUF5QixLQUFLLEVBQUVGLHdCQUF3QixDQUFDLENBQUM7WUFDeEg7WUFDQSwwQkFBMEI7WUFDMUIsSUFBSSxJQUFJLENBQUNVLFNBQVMsS0FBS1YseUJBQXlCO2dCQUM1QyxJQUFJLENBQUNJLGFBQWFRLGFBQWEsRUFBRTtvQkFDN0IsTUFBTSxJQUFJckIseUJBQXlCLENBQUMseUVBQXlFLEVBQUVTLHdCQUF3QixDQUFDLENBQUM7Z0JBQzdJO2dCQUNBLElBQUksQ0FBQ2EsWUFBWSxHQUFHVCxhQUFhUSxhQUFhO1lBQ2xELE9BQ0s7Z0JBQ0QsSUFBSSxDQUFDUixhQUFhVSxRQUFRLEVBQUU7b0JBQ3hCLE1BQU0sSUFBSXZCLHlCQUF5Qiw4REFDL0IsQ0FBQyxXQUFXLEVBQUVVLHlCQUF5QixJQUFJLEVBQUVDLHlCQUF5QixDQUFDLENBQUM7Z0JBQ2hGO2dCQUNBLElBQUksQ0FBQ1csWUFBWSxHQUFHVCxhQUFhVSxRQUFRO1lBQzdDO1FBQ0osT0FDSztZQUNELHFFQUFxRTtZQUNyRSxJQUFJLENBQUNWLGFBQWFXLElBQUksRUFBRTtnQkFDcEIsTUFBTSxJQUFJdEIsc0JBQXNCO1lBQ3BDO1lBQ0EsSUFBSSxDQUFDVyxhQUFhWSxPQUFPLEVBQUU7Z0JBQ3ZCLE1BQU0sSUFBSXhCLHlCQUF5QjtZQUN2QztZQUNBLElBQUksQ0FBQ3lCLFNBQVMsR0FBR2IsYUFBYVcsSUFBSTtZQUNsQyxJQUFJLENBQUNHLFlBQVksR0FBR2QsYUFBYVksT0FBTztRQUM1QztJQUNKO0lBQ0E7OztLQUdDLEdBQ0RHLFVBQVU7UUFDTixPQUFPLENBQUMsSUFBSSxDQUFDQyxTQUFTLE1BQU0sSUFBSSxDQUFDZCxPQUFPO0lBQzVDO0lBQ0E7OztLQUdDLEdBQ0RjLFlBQVk7UUFDUixPQUFRLElBQUksQ0FBQ1osY0FBYyxLQUFLRCxhQUM1QixJQUFJLENBQUNDLGNBQWMsR0FBR2EsS0FBS0MsS0FBSyxDQUFDQyxLQUFLQyxHQUFHLEtBQUs7SUFDdEQ7QUFDSjtBQUNBbkMsMEJBQTBCLEdBQUdVO0FBQzdCOztDQUVDLEdBQ0QsTUFBTUQsZ0NBQWdDMkI7SUFDbEN0QixZQUFZYSxPQUFPLENBQUU7UUFDakIsS0FBSyxDQUFDQTtRQUNON0IsT0FBT3VDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBV0MsU0FBUztJQUNwRDtBQUNKO0FBQ0F0QywrQkFBK0IsR0FBR1M7QUFDbEM7O0NBRUMsR0FDRCxNQUFNRCxpQ0FBaUNDO0FBQ3ZDO0FBQ0FULGdDQUFnQyxHQUFHUTtBQUNuQzs7Q0FFQyxHQUNELE1BQU1ELGlDQUFpQ0U7QUFDdkM7QUFDQVQsZ0NBQWdDLEdBQUdPO0FBQ25DOztDQUVDLEdBQ0QsTUFBTUQsd0NBQXdDRztBQUM5QztBQUNBVCx1Q0FBdUMsR0FBR007QUFDMUM7O0NBRUMsR0FDRCxNQUFNRCxtQ0FBbUNJO0FBQ3pDO0FBQ0FULGtDQUFrQyxHQUFHSztBQUNyQzs7Q0FFQyxHQUNELE1BQU1ELDhCQUE4Qks7QUFDcEM7QUFDQVQsNkJBQTZCLEdBQUdJO0FBQ2hDOztDQUVDLEdBQ0QsTUFBTUQsaUNBQWlDTTtBQUN2QztBQUNBVCxnQ0FBZ0MsR0FBR0c7QUFDbkM7O0NBRUMsR0FDRCxNQUFNRCxpQ0FBaUNPO0FBQ3ZDO0FBQ0FULGdDQUFnQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtY29tbWVudGVyLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvZXhlY3V0YWJsZS1yZXNwb25zZS5qcz9kNTg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkludmFsaWRTdWJqZWN0VG9rZW5FcnJvciA9IGV4cG9ydHMuSW52YWxpZE1lc3NhZ2VGaWVsZEVycm9yID0gZXhwb3J0cy5JbnZhbGlkQ29kZUZpZWxkRXJyb3IgPSBleHBvcnRzLkludmFsaWRUb2tlblR5cGVGaWVsZEVycm9yID0gZXhwb3J0cy5JbnZhbGlkRXhwaXJhdGlvblRpbWVGaWVsZEVycm9yID0gZXhwb3J0cy5JbnZhbGlkU3VjY2Vzc0ZpZWxkRXJyb3IgPSBleHBvcnRzLkludmFsaWRWZXJzaW9uRmllbGRFcnJvciA9IGV4cG9ydHMuRXhlY3V0YWJsZVJlc3BvbnNlRXJyb3IgPSBleHBvcnRzLkV4ZWN1dGFibGVSZXNwb25zZSA9IHZvaWQgMDtcbmNvbnN0IFNBTUxfU1VCSkVDVF9UT0tFTl9UWVBFID0gJ3VybjppZXRmOnBhcmFtczpvYXV0aDp0b2tlbi10eXBlOnNhbWwyJztcbmNvbnN0IE9JRENfU1VCSkVDVF9UT0tFTl9UWVBFMSA9ICd1cm46aWV0ZjpwYXJhbXM6b2F1dGg6dG9rZW4tdHlwZTppZF90b2tlbic7XG5jb25zdCBPSURDX1NVQkpFQ1RfVE9LRU5fVFlQRTIgPSAndXJuOmlldGY6cGFyYW1zOm9hdXRoOnRva2VuLXR5cGU6and0Jztcbi8qKlxuICogRGVmaW5lcyB0aGUgcmVzcG9uc2Ugb2YgYSAzcmQgcGFydHkgZXhlY3V0YWJsZSBydW4gYnkgdGhlIHBsdWdnYWJsZSBhdXRoIGNsaWVudC5cbiAqL1xuY2xhc3MgRXhlY3V0YWJsZVJlc3BvbnNlIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZXMgYW4gRXhlY3V0YWJsZVJlc3BvbnNlIGluc3RhbmNlIHVzaW5nIHRoZSBwcm92aWRlZCBKU09OIG9iamVjdFxuICAgICAqIGZyb20gdGhlIG91dHB1dCBvZiB0aGUgZXhlY3V0YWJsZS5cbiAgICAgKiBAcGFyYW0gcmVzcG9uc2VKc29uIFJlc3BvbnNlIGZyb20gYSAzcmQgcGFydHkgZXhlY3V0YWJsZSwgbG9hZGVkIGZyb20gYVxuICAgICAqIHJ1biBvZiB0aGUgZXhlY3V0YWJsZSBvciBhIGNhY2hlZCBvdXRwdXQgZmlsZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZUpzb24pIHtcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgcmVxdWlyZWQgZmllbGRzIGV4aXN0IGluIHRoZSBqc29uIHJlc3BvbnNlLlxuICAgICAgICBpZiAoIXJlc3BvbnNlSnNvbi52ZXJzaW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFZlcnNpb25GaWVsZEVycm9yKFwiRXhlY3V0YWJsZSByZXNwb25zZSBtdXN0IGNvbnRhaW4gYSAndmVyc2lvbicgZmllbGQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNwb25zZUpzb24uc3VjY2VzcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFN1Y2Nlc3NGaWVsZEVycm9yKFwiRXhlY3V0YWJsZSByZXNwb25zZSBtdXN0IGNvbnRhaW4gYSAnc3VjY2VzcycgZmllbGQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHJlc3BvbnNlSnNvbi52ZXJzaW9uO1xuICAgICAgICB0aGlzLnN1Y2Nlc3MgPSByZXNwb25zZUpzb24uc3VjY2VzcztcbiAgICAgICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzIGZvciBhIHN1Y2Nlc3NmdWwgcmVzcG9uc2UuXG4gICAgICAgIGlmICh0aGlzLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHRoaXMuZXhwaXJhdGlvblRpbWUgPSByZXNwb25zZUpzb24uZXhwaXJhdGlvbl90aW1lO1xuICAgICAgICAgICAgdGhpcy50b2tlblR5cGUgPSByZXNwb25zZUpzb24udG9rZW5fdHlwZTtcbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIHRva2VuIHR5cGUgZmllbGQuXG4gICAgICAgICAgICBpZiAodGhpcy50b2tlblR5cGUgIT09IFNBTUxfU1VCSkVDVF9UT0tFTl9UWVBFICYmXG4gICAgICAgICAgICAgICAgdGhpcy50b2tlblR5cGUgIT09IE9JRENfU1VCSkVDVF9UT0tFTl9UWVBFMSAmJlxuICAgICAgICAgICAgICAgIHRoaXMudG9rZW5UeXBlICE9PSBPSURDX1NVQkpFQ1RfVE9LRU5fVFlQRTIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFRva2VuVHlwZUZpZWxkRXJyb3IoXCJFeGVjdXRhYmxlIHJlc3BvbnNlIG11c3QgY29udGFpbiBhICd0b2tlbl90eXBlJyBmaWVsZCB3aGVuIHN1Y2Nlc3NmdWwgXCIgK1xuICAgICAgICAgICAgICAgICAgICBgYW5kIGl0IG11c3QgYmUgb25lIG9mICR7T0lEQ19TVUJKRUNUX1RPS0VOX1RZUEUxfSwgJHtPSURDX1NVQkpFQ1RfVE9LRU5fVFlQRTJ9LCBvciAke1NBTUxfU1VCSkVDVF9UT0tFTl9UWVBFfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIHN1YmplY3QgdG9rZW4uXG4gICAgICAgICAgICBpZiAodGhpcy50b2tlblR5cGUgPT09IFNBTUxfU1VCSkVDVF9UT0tFTl9UWVBFKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZUpzb24uc2FtbF9yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFN1YmplY3RUb2tlbkVycm9yKGBFeGVjdXRhYmxlIHJlc3BvbnNlIG11c3QgY29udGFpbiBhICdzYW1sX3Jlc3BvbnNlJyBmaWVsZCB3aGVuIHRva2VuX3R5cGU9JHtTQU1MX1NVQkpFQ1RfVE9LRU5fVFlQRX0uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3ViamVjdFRva2VuID0gcmVzcG9uc2VKc29uLnNhbWxfcmVzcG9uc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlSnNvbi5pZF90b2tlbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFN1YmplY3RUb2tlbkVycm9yKFwiRXhlY3V0YWJsZSByZXNwb25zZSBtdXN0IGNvbnRhaW4gYSAnaWRfdG9rZW4nIGZpZWxkIHdoZW4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYHRva2VuX3R5cGU9JHtPSURDX1NVQkpFQ1RfVE9LRU5fVFlQRTF9IG9yICR7T0lEQ19TVUJKRUNUX1RPS0VOX1RZUEUyfS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJqZWN0VG9rZW4gPSByZXNwb25zZUpzb24uaWRfdG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBCb3RoIGNvZGUgYW5kIG1lc3NhZ2UgbXVzdCBiZSBwcm92aWRlZCBmb3IgdW5zdWNjZXNzZnVsIHJlc3BvbnNlcy5cbiAgICAgICAgICAgIGlmICghcmVzcG9uc2VKc29uLmNvZGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvZGVGaWVsZEVycm9yKFwiRXhlY3V0YWJsZSByZXNwb25zZSBtdXN0IGNvbnRhaW4gYSAnY29kZScgZmllbGQgd2hlbiB1bnN1Y2Nlc3NmdWwuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZUpzb24ubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkTWVzc2FnZUZpZWxkRXJyb3IoXCJFeGVjdXRhYmxlIHJlc3BvbnNlIG11c3QgY29udGFpbiBhICdtZXNzYWdlJyBmaWVsZCB3aGVuIHVuc3VjY2Vzc2Z1bC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVycm9yQ29kZSA9IHJlc3BvbnNlSnNvbi5jb2RlO1xuICAgICAgICAgICAgdGhpcy5lcnJvck1lc3NhZ2UgPSByZXNwb25zZUpzb24ubWVzc2FnZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIEEgYm9vbGVhbiByZXByZXNlbnRpbmcgaWYgdGhlIHJlc3BvbnNlIGhhcyBhIHZhbGlkIHRva2VuLiBSZXR1cm5zXG4gICAgICogdHJ1ZSB3aGVuIHRoZSByZXNwb25zZSB3YXMgc3VjY2Vzc2Z1bCBhbmQgdGhlIHRva2VuIGlzIG5vdCBleHBpcmVkLlxuICAgICAqL1xuICAgIGlzVmFsaWQoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5pc0V4cGlyZWQoKSAmJiB0aGlzLnN1Y2Nlc3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gQSBib29sZWFuIHJlcHJlc2VudGluZyBpZiB0aGUgcmVzcG9uc2UgaXMgZXhwaXJlZC4gUmV0dXJucyB0cnVlIGlmIHRoZVxuICAgICAqIHByb3ZpZGVkIHRpbWVvdXQgaGFzIHBhc3NlZC5cbiAgICAgKi9cbiAgICBpc0V4cGlyZWQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5leHBpcmF0aW9uVGltZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0aGlzLmV4cGlyYXRpb25UaW1lIDwgTWF0aC5yb3VuZChEYXRlLm5vdygpIC8gMTAwMCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuRXhlY3V0YWJsZVJlc3BvbnNlID0gRXhlY3V0YWJsZVJlc3BvbnNlO1xuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gYnkgdGhlIEV4ZWN1dGFibGVSZXNwb25zZSBjbGFzcy5cbiAqL1xuY2xhc3MgRXhlY3V0YWJsZVJlc3BvbnNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLkV4ZWN1dGFibGVSZXNwb25zZUVycm9yID0gRXhlY3V0YWJsZVJlc3BvbnNlRXJyb3I7XG4vKipcbiAqIEFuIGVycm9yIHRocm93biB3aGVuIHRoZSAndmVyc2lvbicgZmllbGQgaW4gYW4gZXhlY3V0YWJsZSByZXNwb25zZSBpcyBtaXNzaW5nIG9yIGludmFsaWQuXG4gKi9cbmNsYXNzIEludmFsaWRWZXJzaW9uRmllbGRFcnJvciBleHRlbmRzIEV4ZWN1dGFibGVSZXNwb25zZUVycm9yIHtcbn1cbmV4cG9ydHMuSW52YWxpZFZlcnNpb25GaWVsZEVycm9yID0gSW52YWxpZFZlcnNpb25GaWVsZEVycm9yO1xuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gd2hlbiB0aGUgJ3N1Y2Nlc3MnIGZpZWxkIGluIGFuIGV4ZWN1dGFibGUgcmVzcG9uc2UgaXMgbWlzc2luZyBvciBpbnZhbGlkLlxuICovXG5jbGFzcyBJbnZhbGlkU3VjY2Vzc0ZpZWxkRXJyb3IgZXh0ZW5kcyBFeGVjdXRhYmxlUmVzcG9uc2VFcnJvciB7XG59XG5leHBvcnRzLkludmFsaWRTdWNjZXNzRmllbGRFcnJvciA9IEludmFsaWRTdWNjZXNzRmllbGRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gdGhlICdleHBpcmF0aW9uX3RpbWUnIGZpZWxkIGluIGFuIGV4ZWN1dGFibGUgcmVzcG9uc2UgaXMgbWlzc2luZyBvciBpbnZhbGlkLlxuICovXG5jbGFzcyBJbnZhbGlkRXhwaXJhdGlvblRpbWVGaWVsZEVycm9yIGV4dGVuZHMgRXhlY3V0YWJsZVJlc3BvbnNlRXJyb3Ige1xufVxuZXhwb3J0cy5JbnZhbGlkRXhwaXJhdGlvblRpbWVGaWVsZEVycm9yID0gSW52YWxpZEV4cGlyYXRpb25UaW1lRmllbGRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gdGhlICd0b2tlbl90eXBlJyBmaWVsZCBpbiBhbiBleGVjdXRhYmxlIHJlc3BvbnNlIGlzIG1pc3Npbmcgb3IgaW52YWxpZC5cbiAqL1xuY2xhc3MgSW52YWxpZFRva2VuVHlwZUZpZWxkRXJyb3IgZXh0ZW5kcyBFeGVjdXRhYmxlUmVzcG9uc2VFcnJvciB7XG59XG5leHBvcnRzLkludmFsaWRUb2tlblR5cGVGaWVsZEVycm9yID0gSW52YWxpZFRva2VuVHlwZUZpZWxkRXJyb3I7XG4vKipcbiAqIEFuIGVycm9yIHRocm93biB3aGVuIHRoZSAnY29kZScgZmllbGQgaW4gYW4gZXhlY3V0YWJsZSByZXNwb25zZSBpcyBtaXNzaW5nIG9yIGludmFsaWQuXG4gKi9cbmNsYXNzIEludmFsaWRDb2RlRmllbGRFcnJvciBleHRlbmRzIEV4ZWN1dGFibGVSZXNwb25zZUVycm9yIHtcbn1cbmV4cG9ydHMuSW52YWxpZENvZGVGaWVsZEVycm9yID0gSW52YWxpZENvZGVGaWVsZEVycm9yO1xuLyoqXG4gKiBBbiBlcnJvciB0aHJvd24gd2hlbiB0aGUgJ21lc3NhZ2UnIGZpZWxkIGluIGFuIGV4ZWN1dGFibGUgcmVzcG9uc2UgaXMgbWlzc2luZyBvciBpbnZhbGlkLlxuICovXG5jbGFzcyBJbnZhbGlkTWVzc2FnZUZpZWxkRXJyb3IgZXh0ZW5kcyBFeGVjdXRhYmxlUmVzcG9uc2VFcnJvciB7XG59XG5leHBvcnRzLkludmFsaWRNZXNzYWdlRmllbGRFcnJvciA9IEludmFsaWRNZXNzYWdlRmllbGRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgdGhyb3duIHdoZW4gdGhlIHN1YmplY3QgdG9rZW4gaW4gYW4gZXhlY3V0YWJsZSByZXNwb25zZSBpcyBtaXNzaW5nIG9yIGludmFsaWQuXG4gKi9cbmNsYXNzIEludmFsaWRTdWJqZWN0VG9rZW5FcnJvciBleHRlbmRzIEV4ZWN1dGFibGVSZXNwb25zZUVycm9yIHtcbn1cbmV4cG9ydHMuSW52YWxpZFN1YmplY3RUb2tlbkVycm9yID0gSW52YWxpZFN1YmplY3RUb2tlbkVycm9yO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSW52YWxpZFN1YmplY3RUb2tlbkVycm9yIiwiSW52YWxpZE1lc3NhZ2VGaWVsZEVycm9yIiwiSW52YWxpZENvZGVGaWVsZEVycm9yIiwiSW52YWxpZFRva2VuVHlwZUZpZWxkRXJyb3IiLCJJbnZhbGlkRXhwaXJhdGlvblRpbWVGaWVsZEVycm9yIiwiSW52YWxpZFN1Y2Nlc3NGaWVsZEVycm9yIiwiSW52YWxpZFZlcnNpb25GaWVsZEVycm9yIiwiRXhlY3V0YWJsZVJlc3BvbnNlRXJyb3IiLCJFeGVjdXRhYmxlUmVzcG9uc2UiLCJTQU1MX1NVQkpFQ1RfVE9LRU5fVFlQRSIsIk9JRENfU1VCSkVDVF9UT0tFTl9UWVBFMSIsIk9JRENfU1VCSkVDVF9UT0tFTl9UWVBFMiIsImNvbnN0cnVjdG9yIiwicmVzcG9uc2VKc29uIiwidmVyc2lvbiIsInN1Y2Nlc3MiLCJ1bmRlZmluZWQiLCJleHBpcmF0aW9uVGltZSIsImV4cGlyYXRpb25fdGltZSIsInRva2VuVHlwZSIsInRva2VuX3R5cGUiLCJzYW1sX3Jlc3BvbnNlIiwic3ViamVjdFRva2VuIiwiaWRfdG9rZW4iLCJjb2RlIiwibWVzc2FnZSIsImVycm9yQ29kZSIsImVycm9yTWVzc2FnZSIsImlzVmFsaWQiLCJpc0V4cGlyZWQiLCJNYXRoIiwicm91bmQiLCJEYXRlIiwibm93IiwiRXJyb3IiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/executable-response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst oauth2common_1 = __webpack_require__(/*! ./oauth2common */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2common.js\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */ exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = \"external_account_authorized_user\";\nconst DEFAULT_TOKEN_URL = \"https://sts.{universeDomain}/v1/oauthtoken\";\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */ class ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an ExternalAccountAuthorizedUserHandler instance.\n     * @param url The URL of the token refresh endpoint.\n     * @param transporter The transporter to use for the refresh request.\n     * @param clientAuthentication The client authentication credentials to use\n     *   for the refresh request.\n     */ constructor(url, transporter, clientAuthentication){\n        super(clientAuthentication);\n        this.url = url;\n        this.transporter = transporter;\n    }\n    /**\n     * Requests a new access token from the token_url endpoint using the provided\n     *   refresh token.\n     * @param refreshToken The refresh token to use to generate a new access token.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @return A promise that resolves with the token refresh response containing\n     *   the requested access token and its expiration time.\n     */ async refreshToken(refreshToken, additionalHeaders) {\n        const values = new URLSearchParams({\n            grant_type: \"refresh_token\",\n            refresh_token: refreshToken\n        });\n        const headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            ...additionalHeaders\n        };\n        const opts = {\n            ...ExternalAccountAuthorizedUserHandler.RETRY_CONFIG,\n            url: this.url,\n            method: \"POST\",\n            headers,\n            data: values.toString(),\n            responseType: \"json\"\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const tokenRefreshResponse = response.data;\n            tokenRefreshResponse.res = response;\n            return tokenRefreshResponse;\n        } catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */ class ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n     * provided JSON object loaded from a credentials files.\n     * An error is throws if the credential is not valid.\n     * @param options The external account authorized user option object typically\n     *   from the external accoutn authorized user JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        var _a;\n        super({\n            ...options,\n            ...additionalOptions\n        });\n        if (options.universe_domain) {\n            this.universeDomain = options.universe_domain;\n        }\n        this.refreshToken = options.refresh_token;\n        const clientAuth = {\n            confidentialClientType: \"basic\",\n            clientId: options.client_id,\n            clientSecret: options.client_secret\n        };\n        this.externalAccountAuthorizedUserHandler = new ExternalAccountAuthorizedUserHandler((_a = options.token_url) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace(\"{universeDomain}\", this.universeDomain), this.transporter, clientAuth);\n        this.cachedAccessToken = null;\n        this.quotaProjectId = options.quota_project_id;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== \"number\") {\n            this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n        } else {\n            this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    }\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res\n        };\n    }\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then((r)=>callback(null, r), (e)=>{\n                return callback(e, e.response);\n            });\n        } else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n     * @return A promise that resolves with the successful response.\n     */ async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders[\"x-goog-user-project\"]) {\n                opts.headers[\"x-goog-user-project\"] = requestHeaders[\"x-goog-user-project\"];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        } catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * @return A promise that resolves with the refreshed credential.\n     */ async refreshAccessTokenAsync() {\n        // Refresh the access token using the refresh token.\n        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n        this.cachedAccessToken = {\n            access_token: refreshResponse.access_token,\n            expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n            res: refreshResponse.res\n        };\n        if (refreshResponse.refresh_token !== undefined) {\n            this.refreshToken = refreshResponse.refresh_token;\n        }\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param credentials The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */ isExpired(credentials) {\n        const now = new Date().getTime();\n        return credentials.expiry_date ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis : false;\n    }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/externalclient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/externalclient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ExternalAccountClient = void 0;\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst identitypoolclient_1 = __webpack_require__(/*! ./identitypoolclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/identitypoolclient.js\");\nconst awsclient_1 = __webpack_require__(/*! ./awsclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/awsclient.js\");\nconst pluggable_auth_client_1 = __webpack_require__(/*! ./pluggable-auth-client */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\");\n/**\n * Dummy class with no constructor. Developers are expected to use fromJSON.\n */ class ExternalAccountClient {\n    constructor(){\n        throw new Error(\"ExternalAccountClients should be initialized via: \" + \"ExternalAccountClient.fromJSON(), \" + \"directly via explicit constructors, eg. \" + \"new AwsClient(options), new IdentityPoolClient(options), new\" + \"PluggableAuthClientOptions, or via \" + \"new GoogleAuth(options).getClient()\");\n    }\n    /**\n     * This static method will instantiate the\n     * corresponding type of external account credential depending on the\n     * underlying credential source.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     * @return A BaseExternalAccountClient instance or null if the options\n     *   provided do not correspond to an external account credential.\n     */ static fromJSON(options, additionalOptions) {\n        var _a, _b;\n        if (options && options.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            if ((_a = options.credential_source) === null || _a === void 0 ? void 0 : _a.environment_id) {\n                return new awsclient_1.AwsClient(options, additionalOptions);\n            } else if ((_b = options.credential_source) === null || _b === void 0 ? void 0 : _b.executable) {\n                return new pluggable_auth_client_1.PluggableAuthClient(options, additionalOptions);\n            } else {\n                return new identitypoolclient_1.IdentityPoolClient(options, additionalOptions);\n            }\n        } else {\n            return null;\n        }\n    }\n}\nexports.ExternalAccountClient = ExternalAccountClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9leHRlcm5hbGNsaWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHLEtBQUs7QUFDckMsTUFBTUcsdUJBQXVCQyxtQkFBT0EsQ0FBQywyR0FBc0I7QUFDM0QsTUFBTUMsdUJBQXVCRCxtQkFBT0EsQ0FBQywyR0FBc0I7QUFDM0QsTUFBTUUsY0FBY0YsbUJBQU9BLENBQUMseUZBQWE7QUFDekMsTUFBTUcsMEJBQTBCSCxtQkFBT0EsQ0FBQyxpSEFBeUI7QUFDakU7O0NBRUMsR0FDRCxNQUFNRjtJQUNGTSxhQUFjO1FBQ1YsTUFBTSxJQUFJQyxNQUFNLHVEQUNaLHVDQUNBLDZDQUNBLGlFQUNBLHdDQUNBO0lBQ1I7SUFDQTs7Ozs7Ozs7Ozs7O0tBWUMsR0FDRCxPQUFPQyxTQUFTQyxPQUFPLEVBQUVDLGlCQUFpQixFQUFFO1FBQ3hDLElBQUlDLElBQUlDO1FBQ1IsSUFBSUgsV0FBV0EsUUFBUUksSUFBSSxLQUFLWixxQkFBcUJhLHFCQUFxQixFQUFFO1lBQ3hFLElBQUksQ0FBQ0gsS0FBS0YsUUFBUU0saUJBQWlCLE1BQU0sUUFBUUosT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHSyxjQUFjLEVBQUU7Z0JBQ3pGLE9BQU8sSUFBSVosWUFBWWEsU0FBUyxDQUFDUixTQUFTQztZQUM5QyxPQUNLLElBQUksQ0FBQ0UsS0FBS0gsUUFBUU0saUJBQWlCLE1BQU0sUUFBUUgsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHTSxVQUFVLEVBQUU7Z0JBQzFGLE9BQU8sSUFBSWIsd0JBQXdCYyxtQkFBbUIsQ0FBQ1YsU0FBU0M7WUFDcEUsT0FDSztnQkFDRCxPQUFPLElBQUlQLHFCQUFxQmlCLGtCQUFrQixDQUFDWCxTQUFTQztZQUNoRTtRQUNKLE9BQ0s7WUFDRCxPQUFPO1FBQ1g7SUFDSjtBQUNKO0FBQ0FaLDZCQUE2QixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtY29tbWVudGVyLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvZXh0ZXJuYWxjbGllbnQuanM/OWM5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FeHRlcm5hbEFjY291bnRDbGllbnQgPSB2b2lkIDA7XG5jb25zdCBiYXNlZXh0ZXJuYWxjbGllbnRfMSA9IHJlcXVpcmUoXCIuL2Jhc2VleHRlcm5hbGNsaWVudFwiKTtcbmNvbnN0IGlkZW50aXR5cG9vbGNsaWVudF8xID0gcmVxdWlyZShcIi4vaWRlbnRpdHlwb29sY2xpZW50XCIpO1xuY29uc3QgYXdzY2xpZW50XzEgPSByZXF1aXJlKFwiLi9hd3NjbGllbnRcIik7XG5jb25zdCBwbHVnZ2FibGVfYXV0aF9jbGllbnRfMSA9IHJlcXVpcmUoXCIuL3BsdWdnYWJsZS1hdXRoLWNsaWVudFwiKTtcbi8qKlxuICogRHVtbXkgY2xhc3Mgd2l0aCBubyBjb25zdHJ1Y3Rvci4gRGV2ZWxvcGVycyBhcmUgZXhwZWN0ZWQgdG8gdXNlIGZyb21KU09OLlxuICovXG5jbGFzcyBFeHRlcm5hbEFjY291bnRDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4dGVybmFsQWNjb3VudENsaWVudHMgc2hvdWxkIGJlIGluaXRpYWxpemVkIHZpYTogJyArXG4gICAgICAgICAgICAnRXh0ZXJuYWxBY2NvdW50Q2xpZW50LmZyb21KU09OKCksICcgK1xuICAgICAgICAgICAgJ2RpcmVjdGx5IHZpYSBleHBsaWNpdCBjb25zdHJ1Y3RvcnMsIGVnLiAnICtcbiAgICAgICAgICAgICduZXcgQXdzQ2xpZW50KG9wdGlvbnMpLCBuZXcgSWRlbnRpdHlQb29sQ2xpZW50KG9wdGlvbnMpLCBuZXcnICtcbiAgICAgICAgICAgICdQbHVnZ2FibGVBdXRoQ2xpZW50T3B0aW9ucywgb3IgdmlhICcgK1xuICAgICAgICAgICAgJ25ldyBHb29nbGVBdXRoKG9wdGlvbnMpLmdldENsaWVudCgpJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgc3RhdGljIG1ldGhvZCB3aWxsIGluc3RhbnRpYXRlIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgdHlwZSBvZiBleHRlcm5hbCBhY2NvdW50IGNyZWRlbnRpYWwgZGVwZW5kaW5nIG9uIHRoZVxuICAgICAqIHVuZGVybHlpbmcgY3JlZGVudGlhbCBzb3VyY2UuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVGhlIGV4dGVybmFsIGFjY291bnQgb3B0aW9ucyBvYmplY3QgdHlwaWNhbGx5IGxvYWRlZFxuICAgICAqICAgZnJvbSB0aGUgZXh0ZXJuYWwgYWNjb3VudCBKU09OIGNyZWRlbnRpYWwgZmlsZS5cbiAgICAgKiBAcGFyYW0gYWRkaXRpb25hbE9wdGlvbnMgKipERVBSRUNBVEVELCBhbGwgb3B0aW9ucyBhcmUgYXZhaWxhYmxlIGluIHRoZVxuICAgICAqICAgYG9wdGlvbnNgIHBhcmFtZXRlci4qKiBPcHRpb25hbCBhZGRpdGlvbmFsIGJlaGF2aW9yIGN1c3RvbWl6YXRpb24gb3B0aW9ucy5cbiAgICAgKiAgIFRoZXNlIGN1cnJlbnRseSBjdXN0b21pemUgZXhwaXJhdGlvbiB0aHJlc2hvbGQgdGltZSBhbmQgd2hldGhlciB0byByZXRyeVxuICAgICAqICAgb24gNDAxLzQwMyBBUEkgcmVxdWVzdCBlcnJvcnMuXG4gICAgICogQHJldHVybiBBIEJhc2VFeHRlcm5hbEFjY291bnRDbGllbnQgaW5zdGFuY2Ugb3IgbnVsbCBpZiB0aGUgb3B0aW9uc1xuICAgICAqICAgcHJvdmlkZWQgZG8gbm90IGNvcnJlc3BvbmQgdG8gYW4gZXh0ZXJuYWwgYWNjb3VudCBjcmVkZW50aWFsLlxuICAgICAqL1xuICAgIHN0YXRpYyBmcm9tSlNPTihvcHRpb25zLCBhZGRpdGlvbmFsT3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnR5cGUgPT09IGJhc2VleHRlcm5hbGNsaWVudF8xLkVYVEVSTkFMX0FDQ09VTlRfVFlQRSkge1xuICAgICAgICAgICAgaWYgKChfYSA9IG9wdGlvbnMuY3JlZGVudGlhbF9zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbnZpcm9ubWVudF9pZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgYXdzY2xpZW50XzEuQXdzQ2xpZW50KG9wdGlvbnMsIGFkZGl0aW9uYWxPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChfYiA9IG9wdGlvbnMuY3JlZGVudGlhbF9zb3VyY2UpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5leGVjdXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBwbHVnZ2FibGVfYXV0aF9jbGllbnRfMS5QbHVnZ2FibGVBdXRoQ2xpZW50KG9wdGlvbnMsIGFkZGl0aW9uYWxPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaWRlbnRpdHlwb29sY2xpZW50XzEuSWRlbnRpdHlQb29sQ2xpZW50KG9wdGlvbnMsIGFkZGl0aW9uYWxPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5FeHRlcm5hbEFjY291bnRDbGllbnQgPSBFeHRlcm5hbEFjY291bnRDbGllbnQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJFeHRlcm5hbEFjY291bnRDbGllbnQiLCJiYXNlZXh0ZXJuYWxjbGllbnRfMSIsInJlcXVpcmUiLCJpZGVudGl0eXBvb2xjbGllbnRfMSIsImF3c2NsaWVudF8xIiwicGx1Z2dhYmxlX2F1dGhfY2xpZW50XzEiLCJjb25zdHJ1Y3RvciIsIkVycm9yIiwiZnJvbUpTT04iLCJvcHRpb25zIiwiYWRkaXRpb25hbE9wdGlvbnMiLCJfYSIsIl9iIiwidHlwZSIsIkVYVEVSTkFMX0FDQ09VTlRfVFlQRSIsImNyZWRlbnRpYWxfc291cmNlIiwiZW52aXJvbm1lbnRfaWQiLCJBd3NDbGllbnQiLCJleGVjdXRhYmxlIiwiUGx1Z2dhYmxlQXV0aENsaWVudCIsIklkZW50aXR5UG9vbENsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/externalclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FileSubjectTokenSupplier = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nconst readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : ()=>{});\nconst realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : ()=>{});\nconst lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : ()=>{});\n/**\n * Internal subject token supplier implementation used when a file location\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */ class FileSubjectTokenSupplier {\n    /**\n     * Instantiates a new file based subject token supplier.\n     * @param opts The file subject token supplier options to build the supplier\n     *   with.\n     */ constructor(opts){\n        this.filePath = opts.filePath;\n        this.formatType = opts.formatType;\n        this.subjectTokenFieldName = opts.subjectTokenFieldName;\n    }\n    /**\n     * Returns the subject token stored at the file specified in the constructor.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link IdentityPoolClient}, contains the requested audience and subject\n     *   token type for the external account identity. Not used.\n     */ async getSubjectToken(context) {\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        let parsedFilePath = this.filePath;\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            parsedFilePath = await realpath(parsedFilePath);\n            if (!(await lstat(parsedFilePath)).isFile()) {\n                throw new Error();\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${parsedFilePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        let subjectToken;\n        const rawText = await readFile(parsedFilePath, {\n            encoding: \"utf8\"\n        });\n        if (this.formatType === \"text\") {\n            subjectToken = rawText;\n        } else if (this.formatType === \"json\" && this.subjectTokenFieldName) {\n            const json = JSON.parse(rawText);\n            subjectToken = json[this.subjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error(\"Unable to parse the subject_token from the credential_source file\");\n        }\n        return subjectToken;\n    }\n}\nexports.FileSubjectTokenSupplier = FileSubjectTokenSupplier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9maWxlc3ViamVjdHRva2Vuc3VwcGxpZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakMsSUFBSUEsSUFBSUMsSUFBSUM7QUFDWkMsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHLEtBQUs7QUFDeEMsTUFBTUcsU0FBU0MsbUJBQU9BLENBQUMsa0JBQU07QUFDN0IsTUFBTUMsS0FBS0QsbUJBQU9BLENBQUMsY0FBSTtBQUN2QiwwREFBMEQ7QUFDMUQseUVBQXlFO0FBQ3pFLGdCQUFnQjtBQUNoQixxRUFBcUU7QUFDckUsTUFBTUUsV0FBVyxDQUFDLEdBQUdILE9BQU9JLFNBQVMsRUFBRSxDQUFDWixLQUFLVSxHQUFHQyxRQUFRLE1BQU0sUUFBUVgsT0FBTyxLQUFLLElBQUlBLEtBQU0sS0FBUTtBQUNwRyxNQUFNYSxXQUFXLENBQUMsR0FBR0wsT0FBT0ksU0FBUyxFQUFFLENBQUNYLEtBQUtTLEdBQUdHLFFBQVEsTUFBTSxRQUFRWixPQUFPLEtBQUssSUFBSUEsS0FBTSxLQUFRO0FBQ3BHLE1BQU1hLFFBQVEsQ0FBQyxHQUFHTixPQUFPSSxTQUFTLEVBQUUsQ0FBQ1YsS0FBS1EsR0FBR0ksS0FBSyxNQUFNLFFBQVFaLE9BQU8sS0FBSyxJQUFJQSxLQUFNLEtBQVE7QUFDOUY7OztDQUdDLEdBQ0QsTUFBTUs7SUFDRjs7OztLQUlDLEdBQ0RRLFlBQVlDLElBQUksQ0FBRTtRQUNkLElBQUksQ0FBQ0MsUUFBUSxHQUFHRCxLQUFLQyxRQUFRO1FBQzdCLElBQUksQ0FBQ0MsVUFBVSxHQUFHRixLQUFLRSxVQUFVO1FBQ2pDLElBQUksQ0FBQ0MscUJBQXFCLEdBQUdILEtBQUtHLHFCQUFxQjtJQUMzRDtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTUMsZ0JBQWdCQyxPQUFPLEVBQUU7UUFDM0IsMEVBQTBFO1FBQzFFLGlCQUFpQjtRQUNqQixJQUFJQyxpQkFBaUIsSUFBSSxDQUFDTCxRQUFRO1FBQ2xDLElBQUk7WUFDQSx3RUFBd0U7WUFDeEUscUJBQXFCO1lBQ3JCSyxpQkFBaUIsTUFBTVQsU0FBU1M7WUFDaEMsSUFBSSxDQUFDLENBQUMsTUFBTVIsTUFBTVEsZUFBYyxFQUFHQyxNQUFNLElBQUk7Z0JBQ3pDLE1BQU0sSUFBSUM7WUFDZDtRQUNKLEVBQ0EsT0FBT0MsS0FBSztZQUNSLElBQUlBLGVBQWVELE9BQU87Z0JBQ3RCQyxJQUFJQyxPQUFPLEdBQUcsQ0FBQyxZQUFZLEVBQUVKLGVBQWUsc0NBQXNDLEVBQUVHLElBQUlDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JHO1lBQ0EsTUFBTUQ7UUFDVjtRQUNBLElBQUlFO1FBQ0osTUFBTUMsVUFBVSxNQUFNakIsU0FBU1csZ0JBQWdCO1lBQUVPLFVBQVU7UUFBTztRQUNsRSxJQUFJLElBQUksQ0FBQ1gsVUFBVSxLQUFLLFFBQVE7WUFDNUJTLGVBQWVDO1FBQ25CLE9BQ0ssSUFBSSxJQUFJLENBQUNWLFVBQVUsS0FBSyxVQUFVLElBQUksQ0FBQ0MscUJBQXFCLEVBQUU7WUFDL0QsTUFBTVcsT0FBT0MsS0FBS0MsS0FBSyxDQUFDSjtZQUN4QkQsZUFBZUcsSUFBSSxDQUFDLElBQUksQ0FBQ1gscUJBQXFCLENBQUM7UUFDbkQ7UUFDQSxJQUFJLENBQUNRLGNBQWM7WUFDZixNQUFNLElBQUlILE1BQU07UUFDcEI7UUFDQSxPQUFPRztJQUNYO0FBQ0o7QUFDQXRCLGdDQUFnQyxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtY29tbWVudGVyLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvZmlsZXN1YmplY3R0b2tlbnN1cHBsaWVyLmpzPzkzZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyNCBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfYSwgX2IsIF9jO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GaWxlU3ViamVjdFRva2VuU3VwcGxpZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuLy8gZnMucmVhZGZpbGUgaXMgdW5kZWZpbmVkIGluIGJyb3dzZXIga2FybWEgdGVzdHMgY2F1c2luZ1xuLy8gYG5wbSBydW4gYnJvd3Nlci10ZXN0YCB0byBmYWlsIGFzIHRlc3Qub2F1dGgyLnRzIGltcG9ydHMgdGhpcyBmaWxlIHZpYVxuLy8gc3JjL2luZGV4LnRzLlxuLy8gRmFsbGJhY2sgdG8gdm9pZCBmdW5jdGlvbiB0byBhdm9pZCBwcm9taXNpZnkgdGhyb3dpbmcgYSBUeXBlRXJyb3IuXG5jb25zdCByZWFkRmlsZSA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KSgoX2EgPSBmcy5yZWFkRmlsZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKCgpID0+IHsgfSkpO1xuY29uc3QgcmVhbHBhdGggPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoKF9iID0gZnMucmVhbHBhdGgpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICgoKSA9PiB7IH0pKTtcbmNvbnN0IGxzdGF0ID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKChfYyA9IGZzLmxzdGF0KSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAoKCkgPT4geyB9KSk7XG4vKipcbiAqIEludGVybmFsIHN1YmplY3QgdG9rZW4gc3VwcGxpZXIgaW1wbGVtZW50YXRpb24gdXNlZCB3aGVuIGEgZmlsZSBsb2NhdGlvblxuICogaXMgY29uZmlndXJlZCBpbiB0aGUgY3JlZGVudGlhbCBjb25maWd1cmF0aW9uIHVzZWQgdG8gYnVpbGQgYW4ge0BsaW5rIElkZW50aXR5UG9vbENsaWVudH1cbiAqL1xuY2xhc3MgRmlsZVN1YmplY3RUb2tlblN1cHBsaWVyIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgZmlsZSBiYXNlZCBzdWJqZWN0IHRva2VuIHN1cHBsaWVyLlxuICAgICAqIEBwYXJhbSBvcHRzIFRoZSBmaWxlIHN1YmplY3QgdG9rZW4gc3VwcGxpZXIgb3B0aW9ucyB0byBidWlsZCB0aGUgc3VwcGxpZXJcbiAgICAgKiAgIHdpdGguXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICB0aGlzLmZpbGVQYXRoID0gb3B0cy5maWxlUGF0aDtcbiAgICAgICAgdGhpcy5mb3JtYXRUeXBlID0gb3B0cy5mb3JtYXRUeXBlO1xuICAgICAgICB0aGlzLnN1YmplY3RUb2tlbkZpZWxkTmFtZSA9IG9wdHMuc3ViamVjdFRva2VuRmllbGROYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdWJqZWN0IHRva2VuIHN0b3JlZCBhdCB0aGUgZmlsZSBzcGVjaWZpZWQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAqIEBwYXJhbSBjb250ZXh0IHtAbGluayBFeHRlcm5hbEFjY291bnRTdXBwbGllckNvbnRleHR9IGZyb20gdGhlIGNhbGxpbmdcbiAgICAgKiAgIHtAbGluayBJZGVudGl0eVBvb2xDbGllbnR9LCBjb250YWlucyB0aGUgcmVxdWVzdGVkIGF1ZGllbmNlIGFuZCBzdWJqZWN0XG4gICAgICogICB0b2tlbiB0eXBlIGZvciB0aGUgZXh0ZXJuYWwgYWNjb3VudCBpZGVudGl0eS4gTm90IHVzZWQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0U3ViamVjdFRva2VuKGNvbnRleHQpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZXJlIGlzIGEgZmlsZSBhdCB0aGUgcGF0aC4gbHN0YXRTeW5jIHdpbGwgdGhyb3cgaWYgdGhlcmUgaXNcbiAgICAgICAgLy8gbm90aGluZyB0aGVyZS5cbiAgICAgICAgbGV0IHBhcnNlZEZpbGVQYXRoID0gdGhpcy5maWxlUGF0aDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgcGF0aCB0byBhY3R1YWwgZmlsZSBpbiBjYXNlIG9mIHN5bWxpbmsuIEV4cGVjdCBhIHRocm93biBlcnJvclxuICAgICAgICAgICAgLy8gaWYgbm90IHJlc29sdmFibGUuXG4gICAgICAgICAgICBwYXJzZWRGaWxlUGF0aCA9IGF3YWl0IHJlYWxwYXRoKHBhcnNlZEZpbGVQYXRoKTtcbiAgICAgICAgICAgIGlmICghKGF3YWl0IGxzdGF0KHBhcnNlZEZpbGVQYXRoKSkuaXNGaWxlKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSA9IGBUaGUgZmlsZSBhdCAke3BhcnNlZEZpbGVQYXRofSBkb2VzIG5vdCBleGlzdCwgb3IgaXQgaXMgbm90IGEgZmlsZS4gJHtlcnIubWVzc2FnZX1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzdWJqZWN0VG9rZW47XG4gICAgICAgIGNvbnN0IHJhd1RleHQgPSBhd2FpdCByZWFkRmlsZShwYXJzZWRGaWxlUGF0aCwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pO1xuICAgICAgICBpZiAodGhpcy5mb3JtYXRUeXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIHN1YmplY3RUb2tlbiA9IHJhd1RleHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5mb3JtYXRUeXBlID09PSAnanNvbicgJiYgdGhpcy5zdWJqZWN0VG9rZW5GaWVsZE5hbWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKHJhd1RleHQpO1xuICAgICAgICAgICAgc3ViamVjdFRva2VuID0ganNvblt0aGlzLnN1YmplY3RUb2tlbkZpZWxkTmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdWJqZWN0VG9rZW4pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHBhcnNlIHRoZSBzdWJqZWN0X3Rva2VuIGZyb20gdGhlIGNyZWRlbnRpYWxfc291cmNlIGZpbGUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3ViamVjdFRva2VuO1xuICAgIH1cbn1cbmV4cG9ydHMuRmlsZVN1YmplY3RUb2tlblN1cHBsaWVyID0gRmlsZVN1YmplY3RUb2tlblN1cHBsaWVyO1xuIl0sIm5hbWVzIjpbIl9hIiwiX2IiLCJfYyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRmlsZVN1YmplY3RUb2tlblN1cHBsaWVyIiwidXRpbF8xIiwicmVxdWlyZSIsImZzIiwicmVhZEZpbGUiLCJwcm9taXNpZnkiLCJyZWFscGF0aCIsImxzdGF0IiwiY29uc3RydWN0b3IiLCJvcHRzIiwiZmlsZVBhdGgiLCJmb3JtYXRUeXBlIiwic3ViamVjdFRva2VuRmllbGROYW1lIiwiZ2V0U3ViamVjdFRva2VuIiwiY29udGV4dCIsInBhcnNlZEZpbGVQYXRoIiwiaXNGaWxlIiwiRXJyb3IiLCJlcnIiLCJtZXNzYWdlIiwic3ViamVjdFRva2VuIiwicmF3VGV4dCIsImVuY29kaW5nIiwianNvbiIsIkpTT04iLCJwYXJzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/googleauth.js":
/*!***********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/googleauth.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _GoogleAuth_instances, _GoogleAuth_pendingAuthClient, _GoogleAuth_prepareAndCacheClient, _GoogleAuth_determineClient;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GoogleAuth = exports.GoogleAuthExceptionMessages = exports.CLOUD_SDK_CLIENT_ID = void 0;\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(rsc)/./node_modules/gcp-metadata/build/src/index.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(rsc)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\nconst transporters_1 = __webpack_require__(/*! ../transporters */ \"(rsc)/./node_modules/google-auth-library/build/src/transporters.js\");\nconst computeclient_1 = __webpack_require__(/*! ./computeclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/computeclient.js\");\nconst idtokenclient_1 = __webpack_require__(/*! ./idtokenclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/idtokenclient.js\");\nconst envDetect_1 = __webpack_require__(/*! ./envDetect */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/envDetect.js\");\nconst jwtclient_1 = __webpack_require__(/*! ./jwtclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/jwtclient.js\");\nconst refreshclient_1 = __webpack_require__(/*! ./refreshclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/refreshclient.js\");\nconst impersonated_1 = __webpack_require__(/*! ./impersonated */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/impersonated.js\");\nconst externalclient_1 = __webpack_require__(/*! ./externalclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/externalclient.js\");\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst externalAccountAuthorizedUserClient_1 = __webpack_require__(/*! ./externalAccountAuthorizedUserClient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-auth-library/build/src/util.js\");\nexports.CLOUD_SDK_CLIENT_ID = \"764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com\";\nexports.GoogleAuthExceptionMessages = {\n    API_KEY_WITH_CREDENTIALS: \"API Keys and Credentials are mutually exclusive authentication methods and cannot be used together.\",\n    NO_PROJECT_ID_FOUND: \"Unable to detect a Project Id in the current environment. \\n\" + \"To learn more about authentication and Google APIs, visit: \\n\" + \"https://cloud.google.com/docs/authentication/getting-started\",\n    NO_CREDENTIALS_FOUND: \"Unable to find credentials in current environment. \\n\" + \"To learn more about authentication and Google APIs, visit: \\n\" + \"https://cloud.google.com/docs/authentication/getting-started\",\n    NO_ADC_FOUND: \"Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.\",\n    NO_UNIVERSE_DOMAIN_FOUND: \"Unable to detect a Universe Domain in the current environment.\\n\" + \"To learn more about Universe Domain retrieval, visit: \\n\" + \"https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys\"\n};\nclass GoogleAuth {\n    // Note:  this properly is only public to satisfy unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    /**\n     * Configuration is resolved in the following order of precedence:\n     * - {@link GoogleAuthOptions.credentials `credentials`}\n     * - {@link GoogleAuthOptions.keyFilename `keyFilename`}\n     * - {@link GoogleAuthOptions.keyFile `keyFile`}\n     *\n     * {@link GoogleAuthOptions.clientOptions `clientOptions`} are passed to the\n     * {@link AuthClient `AuthClient`s}.\n     *\n     * @param opts\n     */ constructor(opts = {}){\n        _GoogleAuth_instances.add(this);\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */ this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        /**\n         * A pending {@link AuthClient}. Used for concurrent {@link GoogleAuth.getClient} calls.\n         */ _GoogleAuth_pendingAuthClient.set(this, null);\n        this.clientOptions = {};\n        this._cachedProjectId = opts.projectId || null;\n        this.cachedCredential = opts.authClient || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.clientOptions = opts.clientOptions || {};\n        this.jsonContent = opts.credentials || null;\n        this.apiKey = opts.apiKey || this.clientOptions.apiKey || null;\n        // Cannot use both API Key + Credentials\n        if (this.apiKey && (this.jsonContent || this.clientOptions.credentials)) {\n            throw new RangeError(exports.GoogleAuthExceptionMessages.API_KEY_WITH_CREDENTIALS);\n        }\n        if (opts.universeDomain) {\n            this.clientOptions.universeDomain = opts.universeDomain;\n        }\n    }\n    // GAPIC client libraries should always use self-signed JWTs. The following\n    // variables are set on the JWT client in order to indicate the type of library,\n    // and sign the JWT with the correct audience and scopes (if not supplied).\n    setGapicJWTValues(client) {\n        client.defaultServicePath = this.defaultServicePath;\n        client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n        client.defaultScopes = this.defaultScopes;\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then((r)=>callback(null, r), callback);\n        } else {\n            return this.getProjectIdAsync();\n        }\n    }\n    /**\n     * A temporary method for internal `getProjectId` usages where `null` is\n     * acceptable. In a future major release, `getProjectId` should return `null`\n     * (as the `Promise<string | null>` base signature describes) and this private\n     * method should be removed.\n     *\n     * @returns Promise that resolves with project id (or `null`)\n     */ async getProjectIdOptional() {\n        try {\n            return await this.getProjectId();\n        } catch (e) {\n            if (e instanceof Error && e.message === exports.GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {\n                return null;\n            } else {\n                throw e;\n            }\n        }\n    }\n    /**\n     * A private method for finding and caching a projectId.\n     *\n     * Supports environments in order of precedence:\n     * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n     * - GOOGLE_APPLICATION_CREDENTIALS JSON file\n     * - Cloud SDK: `gcloud config config-helper --format json`\n     * - GCE project ID from metadata server\n     *\n     * @returns projectId\n     */ async findAndCacheProjectId() {\n        let projectId = null;\n        projectId || (projectId = await this.getProductionProjectId());\n        projectId || (projectId = await this.getFileProjectId());\n        projectId || (projectId = await this.getDefaultServiceProjectId());\n        projectId || (projectId = await this.getGCEProjectId());\n        projectId || (projectId = await this.getExternalAccountClientProjectId());\n        if (projectId) {\n            this._cachedProjectId = projectId;\n            return projectId;\n        } else {\n            throw new Error(exports.GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);\n        }\n    }\n    async getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return this._cachedProjectId;\n        }\n        if (!this._findProjectIdPromise) {\n            this._findProjectIdPromise = this.findAndCacheProjectId();\n        }\n        return this._findProjectIdPromise;\n    }\n    /**\n     * Retrieves a universe domain from the metadata server via\n     * {@link gcpMetadata.universe}.\n     *\n     * @returns a universe domain\n     */ async getUniverseDomainFromMetadataServer() {\n        var _a;\n        let universeDomain;\n        try {\n            universeDomain = await gcpMetadata.universe(\"universe-domain\");\n            universeDomain || (universeDomain = authclient_1.DEFAULT_UNIVERSE);\n        } catch (e) {\n            if (e && ((_a = e === null || e === void 0 ? void 0 : e.response) === null || _a === void 0 ? void 0 : _a.status) === 404) {\n                universeDomain = authclient_1.DEFAULT_UNIVERSE;\n            } else {\n                throw e;\n            }\n        }\n        return universeDomain;\n    }\n    /**\n     * Retrieves, caches, and returns the universe domain in the following order\n     * of precedence:\n     * - The universe domain in {@link GoogleAuth.clientOptions}\n     * - An existing or ADC {@link AuthClient}'s universe domain\n     * - {@link gcpMetadata.universe}, if {@link Compute} client\n     *\n     * @returns The universe domain\n     */ async getUniverseDomain() {\n        let universeDomain = (0, util_1.originalOrCamelOptions)(this.clientOptions).get(\"universe_domain\");\n        try {\n            universeDomain !== null && universeDomain !== void 0 ? universeDomain : universeDomain = (await this.getClient()).universeDomain;\n        } catch (_a) {\n            // client or ADC is not available\n            universeDomain !== null && universeDomain !== void 0 ? universeDomain : universeDomain = authclient_1.DEFAULT_UNIVERSE;\n        }\n        return universeDomain;\n    }\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */ getAnyScopes() {\n        return this.scopes || this.defaultScopes;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === \"function\") {\n            callback = optionsOrCallback;\n        } else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then((r)=>callback(null, r.credential, r.projectId), callback);\n        } else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    async getApplicationDefaultAsync(options = {}) {\n        // If we've already got a cached credential, return it.\n        // This will also preserve one's configured quota project, in case they\n        // set one directly on the credential previously.\n        if (this.cachedCredential) {\n            // cache, while preserving existing quota project preferences\n            return await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, this.cachedCredential, null);\n        }\n        let credential;\n        // Check for the existence of a local environment variable pointing to the\n        // location of the credential file. This is typically used in local\n        // developer scenarios.\n        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, credential);\n        }\n        // Look in the well-known credential file location.\n        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\n        if (credential) {\n            if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n            } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n            }\n            return await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, credential);\n        }\n        // Determine if we're running on GCE.\n        if (await this._checkIsGCE()) {\n            options.scopes = this.getAnyScopes();\n            return await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, new computeclient_1.Compute(options));\n        }\n        throw new Error(exports.GoogleAuthExceptionMessages.NO_ADC_FOUND);\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * Checks for GCP Residency, then fallback to checking if metadata server\n     * is available.\n     *\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */ async _checkIsGCE() {\n        if (this.checkIsGCE === undefined) {\n            this.checkIsGCE = gcpMetadata.getGCPResidency() || await gcpMetadata.isAvailable();\n        }\n        return this.checkIsGCE;\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */ async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        const credentialsPath = process.env[\"GOOGLE_APPLICATION_CREDENTIALS\"] || process.env[\"google_application_credentials\"];\n        if (!credentialsPath || credentialsPath.length === 0) {\n            return null;\n        }\n        try {\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n        } catch (e) {\n            if (e instanceof Error) {\n                e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */ async _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        // First, figure out the location of the file, depending upon the OS type.\n        let location = null;\n        if (this._isWindows()) {\n            // Windows\n            location = process.env[\"APPDATA\"];\n        } else {\n            // Linux or Mac\n            const home = process.env[\"HOME\"];\n            if (home) {\n                location = path.join(home, \".config\");\n            }\n        }\n        // If we found the root path, expand it.\n        if (location) {\n            location = path.join(location, \"gcloud\", \"application_default_credentials.json\");\n            if (!fs.existsSync(location)) {\n                location = null;\n            }\n        }\n        // The file does not exist.\n        if (!location) {\n            return null;\n        }\n        // The file seems to exist. Try to use it.\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\n        return client;\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */ async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        // Make sure the path looks like a string.\n        if (!filePath || filePath.length === 0) {\n            throw new Error(\"The file path is invalid.\");\n        }\n        // Make sure there is a file at the path. lstatSync will throw if there is\n        // nothing there.\n        try {\n            // Resolve path to actual file in case of symlink. Expect a thrown error\n            // if not resolvable.\n            filePath = fs.realpathSync(filePath);\n            if (!fs.lstatSync(filePath).isFile()) {\n                throw new Error();\n            }\n        } catch (err) {\n            if (err instanceof Error) {\n                err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\n            }\n            throw err;\n        }\n        // Now open a read stream on the file, and parse it.\n        const readStream = fs.createReadStream(filePath);\n        return this.fromStream(readStream, options);\n    }\n    /**\n     * Create a credentials instance using a given impersonated input options.\n     * @param json The impersonated input object.\n     * @returns JWT or UserRefresh Client with data\n     */ fromImpersonatedJSON(json) {\n        var _a, _b, _c, _d;\n        if (!json) {\n            throw new Error(\"Must pass in a JSON object containing an  impersonated refresh token\");\n        }\n        if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            throw new Error(`The incoming JSON object does not have the \"${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}\" type`);\n        }\n        if (!json.source_credentials) {\n            throw new Error(\"The incoming JSON object does not contain a source_credentials field\");\n        }\n        if (!json.service_account_impersonation_url) {\n            throw new Error(\"The incoming JSON object does not contain a service_account_impersonation_url field\");\n        }\n        const sourceClient = this.fromJSON(json.source_credentials);\n        if (((_a = json.service_account_impersonation_url) === null || _a === void 0 ? void 0 : _a.length) > 256) {\n            /**\n             * Prevents DOS attacks.\n             * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/85}\n             **/ throw new RangeError(`Target principal is too long: ${json.service_account_impersonation_url}`);\n        }\n        // Extract service account from service_account_impersonation_url\n        const targetPrincipal = (_c = (_b = /(?<target>[^/]+):(generateAccessToken|generateIdToken)$/.exec(json.service_account_impersonation_url)) === null || _b === void 0 ? void 0 : _b.groups) === null || _c === void 0 ? void 0 : _c.target;\n        if (!targetPrincipal) {\n            throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);\n        }\n        const targetScopes = (_d = this.getAnyScopes()) !== null && _d !== void 0 ? _d : [];\n        return new impersonated_1.Impersonated({\n            ...json,\n            sourceClient,\n            targetPrincipal,\n            targetScopes: Array.isArray(targetScopes) ? targetScopes : [\n                targetScopes\n            ]\n        });\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * This client is not cached.\n     *\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */ fromJSON(json, options = {}) {\n        let client;\n        // user's preferred universe domain\n        const preferredUniverseDomain = (0, util_1.originalOrCamelOptions)(options).get(\"universe_domain\");\n        if (json.type === refreshclient_1.USER_REFRESH_ACCOUNT_TYPE) {\n            client = new refreshclient_1.UserRefreshClient(options);\n            client.fromJSON(json);\n        } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n            client = this.fromImpersonatedJSON(json);\n        } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n            client.scopes = this.getAnyScopes();\n        } else if (json.type === externalAccountAuthorizedUserClient_1.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE) {\n            client = new externalAccountAuthorizedUserClient_1.ExternalAccountAuthorizedUserClient(json, options);\n        } else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n            this.setGapicJWTValues(client);\n            client.fromJSON(json);\n        }\n        if (preferredUniverseDomain) {\n            client.universeDomain = preferredUniverseDomain;\n        }\n        return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */ _cacheClientFromJSON(json, options) {\n        const client = this.fromJSON(json, options);\n        // cache both raw data used to instantiate client and client itself.\n        this.jsonContent = json;\n        this.cachedCredential = client;\n        return client;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === \"function\") {\n            callback = optionsOrCallback;\n        } else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options).then((r)=>callback(null, r), callback);\n        } else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject)=>{\n            if (!inputStream) {\n                throw new Error(\"Must pass in a stream containing the Google auth settings.\");\n            }\n            const chunks = [];\n            inputStream.setEncoding(\"utf8\").on(\"error\", reject).on(\"data\", (chunk)=>chunks.push(chunk)).on(\"end\", ()=>{\n                try {\n                    try {\n                        const data = JSON.parse(chunks.join(\"\"));\n                        const r = this._cacheClientFromJSON(data, options);\n                        return resolve(r);\n                    } catch (err) {\n                        // If we failed parsing this.keyFileName, assume that it\n                        // is a PEM or p12 certificate:\n                        if (!this.keyFilename) throw err;\n                        const client = new jwtclient_1.JWT({\n                            ...this.clientOptions,\n                            keyFile: this.keyFilename\n                        });\n                        this.cachedCredential = client;\n                        this.setGapicJWTValues(client);\n                        return resolve(client);\n                    }\n                } catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * The created client is not cached. In order to create and cache it use the {@link GoogleAuth.getClient `getClient`} method after first providing an {@link GoogleAuth.apiKey `apiKey`}.\n     *\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */ fromAPIKey(apiKey, options = {}) {\n        return new jwtclient_1.JWT({\n            ...options,\n            apiKey\n        });\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */ _isWindows() {\n        const sys = os.platform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === \"win\") {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */ async getDefaultServiceProjectId() {\n        return new Promise((resolve)=>{\n            (0, child_process_1.exec)(\"gcloud config config-helper --format json\", (err, stdout)=>{\n                if (!err && stdout) {\n                    try {\n                        const projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                    } catch (e) {\n                    // ignore errors\n                    }\n                }\n                resolve(null);\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */ getProductionProjectId() {\n        return process.env[\"GCLOUD_PROJECT\"] || process.env[\"GOOGLE_CLOUD_PROJECT\"] || process.env[\"gcloud_project\"] || process.env[\"google_cloud_project\"];\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */ async getFileProjectId() {\n        if (this.cachedCredential) {\n            // Try to read the project ID from the cached credentials file\n            return this.cachedCredential.projectId;\n        }\n        // Ensure the projectId is loaded from the keyFile if available.\n        if (this.keyFilename) {\n            const creds = await this.getClient();\n            if (creds && creds.projectId) {\n                return creds.projectId;\n            }\n        }\n        // Try to load a credentials file and read its project ID\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\n        if (r) {\n            return r.projectId;\n        } else {\n            return null;\n        }\n    }\n    /**\n     * Gets the project ID from external account client if available.\n     */ async getExternalAccountClientProjectId() {\n        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n            return null;\n        }\n        const creds = await this.getClient();\n        // Do not suppress the underlying error, as the error could contain helpful\n        // information for debugging and fixing. This is especially true for\n        // external account creds as in order to get the project ID, the following\n        // operations have to succeed:\n        // 1. Valid credentials file should be supplied.\n        // 2. Ability to retrieve access tokens from STS token exchange API.\n        // 3. Ability to exchange for service account impersonated credentials (if\n        //    enabled).\n        // 4. Ability to get project info using the access token from step 2 or 3.\n        // Without surfacing the error, it is harder for developers to determine\n        // which step went wrong.\n        return await creds.getProjectId();\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */ async getGCEProjectId() {\n        try {\n            const r = await gcpMetadata.project(\"project-id\");\n            return r;\n        } catch (e) {\n            // Ignore any errors\n            return null;\n        }\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then((r)=>callback(null, r), callback);\n        } else {\n            return this.getCredentialsAsync();\n        }\n    }\n    async getCredentialsAsync() {\n        const client = await this.getClient();\n        if (client instanceof impersonated_1.Impersonated) {\n            return {\n                client_email: client.getTargetPrincipal()\n            };\n        }\n        if (client instanceof baseexternalclient_1.BaseExternalAccountClient) {\n            const serviceAccountEmail = client.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                return {\n                    client_email: serviceAccountEmail,\n                    universe_domain: client.universeDomain\n                };\n            }\n        }\n        if (this.jsonContent) {\n            return {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key,\n                universe_domain: this.jsonContent.universe_domain\n            };\n        }\n        if (await this._checkIsGCE()) {\n            const [client_email, universe_domain] = await Promise.all([\n                gcpMetadata.instance(\"service-accounts/default/email\"),\n                this.getUniverseDomain()\n            ]);\n            return {\n                client_email,\n                universe_domain\n            };\n        }\n        throw new Error(exports.GoogleAuthExceptionMessages.NO_CREDENTIALS_FOUND);\n    }\n    /**\n     * Automatically obtain an {@link AuthClient `AuthClient`} based on the\n     * provided configuration. If no options were passed, use Application\n     * Default Credentials.\n     */ async getClient() {\n        if (this.cachedCredential) {\n            return this.cachedCredential;\n        }\n        // Use an existing auth client request, or cache a new one\n        __classPrivateFieldSet(this, _GoogleAuth_pendingAuthClient, __classPrivateFieldGet(this, _GoogleAuth_pendingAuthClient, \"f\") || __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_determineClient).call(this), \"f\");\n        try {\n            return await __classPrivateFieldGet(this, _GoogleAuth_pendingAuthClient, \"f\");\n        } finally{\n            // reset the pending auth client in case it is changed later\n            __classPrivateFieldSet(this, _GoogleAuth_pendingAuthClient, null, \"f\");\n        }\n    }\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */ async getIdTokenClient(targetAudience) {\n        const client = await this.getClient();\n        if (!(\"fetchIdToken\" in client)) {\n            throw new Error(\"Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.\");\n        }\n        return new idtokenclient_1.IdTokenClient({\n            targetAudience,\n            idTokenProvider: client\n        });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */ async getAccessToken() {\n        const client = await this.getClient();\n        return (await client.getAccessToken()).token;\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */ async getRequestHeaders(url) {\n        const client = await this.getClient();\n        return client.getRequestHeaders(url);\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */ async authorizeRequest(opts) {\n        opts = opts || {};\n        const url = opts.url || opts.uri;\n        const client = await this.getClient();\n        const headers = await client.getRequestHeaders(url);\n        opts.headers = Object.assign(opts.headers || {}, headers);\n        return opts;\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(opts) {\n        const client = await this.getClient();\n        return client.request(opts);\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */ getEnv() {\n        return (0, envDetect_1.getEnv)();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     * @param endpoint A custom endpoint to use.\n     *\n     * @example\n     * ```\n     * sign('data', 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/');\n     * ```\n     */ async sign(data, endpoint) {\n        const client = await this.getClient();\n        const universe = await this.getUniverseDomain();\n        endpoint = endpoint || `https://iamcredentials.${universe}/v1/projects/-/serviceAccounts/`;\n        if (client instanceof impersonated_1.Impersonated) {\n            const signed = await client.sign(data);\n            return signed.signedBlob;\n        }\n        const crypto = (0, crypto_1.createCrypto)();\n        if (client instanceof jwtclient_1.JWT && client.key) {\n            const sign = await crypto.sign(client.key, data);\n            return sign;\n        }\n        const creds = await this.getCredentials();\n        if (!creds.client_email) {\n            throw new Error(\"Cannot sign data without `client_email`.\");\n        }\n        return this.signBlob(crypto, creds.client_email, data, endpoint);\n    }\n    async signBlob(crypto, emailOrUniqueId, data, endpoint) {\n        const url = new URL(endpoint + `${emailOrUniqueId}:signBlob`);\n        const res = await this.request({\n            method: \"POST\",\n            url: url.href,\n            data: {\n                payload: crypto.encodeBase64StringUtf8(data)\n            },\n            retry: true,\n            retryConfig: {\n                httpMethodsToRetry: [\n                    \"POST\"\n                ]\n            }\n        });\n        return res.data.signedBlob;\n    }\n}\nexports.GoogleAuth = GoogleAuth;\n_GoogleAuth_pendingAuthClient = new WeakMap(), _GoogleAuth_instances = new WeakSet(), _GoogleAuth_prepareAndCacheClient = async function _GoogleAuth_prepareAndCacheClient(credential, quotaProjectIdOverride = process.env[\"GOOGLE_CLOUD_QUOTA_PROJECT\"] || null) {\n    const projectId = await this.getProjectIdOptional();\n    if (quotaProjectIdOverride) {\n        credential.quotaProjectId = quotaProjectIdOverride;\n    }\n    this.cachedCredential = credential;\n    return {\n        credential,\n        projectId\n    };\n}, _GoogleAuth_determineClient = async function _GoogleAuth_determineClient() {\n    if (this.jsonContent) {\n        return this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n    } else if (this.keyFilename) {\n        const filePath = path.resolve(this.keyFilename);\n        const stream = fs.createReadStream(filePath);\n        return await this.fromStreamAsync(stream, this.clientOptions);\n    } else if (this.apiKey) {\n        const client = await this.fromAPIKey(this.apiKey, this.clientOptions);\n        client.scopes = this.scopes;\n        const { credential } = await __classPrivateFieldGet(this, _GoogleAuth_instances, \"m\", _GoogleAuth_prepareAndCacheClient).call(this, client);\n        return credential;\n    } else {\n        const { credential } = await this.getApplicationDefaultAsync(this.clientOptions);\n        return credential;\n    }\n};\n/**\n * Export DefaultTransporter as a static property of the class.\n */ GoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/googleauth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/iam.js":
/*!****************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/iam.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IAMAuth = void 0;\nclass IAMAuth {\n    /**\n     * IAM credentials.\n     *\n     * @param selector the iam authority selector\n     * @param token the token\n     * @constructor\n     */ constructor(selector, token){\n        this.selector = selector;\n        this.token = token;\n        this.selector = selector;\n        this.token = token;\n    }\n    /**\n     * Acquire the HTTP headers required to make an authenticated request.\n     */ getRequestHeaders() {\n        return {\n            \"x-goog-iam-authority-selector\": this.selector,\n            \"x-goog-iam-authorization-token\": this.token\n        };\n    }\n}\nexports.IAMAuth = IAMAuth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9pYW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw0QkFBNEI7QUFDNUIsRUFBRTtBQUNGLGtFQUFrRTtBQUNsRSxtRUFBbUU7QUFDbkUsMENBQTBDO0FBQzFDLEVBQUU7QUFDRixrREFBa0Q7QUFDbEQsRUFBRTtBQUNGLHNFQUFzRTtBQUN0RSxvRUFBb0U7QUFDcEUsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSxpQ0FBaUM7QUFDakNBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUcsS0FBSztBQUN2QixNQUFNRTtJQUNGOzs7Ozs7S0FNQyxHQUNEQyxZQUFZQyxRQUFRLEVBQUVDLEtBQUssQ0FBRTtRQUN6QixJQUFJLENBQUNELFFBQVEsR0FBR0E7UUFDaEIsSUFBSSxDQUFDQyxLQUFLLEdBQUdBO1FBQ2IsSUFBSSxDQUFDRCxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsS0FBSyxHQUFHQTtJQUNqQjtJQUNBOztLQUVDLEdBQ0RDLG9CQUFvQjtRQUNoQixPQUFPO1lBQ0gsaUNBQWlDLElBQUksQ0FBQ0YsUUFBUTtZQUM5QyxrQ0FBa0MsSUFBSSxDQUFDQyxLQUFLO1FBQ2hEO0lBQ0o7QUFDSjtBQUNBTCxlQUFlLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1jb21tZW50ZXIvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9pYW0uanM/YmNmNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDE0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JQU1BdXRoID0gdm9pZCAwO1xuY2xhc3MgSUFNQXV0aCB7XG4gICAgLyoqXG4gICAgICogSUFNIGNyZWRlbnRpYWxzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNlbGVjdG9yIHRoZSBpYW0gYXV0aG9yaXR5IHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHRva2VuIHRoZSB0b2tlblxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbGVjdG9yLCB0b2tlbikge1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFjcXVpcmUgdGhlIEhUVFAgaGVhZGVycyByZXF1aXJlZCB0byBtYWtlIGFuIGF1dGhlbnRpY2F0ZWQgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBnZXRSZXF1ZXN0SGVhZGVycygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd4LWdvb2ctaWFtLWF1dGhvcml0eS1zZWxlY3Rvcic6IHRoaXMuc2VsZWN0b3IsXG4gICAgICAgICAgICAneC1nb29nLWlhbS1hdXRob3JpemF0aW9uLXRva2VuJzogdGhpcy50b2tlbixcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnRzLklBTUF1dGggPSBJQU1BdXRoO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSUFNQXV0aCIsImNvbnN0cnVjdG9yIiwic2VsZWN0b3IiLCJ0b2tlbiIsImdldFJlcXVlc3RIZWFkZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/iam.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/identitypoolclient.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/identitypoolclient.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IdentityPoolClient = void 0;\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-auth-library/build/src/util.js\");\nconst filesubjecttokensupplier_1 = __webpack_require__(/*! ./filesubjecttokensupplier */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/filesubjecttokensupplier.js\");\nconst urlsubjecttokensupplier_1 = __webpack_require__(/*! ./urlsubjecttokensupplier */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js\");\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */ class IdentityPoolClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiate an IdentityPoolClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid file-sourced or\n     * url-sourced credential or a workforce pool user project is provided\n     * with a non workforce audience.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        super(options, additionalOptions);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const credentialSource = opts.get(\"credential_source\");\n        const subjectTokenSupplier = opts.get(\"subject_token_supplier\");\n        // Validate credential sourcing configuration.\n        if (!credentialSource && !subjectTokenSupplier) {\n            throw new Error(\"A credential source or subject token supplier must be specified.\");\n        }\n        if (credentialSource && subjectTokenSupplier) {\n            throw new Error(\"Only one of credential source or subject token supplier can be specified.\");\n        }\n        if (subjectTokenSupplier) {\n            this.subjectTokenSupplier = subjectTokenSupplier;\n            this.credentialSourceType = \"programmatic\";\n        } else {\n            const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n            const formatOpts = (0, util_1.originalOrCamelOptions)(credentialSourceOpts.get(\"format\"));\n            // Text is the default format type.\n            const formatType = formatOpts.get(\"type\") || \"text\";\n            const formatSubjectTokenFieldName = formatOpts.get(\"subject_token_field_name\");\n            if (formatType !== \"json\" && formatType !== \"text\") {\n                throw new Error(`Invalid credential_source format \"${formatType}\"`);\n            }\n            if (formatType === \"json\" && !formatSubjectTokenFieldName) {\n                throw new Error(\"Missing subject_token_field_name for JSON credential_source format\");\n            }\n            const file = credentialSourceOpts.get(\"file\");\n            const url = credentialSourceOpts.get(\"url\");\n            const headers = credentialSourceOpts.get(\"headers\");\n            if (file && url) {\n                throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n            } else if (file && !url) {\n                this.credentialSourceType = \"file\";\n                this.subjectTokenSupplier = new filesubjecttokensupplier_1.FileSubjectTokenSupplier({\n                    filePath: file,\n                    formatType: formatType,\n                    subjectTokenFieldName: formatSubjectTokenFieldName\n                });\n            } else if (!file && url) {\n                this.credentialSourceType = \"url\";\n                this.subjectTokenSupplier = new urlsubjecttokensupplier_1.UrlSubjectTokenSupplier({\n                    url: url,\n                    formatType: formatType,\n                    subjectTokenFieldName: formatSubjectTokenFieldName,\n                    headers: headers,\n                    additionalGaxiosOptions: IdentityPoolClient.RETRY_CONFIG\n                });\n            } else {\n                throw new Error('No valid Identity Pool \"credential_source\" provided, must be either file or url.');\n            }\n        }\n    }\n    /**\n     * Triggered when a external subject token is needed to be exchanged for a GCP\n     * access token via GCP STS endpoint. Gets a subject token by calling\n     * the configured {@link SubjectTokenSupplier}\n     * @return A promise that resolves with the external subject token.\n     */ async retrieveSubjectToken() {\n        return this.subjectTokenSupplier.getSubjectToken(this.supplierContext);\n    }\n}\nexports.IdentityPoolClient = IdentityPoolClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/identitypoolclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/idtokenclient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/idtokenclient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IdTokenClient = void 0;\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nclass IdTokenClient extends oauth2client_1.OAuth2Client {\n    /**\n     * Google ID Token client\n     *\n     * Retrieve ID token from the metadata server.\n     * See: https://cloud.google.com/docs/authentication/get-id-token#metadata-server\n     */ constructor(options){\n        super(options);\n        this.targetAudience = options.targetAudience;\n        this.idTokenProvider = options.idTokenProvider;\n    }\n    async getRequestMetadataAsync(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        if (!this.credentials.id_token || !this.credentials.expiry_date || this.isTokenExpiring()) {\n            const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);\n            this.credentials = {\n                id_token: idToken,\n                expiry_date: this.getIdTokenExpiryDate(idToken)\n            };\n        }\n        const headers = {\n            Authorization: \"Bearer \" + this.credentials.id_token\n        };\n        return {\n            headers\n        };\n    }\n    getIdTokenExpiryDate(idToken) {\n        const payloadB64 = idToken.split(\".\")[1];\n        if (payloadB64) {\n            const payload = JSON.parse(Buffer.from(payloadB64, \"base64\").toString(\"ascii\"));\n            return payload.exp * 1000;\n        }\n    }\n}\nexports.IdTokenClient = IdTokenClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9pZHRva2VuY2xpZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRyxpQkFBaUJDLG1CQUFPQSxDQUFDLCtGQUFnQjtBQUMvQyxNQUFNRixzQkFBc0JDLGVBQWVFLFlBQVk7SUFDbkQ7Ozs7O0tBS0MsR0FDREMsWUFBWUMsT0FBTyxDQUFFO1FBQ2pCLEtBQUssQ0FBQ0E7UUFDTixJQUFJLENBQUNDLGNBQWMsR0FBR0QsUUFBUUMsY0FBYztRQUM1QyxJQUFJLENBQUNDLGVBQWUsR0FBR0YsUUFBUUUsZUFBZTtJQUNsRDtJQUNBLE1BQU1DLHdCQUNOLDZEQUE2RDtJQUM3REMsR0FBRyxFQUFFO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxRQUFRLElBQzFCLENBQUMsSUFBSSxDQUFDRCxXQUFXLENBQUNFLFdBQVcsSUFDN0IsSUFBSSxDQUFDQyxlQUFlLElBQUk7WUFDeEIsTUFBTUMsVUFBVSxNQUFNLElBQUksQ0FBQ1AsZUFBZSxDQUFDUSxZQUFZLENBQUMsSUFBSSxDQUFDVCxjQUFjO1lBQzNFLElBQUksQ0FBQ0ksV0FBVyxHQUFHO2dCQUNmQyxVQUFVRztnQkFDVkYsYUFBYSxJQUFJLENBQUNJLG9CQUFvQixDQUFDRjtZQUMzQztRQUNKO1FBQ0EsTUFBTUcsVUFBVTtZQUNaQyxlQUFlLFlBQVksSUFBSSxDQUFDUixXQUFXLENBQUNDLFFBQVE7UUFDeEQ7UUFDQSxPQUFPO1lBQUVNO1FBQVE7SUFDckI7SUFDQUQscUJBQXFCRixPQUFPLEVBQUU7UUFDMUIsTUFBTUssYUFBYUwsUUFBUU0sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3hDLElBQUlELFlBQVk7WUFDWixNQUFNRSxVQUFVQyxLQUFLQyxLQUFLLENBQUNDLE9BQU9DLElBQUksQ0FBQ04sWUFBWSxVQUFVTyxRQUFRLENBQUM7WUFDdEUsT0FBT0wsUUFBUU0sR0FBRyxHQUFHO1FBQ3pCO0lBQ0o7QUFDSjtBQUNBN0IscUJBQXFCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1jb21tZW50ZXIvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9pZHRva2VuY2xpZW50LmpzPzJiMzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSWRUb2tlbkNsaWVudCA9IHZvaWQgMDtcbmNvbnN0IG9hdXRoMmNsaWVudF8xID0gcmVxdWlyZShcIi4vb2F1dGgyY2xpZW50XCIpO1xuY2xhc3MgSWRUb2tlbkNsaWVudCBleHRlbmRzIG9hdXRoMmNsaWVudF8xLk9BdXRoMkNsaWVudCB7XG4gICAgLyoqXG4gICAgICogR29vZ2xlIElEIFRva2VuIGNsaWVudFxuICAgICAqXG4gICAgICogUmV0cmlldmUgSUQgdG9rZW4gZnJvbSB0aGUgbWV0YWRhdGEgc2VydmVyLlxuICAgICAqIFNlZTogaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2RvY3MvYXV0aGVudGljYXRpb24vZ2V0LWlkLXRva2VuI21ldGFkYXRhLXNlcnZlclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMudGFyZ2V0QXVkaWVuY2UgPSBvcHRpb25zLnRhcmdldEF1ZGllbmNlO1xuICAgICAgICB0aGlzLmlkVG9rZW5Qcm92aWRlciA9IG9wdGlvbnMuaWRUb2tlblByb3ZpZGVyO1xuICAgIH1cbiAgICBhc3luYyBnZXRSZXF1ZXN0TWV0YWRhdGFBc3luYyhcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgdXJsKSB7XG4gICAgICAgIGlmICghdGhpcy5jcmVkZW50aWFscy5pZF90b2tlbiB8fFxuICAgICAgICAgICAgIXRoaXMuY3JlZGVudGlhbHMuZXhwaXJ5X2RhdGUgfHxcbiAgICAgICAgICAgIHRoaXMuaXNUb2tlbkV4cGlyaW5nKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB0aGlzLmlkVG9rZW5Qcm92aWRlci5mZXRjaElkVG9rZW4odGhpcy50YXJnZXRBdWRpZW5jZSk7XG4gICAgICAgICAgICB0aGlzLmNyZWRlbnRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGlkX3Rva2VuOiBpZFRva2VuLFxuICAgICAgICAgICAgICAgIGV4cGlyeV9kYXRlOiB0aGlzLmdldElkVG9rZW5FeHBpcnlEYXRlKGlkVG9rZW4pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogJ0JlYXJlciAnICsgdGhpcy5jcmVkZW50aWFscy5pZF90b2tlbixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgaGVhZGVycyB9O1xuICAgIH1cbiAgICBnZXRJZFRva2VuRXhwaXJ5RGF0ZShpZFRva2VuKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWRCNjQgPSBpZFRva2VuLnNwbGl0KCcuJylbMV07XG4gICAgICAgIGlmIChwYXlsb2FkQjY0KSB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5wYXJzZShCdWZmZXIuZnJvbShwYXlsb2FkQjY0LCAnYmFzZTY0JykudG9TdHJpbmcoJ2FzY2lpJykpO1xuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQuZXhwICogMTAwMDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuSWRUb2tlbkNsaWVudCA9IElkVG9rZW5DbGllbnQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJZFRva2VuQ2xpZW50Iiwib2F1dGgyY2xpZW50XzEiLCJyZXF1aXJlIiwiT0F1dGgyQ2xpZW50IiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwidGFyZ2V0QXVkaWVuY2UiLCJpZFRva2VuUHJvdmlkZXIiLCJnZXRSZXF1ZXN0TWV0YWRhdGFBc3luYyIsInVybCIsImNyZWRlbnRpYWxzIiwiaWRfdG9rZW4iLCJleHBpcnlfZGF0ZSIsImlzVG9rZW5FeHBpcmluZyIsImlkVG9rZW4iLCJmZXRjaElkVG9rZW4iLCJnZXRJZFRva2VuRXhwaXJ5RGF0ZSIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwicGF5bG9hZEI2NCIsInNwbGl0IiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsImV4cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/idtokenclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/impersonated.js":
/*!*************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/impersonated.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Impersonated = exports.IMPERSONATED_ACCOUNT_TYPE = void 0;\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-auth-library/build/src/util.js\");\nexports.IMPERSONATED_ACCOUNT_TYPE = \"impersonated_service_account\";\nclass Impersonated extends oauth2client_1.OAuth2Client {\n    /**\n     * Impersonated service account credentials.\n     *\n     * Create a new access token by impersonating another service account.\n     *\n     * Impersonated Credentials allowing credentials issued to a user or\n     * service account to impersonate another. The source project using\n     * Impersonated Credentials must enable the \"IAMCredentials\" API.\n     * Also, the target service account must grant the orginating principal\n     * the \"Service Account Token Creator\" IAM role.\n     *\n     * @param {object} options - The configuration object.\n     * @param {object} [options.sourceClient] the source credential used as to\n     * acquire the impersonated credentials.\n     * @param {string} [options.targetPrincipal] the service account to\n     * impersonate.\n     * @param {string[]} [options.delegates] the chained list of delegates\n     * required to grant the final access_token. If set, the sequence of\n     * identities must have \"Service Account Token Creator\" capability granted to\n     * the preceding identity. For example, if set to [serviceAccountB,\n     * serviceAccountC], the sourceCredential must have the Token Creator role on\n     * serviceAccountB. serviceAccountB must have the Token Creator on\n     * serviceAccountC. Finally, C must have Token Creator on target_principal.\n     * If left unset, sourceCredential must have that role on targetPrincipal.\n     * @param {string[]} [options.targetScopes] scopes to request during the\n     * authorization grant.\n     * @param {number} [options.lifetime] number of seconds the delegated\n     * credential should be valid for up to 3600 seconds by default, or 43,200\n     * seconds by extending the token's lifetime, see:\n     * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth\n     * @param {string} [options.endpoint] api endpoint override.\n     */ constructor(options = {}){\n        var _a, _b, _c, _d, _e, _f;\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = {\n            expiry_date: 1,\n            refresh_token: \"impersonated-placeholder\"\n        };\n        this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();\n        this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : \"\";\n        this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];\n        this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];\n        this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;\n        const usingExplicitUniverseDomain = !!(0, util_1.originalOrCamelOptions)(options).get(\"universe_domain\");\n        if (!usingExplicitUniverseDomain) {\n            // override the default universe with the source's universe\n            this.universeDomain = this.sourceClient.universeDomain;\n        } else if (this.sourceClient.universeDomain !== this.universeDomain) {\n            // non-default universe and is not matching the source - this could be a credential leak\n            throw new RangeError(`Universe domain ${this.sourceClient.universeDomain} in source credentials does not match ${this.universeDomain} universe domain set for impersonated credentials.`);\n        }\n        this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : `https://iamcredentials.${this.universeDomain}`;\n    }\n    /**\n     * Signs some bytes.\n     *\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob Reference Documentation}\n     * @param blobToSign String to sign.\n     *\n     * @returns A {@link SignBlobResponse} denoting the keyID and signedBlob in base64 string\n     */ async sign(blobToSign) {\n        await this.sourceClient.getAccessToken();\n        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;\n        const u = `${this.endpoint}/v1/${name}:signBlob`;\n        const body = {\n            delegates: this.delegates,\n            payload: Buffer.from(blobToSign).toString(\"base64\")\n        };\n        const res = await this.sourceClient.request({\n            ...Impersonated.RETRY_CONFIG,\n            url: u,\n            data: body,\n            method: \"POST\"\n        });\n        return res.data;\n    }\n    /** The service account email to be impersonated. */ getTargetPrincipal() {\n        return this.targetPrincipal;\n    }\n    /**\n     * Refreshes the access token.\n     */ async refreshToken() {\n        var _a, _b, _c, _d, _e, _f;\n        try {\n            await this.sourceClient.getAccessToken();\n            const name = \"projects/-/serviceAccounts/\" + this.targetPrincipal;\n            const u = `${this.endpoint}/v1/${name}:generateAccessToken`;\n            const body = {\n                delegates: this.delegates,\n                scope: this.targetScopes,\n                lifetime: this.lifetime + \"s\"\n            };\n            const res = await this.sourceClient.request({\n                ...Impersonated.RETRY_CONFIG,\n                url: u,\n                data: body,\n                method: \"POST\"\n            });\n            const tokenResponse = res.data;\n            this.credentials.access_token = tokenResponse.accessToken;\n            this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);\n            return {\n                tokens: this.credentials,\n                res\n            };\n        } catch (error) {\n            if (!(error instanceof Error)) throw error;\n            let status = 0;\n            let message = \"\";\n            if (error instanceof gaxios_1.GaxiosError) {\n                status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;\n                message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;\n            }\n            if (status && message) {\n                error.message = `${status}: unable to impersonate: ${message}`;\n                throw error;\n            } else {\n                error.message = `unable to impersonate: ${error}`;\n                throw error;\n            }\n        }\n    }\n    /**\n     * Generates an OpenID Connect ID token for a service account.\n     *\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateIdToken Reference Documentation}\n     *\n     * @param targetAudience the audience for the fetched ID token.\n     * @param options the for the request\n     * @return an OpenID Connect ID token\n     */ async fetchIdToken(targetAudience, options) {\n        var _a, _b;\n        await this.sourceClient.getAccessToken();\n        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;\n        const u = `${this.endpoint}/v1/${name}:generateIdToken`;\n        const body = {\n            delegates: this.delegates,\n            audience: targetAudience,\n            includeEmail: (_a = options === null || options === void 0 ? void 0 : options.includeEmail) !== null && _a !== void 0 ? _a : true,\n            useEmailAzp: (_b = options === null || options === void 0 ? void 0 : options.includeEmail) !== null && _b !== void 0 ? _b : true\n        };\n        const res = await this.sourceClient.request({\n            ...Impersonated.RETRY_CONFIG,\n            url: u,\n            data: body,\n            method: \"POST\"\n        });\n        return res.data.token;\n    }\n}\nexports.Impersonated = Impersonated;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9pbXBlcnNvbmF0ZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUNEQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLGlDQUFpQyxHQUFHLEtBQUs7QUFDaEUsTUFBTUksaUJBQWlCQyxtQkFBT0EsQ0FBQywrRkFBZ0I7QUFDL0MsTUFBTUMsV0FBV0QsbUJBQU9BLENBQUMsOERBQVE7QUFDakMsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUMsMkVBQVM7QUFDaENMLGlDQUFpQyxHQUFHO0FBQ3BDLE1BQU1FLHFCQUFxQkUsZUFBZUksWUFBWTtJQUNsRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQStCQyxHQUNEQyxZQUFZQyxVQUFVLENBQUMsQ0FBQyxDQUFFO1FBQ3RCLElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDO1FBQ3hCLEtBQUssQ0FBQ047UUFDTixtRUFBbUU7UUFDbkUsK0NBQStDO1FBQy9DLElBQUksQ0FBQ08sV0FBVyxHQUFHO1lBQ2ZDLGFBQWE7WUFDYkMsZUFBZTtRQUNuQjtRQUNBLElBQUksQ0FBQ0MsWUFBWSxHQUFHLENBQUNULEtBQUtELFFBQVFVLFlBQVksTUFBTSxRQUFRVCxPQUFPLEtBQUssSUFBSUEsS0FBSyxJQUFJUCxlQUFlSSxZQUFZO1FBQ2hILElBQUksQ0FBQ2EsZUFBZSxHQUFHLENBQUNULEtBQUtGLFFBQVFXLGVBQWUsTUFBTSxRQUFRVCxPQUFPLEtBQUssSUFBSUEsS0FBSztRQUN2RixJQUFJLENBQUNVLFNBQVMsR0FBRyxDQUFDVCxLQUFLSCxRQUFRWSxTQUFTLE1BQU0sUUFBUVQsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBRTtRQUM3RSxJQUFJLENBQUNVLFlBQVksR0FBRyxDQUFDVCxLQUFLSixRQUFRYSxZQUFZLE1BQU0sUUFBUVQsT0FBTyxLQUFLLElBQUlBLEtBQUssRUFBRTtRQUNuRixJQUFJLENBQUNVLFFBQVEsR0FBRyxDQUFDVCxLQUFLTCxRQUFRYyxRQUFRLE1BQU0sUUFBUVQsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDekUsTUFBTVUsOEJBQThCLENBQUMsQ0FBQyxDQUFDLEdBQUdsQixPQUFPbUIsc0JBQXNCLEVBQUVoQixTQUFTaUIsR0FBRyxDQUFDO1FBQ3RGLElBQUksQ0FBQ0YsNkJBQTZCO1lBQzlCLDJEQUEyRDtZQUMzRCxJQUFJLENBQUNHLGNBQWMsR0FBRyxJQUFJLENBQUNSLFlBQVksQ0FBQ1EsY0FBYztRQUMxRCxPQUNLLElBQUksSUFBSSxDQUFDUixZQUFZLENBQUNRLGNBQWMsS0FBSyxJQUFJLENBQUNBLGNBQWMsRUFBRTtZQUMvRCx3RkFBd0Y7WUFDeEYsTUFBTSxJQUFJQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDVCxZQUFZLENBQUNRLGNBQWMsQ0FBQyxzQ0FBc0MsRUFBRSxJQUFJLENBQUNBLGNBQWMsQ0FBQyxrREFBa0QsQ0FBQztRQUM1TDtRQUNBLElBQUksQ0FBQ0UsUUFBUSxHQUNULENBQUNkLEtBQUtOLFFBQVFvQixRQUFRLE1BQU0sUUFBUWQsT0FBTyxLQUFLLElBQUlBLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLENBQUNZLGNBQWMsQ0FBQyxDQUFDO0lBQ2hIO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE1BQU1HLEtBQUtDLFVBQVUsRUFBRTtRQUNuQixNQUFNLElBQUksQ0FBQ1osWUFBWSxDQUFDYSxjQUFjO1FBQ3RDLE1BQU1DLE9BQU8sQ0FBQywyQkFBMkIsRUFBRSxJQUFJLENBQUNiLGVBQWUsQ0FBQyxDQUFDO1FBQ2pFLE1BQU1jLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQ0wsUUFBUSxDQUFDLElBQUksRUFBRUksS0FBSyxTQUFTLENBQUM7UUFDaEQsTUFBTUUsT0FBTztZQUNUZCxXQUFXLElBQUksQ0FBQ0EsU0FBUztZQUN6QmUsU0FBU0MsT0FBT0MsSUFBSSxDQUFDUCxZQUFZUSxRQUFRLENBQUM7UUFDOUM7UUFDQSxNQUFNQyxNQUFNLE1BQU0sSUFBSSxDQUFDckIsWUFBWSxDQUFDc0IsT0FBTyxDQUFDO1lBQ3hDLEdBQUd4QyxhQUFheUMsWUFBWTtZQUM1QkMsS0FBS1Q7WUFDTFUsTUFBTVQ7WUFDTlUsUUFBUTtRQUNaO1FBQ0EsT0FBT0wsSUFBSUksSUFBSTtJQUNuQjtJQUNBLGtEQUFrRCxHQUNsREUscUJBQXFCO1FBQ2pCLE9BQU8sSUFBSSxDQUFDMUIsZUFBZTtJQUMvQjtJQUNBOztLQUVDLEdBQ0QsTUFBTTJCLGVBQWU7UUFDakIsSUFBSXJDLElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDO1FBQ3hCLElBQUk7WUFDQSxNQUFNLElBQUksQ0FBQ0ksWUFBWSxDQUFDYSxjQUFjO1lBQ3RDLE1BQU1DLE9BQU8sZ0NBQWdDLElBQUksQ0FBQ2IsZUFBZTtZQUNqRSxNQUFNYyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUNMLFFBQVEsQ0FBQyxJQUFJLEVBQUVJLEtBQUssb0JBQW9CLENBQUM7WUFDM0QsTUFBTUUsT0FBTztnQkFDVGQsV0FBVyxJQUFJLENBQUNBLFNBQVM7Z0JBQ3pCMkIsT0FBTyxJQUFJLENBQUMxQixZQUFZO2dCQUN4QkMsVUFBVSxJQUFJLENBQUNBLFFBQVEsR0FBRztZQUM5QjtZQUNBLE1BQU1pQixNQUFNLE1BQU0sSUFBSSxDQUFDckIsWUFBWSxDQUFDc0IsT0FBTyxDQUFDO2dCQUN4QyxHQUFHeEMsYUFBYXlDLFlBQVk7Z0JBQzVCQyxLQUFLVDtnQkFDTFUsTUFBTVQ7Z0JBQ05VLFFBQVE7WUFDWjtZQUNBLE1BQU1JLGdCQUFnQlQsSUFBSUksSUFBSTtZQUM5QixJQUFJLENBQUM1QixXQUFXLENBQUNrQyxZQUFZLEdBQUdELGNBQWNFLFdBQVc7WUFDekQsSUFBSSxDQUFDbkMsV0FBVyxDQUFDQyxXQUFXLEdBQUdtQyxLQUFLQyxLQUFLLENBQUNKLGNBQWNLLFVBQVU7WUFDbEUsT0FBTztnQkFDSEMsUUFBUSxJQUFJLENBQUN2QyxXQUFXO2dCQUN4QndCO1lBQ0o7UUFDSixFQUNBLE9BQU9nQixPQUFPO1lBQ1YsSUFBSSxDQUFFQSxDQUFBQSxpQkFBaUJDLEtBQUksR0FDdkIsTUFBTUQ7WUFDVixJQUFJRSxTQUFTO1lBQ2IsSUFBSUMsVUFBVTtZQUNkLElBQUlILGlCQUFpQm5ELFNBQVN1RCxXQUFXLEVBQUU7Z0JBQ3ZDRixTQUFTLENBQUM5QyxLQUFLLENBQUNELEtBQUssQ0FBQ0QsS0FBSzhDLFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUksS0FBSyxJQUFJQSxNQUFNSyxRQUFRLE1BQU0sUUFBUW5ELE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR2tDLElBQUksTUFBTSxRQUFRakMsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHNkMsS0FBSyxNQUFNLFFBQVE1QyxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUc4QyxNQUFNO2dCQUNwT0MsVUFBVSxDQUFDNUMsS0FBSyxDQUFDRCxLQUFLLENBQUNELEtBQUsyQyxVQUFVLFFBQVFBLFVBQVUsS0FBSyxJQUFJLEtBQUssSUFBSUEsTUFBTUssUUFBUSxNQUFNLFFBQVFoRCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUcrQixJQUFJLE1BQU0sUUFBUTlCLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBRzBDLEtBQUssTUFBTSxRQUFRekMsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHNEMsT0FBTztZQUMxTztZQUNBLElBQUlELFVBQVVDLFNBQVM7Z0JBQ25CSCxNQUFNRyxPQUFPLEdBQUcsQ0FBQyxFQUFFRCxPQUFPLHlCQUF5QixFQUFFQyxRQUFRLENBQUM7Z0JBQzlELE1BQU1IO1lBQ1YsT0FDSztnQkFDREEsTUFBTUcsT0FBTyxHQUFHLENBQUMsdUJBQXVCLEVBQUVILE1BQU0sQ0FBQztnQkFDakQsTUFBTUE7WUFDVjtRQUNKO0lBQ0o7SUFDQTs7Ozs7Ozs7S0FRQyxHQUNELE1BQU1NLGFBQWFDLGNBQWMsRUFBRXRELE9BQU8sRUFBRTtRQUN4QyxJQUFJQyxJQUFJQztRQUNSLE1BQU0sSUFBSSxDQUFDUSxZQUFZLENBQUNhLGNBQWM7UUFDdEMsTUFBTUMsT0FBTyxDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQ2IsZUFBZSxDQUFDLENBQUM7UUFDakUsTUFBTWMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDTCxRQUFRLENBQUMsSUFBSSxFQUFFSSxLQUFLLGdCQUFnQixDQUFDO1FBQ3ZELE1BQU1FLE9BQU87WUFDVGQsV0FBVyxJQUFJLENBQUNBLFNBQVM7WUFDekIyQyxVQUFVRDtZQUNWRSxjQUFjLENBQUN2RCxLQUFLRCxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUXdELFlBQVksTUFBTSxRQUFRdkQsT0FBTyxLQUFLLElBQUlBLEtBQUs7WUFDN0h3RCxhQUFhLENBQUN2RCxLQUFLRixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJLEtBQUssSUFBSUEsUUFBUXdELFlBQVksTUFBTSxRQUFRdEQsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDaEk7UUFDQSxNQUFNNkIsTUFBTSxNQUFNLElBQUksQ0FBQ3JCLFlBQVksQ0FBQ3NCLE9BQU8sQ0FBQztZQUN4QyxHQUFHeEMsYUFBYXlDLFlBQVk7WUFDNUJDLEtBQUtUO1lBQ0xVLE1BQU1UO1lBQ05VLFFBQVE7UUFDWjtRQUNBLE9BQU9MLElBQUlJLElBQUksQ0FBQ3VCLEtBQUs7SUFDekI7QUFDSjtBQUNBcEUsb0JBQW9CLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1jb21tZW50ZXIvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9pbXBlcnNvbmF0ZWQuanM/NWM5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW1wZXJzb25hdGVkID0gZXhwb3J0cy5JTVBFUlNPTkFURURfQUNDT1VOVF9UWVBFID0gdm9pZCAwO1xuY29uc3Qgb2F1dGgyY2xpZW50XzEgPSByZXF1aXJlKFwiLi9vYXV0aDJjbGllbnRcIik7XG5jb25zdCBnYXhpb3NfMSA9IHJlcXVpcmUoXCJnYXhpb3NcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbmV4cG9ydHMuSU1QRVJTT05BVEVEX0FDQ09VTlRfVFlQRSA9ICdpbXBlcnNvbmF0ZWRfc2VydmljZV9hY2NvdW50JztcbmNsYXNzIEltcGVyc29uYXRlZCBleHRlbmRzIG9hdXRoMmNsaWVudF8xLk9BdXRoMkNsaWVudCB7XG4gICAgLyoqXG4gICAgICogSW1wZXJzb25hdGVkIHNlcnZpY2UgYWNjb3VudCBjcmVkZW50aWFscy5cbiAgICAgKlxuICAgICAqIENyZWF0ZSBhIG5ldyBhY2Nlc3MgdG9rZW4gYnkgaW1wZXJzb25hdGluZyBhbm90aGVyIHNlcnZpY2UgYWNjb3VudC5cbiAgICAgKlxuICAgICAqIEltcGVyc29uYXRlZCBDcmVkZW50aWFscyBhbGxvd2luZyBjcmVkZW50aWFscyBpc3N1ZWQgdG8gYSB1c2VyIG9yXG4gICAgICogc2VydmljZSBhY2NvdW50IHRvIGltcGVyc29uYXRlIGFub3RoZXIuIFRoZSBzb3VyY2UgcHJvamVjdCB1c2luZ1xuICAgICAqIEltcGVyc29uYXRlZCBDcmVkZW50aWFscyBtdXN0IGVuYWJsZSB0aGUgXCJJQU1DcmVkZW50aWFsc1wiIEFQSS5cbiAgICAgKiBBbHNvLCB0aGUgdGFyZ2V0IHNlcnZpY2UgYWNjb3VudCBtdXN0IGdyYW50IHRoZSBvcmdpbmF0aW5nIHByaW5jaXBhbFxuICAgICAqIHRoZSBcIlNlcnZpY2UgQWNjb3VudCBUb2tlbiBDcmVhdG9yXCIgSUFNIHJvbGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFRoZSBjb25maWd1cmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuc291cmNlQ2xpZW50XSB0aGUgc291cmNlIGNyZWRlbnRpYWwgdXNlZCBhcyB0b1xuICAgICAqIGFjcXVpcmUgdGhlIGltcGVyc29uYXRlZCBjcmVkZW50aWFscy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudGFyZ2V0UHJpbmNpcGFsXSB0aGUgc2VydmljZSBhY2NvdW50IHRvXG4gICAgICogaW1wZXJzb25hdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29wdGlvbnMuZGVsZWdhdGVzXSB0aGUgY2hhaW5lZCBsaXN0IG9mIGRlbGVnYXRlc1xuICAgICAqIHJlcXVpcmVkIHRvIGdyYW50IHRoZSBmaW5hbCBhY2Nlc3NfdG9rZW4uIElmIHNldCwgdGhlIHNlcXVlbmNlIG9mXG4gICAgICogaWRlbnRpdGllcyBtdXN0IGhhdmUgXCJTZXJ2aWNlIEFjY291bnQgVG9rZW4gQ3JlYXRvclwiIGNhcGFiaWxpdHkgZ3JhbnRlZCB0b1xuICAgICAqIHRoZSBwcmVjZWRpbmcgaWRlbnRpdHkuIEZvciBleGFtcGxlLCBpZiBzZXQgdG8gW3NlcnZpY2VBY2NvdW50QixcbiAgICAgKiBzZXJ2aWNlQWNjb3VudENdLCB0aGUgc291cmNlQ3JlZGVudGlhbCBtdXN0IGhhdmUgdGhlIFRva2VuIENyZWF0b3Igcm9sZSBvblxuICAgICAqIHNlcnZpY2VBY2NvdW50Qi4gc2VydmljZUFjY291bnRCIG11c3QgaGF2ZSB0aGUgVG9rZW4gQ3JlYXRvciBvblxuICAgICAqIHNlcnZpY2VBY2NvdW50Qy4gRmluYWxseSwgQyBtdXN0IGhhdmUgVG9rZW4gQ3JlYXRvciBvbiB0YXJnZXRfcHJpbmNpcGFsLlxuICAgICAqIElmIGxlZnQgdW5zZXQsIHNvdXJjZUNyZWRlbnRpYWwgbXVzdCBoYXZlIHRoYXQgcm9sZSBvbiB0YXJnZXRQcmluY2lwYWwuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29wdGlvbnMudGFyZ2V0U2NvcGVzXSBzY29wZXMgdG8gcmVxdWVzdCBkdXJpbmcgdGhlXG4gICAgICogYXV0aG9yaXphdGlvbiBncmFudC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubGlmZXRpbWVdIG51bWJlciBvZiBzZWNvbmRzIHRoZSBkZWxlZ2F0ZWRcbiAgICAgKiBjcmVkZW50aWFsIHNob3VsZCBiZSB2YWxpZCBmb3IgdXAgdG8gMzYwMCBzZWNvbmRzIGJ5IGRlZmF1bHQsIG9yIDQzLDIwMFxuICAgICAqIHNlY29uZHMgYnkgZXh0ZW5kaW5nIHRoZSB0b2tlbidzIGxpZmV0aW1lLCBzZWU6XG4gICAgICogaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tL2lhbS9kb2NzL2NyZWF0aW5nLXNob3J0LWxpdmVkLXNlcnZpY2UtYWNjb3VudC1jcmVkZW50aWFscyNzYS1jcmVkZW50aWFscy1vYXV0aFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5lbmRwb2ludF0gYXBpIGVuZHBvaW50IG92ZXJyaWRlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZjtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIC8vIFN0YXJ0IHdpdGggYW4gZXhwaXJlZCByZWZyZXNoIHRva2VuLCB3aGljaCB3aWxsIGF1dG9tYXRpY2FsbHkgYmVcbiAgICAgICAgLy8gcmVmcmVzaGVkIGJlZm9yZSB0aGUgZmlyc3QgQVBJIGNhbGwgaXMgbWFkZS5cbiAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IHtcbiAgICAgICAgICAgIGV4cGlyeV9kYXRlOiAxLFxuICAgICAgICAgICAgcmVmcmVzaF90b2tlbjogJ2ltcGVyc29uYXRlZC1wbGFjZWhvbGRlcicsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc291cmNlQ2xpZW50ID0gKF9hID0gb3B0aW9ucy5zb3VyY2VDbGllbnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBvYXV0aDJjbGllbnRfMS5PQXV0aDJDbGllbnQoKTtcbiAgICAgICAgdGhpcy50YXJnZXRQcmluY2lwYWwgPSAoX2IgPSBvcHRpb25zLnRhcmdldFByaW5jaXBhbCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJyc7XG4gICAgICAgIHRoaXMuZGVsZWdhdGVzID0gKF9jID0gb3B0aW9ucy5kZWxlZ2F0ZXMpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IFtdO1xuICAgICAgICB0aGlzLnRhcmdldFNjb3BlcyA9IChfZCA9IG9wdGlvbnMudGFyZ2V0U2NvcGVzKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBbXTtcbiAgICAgICAgdGhpcy5saWZldGltZSA9IChfZSA9IG9wdGlvbnMubGlmZXRpbWUpICE9PSBudWxsICYmIF9lICE9PSB2b2lkIDAgPyBfZSA6IDM2MDA7XG4gICAgICAgIGNvbnN0IHVzaW5nRXhwbGljaXRVbml2ZXJzZURvbWFpbiA9ICEhKDAsIHV0aWxfMS5vcmlnaW5hbE9yQ2FtZWxPcHRpb25zKShvcHRpb25zKS5nZXQoJ3VuaXZlcnNlX2RvbWFpbicpO1xuICAgICAgICBpZiAoIXVzaW5nRXhwbGljaXRVbml2ZXJzZURvbWFpbikge1xuICAgICAgICAgICAgLy8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgdW5pdmVyc2Ugd2l0aCB0aGUgc291cmNlJ3MgdW5pdmVyc2VcbiAgICAgICAgICAgIHRoaXMudW5pdmVyc2VEb21haW4gPSB0aGlzLnNvdXJjZUNsaWVudC51bml2ZXJzZURvbWFpbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNvdXJjZUNsaWVudC51bml2ZXJzZURvbWFpbiAhPT0gdGhpcy51bml2ZXJzZURvbWFpbikge1xuICAgICAgICAgICAgLy8gbm9uLWRlZmF1bHQgdW5pdmVyc2UgYW5kIGlzIG5vdCBtYXRjaGluZyB0aGUgc291cmNlIC0gdGhpcyBjb3VsZCBiZSBhIGNyZWRlbnRpYWwgbGVha1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFVuaXZlcnNlIGRvbWFpbiAke3RoaXMuc291cmNlQ2xpZW50LnVuaXZlcnNlRG9tYWlufSBpbiBzb3VyY2UgY3JlZGVudGlhbHMgZG9lcyBub3QgbWF0Y2ggJHt0aGlzLnVuaXZlcnNlRG9tYWlufSB1bml2ZXJzZSBkb21haW4gc2V0IGZvciBpbXBlcnNvbmF0ZWQgY3JlZGVudGlhbHMuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmRwb2ludCA9XG4gICAgICAgICAgICAoX2YgPSBvcHRpb25zLmVuZHBvaW50KSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiBgaHR0cHM6Ly9pYW1jcmVkZW50aWFscy4ke3RoaXMudW5pdmVyc2VEb21haW59YDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2lnbnMgc29tZSBieXRlcy5cbiAgICAgKlxuICAgICAqIHtAbGluayBodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vaWFtL2RvY3MvcmVmZXJlbmNlL2NyZWRlbnRpYWxzL3Jlc3QvdjEvcHJvamVjdHMuc2VydmljZUFjY291bnRzL3NpZ25CbG9iIFJlZmVyZW5jZSBEb2N1bWVudGF0aW9ufVxuICAgICAqIEBwYXJhbSBibG9iVG9TaWduIFN0cmluZyB0byBzaWduLlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSB7QGxpbmsgU2lnbkJsb2JSZXNwb25zZX0gZGVub3RpbmcgdGhlIGtleUlEIGFuZCBzaWduZWRCbG9iIGluIGJhc2U2NCBzdHJpbmdcbiAgICAgKi9cbiAgICBhc3luYyBzaWduKGJsb2JUb1NpZ24pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zb3VyY2VDbGllbnQuZ2V0QWNjZXNzVG9rZW4oKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IGBwcm9qZWN0cy8tL3NlcnZpY2VBY2NvdW50cy8ke3RoaXMudGFyZ2V0UHJpbmNpcGFsfWA7XG4gICAgICAgIGNvbnN0IHUgPSBgJHt0aGlzLmVuZHBvaW50fS92MS8ke25hbWV9OnNpZ25CbG9iYDtcbiAgICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICAgIGRlbGVnYXRlczogdGhpcy5kZWxlZ2F0ZXMsXG4gICAgICAgICAgICBwYXlsb2FkOiBCdWZmZXIuZnJvbShibG9iVG9TaWduKS50b1N0cmluZygnYmFzZTY0JyksXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuc291cmNlQ2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICAgICAgLi4uSW1wZXJzb25hdGVkLlJFVFJZX0NPTkZJRyxcbiAgICAgICAgICAgIHVybDogdSxcbiAgICAgICAgICAgIGRhdGE6IGJvZHksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXMuZGF0YTtcbiAgICB9XG4gICAgLyoqIFRoZSBzZXJ2aWNlIGFjY291bnQgZW1haWwgdG8gYmUgaW1wZXJzb25hdGVkLiAqL1xuICAgIGdldFRhcmdldFByaW5jaXBhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0UHJpbmNpcGFsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWZyZXNoZXMgdGhlIGFjY2VzcyB0b2tlbi5cbiAgICAgKi9cbiAgICBhc3luYyByZWZyZXNoVG9rZW4oKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zb3VyY2VDbGllbnQuZ2V0QWNjZXNzVG9rZW4oKTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAncHJvamVjdHMvLS9zZXJ2aWNlQWNjb3VudHMvJyArIHRoaXMudGFyZ2V0UHJpbmNpcGFsO1xuICAgICAgICAgICAgY29uc3QgdSA9IGAke3RoaXMuZW5kcG9pbnR9L3YxLyR7bmFtZX06Z2VuZXJhdGVBY2Nlc3NUb2tlbmA7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgICAgIGRlbGVnYXRlczogdGhpcy5kZWxlZ2F0ZXMsXG4gICAgICAgICAgICAgICAgc2NvcGU6IHRoaXMudGFyZ2V0U2NvcGVzLFxuICAgICAgICAgICAgICAgIGxpZmV0aW1lOiB0aGlzLmxpZmV0aW1lICsgJ3MnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuc291cmNlQ2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIC4uLkltcGVyc29uYXRlZC5SRVRSWV9DT05GSUcsXG4gICAgICAgICAgICAgICAgdXJsOiB1LFxuICAgICAgICAgICAgICAgIGRhdGE6IGJvZHksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuUmVzcG9uc2UgPSByZXMuZGF0YTtcbiAgICAgICAgICAgIHRoaXMuY3JlZGVudGlhbHMuYWNjZXNzX3Rva2VuID0gdG9rZW5SZXNwb25zZS5hY2Nlc3NUb2tlbjtcbiAgICAgICAgICAgIHRoaXMuY3JlZGVudGlhbHMuZXhwaXJ5X2RhdGUgPSBEYXRlLnBhcnNlKHRva2VuUmVzcG9uc2UuZXhwaXJlVGltZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRva2VuczogdGhpcy5jcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICByZXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCEoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikpXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gMDtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBnYXhpb3NfMS5HYXhpb3NFcnJvcikge1xuICAgICAgICAgICAgICAgIHN0YXR1cyA9IChfYyA9IChfYiA9IChfYSA9IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5yZXNwb25zZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRhdGEpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5lcnJvcikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnN0YXR1cztcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gKF9mID0gKF9lID0gKF9kID0gZXJyb3IgPT09IG51bGwgfHwgZXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yLnJlc3BvbnNlKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZGF0YSkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmVycm9yKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YubWVzc2FnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0dXMgJiYgbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgPSBgJHtzdGF0dXN9OiB1bmFibGUgdG8gaW1wZXJzb25hdGU6ICR7bWVzc2FnZX1gO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3IubWVzc2FnZSA9IGB1bmFibGUgdG8gaW1wZXJzb25hdGU6ICR7ZXJyb3J9YDtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYW4gT3BlbklEIENvbm5lY3QgSUQgdG9rZW4gZm9yIGEgc2VydmljZSBhY2NvdW50LlxuICAgICAqXG4gICAgICoge0BsaW5rIGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9pYW0vZG9jcy9yZWZlcmVuY2UvY3JlZGVudGlhbHMvcmVzdC92MS9wcm9qZWN0cy5zZXJ2aWNlQWNjb3VudHMvZ2VuZXJhdGVJZFRva2VuIFJlZmVyZW5jZSBEb2N1bWVudGF0aW9ufVxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldEF1ZGllbmNlIHRoZSBhdWRpZW5jZSBmb3IgdGhlIGZldGNoZWQgSUQgdG9rZW4uXG4gICAgICogQHBhcmFtIG9wdGlvbnMgdGhlIGZvciB0aGUgcmVxdWVzdFxuICAgICAqIEByZXR1cm4gYW4gT3BlbklEIENvbm5lY3QgSUQgdG9rZW5cbiAgICAgKi9cbiAgICBhc3luYyBmZXRjaElkVG9rZW4odGFyZ2V0QXVkaWVuY2UsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgYXdhaXQgdGhpcy5zb3VyY2VDbGllbnQuZ2V0QWNjZXNzVG9rZW4oKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IGBwcm9qZWN0cy8tL3NlcnZpY2VBY2NvdW50cy8ke3RoaXMudGFyZ2V0UHJpbmNpcGFsfWA7XG4gICAgICAgIGNvbnN0IHUgPSBgJHt0aGlzLmVuZHBvaW50fS92MS8ke25hbWV9OmdlbmVyYXRlSWRUb2tlbmA7XG4gICAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgICAgICBkZWxlZ2F0ZXM6IHRoaXMuZGVsZWdhdGVzLFxuICAgICAgICAgICAgYXVkaWVuY2U6IHRhcmdldEF1ZGllbmNlLFxuICAgICAgICAgICAgaW5jbHVkZUVtYWlsOiAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaW5jbHVkZUVtYWlsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0cnVlLFxuICAgICAgICAgICAgdXNlRW1haWxBenA6IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5pbmNsdWRlRW1haWwpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuc291cmNlQ2xpZW50LnJlcXVlc3Qoe1xuICAgICAgICAgICAgLi4uSW1wZXJzb25hdGVkLlJFVFJZX0NPTkZJRyxcbiAgICAgICAgICAgIHVybDogdSxcbiAgICAgICAgICAgIGRhdGE6IGJvZHksXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXMuZGF0YS50b2tlbjtcbiAgICB9XG59XG5leHBvcnRzLkltcGVyc29uYXRlZCA9IEltcGVyc29uYXRlZDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkltcGVyc29uYXRlZCIsIklNUEVSU09OQVRFRF9BQ0NPVU5UX1RZUEUiLCJvYXV0aDJjbGllbnRfMSIsInJlcXVpcmUiLCJnYXhpb3NfMSIsInV0aWxfMSIsIk9BdXRoMkNsaWVudCIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsIl9hIiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJfZiIsImNyZWRlbnRpYWxzIiwiZXhwaXJ5X2RhdGUiLCJyZWZyZXNoX3Rva2VuIiwic291cmNlQ2xpZW50IiwidGFyZ2V0UHJpbmNpcGFsIiwiZGVsZWdhdGVzIiwidGFyZ2V0U2NvcGVzIiwibGlmZXRpbWUiLCJ1c2luZ0V4cGxpY2l0VW5pdmVyc2VEb21haW4iLCJvcmlnaW5hbE9yQ2FtZWxPcHRpb25zIiwiZ2V0IiwidW5pdmVyc2VEb21haW4iLCJSYW5nZUVycm9yIiwiZW5kcG9pbnQiLCJzaWduIiwiYmxvYlRvU2lnbiIsImdldEFjY2Vzc1Rva2VuIiwibmFtZSIsInUiLCJib2R5IiwicGF5bG9hZCIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsInJlcyIsInJlcXVlc3QiLCJSRVRSWV9DT05GSUciLCJ1cmwiLCJkYXRhIiwibWV0aG9kIiwiZ2V0VGFyZ2V0UHJpbmNpcGFsIiwicmVmcmVzaFRva2VuIiwic2NvcGUiLCJ0b2tlblJlc3BvbnNlIiwiYWNjZXNzX3Rva2VuIiwiYWNjZXNzVG9rZW4iLCJEYXRlIiwicGFyc2UiLCJleHBpcmVUaW1lIiwidG9rZW5zIiwiZXJyb3IiLCJFcnJvciIsInN0YXR1cyIsIm1lc3NhZ2UiLCJHYXhpb3NFcnJvciIsInJlc3BvbnNlIiwiZmV0Y2hJZFRva2VuIiwidGFyZ2V0QXVkaWVuY2UiLCJhdWRpZW5jZSIsImluY2x1ZGVFbWFpbCIsInVzZUVtYWlsQXpwIiwidG9rZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/impersonated.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/jwtaccess.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/jwtaccess.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JWTAccess = void 0;\nconst jws = __webpack_require__(/*! jws */ \"(rsc)/./node_modules/jws/index.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/google-auth-library/build/src/util.js\");\nconst DEFAULT_HEADER = {\n    alg: \"RS256\",\n    typ: \"JWT\"\n};\nclass JWTAccess {\n    /**\n     * JWTAccess service account credentials.\n     *\n     * Create a new access token by using the credential to create a new JWT token\n     * that's recognized as the access token.\n     *\n     * @param email the service account email address.\n     * @param key the private key that will be used to sign the token.\n     * @param keyId the ID of the private key used to sign the token.\n     */ constructor(email, key, keyId, eagerRefreshThresholdMillis){\n        this.cache = new util_1.LRUCache({\n            capacity: 500,\n            maxAge: 60 * 60 * 1000\n        });\n        this.email = email;\n        this.key = key;\n        this.keyId = keyId;\n        this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1000;\n    }\n    /**\n     * Ensures that we're caching a key appropriately, giving precedence to scopes vs. url\n     *\n     * @param url The URI being authorized.\n     * @param scopes The scope or scopes being authorized\n     * @returns A string that returns the cached key.\n     */ getCachedKey(url, scopes) {\n        let cacheKey = url;\n        if (scopes && Array.isArray(scopes) && scopes.length) {\n            cacheKey = url ? `${url}_${scopes.join(\"_\")}` : `${scopes.join(\"_\")}`;\n        } else if (typeof scopes === \"string\") {\n            cacheKey = url ? `${url}_${scopes}` : scopes;\n        }\n        if (!cacheKey) {\n            throw Error(\"Scopes or url must be provided\");\n        }\n        return cacheKey;\n    }\n    /**\n     * Get a non-expired access token, after refreshing if necessary.\n     *\n     * @param url The URI being authorized.\n     * @param additionalClaims An object with a set of additional claims to\n     * include in the payload.\n     * @returns An object that includes the authorization header.\n     */ getRequestHeaders(url, additionalClaims, scopes) {\n        // Return cached authorization headers, unless we are within\n        // eagerRefreshThresholdMillis ms of them expiring:\n        const key = this.getCachedKey(url, scopes);\n        const cachedToken = this.cache.get(key);\n        const now = Date.now();\n        if (cachedToken && cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {\n            return cachedToken.headers;\n        }\n        const iat = Math.floor(Date.now() / 1000);\n        const exp = JWTAccess.getExpirationTime(iat);\n        let defaultClaims;\n        // Turn scopes into space-separated string\n        if (Array.isArray(scopes)) {\n            scopes = scopes.join(\" \");\n        }\n        // If scopes are specified, sign with scopes\n        if (scopes) {\n            defaultClaims = {\n                iss: this.email,\n                sub: this.email,\n                scope: scopes,\n                exp,\n                iat\n            };\n        } else {\n            defaultClaims = {\n                iss: this.email,\n                sub: this.email,\n                aud: url,\n                exp,\n                iat\n            };\n        }\n        // if additionalClaims are provided, ensure they do not collide with\n        // other required claims.\n        if (additionalClaims) {\n            for(const claim in defaultClaims){\n                if (additionalClaims[claim]) {\n                    throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);\n                }\n            }\n        }\n        const header = this.keyId ? {\n            ...DEFAULT_HEADER,\n            kid: this.keyId\n        } : DEFAULT_HEADER;\n        const payload = Object.assign(defaultClaims, additionalClaims);\n        // Sign the jwt and add it to the cache\n        const signedJWT = jws.sign({\n            header,\n            payload,\n            secret: this.key\n        });\n        const headers = {\n            Authorization: `Bearer ${signedJWT}`\n        };\n        this.cache.set(key, {\n            expiration: exp * 1000,\n            headers\n        });\n        return headers;\n    }\n    /**\n     * Returns an expiration time for the JWT token.\n     *\n     * @param iat The issued at time for the JWT.\n     * @returns An expiration time for the JWT.\n     */ static getExpirationTime(iat) {\n        const exp = iat + 3600; // 3600 seconds = 1 hour\n        return exp;\n    }\n    /**\n     * Create a JWTAccess credentials instance using the given input options.\n     * @param json The input object.\n     */ fromJSON(json) {\n        if (!json) {\n            throw new Error(\"Must pass in a JSON object containing the service account auth settings.\");\n        }\n        if (!json.client_email) {\n            throw new Error(\"The incoming JSON object does not contain a client_email field\");\n        }\n        if (!json.private_key) {\n            throw new Error(\"The incoming JSON object does not contain a private_key field\");\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(()=>callback(), callback);\n        } else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject)=>{\n            if (!inputStream) {\n                reject(new Error(\"Must pass in a stream containing the service account auth settings.\"));\n            }\n            let s = \"\";\n            inputStream.setEncoding(\"utf8\").on(\"data\", (chunk)=>s += chunk).on(\"error\", reject).on(\"end\", ()=>{\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                } catch (err) {\n                    reject(err);\n                }\n            });\n        });\n    }\n}\nexports.JWTAccess = JWTAccess;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/jwtaccess.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/jwtclient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/jwtclient.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.JWT = void 0;\nconst gtoken_1 = __webpack_require__(/*! gtoken */ \"(rsc)/./node_modules/gtoken/build/src/index.js\");\nconst jwtaccess_1 = __webpack_require__(/*! ./jwtaccess */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/jwtaccess.js\");\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId){\n        const opts = optionsOrEmail && typeof optionsOrEmail === \"object\" ? optionsOrEmail : {\n            email: optionsOrEmail,\n            keyFile,\n            key,\n            keyId,\n            scopes,\n            subject\n        };\n        super(opts);\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = {\n            refresh_token: \"jwt-placeholder\",\n            expiry_date: 1\n        };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */ createScoped(scopes) {\n        const jwt = new JWT(this);\n        jwt.scopes = scopes;\n        return jwt;\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */ async getRequestMetadataAsync(url) {\n        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;\n        const useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes() || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n        if (this.subject && this.universeDomain !== authclient_1.DEFAULT_UNIVERSE) {\n            throw new RangeError(`Service Account user is configured for the credential. Domain-wide delegation is not supported in universes other than ${authclient_1.DEFAULT_UNIVERSE}`);\n        }\n        if (!this.apiKey && useSelfSignedJWT) {\n            if (this.additionalClaims && this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return {\n                    headers: this.addSharedMetadataHeaders({\n                        Authorization: `Bearer ${tokens.id_token}`\n                    })\n                };\n            } else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);\n                }\n                let scopes;\n                if (this.hasUserScopes()) {\n                    scopes = this.scopes;\n                } else if (!url) {\n                    scopes = this.defaultScopes;\n                }\n                const useScopes = this.useJWTAccessWithScope || this.universeDomain !== authclient_1.DEFAULT_UNIVERSE;\n                const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, // Scopes take precedent over audience for signing,\n                // so we only provide them if `useJWTAccessWithScope` is on or\n                // if we are in a non-default universe\n                useScopes ? scopes : undefined);\n                return {\n                    headers: this.addSharedMetadataHeaders(headers)\n                };\n            }\n        } else if (this.hasAnyScopes() || this.apiKey) {\n            return super.getRequestMetadataAsync(url);\n        } else {\n            // If no audience, apiKey, or scopes are provided, we should not attempt\n            // to populate any headers:\n            return {\n                headers: {}\n            };\n        }\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */ async fetchIdToken(targetAudience) {\n        // Create a new gToken for fetching an ID token\n        const gtoken = new gtoken_1.GoogleToken({\n            iss: this.email,\n            sub: this.subject,\n            scope: this.scopes || this.defaultScopes,\n            keyFile: this.keyFile,\n            key: this.key,\n            additionalClaims: {\n                target_audience: targetAudience\n            },\n            transporter: this.transporter\n        });\n        await gtoken.getToken({\n            forceRefresh: true\n        });\n        if (!gtoken.idToken) {\n            throw new Error(\"Unknown error: Failed to fetch ID token\");\n        }\n        return gtoken.idToken;\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */ hasUserScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        return this.scopes.length > 0;\n    }\n    /**\n     * Are there any default or user scopes defined.\n     */ hasAnyScopes() {\n        if (this.scopes && this.scopes.length > 0) return true;\n        if (this.defaultScopes && this.defaultScopes.length > 0) return true;\n        return false;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then((r)=>callback(null, r), callback);\n        } else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error(\"No result returned\");\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = \"jwt-placeholder\";\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */ async refreshTokenNoCache(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken({\n            forceRefresh: this.isTokenExpiring()\n        });\n        const tokens = {\n            access_token: token.access_token,\n            token_type: \"Bearer\",\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken\n        };\n        this.emit(\"tokens\", tokens);\n        return {\n            res: null,\n            tokens\n        };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */ createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes || this.defaultScopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n                transporter: this.transporter\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */ fromJSON(json) {\n        if (!json) {\n            throw new Error(\"Must pass in a JSON object containing the service account auth settings.\");\n        }\n        if (!json.client_email) {\n            throw new Error(\"The incoming JSON object does not contain a client_email field\");\n        }\n        if (!json.private_key) {\n            throw new Error(\"The incoming JSON object does not contain a private_key field\");\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n        this.quotaProjectId = json.quota_project_id;\n        this.universeDomain = json.universe_domain || this.universeDomain;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(()=>callback(), callback);\n        } else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject)=>{\n            if (!inputStream) {\n                throw new Error(\"Must pass in a stream containing the service account auth settings.\");\n            }\n            let s = \"\";\n            inputStream.setEncoding(\"utf8\").on(\"error\", reject).on(\"data\", (chunk)=>s += chunk).on(\"end\", ()=>{\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */ fromAPIKey(apiKey) {\n        if (typeof apiKey !== \"string\") {\n            throw new Error(\"Must provide an API Key string.\");\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */ async getCredentials() {\n        if (this.key) {\n            return {\n                private_key: this.key,\n                client_email: this.email\n            };\n        } else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return {\n                private_key: creds.privateKey,\n                client_email: creds.clientEmail\n            };\n        }\n        throw new Error(\"A key or a keyFile must be provided to getCredentials.\");\n    }\n}\nexports.JWT = JWT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/jwtclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/loginticket.js":
/*!************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/loginticket.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LoginTicket = void 0;\nclass LoginTicket {\n    /**\n     * Create a simple class to extract user ID from an ID Token\n     *\n     * @param {string} env Envelope of the jwt\n     * @param {TokenPayload} pay Payload of the jwt\n     * @constructor\n     */ constructor(env, pay){\n        this.envelope = env;\n        this.payload = pay;\n    }\n    getEnvelope() {\n        return this.envelope;\n    }\n    getPayload() {\n        return this.payload;\n    }\n    /**\n     * Create a simple class to extract user ID from an ID Token\n     *\n     * @return The user ID\n     */ getUserId() {\n        const payload = this.getPayload();\n        if (payload && payload.sub) {\n            return payload.sub;\n        }\n        return null;\n    }\n    /**\n     * Returns attributes from the login ticket.  This can contain\n     * various information about the user session.\n     *\n     * @return The envelope and payload\n     */ getAttributes() {\n        return {\n            envelope: this.getEnvelope(),\n            payload: this.getPayload()\n        };\n    }\n}\nexports.LoginTicket = LoginTicket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9sb2dpbnRpY2tldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUs7QUFDM0IsTUFBTUU7SUFDRjs7Ozs7O0tBTUMsR0FDREMsWUFBWUMsR0FBRyxFQUFFQyxHQUFHLENBQUU7UUFDbEIsSUFBSSxDQUFDQyxRQUFRLEdBQUdGO1FBQ2hCLElBQUksQ0FBQ0csT0FBTyxHQUFHRjtJQUNuQjtJQUNBRyxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUNGLFFBQVE7SUFDeEI7SUFDQUcsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDRixPQUFPO0lBQ3ZCO0lBQ0E7Ozs7S0FJQyxHQUNERyxZQUFZO1FBQ1IsTUFBTUgsVUFBVSxJQUFJLENBQUNFLFVBQVU7UUFDL0IsSUFBSUYsV0FBV0EsUUFBUUksR0FBRyxFQUFFO1lBQ3hCLE9BQU9KLFFBQVFJLEdBQUc7UUFDdEI7UUFDQSxPQUFPO0lBQ1g7SUFDQTs7Ozs7S0FLQyxHQUNEQyxnQkFBZ0I7UUFDWixPQUFPO1lBQUVOLFVBQVUsSUFBSSxDQUFDRSxXQUFXO1lBQUlELFNBQVMsSUFBSSxDQUFDRSxVQUFVO1FBQUc7SUFDdEU7QUFDSjtBQUNBVCxtQkFBbUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWNvbW1lbnRlci8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9hdXRoL2xvZ2ludGlja2V0LmpzP2Y3OWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxNCBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTG9naW5UaWNrZXQgPSB2b2lkIDA7XG5jbGFzcyBMb2dpblRpY2tldCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2ltcGxlIGNsYXNzIHRvIGV4dHJhY3QgdXNlciBJRCBmcm9tIGFuIElEIFRva2VuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW52IEVudmVsb3BlIG9mIHRoZSBqd3RcbiAgICAgKiBAcGFyYW0ge1Rva2VuUGF5bG9hZH0gcGF5IFBheWxvYWQgb2YgdGhlIGp3dFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGVudiwgcGF5KSB7XG4gICAgICAgIHRoaXMuZW52ZWxvcGUgPSBlbnY7XG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheTtcbiAgICB9XG4gICAgZ2V0RW52ZWxvcGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudmVsb3BlO1xuICAgIH1cbiAgICBnZXRQYXlsb2FkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXlsb2FkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzaW1wbGUgY2xhc3MgdG8gZXh0cmFjdCB1c2VyIElEIGZyb20gYW4gSUQgVG9rZW5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gVGhlIHVzZXIgSURcbiAgICAgKi9cbiAgICBnZXRVc2VySWQoKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB0aGlzLmdldFBheWxvYWQoKTtcbiAgICAgICAgaWYgKHBheWxvYWQgJiYgcGF5bG9hZC5zdWIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkLnN1YjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhdHRyaWJ1dGVzIGZyb20gdGhlIGxvZ2luIHRpY2tldC4gIFRoaXMgY2FuIGNvbnRhaW5cbiAgICAgKiB2YXJpb3VzIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIHNlc3Npb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIFRoZSBlbnZlbG9wZSBhbmQgcGF5bG9hZFxuICAgICAqL1xuICAgIGdldEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHJldHVybiB7IGVudmVsb3BlOiB0aGlzLmdldEVudmVsb3BlKCksIHBheWxvYWQ6IHRoaXMuZ2V0UGF5bG9hZCgpIH07XG4gICAgfVxufVxuZXhwb3J0cy5Mb2dpblRpY2tldCA9IExvZ2luVGlja2V0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTG9naW5UaWNrZXQiLCJjb25zdHJ1Y3RvciIsImVudiIsInBheSIsImVudmVsb3BlIiwicGF5bG9hZCIsImdldEVudmVsb3BlIiwiZ2V0UGF5bG9hZCIsImdldFVzZXJJZCIsInN1YiIsImdldEF0dHJpYnV0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/loginticket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2client.js":
/*!*************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/oauth2client.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OAuth2Client = exports.ClientAuthentication = exports.CertificateFormat = exports.CodeChallengeMethod = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst stream = __webpack_require__(/*! stream */ \"stream\");\nconst formatEcdsa = __webpack_require__(/*! ecdsa-sig-formatter */ \"(rsc)/./node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js\");\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(rsc)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nconst loginticket_1 = __webpack_require__(/*! ./loginticket */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/loginticket.js\");\nvar CodeChallengeMethod;\n(function(CodeChallengeMethod) {\n    CodeChallengeMethod[\"Plain\"] = \"plain\";\n    CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod || (exports.CodeChallengeMethod = CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function(CertificateFormat) {\n    CertificateFormat[\"PEM\"] = \"PEM\";\n    CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat || (exports.CertificateFormat = CertificateFormat = {}));\n/**\n * The client authentication type. Supported values are basic, post, and none.\n * https://datatracker.ietf.org/doc/html/rfc7591#section-2\n */ var ClientAuthentication;\n(function(ClientAuthentication) {\n    ClientAuthentication[\"ClientSecretPost\"] = \"ClientSecretPost\";\n    ClientAuthentication[\"ClientSecretBasic\"] = \"ClientSecretBasic\";\n    ClientAuthentication[\"None\"] = \"None\";\n})(ClientAuthentication || (exports.ClientAuthentication = ClientAuthentication = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n    constructor(optionsOrClientId, clientSecret, redirectUri){\n        const opts = optionsOrClientId && typeof optionsOrClientId === \"object\" ? optionsOrClientId : {\n            clientId: optionsOrClientId,\n            clientSecret,\n            redirectUri\n        };\n        super(opts);\n        this.certificateCache = {};\n        this.certificateExpiry = null;\n        this.certificateCacheFormat = CertificateFormat.PEM;\n        this.refreshTokenPromises = new Map();\n        this._clientId = opts.clientId;\n        this._clientSecret = opts.clientSecret;\n        this.redirectUri = opts.redirectUri;\n        this.endpoints = {\n            tokenInfoUrl: \"https://oauth2.googleapis.com/tokeninfo\",\n            oauth2AuthBaseUrl: \"https://accounts.google.com/o/oauth2/v2/auth\",\n            oauth2TokenUrl: \"https://oauth2.googleapis.com/token\",\n            oauth2RevokeUrl: \"https://oauth2.googleapis.com/revoke\",\n            oauth2FederatedSignonPemCertsUrl: \"https://www.googleapis.com/oauth2/v1/certs\",\n            oauth2FederatedSignonJwkCertsUrl: \"https://www.googleapis.com/oauth2/v3/certs\",\n            oauth2IapPublicKeyUrl: \"https://www.gstatic.com/iap/verify/public_key\",\n            ...opts.endpoints\n        };\n        this.clientAuthentication = opts.clientAuthentication || ClientAuthentication.ClientSecretPost;\n        this.issuers = opts.issuers || [\n            \"accounts.google.com\",\n            \"https://accounts.google.com\",\n            this.universeDomain\n        ];\n    }\n    /**\n     * Generates URL for consent page landing.\n     * @param opts Options.\n     * @return URL to consent page.\n     */ generateAuthUrl(opts = {}) {\n        if (opts.code_challenge_method && !opts.code_challenge) {\n            throw new Error(\"If a code_challenge_method is provided, code_challenge must be included.\");\n        }\n        opts.response_type = opts.response_type || \"code\";\n        opts.client_id = opts.client_id || this._clientId;\n        opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n        // Allow scopes to be passed either as array or a string\n        if (Array.isArray(opts.scope)) {\n            opts.scope = opts.scope.join(\" \");\n        }\n        const rootUrl = this.endpoints.oauth2AuthBaseUrl.toString();\n        return rootUrl + \"?\" + querystring.stringify(opts);\n    }\n    generateCodeVerifier() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error(\"generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.\");\n    }\n    /**\n     * Convenience method to automatically generate a code_verifier, and its\n     * resulting SHA256. If used, this must be paired with a S256\n     * code_challenge_method.\n     *\n     * For a full example see:\n     * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js\n     */ async generateCodeVerifierAsync() {\n        // base64 encoding uses 6 bits per character, and we want to generate128\n        // characters. 6*128/8 = 96.\n        const crypto = (0, crypto_1.createCrypto)();\n        const randomString = crypto.randomBytesBase64(96);\n        // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n        // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n        // swapping out a few chars.\n        const codeVerifier = randomString.replace(/\\+/g, \"~\").replace(/=/g, \"_\").replace(/\\//g, \"-\");\n        // Generate the base64 encoded SHA256\n        const unencodedCodeChallenge = await crypto.sha256DigestBase64(codeVerifier);\n        // We need to use base64UrlEncoding instead of standard base64\n        const codeChallenge = unencodedCodeChallenge.split(\"=\")[0].replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n        return {\n            codeVerifier,\n            codeChallenge\n        };\n    }\n    getToken(codeOrOptions, callback) {\n        const options = typeof codeOrOptions === \"string\" ? {\n            code: codeOrOptions\n        } : codeOrOptions;\n        if (callback) {\n            this.getTokenAsync(options).then((r)=>callback(null, r.tokens, r.res), (e)=>callback(e, null, e.response));\n        } else {\n            return this.getTokenAsync(options);\n        }\n    }\n    async getTokenAsync(options) {\n        const url = this.endpoints.oauth2TokenUrl.toString();\n        const headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        };\n        const values = {\n            client_id: options.client_id || this._clientId,\n            code_verifier: options.codeVerifier,\n            code: options.code,\n            grant_type: \"authorization_code\",\n            redirect_uri: options.redirect_uri || this.redirectUri\n        };\n        if (this.clientAuthentication === ClientAuthentication.ClientSecretBasic) {\n            const basic = Buffer.from(`${this._clientId}:${this._clientSecret}`);\n            headers[\"Authorization\"] = `Basic ${basic.toString(\"base64\")}`;\n        }\n        if (this.clientAuthentication === ClientAuthentication.ClientSecretPost) {\n            values.client_secret = this._clientSecret;\n        }\n        const res = await this.transporter.request({\n            ...OAuth2Client.RETRY_CONFIG,\n            method: \"POST\",\n            url,\n            data: querystring.stringify(values),\n            headers\n        });\n        const tokens = res.data;\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit(\"tokens\", tokens);\n        return {\n            tokens,\n            res\n        };\n    }\n    /**\n     * Refreshes the access token.\n     * @param refresh_token Existing refresh token.\n     * @private\n     */ async refreshToken(refreshToken) {\n        if (!refreshToken) {\n            return this.refreshTokenNoCache(refreshToken);\n        }\n        // If a request to refresh using the same token has started,\n        // return the same promise.\n        if (this.refreshTokenPromises.has(refreshToken)) {\n            return this.refreshTokenPromises.get(refreshToken);\n        }\n        const p = this.refreshTokenNoCache(refreshToken).then((r)=>{\n            this.refreshTokenPromises.delete(refreshToken);\n            return r;\n        }, (e)=>{\n            this.refreshTokenPromises.delete(refreshToken);\n            throw e;\n        });\n        this.refreshTokenPromises.set(refreshToken, p);\n        return p;\n    }\n    async refreshTokenNoCache(refreshToken) {\n        var _a;\n        if (!refreshToken) {\n            throw new Error(\"No refresh token is set.\");\n        }\n        const url = this.endpoints.oauth2TokenUrl.toString();\n        const data = {\n            refresh_token: refreshToken,\n            client_id: this._clientId,\n            client_secret: this._clientSecret,\n            grant_type: \"refresh_token\"\n        };\n        let res;\n        try {\n            // request for new token\n            res = await this.transporter.request({\n                ...OAuth2Client.RETRY_CONFIG,\n                method: \"POST\",\n                url,\n                data: querystring.stringify(data),\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            });\n        } catch (e) {\n            if (e instanceof gaxios_1.GaxiosError && e.message === \"invalid_grant\" && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) && /ReAuth/i.test(e.response.data.error_description)) {\n                e.message = JSON.stringify(e.response.data);\n            }\n            throw e;\n        }\n        const tokens = res.data;\n        // TODO: de-duplicate this code from a few spots\n        if (res.data && res.data.expires_in) {\n            tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n            delete tokens.expires_in;\n        }\n        this.emit(\"tokens\", tokens);\n        return {\n            tokens,\n            res\n        };\n    }\n    refreshAccessToken(callback) {\n        if (callback) {\n            this.refreshAccessTokenAsync().then((r)=>callback(null, r.credentials, r.res), callback);\n        } else {\n            return this.refreshAccessTokenAsync();\n        }\n    }\n    async refreshAccessTokenAsync() {\n        const r = await this.refreshToken(this.credentials.refresh_token);\n        const tokens = r.tokens;\n        tokens.refresh_token = this.credentials.refresh_token;\n        this.credentials = tokens;\n        return {\n            credentials: this.credentials,\n            res: r.res\n        };\n    }\n    getAccessToken(callback) {\n        if (callback) {\n            this.getAccessTokenAsync().then((r)=>callback(null, r.token, r.res), callback);\n        } else {\n            return this.getAccessTokenAsync();\n        }\n    }\n    async getAccessTokenAsync() {\n        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n        if (shouldRefresh) {\n            if (!this.credentials.refresh_token) {\n                if (this.refreshHandler) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                        return {\n                            token: this.credentials.access_token\n                        };\n                    }\n                } else {\n                    throw new Error(\"No refresh token or refresh handler callback is set.\");\n                }\n            }\n            const r = await this.refreshAccessTokenAsync();\n            if (!r.credentials || r.credentials && !r.credentials.access_token) {\n                throw new Error(\"Could not refresh access token.\");\n            }\n            return {\n                token: r.credentials.access_token,\n                res: r.res\n            };\n        } else {\n            return {\n                token: this.credentials.access_token\n            };\n        }\n    }\n    /**\n     * The main authentication interface.  It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * In OAuth2Client, the result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     * @param url The optional url being authorized\n     */ async getRequestHeaders(url) {\n        const headers = (await this.getRequestMetadataAsync(url)).headers;\n        return headers;\n    }\n    async getRequestMetadataAsync(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    url) {\n        const thisCreds = this.credentials;\n        if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey && !this.refreshHandler) {\n            throw new Error(\"No access, refresh token, API key or refresh handler callback is set.\");\n        }\n        if (thisCreds.access_token && !this.isTokenExpiring()) {\n            thisCreds.token_type = thisCreds.token_type || \"Bearer\";\n            const headers = {\n                Authorization: thisCreds.token_type + \" \" + thisCreds.access_token\n            };\n            return {\n                headers: this.addSharedMetadataHeaders(headers)\n            };\n        }\n        // If refreshHandler exists, call processAndValidateRefreshHandler().\n        if (this.refreshHandler) {\n            const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n            if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                this.setCredentials(refreshedAccessToken);\n                const headers = {\n                    Authorization: \"Bearer \" + this.credentials.access_token\n                };\n                return {\n                    headers: this.addSharedMetadataHeaders(headers)\n                };\n            }\n        }\n        if (this.apiKey) {\n            return {\n                headers: {\n                    \"X-Goog-Api-Key\": this.apiKey\n                }\n            };\n        }\n        let r = null;\n        let tokens = null;\n        try {\n            r = await this.refreshToken(thisCreds.refresh_token);\n            tokens = r.tokens;\n        } catch (err) {\n            const e = err;\n            if (e.response && (e.response.status === 403 || e.response.status === 404)) {\n                e.message = `Could not refresh access token: ${e.message}`;\n            }\n            throw e;\n        }\n        const credentials = this.credentials;\n        credentials.token_type = credentials.token_type || \"Bearer\";\n        tokens.refresh_token = credentials.refresh_token;\n        this.credentials = tokens;\n        const headers = {\n            Authorization: credentials.token_type + \" \" + tokens.access_token\n        };\n        return {\n            headers: this.addSharedMetadataHeaders(headers),\n            res: r.res\n        };\n    }\n    /**\n     * Generates an URL to revoke the given token.\n     * @param token The existing token to be revoked.\n     *\n     * @deprecated use instance method {@link OAuth2Client.getRevokeTokenURL}\n     */ static getRevokeTokenUrl(token) {\n        return new OAuth2Client().getRevokeTokenURL(token).toString();\n    }\n    /**\n     * Generates a URL to revoke the given token.\n     *\n     * @param token The existing token to be revoked.\n     */ getRevokeTokenURL(token) {\n        const url = new URL(this.endpoints.oauth2RevokeUrl);\n        url.searchParams.append(\"token\", token);\n        return url;\n    }\n    revokeToken(token, callback) {\n        const opts = {\n            ...OAuth2Client.RETRY_CONFIG,\n            url: this.getRevokeTokenURL(token).toString(),\n            method: \"POST\"\n        };\n        if (callback) {\n            this.transporter.request(opts).then((r)=>callback(null, r), callback);\n        } else {\n            return this.transporter.request(opts);\n        }\n    }\n    revokeCredentials(callback) {\n        if (callback) {\n            this.revokeCredentialsAsync().then((res)=>callback(null, res), callback);\n        } else {\n            return this.revokeCredentialsAsync();\n        }\n    }\n    async revokeCredentialsAsync() {\n        const token = this.credentials.access_token;\n        this.credentials = {};\n        if (token) {\n            return this.revokeToken(token);\n        } else {\n            throw new Error(\"No access token to revoke.\");\n        }\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then((r)=>callback(null, r), (e)=>{\n                return callback(e, e.response);\n            });\n        } else {\n            return this.requestAsync(opts);\n        }\n    }\n    async requestAsync(opts, reAuthRetried = false) {\n        let r2;\n        try {\n            const r = await this.getRequestMetadataAsync(opts.url);\n            opts.headers = opts.headers || {};\n            if (r.headers && r.headers[\"x-goog-user-project\"]) {\n                opts.headers[\"x-goog-user-project\"] = r.headers[\"x-goog-user-project\"];\n            }\n            if (r.headers && r.headers.Authorization) {\n                opts.headers.Authorization = r.headers.Authorization;\n            }\n            if (this.apiKey) {\n                opts.headers[\"X-Goog-Api-Key\"] = this.apiKey;\n            }\n            r2 = await this.transporter.request(opts);\n        } catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - An access_token and refresh_token were available, but either no\n                //   expiry_date was available or the forceRefreshOnFailure flag is set.\n                //   The absent expiry_date case can happen when developers stash the\n                //   access_token and refresh_token for later use, but the access_token\n                //   fails on the first try because it's expired. Some developers may\n                //   choose to enable forceRefreshOnFailure to mitigate time-related\n                //   errors.\n                // Or the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - No refresh_token was available\n                // - An access_token and a refreshHandler callback were available, but\n                //   either no expiry_date was available or the forceRefreshOnFailure\n                //   flag is set. The access_token fails on the first try because it's\n                //   expired. Some developers may choose to enable forceRefreshOnFailure\n                //   to mitigate time-related errors.\n                const mayRequireRefresh = this.credentials && this.credentials.access_token && this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure);\n                const mayRequireRefreshWithNoRefreshToken = this.credentials && this.credentials.access_token && !this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure) && this.refreshHandler;\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried && isAuthErr && !isReadableStream && mayRequireRefresh) {\n                    await this.refreshAccessTokenAsync();\n                    return this.requestAsync(opts, true);\n                } else if (!reAuthRetried && isAuthErr && !isReadableStream && mayRequireRefreshWithNoRefreshToken) {\n                    const refreshedAccessToken = await this.processAndValidateRefreshHandler();\n                    if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {\n                        this.setCredentials(refreshedAccessToken);\n                    }\n                    return this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return r2;\n    }\n    verifyIdToken(options, callback) {\n        // This function used to accept two arguments instead of an options object.\n        // Check the types to help users upgrade with less pain.\n        // This check can be removed after a 2.0 release.\n        if (callback && typeof callback !== \"function\") {\n            throw new Error(\"This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.\");\n        }\n        if (callback) {\n            this.verifyIdTokenAsync(options).then((r)=>callback(null, r), callback);\n        } else {\n            return this.verifyIdTokenAsync(options);\n        }\n    }\n    async verifyIdTokenAsync(options) {\n        if (!options.idToken) {\n            throw new Error(\"The verifyIdToken method requires an ID Token\");\n        }\n        const response = await this.getFederatedSignonCertsAsync();\n        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, this.issuers, options.maxExpiry);\n        return login;\n    }\n    /**\n     * Obtains information about the provisioned access token.  Especially useful\n     * if you want to check the scopes that were provisioned to a given token.\n     *\n     * @param accessToken Required.  The Access Token for which you want to get\n     * user info.\n     */ async getTokenInfo(accessToken) {\n        const { data } = await this.transporter.request({\n            ...OAuth2Client.RETRY_CONFIG,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                Authorization: `Bearer ${accessToken}`\n            },\n            url: this.endpoints.tokenInfoUrl.toString()\n        });\n        const info = Object.assign({\n            expiry_date: new Date().getTime() + data.expires_in * 1000,\n            scopes: data.scope.split(\" \")\n        }, data);\n        delete info.expires_in;\n        delete info.scope;\n        return info;\n    }\n    getFederatedSignonCerts(callback) {\n        if (callback) {\n            this.getFederatedSignonCertsAsync().then((r)=>callback(null, r.certs, r.res), callback);\n        } else {\n            return this.getFederatedSignonCertsAsync();\n        }\n    }\n    async getFederatedSignonCertsAsync() {\n        const nowTime = new Date().getTime();\n        const format = (0, crypto_1.hasBrowserCrypto)() ? CertificateFormat.JWK : CertificateFormat.PEM;\n        if (this.certificateExpiry && nowTime < this.certificateExpiry.getTime() && this.certificateCacheFormat === format) {\n            return {\n                certs: this.certificateCache,\n                format\n            };\n        }\n        let res;\n        let url;\n        switch(format){\n            case CertificateFormat.PEM:\n                url = this.endpoints.oauth2FederatedSignonPemCertsUrl.toString();\n                break;\n            case CertificateFormat.JWK:\n                url = this.endpoints.oauth2FederatedSignonJwkCertsUrl.toString();\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        try {\n            res = await this.transporter.request({\n                ...OAuth2Client.RETRY_CONFIG,\n                url\n            });\n        } catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        const cacheControl = res ? res.headers[\"cache-control\"] : undefined;\n        let cacheAge = -1;\n        if (cacheControl) {\n            const pattern = new RegExp(\"max-age=([0-9]*)\");\n            const regexResult = pattern.exec(cacheControl);\n            if (regexResult && regexResult.length === 2) {\n                // Cache results with max-age (in seconds)\n                cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n            }\n        }\n        let certificates = {};\n        switch(format){\n            case CertificateFormat.PEM:\n                certificates = res.data;\n                break;\n            case CertificateFormat.JWK:\n                for (const key of res.data.keys){\n                    certificates[key.kid] = key;\n                }\n                break;\n            default:\n                throw new Error(`Unsupported certificate format ${format}`);\n        }\n        const now = new Date();\n        this.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n        this.certificateCache = certificates;\n        this.certificateCacheFormat = format;\n        return {\n            certs: certificates,\n            format,\n            res\n        };\n    }\n    getIapPublicKeys(callback) {\n        if (callback) {\n            this.getIapPublicKeysAsync().then((r)=>callback(null, r.pubkeys, r.res), callback);\n        } else {\n            return this.getIapPublicKeysAsync();\n        }\n    }\n    async getIapPublicKeysAsync() {\n        let res;\n        const url = this.endpoints.oauth2IapPublicKeyUrl.toString();\n        try {\n            res = await this.transporter.request({\n                ...OAuth2Client.RETRY_CONFIG,\n                url\n            });\n        } catch (e) {\n            if (e instanceof Error) {\n                e.message = `Failed to retrieve verification certificates: ${e.message}`;\n            }\n            throw e;\n        }\n        return {\n            pubkeys: res.data,\n            res\n        };\n    }\n    verifySignedJwtWithCerts() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error(\"verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.\");\n    }\n    /**\n     * Verify the id token is signed with the correct certificate\n     * and is from the correct audience.\n     * @param jwt The jwt to verify (The ID Token in this case).\n     * @param certs The array of certs to test the jwt against.\n     * @param requiredAudience The audience to test the jwt against.\n     * @param issuers The allowed issuers of the jwt (Optional).\n     * @param maxExpiry The max expiry the certificate can be (Optional).\n     * @return Returns a promise resolving to LoginTicket on verification.\n     */ async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n        const crypto = (0, crypto_1.createCrypto)();\n        if (!maxExpiry) {\n            maxExpiry = OAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_;\n        }\n        const segments = jwt.split(\".\");\n        if (segments.length !== 3) {\n            throw new Error(\"Wrong number of segments in token: \" + jwt);\n        }\n        const signed = segments[0] + \".\" + segments[1];\n        let signature = segments[2];\n        let envelope;\n        let payload;\n        try {\n            envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n        } catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;\n            }\n            throw err;\n        }\n        if (!envelope) {\n            throw new Error(\"Can't parse token envelope: \" + segments[0]);\n        }\n        try {\n            payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n        } catch (err) {\n            if (err instanceof Error) {\n                err.message = `Can't parse token payload '${segments[0]}`;\n            }\n            throw err;\n        }\n        if (!payload) {\n            throw new Error(\"Can't parse token payload: \" + segments[1]);\n        }\n        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {\n            // If this is not present, then there's no reason to attempt verification\n            throw new Error(\"No pem found for envelope: \" + JSON.stringify(envelope));\n        }\n        const cert = certs[envelope.kid];\n        if (envelope.alg === \"ES256\") {\n            signature = formatEcdsa.joseToDer(signature, \"ES256\").toString(\"base64\");\n        }\n        const verified = await crypto.verify(cert, signed, signature);\n        if (!verified) {\n            throw new Error(\"Invalid token signature: \" + jwt);\n        }\n        if (!payload.iat) {\n            throw new Error(\"No issue time in token: \" + JSON.stringify(payload));\n        }\n        if (!payload.exp) {\n            throw new Error(\"No expiration time in token: \" + JSON.stringify(payload));\n        }\n        const iat = Number(payload.iat);\n        if (isNaN(iat)) throw new Error(\"iat field using invalid format\");\n        const exp = Number(payload.exp);\n        if (isNaN(exp)) throw new Error(\"exp field using invalid format\");\n        const now = new Date().getTime() / 1000;\n        if (exp >= now + maxExpiry) {\n            throw new Error(\"Expiration time too far in future: \" + JSON.stringify(payload));\n        }\n        const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n        const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n        if (now < earliest) {\n            throw new Error(\"Token used too early, \" + now + \" < \" + earliest + \": \" + JSON.stringify(payload));\n        }\n        if (now > latest) {\n            throw new Error(\"Token used too late, \" + now + \" > \" + latest + \": \" + JSON.stringify(payload));\n        }\n        if (issuers && issuers.indexOf(payload.iss) < 0) {\n            throw new Error(\"Invalid issuer, expected one of [\" + issuers + \"], but got \" + payload.iss);\n        }\n        // Check the audience matches if we have one\n        if (typeof requiredAudience !== \"undefined\" && requiredAudience !== null) {\n            const aud = payload.aud;\n            let audVerified = false;\n            // If the requiredAudience is an array, check if it contains token\n            // audience\n            if (requiredAudience.constructor === Array) {\n                audVerified = requiredAudience.indexOf(aud) > -1;\n            } else {\n                audVerified = aud === requiredAudience;\n            }\n            if (!audVerified) {\n                throw new Error(\"Wrong recipient, payload audience != requiredAudience\");\n            }\n        }\n        return new loginticket_1.LoginTicket(envelope, payload);\n    }\n    /**\n     * Returns a promise that resolves with AccessTokenResponse type if\n     * refreshHandler is defined.\n     * If not, nothing is returned.\n     */ async processAndValidateRefreshHandler() {\n        if (this.refreshHandler) {\n            const accessTokenResponse = await this.refreshHandler();\n            if (!accessTokenResponse.access_token) {\n                throw new Error(\"No access token is returned by the refreshHandler callback.\");\n            }\n            return accessTokenResponse;\n        }\n        return;\n    }\n    /**\n     * Returns true if a token is expired or will expire within\n     * eagerRefreshThresholdMillismilliseconds.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     */ isTokenExpiring() {\n        const expiryDate = this.credentials.expiry_date;\n        return expiryDate ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis : false;\n    }\n}\nexports.OAuth2Client = OAuth2Client;\n/**\n * @deprecated use instance's {@link OAuth2Client.endpoints}\n */ OAuth2Client.GOOGLE_TOKEN_INFO_URL = \"https://oauth2.googleapis.com/tokeninfo\";\n/**\n * Clock skew - five minutes in seconds\n */ OAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * The default max Token Lifetime is one day in seconds\n */ OAuth2Client.DEFAULT_MAX_TOKEN_LIFETIME_SECS_ = 86400;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2common.js":
/*!*************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/oauth2common.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OAuthClientAuthHandler = void 0;\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst crypto_1 = __webpack_require__(/*! ../crypto/crypto */ \"(rsc)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\n/** List of HTTP methods that accept request bodies. */ const METHODS_SUPPORTING_REQUEST_BODY = [\n    \"PUT\",\n    \"POST\",\n    \"PATCH\"\n];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */ class OAuthClientAuthHandler {\n    /**\n     * Instantiates an OAuth client authentication handler.\n     * @param clientAuthentication The client auth credentials.\n     */ constructor(clientAuthentication){\n        this.clientAuthentication = clientAuthentication;\n        this.crypto = (0, crypto_1.createCrypto)();\n    }\n    /**\n     * Applies client authentication on the OAuth request's headers or POST\n     * body but does not process the request.\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */ applyClientAuthenticationOptions(opts, bearerToken) {\n        // Inject authenticated header.\n        this.injectAuthenticatedHeaders(opts, bearerToken);\n        // Inject authenticated request body.\n        if (!bearerToken) {\n            this.injectAuthenticatedRequestBody(opts);\n        }\n    }\n    /**\n     * Applies client authentication on the request's header if either\n     * basic authentication or bearer token authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */ injectAuthenticatedHeaders(opts, bearerToken) {\n        var _a;\n        // Bearer token prioritized higher than basic Auth.\n        if (bearerToken) {\n            opts.headers = opts.headers || {};\n            Object.assign(opts.headers, {\n                Authorization: `Bearer ${bearerToken}}`\n            });\n        } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === \"basic\") {\n            opts.headers = opts.headers || {};\n            const clientId = this.clientAuthentication.clientId;\n            const clientSecret = this.clientAuthentication.clientSecret || \"\";\n            const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\n            Object.assign(opts.headers, {\n                Authorization: `Basic ${base64EncodedCreds}`\n            });\n        }\n    }\n    /**\n     * Applies client authentication on the request's body if request-body\n     * client authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     */ injectAuthenticatedRequestBody(opts) {\n        var _a;\n        if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === \"request-body\") {\n            const method = (opts.method || \"GET\").toUpperCase();\n            // Inject authenticated request body.\n            if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\n                // Get content-type.\n                let contentType;\n                const headers = opts.headers || {};\n                for(const key in headers){\n                    if (key.toLowerCase() === \"content-type\" && headers[key]) {\n                        contentType = headers[key].toLowerCase();\n                        break;\n                    }\n                }\n                if (contentType === \"application/x-www-form-urlencoded\") {\n                    opts.data = opts.data || \"\";\n                    const data = querystring.parse(opts.data);\n                    Object.assign(data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || \"\"\n                    });\n                    opts.data = querystring.stringify(data);\n                } else if (contentType === \"application/json\") {\n                    opts.data = opts.data || {};\n                    Object.assign(opts.data, {\n                        client_id: this.clientAuthentication.clientId,\n                        client_secret: this.clientAuthentication.clientSecret || \"\"\n                    });\n                } else {\n                    throw new Error(`${contentType} content-types are not supported with ` + `${this.clientAuthentication.confidentialClientType} ` + \"client authentication\");\n                }\n            } else {\n                throw new Error(`${method} HTTP method does not support ` + `${this.clientAuthentication.confidentialClientType} ` + \"client authentication\");\n            }\n        }\n    }\n    /**\n     * Retry config for Auth-related requests.\n     *\n     * @remarks\n     *\n     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n     * config as some downstream APIs would prefer if customers explicitly enable retries,\n     * such as GCS.\n     */ static get RETRY_CONFIG() {\n        return {\n            retry: true,\n            retryConfig: {\n                httpMethodsToRetry: [\n                    \"GET\",\n                    \"PUT\",\n                    \"POST\",\n                    \"HEAD\",\n                    \"OPTIONS\",\n                    \"DELETE\"\n                ]\n            }\n        };\n    }\n}\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */ function getErrorFromOAuthErrorResponse(resp, err) {\n    // Error response.\n    const errorCode = resp.error;\n    const errorDescription = resp.error_description;\n    const errorUri = resp.error_uri;\n    let message = `Error code ${errorCode}`;\n    if (typeof errorDescription !== \"undefined\") {\n        message += `: ${errorDescription}`;\n    }\n    if (typeof errorUri !== \"undefined\") {\n        message += ` - ${errorUri}`;\n    }\n    const newError = new Error(message);\n    // Copy properties from original error to newly generated error.\n    if (err) {\n        const keys = Object.keys(err);\n        if (err.stack) {\n            // Copy error.stack if available.\n            keys.push(\"stack\");\n        }\n        keys.forEach((key)=>{\n            // Do not overwrite the message field.\n            if (key !== \"message\") {\n                Object.defineProperty(newError, key, {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    value: err[key],\n                    writable: false,\n                    enumerable: true\n                });\n            }\n        });\n    }\n    return newError;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/passthrough.js":
/*!************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/passthrough.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PassThroughClient = void 0;\nconst authclient_1 = __webpack_require__(/*! ./authclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\n/**\n * An AuthClient without any Authentication information. Useful for:\n * - Anonymous access\n * - Local Emulators\n * - Testing Environments\n *\n */ class PassThroughClient extends authclient_1.AuthClient {\n    /**\n     * Creates a request without any authentication headers or checks.\n     *\n     * @remarks\n     *\n     * In testing environments it may be useful to change the provided\n     * {@link AuthClient.transporter} for any desired request overrides/handling.\n     *\n     * @param opts\n     * @returns The response of the request.\n     */ async request(opts) {\n        return this.transporter.request(opts);\n    }\n    /**\n     * A required method of the base class.\n     * Always will return an empty object.\n     *\n     * @returns {}\n     */ async getAccessToken() {\n        return {};\n    }\n    /**\n     * A required method of the base class.\n     * Always will return an empty object.\n     *\n     * @returns {}\n     */ async getRequestHeaders() {\n        return {};\n    }\n}\nexports.PassThroughClient = PassThroughClient;\nconst a = new PassThroughClient();\na.getAccessToken();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9wYXNzdGhyb3VnaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHLEtBQUs7QUFDakMsTUFBTUcsZUFBZUMsbUJBQU9BLENBQUMsMkZBQWM7QUFDM0M7Ozs7OztDQU1DLEdBQ0QsTUFBTUYsMEJBQTBCQyxhQUFhRSxVQUFVO0lBQ25EOzs7Ozs7Ozs7O0tBVUMsR0FDRCxNQUFNQyxRQUFRQyxJQUFJLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0YsT0FBTyxDQUFDQztJQUNwQztJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTUUsaUJBQWlCO1FBQ25CLE9BQU8sQ0FBQztJQUNaO0lBQ0E7Ozs7O0tBS0MsR0FDRCxNQUFNQyxvQkFBb0I7UUFDdEIsT0FBTyxDQUFDO0lBQ1o7QUFDSjtBQUNBVix5QkFBeUIsR0FBR0U7QUFDNUIsTUFBTVMsSUFBSSxJQUFJVDtBQUNkUyxFQUFFRixjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1jb21tZW50ZXIvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC9wYXNzdGhyb3VnaC5qcz8zMWE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMjQgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBhc3NUaHJvdWdoQ2xpZW50ID0gdm9pZCAwO1xuY29uc3QgYXV0aGNsaWVudF8xID0gcmVxdWlyZShcIi4vYXV0aGNsaWVudFwiKTtcbi8qKlxuICogQW4gQXV0aENsaWVudCB3aXRob3V0IGFueSBBdXRoZW50aWNhdGlvbiBpbmZvcm1hdGlvbi4gVXNlZnVsIGZvcjpcbiAqIC0gQW5vbnltb3VzIGFjY2Vzc1xuICogLSBMb2NhbCBFbXVsYXRvcnNcbiAqIC0gVGVzdGluZyBFbnZpcm9ubWVudHNcbiAqXG4gKi9cbmNsYXNzIFBhc3NUaHJvdWdoQ2xpZW50IGV4dGVuZHMgYXV0aGNsaWVudF8xLkF1dGhDbGllbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXF1ZXN0IHdpdGhvdXQgYW55IGF1dGhlbnRpY2F0aW9uIGhlYWRlcnMgb3IgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKlxuICAgICAqIEluIHRlc3RpbmcgZW52aXJvbm1lbnRzIGl0IG1heSBiZSB1c2VmdWwgdG8gY2hhbmdlIHRoZSBwcm92aWRlZFxuICAgICAqIHtAbGluayBBdXRoQ2xpZW50LnRyYW5zcG9ydGVyfSBmb3IgYW55IGRlc2lyZWQgcmVxdWVzdCBvdmVycmlkZXMvaGFuZGxpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0c1xuICAgICAqIEByZXR1cm5zIFRoZSByZXNwb25zZSBvZiB0aGUgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBhc3luYyByZXF1ZXN0KG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNwb3J0ZXIucmVxdWVzdChvcHRzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSByZXF1aXJlZCBtZXRob2Qgb2YgdGhlIGJhc2UgY2xhc3MuXG4gICAgICogQWx3YXlzIHdpbGwgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt9XG4gICAgICovXG4gICAgYXN5bmMgZ2V0QWNjZXNzVG9rZW4oKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQSByZXF1aXJlZCBtZXRob2Qgb2YgdGhlIGJhc2UgY2xhc3MuXG4gICAgICogQWx3YXlzIHdpbGwgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt9XG4gICAgICovXG4gICAgYXN5bmMgZ2V0UmVxdWVzdEhlYWRlcnMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59XG5leHBvcnRzLlBhc3NUaHJvdWdoQ2xpZW50ID0gUGFzc1Rocm91Z2hDbGllbnQ7XG5jb25zdCBhID0gbmV3IFBhc3NUaHJvdWdoQ2xpZW50KCk7XG5hLmdldEFjY2Vzc1Rva2VuKCk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJQYXNzVGhyb3VnaENsaWVudCIsImF1dGhjbGllbnRfMSIsInJlcXVpcmUiLCJBdXRoQ2xpZW50IiwicmVxdWVzdCIsIm9wdHMiLCJ0cmFuc3BvcnRlciIsImdldEFjY2Vzc1Rva2VuIiwiZ2V0UmVxdWVzdEhlYWRlcnMiLCJhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/passthrough.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PluggableAuthClient = exports.ExecutableError = void 0;\nconst baseexternalclient_1 = __webpack_require__(/*! ./baseexternalclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nconst executable_response_1 = __webpack_require__(/*! ./executable-response */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/executable-response.js\");\nconst pluggable_auth_handler_1 = __webpack_require__(/*! ./pluggable-auth-handler */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js\");\n/**\n * Error thrown from the executable run by PluggableAuthClient.\n */ class ExecutableError extends Error {\n    constructor(message, code){\n        super(`The executable failed with exit code: ${code} and error message: ${message}.`);\n        this.code = code;\n        Object.setPrototypeOf(this, new.target.prototype);\n    }\n}\nexports.ExecutableError = ExecutableError;\n/**\n * The default executable timeout when none is provided, in milliseconds.\n */ const DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1000;\n/**\n * The minimum allowed executable timeout in milliseconds.\n */ const MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1000;\n/**\n * The maximum allowed executable timeout in milliseconds.\n */ const MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1000;\n/**\n * The environment variable to check to see if executable can be run.\n * Value must be set to '1' for the executable to run.\n */ const GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = \"GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES\";\n/**\n * The maximum currently supported executable version.\n */ const MAXIMUM_EXECUTABLE_VERSION = 1;\n/**\n * PluggableAuthClient enables the exchange of workload identity pool external credentials for\n * Google access tokens by retrieving 3rd party tokens through a user supplied executable. These\n * scripts/executables are completely independent of the Google Cloud Auth libraries. These\n * credentials plug into ADC and will call the specified executable to retrieve the 3rd party token\n * to be exchanged for a Google access token.\n *\n * <p>To use these credentials, the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment variable\n * must be set to '1'. This is for security reasons.\n *\n * <p>Both OIDC and SAML are supported. The executable must adhere to a specific response format\n * defined below.\n *\n * <p>The executable must print out the 3rd party token to STDOUT in JSON format. When an\n * output_file is specified in the credential configuration, the executable must also handle writing the\n * JSON response to this file.\n *\n * <pre>\n * OIDC response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n *   \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * SAML2 response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n *   \"saml_response\": \"...\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * Error response sample:\n * {\n *   \"version\": 1,\n *   \"success\": false,\n *   \"code\": \"401\",\n *   \"message\": \"Error message.\"\n * }\n * </pre>\n *\n * <p>The \"expiration_time\" field in the JSON response is only required for successful\n * responses when an output file was specified in the credential configuration\n *\n * <p>The auth libraries will populate certain environment variables that will be accessible by the\n * executable, such as: GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE, GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE,\n * GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE, GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL, and\n * GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE.\n *\n * <p>Please see this repositories README for a complete executable request/response specification.\n */ class PluggableAuthClient extends baseexternalclient_1.BaseExternalAccountClient {\n    /**\n     * Instantiates a PluggableAuthClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid pluggable auth credential.\n     * @param options The external account options object typically loaded from\n     *   the external account JSON credential file.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */ constructor(options, additionalOptions){\n        super(options, additionalOptions);\n        if (!options.credential_source.executable) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        this.command = options.credential_source.executable.command;\n        if (!this.command) {\n            throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n        }\n        // Check if the provided timeout exists and if it is valid.\n        if (options.credential_source.executable.timeout_millis === undefined) {\n            this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;\n        } else {\n            this.timeoutMillis = options.credential_source.executable.timeout_millis;\n            if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS || this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {\n                throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ` + `${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);\n            }\n        }\n        this.outputFile = options.credential_source.executable.output_file;\n        this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({\n            command: this.command,\n            timeoutMillis: this.timeoutMillis,\n            outputFile: this.outputFile\n        });\n        this.credentialSourceType = \"executable\";\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint.\n     * This uses the `options.credential_source` object to figure out how\n     * to retrieve the token using the current environment. In this case,\n     * this calls a user provided executable which returns the subject token.\n     * The logic is summarized as:\n     * 1. Validated that the executable is allowed to run. The\n     *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to\n     *    1 for security reasons.\n     * 2. If an output file is specified by the user, check the file location\n     *    for a response. If the file exists and contains a valid response,\n     *    return the subject token from the file.\n     * 3. Call the provided executable and return response.\n     * @return A promise that resolves with the external subject token.\n     */ async retrieveSubjectToken() {\n        // Check if the executable is allowed to run.\n        if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== \"1\") {\n            throw new Error(\"Pluggable Auth executables need to be explicitly allowed to run by \" + \"setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment \" + \"Variable to 1.\");\n        }\n        let executableResponse = undefined;\n        // Try to get cached executable response from output file.\n        if (this.outputFile) {\n            executableResponse = await this.handler.retrieveCachedResponse();\n        }\n        // If no response from output file, call the executable.\n        if (!executableResponse) {\n            // Set up environment map with required values for the executable.\n            const envMap = new Map();\n            envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE\", this.audience);\n            envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE\", this.subjectTokenType);\n            // Always set to 0 because interactive mode is not supported.\n            envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE\", \"0\");\n            if (this.outputFile) {\n                envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE\", this.outputFile);\n            }\n            const serviceAccountEmail = this.getServiceAccountEmail();\n            if (serviceAccountEmail) {\n                envMap.set(\"GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL\", serviceAccountEmail);\n            }\n            executableResponse = await this.handler.retrieveResponseFromExecutable(envMap);\n        }\n        if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {\n            throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);\n        }\n        // Check that response was successful.\n        if (!executableResponse.success) {\n            throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);\n        }\n        // Check that response contains expiration time if output file was specified.\n        if (this.outputFile) {\n            if (!executableResponse.expirationTime) {\n                throw new executable_response_1.InvalidExpirationTimeFieldError(\"The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.\");\n            }\n        }\n        // Check that response is not expired.\n        if (executableResponse.isExpired()) {\n            throw new Error(\"Executable response is expired.\");\n        }\n        // Return subject token from response.\n        return executableResponse.subjectToken;\n    }\n}\nexports.PluggableAuthClient = PluggableAuthClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PluggableAuthHandler = void 0;\nconst pluggable_auth_client_1 = __webpack_require__(/*! ./pluggable-auth-client */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\");\nconst executable_response_1 = __webpack_require__(/*! ./executable-response */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/executable-response.js\");\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n/**\n * A handler used to retrieve 3rd party token responses from user defined\n * executables and cached file output for the PluggableAuthClient class.\n */ class PluggableAuthHandler {\n    /**\n     * Instantiates a PluggableAuthHandler instance using the provided\n     * PluggableAuthHandlerOptions object.\n     */ constructor(options){\n        if (!options.command) {\n            throw new Error(\"No command provided.\");\n        }\n        this.commandComponents = PluggableAuthHandler.parseCommand(options.command);\n        this.timeoutMillis = options.timeoutMillis;\n        if (!this.timeoutMillis) {\n            throw new Error(\"No timeoutMillis provided.\");\n        }\n        this.outputFile = options.outputFile;\n    }\n    /**\n     * Calls user provided executable to get a 3rd party subject token and\n     * returns the response.\n     * @param envMap a Map of additional Environment Variables required for\n     *   the executable.\n     * @return A promise that resolves with the executable response.\n     */ retrieveResponseFromExecutable(envMap) {\n        return new Promise((resolve, reject)=>{\n            // Spawn process to run executable using added environment variables.\n            const child = childProcess.spawn(this.commandComponents[0], this.commandComponents.slice(1), {\n                env: {\n                    ...process.env,\n                    ...Object.fromEntries(envMap)\n                }\n            });\n            let output = \"\";\n            // Append stdout to output as executable runs.\n            child.stdout.on(\"data\", (data)=>{\n                output += data;\n            });\n            // Append stderr as executable runs.\n            child.stderr.on(\"data\", (err)=>{\n                output += err;\n            });\n            // Set up a timeout to end the child process and throw an error.\n            const timeout = setTimeout(()=>{\n                // Kill child process and remove listeners so 'close' event doesn't get\n                // read after child process is killed.\n                child.removeAllListeners();\n                child.kill();\n                return reject(new Error(\"The executable failed to finish within the timeout specified.\"));\n            }, this.timeoutMillis);\n            child.on(\"close\", (code)=>{\n                // Cancel timeout if executable closes before timeout is reached.\n                clearTimeout(timeout);\n                if (code === 0) {\n                    // If the executable completed successfully, try to return the parsed response.\n                    try {\n                        const responseJson = JSON.parse(output);\n                        const response = new executable_response_1.ExecutableResponse(responseJson);\n                        return resolve(response);\n                    } catch (error) {\n                        if (error instanceof executable_response_1.ExecutableResponseError) {\n                            return reject(error);\n                        }\n                        return reject(new executable_response_1.ExecutableResponseError(`The executable returned an invalid response: ${output}`));\n                    }\n                } else {\n                    return reject(new pluggable_auth_client_1.ExecutableError(output, code.toString()));\n                }\n            });\n        });\n    }\n    /**\n     * Checks user provided output file for response from previous run of\n     * executable and return the response if it exists, is formatted correctly, and is not expired.\n     */ async retrieveCachedResponse() {\n        if (!this.outputFile || this.outputFile.length === 0) {\n            return undefined;\n        }\n        let filePath;\n        try {\n            filePath = await fs.promises.realpath(this.outputFile);\n        } catch (_a) {\n            // If file path cannot be resolved, return undefined.\n            return undefined;\n        }\n        if (!(await fs.promises.lstat(filePath)).isFile()) {\n            // If path does not lead to file, return undefined.\n            return undefined;\n        }\n        const responseString = await fs.promises.readFile(filePath, {\n            encoding: \"utf8\"\n        });\n        if (responseString === \"\") {\n            return undefined;\n        }\n        try {\n            const responseJson = JSON.parse(responseString);\n            const response = new executable_response_1.ExecutableResponse(responseJson);\n            // Check if response is successful and unexpired.\n            if (response.isValid()) {\n                return new executable_response_1.ExecutableResponse(responseJson);\n            }\n            return undefined;\n        } catch (error) {\n            if (error instanceof executable_response_1.ExecutableResponseError) {\n                throw error;\n            }\n            throw new executable_response_1.ExecutableResponseError(`The output file contained an invalid response: ${responseString}`);\n        }\n    }\n    /**\n     * Parses given command string into component array, splitting on spaces unless\n     * spaces are between quotation marks.\n     */ static parseCommand(command) {\n        // Split the command into components by splitting on spaces,\n        // unless spaces are contained in quotation marks.\n        const components = command.match(/(?:[^\\s\"]+|\"[^\"]*\")+/g);\n        if (!components) {\n            throw new Error(`Provided command: \"${command}\" could not be parsed.`);\n        }\n        // Remove quotation marks from the beginning and end of each component if they are present.\n        for(let i = 0; i < components.length; i++){\n            if (components[i][0] === '\"' && components[i].slice(-1) === '\"') {\n                components[i] = components[i].slice(1, -1);\n            }\n        }\n        return components;\n    }\n}\nexports.PluggableAuthHandler = PluggableAuthHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/refreshclient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/refreshclient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2015 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UserRefreshClient = exports.USER_REFRESH_ACCOUNT_TYPE = void 0;\nconst oauth2client_1 = __webpack_require__(/*! ./oauth2client */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nconst querystring_1 = __webpack_require__(/*! querystring */ \"querystring\");\nexports.USER_REFRESH_ACCOUNT_TYPE = \"authorized_user\";\nclass UserRefreshClient extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure){\n        const opts = optionsOrClientId && typeof optionsOrClientId === \"object\" ? optionsOrClientId : {\n            clientId: optionsOrClientId,\n            clientSecret,\n            refreshToken,\n            eagerRefreshThresholdMillis,\n            forceRefreshOnFailure\n        };\n        super(opts);\n        this._refreshToken = opts.refreshToken;\n        this.credentials.refresh_token = opts.refreshToken;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken An ignored refreshToken..\n     * @param callback Optional callback.\n     */ async refreshTokenNoCache(// eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        return super.refreshTokenNoCache(this._refreshToken);\n    }\n    async fetchIdToken(targetAudience) {\n        const res = await this.transporter.request({\n            ...UserRefreshClient.RETRY_CONFIG,\n            url: this.endpoints.oauth2TokenUrl,\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            method: \"POST\",\n            data: (0, querystring_1.stringify)({\n                client_id: this._clientId,\n                client_secret: this._clientSecret,\n                grant_type: \"refresh_token\",\n                refresh_token: this._refreshToken,\n                target_audience: targetAudience\n            })\n        });\n        return res.data.id_token;\n    }\n    /**\n     * Create a UserRefreshClient credentials instance using the given input\n     * options.\n     * @param json The input object.\n     */ fromJSON(json) {\n        if (!json) {\n            throw new Error(\"Must pass in a JSON object containing the user refresh token\");\n        }\n        if (json.type !== \"authorized_user\") {\n            throw new Error('The incoming JSON object does not have the \"authorized_user\" type');\n        }\n        if (!json.client_id) {\n            throw new Error(\"The incoming JSON object does not contain a client_id field\");\n        }\n        if (!json.client_secret) {\n            throw new Error(\"The incoming JSON object does not contain a client_secret field\");\n        }\n        if (!json.refresh_token) {\n            throw new Error(\"The incoming JSON object does not contain a refresh_token field\");\n        }\n        this._clientId = json.client_id;\n        this._clientSecret = json.client_secret;\n        this._refreshToken = json.refresh_token;\n        this.credentials.refresh_token = json.refresh_token;\n        this.quotaProjectId = json.quota_project_id;\n        this.universeDomain = json.universe_domain || this.universeDomain;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(()=>callback(), callback);\n        } else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    async fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject)=>{\n            if (!inputStream) {\n                return reject(new Error(\"Must pass in a stream containing the user refresh token.\"));\n            }\n            let s = \"\";\n            inputStream.setEncoding(\"utf8\").on(\"error\", reject).on(\"data\", (chunk)=>s += chunk).on(\"end\", ()=>{\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    return resolve();\n                } catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a UserRefreshClient credentials instance using the given input\n     * options.\n     * @param json The input object.\n     */ static fromJSON(json) {\n        const client = new UserRefreshClient();\n        client.fromJSON(json);\n        return client;\n    }\n}\nexports.UserRefreshClient = UserRefreshClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/refreshclient.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/stscredentials.js":
/*!***************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/stscredentials.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StsCredentials = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst transporters_1 = __webpack_require__(/*! ../transporters */ \"(rsc)/./node_modules/google-auth-library/build/src/transporters.js\");\nconst oauth2common_1 = __webpack_require__(/*! ./oauth2common */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2common.js\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */ class StsCredentials extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an STS credentials instance.\n     * @param tokenExchangeEndpoint The token exchange endpoint.\n     * @param clientAuthentication The client authentication credentials if\n     *   available.\n     */ constructor(tokenExchangeEndpoint, clientAuthentication){\n        super(clientAuthentication);\n        this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n        this.transporter = new transporters_1.DefaultTransporter();\n    }\n    /**\n     * Exchanges the provided token for another type of token based on the\n     * rfc8693 spec.\n     * @param stsCredentialsOptions The token exchange options used to populate\n     *   the token exchange request.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @param options Optional additional GCP-specific non-spec defined options\n     *   to send with the request.\n     *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n     * @return A promise that resolves with the token exchange response containing\n     *   the requested token and its expiration time.\n     */ async exchangeToken(stsCredentialsOptions, additionalHeaders, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        var _a, _b, _c;\n        const values = {\n            grant_type: stsCredentialsOptions.grantType,\n            resource: stsCredentialsOptions.resource,\n            audience: stsCredentialsOptions.audience,\n            scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(\" \"),\n            requested_token_type: stsCredentialsOptions.requestedTokenType,\n            subject_token: stsCredentialsOptions.subjectToken,\n            subject_token_type: stsCredentialsOptions.subjectTokenType,\n            actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n            actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n            // Non-standard GCP-specific options.\n            options: options && JSON.stringify(options)\n        };\n        // Remove undefined fields.\n        Object.keys(values).forEach((key)=>{\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            if (typeof values[key] === \"undefined\") {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                delete values[key];\n            }\n        });\n        const headers = {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        };\n        // Inject additional STS headers if available.\n        Object.assign(headers, additionalHeaders || {});\n        const opts = {\n            ...StsCredentials.RETRY_CONFIG,\n            url: this.tokenExchangeEndpoint.toString(),\n            method: \"POST\",\n            headers,\n            data: querystring.stringify(values),\n            responseType: \"json\"\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const stsSuccessfulResponse = response.data;\n            stsSuccessfulResponse.res = response;\n            return stsSuccessfulResponse;\n        } catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\nexports.StsCredentials = StsCredentials;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/stscredentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js":
/*!************************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UrlSubjectTokenSupplier = void 0;\n/**\n * Internal subject token supplier implementation used when a URL\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */ class UrlSubjectTokenSupplier {\n    /**\n     * Instantiates a URL subject token supplier.\n     * @param opts The URL subject token supplier options to build the supplier with.\n     */ constructor(opts){\n        this.url = opts.url;\n        this.formatType = opts.formatType;\n        this.subjectTokenFieldName = opts.subjectTokenFieldName;\n        this.headers = opts.headers;\n        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n    }\n    /**\n     * Sends a GET request to the URL provided in the constructor and resolves\n     * with the returned external subject token.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link IdentityPoolClient}, contains the requested audience and subject\n     *   token type for the external account identity. Not used.\n     */ async getSubjectToken(context) {\n        const opts = {\n            ...this.additionalGaxiosOptions,\n            url: this.url,\n            method: \"GET\",\n            headers: this.headers,\n            responseType: this.formatType\n        };\n        let subjectToken;\n        if (this.formatType === \"text\") {\n            const response = await context.transporter.request(opts);\n            subjectToken = response.data;\n        } else if (this.formatType === \"json\" && this.subjectTokenFieldName) {\n            const response = await context.transporter.request(opts);\n            subjectToken = response.data[this.subjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error(\"Unable to parse the subject_token from the credential_source URL\");\n        }\n        return subjectToken;\n    }\n}\nexports.UrlSubjectTokenSupplier = UrlSubjectTokenSupplier;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvYXV0aC91cmxzdWJqZWN0dG9rZW5zdXBwbGllci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELCtCQUErQixHQUFHLEtBQUs7QUFDdkM7OztDQUdDLEdBQ0QsTUFBTUU7SUFDRjs7O0tBR0MsR0FDREMsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsSUFBSSxDQUFDQyxHQUFHLEdBQUdELEtBQUtDLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyxVQUFVLEdBQUdGLEtBQUtFLFVBQVU7UUFDakMsSUFBSSxDQUFDQyxxQkFBcUIsR0FBR0gsS0FBS0cscUJBQXFCO1FBQ3ZELElBQUksQ0FBQ0MsT0FBTyxHQUFHSixLQUFLSSxPQUFPO1FBQzNCLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUdMLEtBQUtLLHVCQUF1QjtJQUMvRDtJQUNBOzs7Ozs7S0FNQyxHQUNELE1BQU1DLGdCQUFnQkMsT0FBTyxFQUFFO1FBQzNCLE1BQU1QLE9BQU87WUFDVCxHQUFHLElBQUksQ0FBQ0ssdUJBQXVCO1lBQy9CSixLQUFLLElBQUksQ0FBQ0EsR0FBRztZQUNiTyxRQUFRO1lBQ1JKLFNBQVMsSUFBSSxDQUFDQSxPQUFPO1lBQ3JCSyxjQUFjLElBQUksQ0FBQ1AsVUFBVTtRQUNqQztRQUNBLElBQUlRO1FBQ0osSUFBSSxJQUFJLENBQUNSLFVBQVUsS0FBSyxRQUFRO1lBQzVCLE1BQU1TLFdBQVcsTUFBTUosUUFBUUssV0FBVyxDQUFDQyxPQUFPLENBQUNiO1lBQ25EVSxlQUFlQyxTQUFTRyxJQUFJO1FBQ2hDLE9BQ0ssSUFBSSxJQUFJLENBQUNaLFVBQVUsS0FBSyxVQUFVLElBQUksQ0FBQ0MscUJBQXFCLEVBQUU7WUFDL0QsTUFBTVEsV0FBVyxNQUFNSixRQUFRSyxXQUFXLENBQUNDLE9BQU8sQ0FBQ2I7WUFDbkRVLGVBQWVDLFNBQVNHLElBQUksQ0FBQyxJQUFJLENBQUNYLHFCQUFxQixDQUFDO1FBQzVEO1FBQ0EsSUFBSSxDQUFDTyxjQUFjO1lBQ2YsTUFBTSxJQUFJSyxNQUFNO1FBQ3BCO1FBQ0EsT0FBT0w7SUFDWDtBQUNKO0FBQ0FkLCtCQUErQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtY29tbWVudGVyLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2F1dGgvdXJsc3ViamVjdHRva2Vuc3VwcGxpZXIuanM/MjJkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIENvcHlyaWdodCAyMDI0IEdvb2dsZSBMTENcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VcmxTdWJqZWN0VG9rZW5TdXBwbGllciA9IHZvaWQgMDtcbi8qKlxuICogSW50ZXJuYWwgc3ViamVjdCB0b2tlbiBzdXBwbGllciBpbXBsZW1lbnRhdGlvbiB1c2VkIHdoZW4gYSBVUkxcbiAqIGlzIGNvbmZpZ3VyZWQgaW4gdGhlIGNyZWRlbnRpYWwgY29uZmlndXJhdGlvbiB1c2VkIHRvIGJ1aWxkIGFuIHtAbGluayBJZGVudGl0eVBvb2xDbGllbnR9XG4gKi9cbmNsYXNzIFVybFN1YmplY3RUb2tlblN1cHBsaWVyIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZXMgYSBVUkwgc3ViamVjdCB0b2tlbiBzdXBwbGllci5cbiAgICAgKiBAcGFyYW0gb3B0cyBUaGUgVVJMIHN1YmplY3QgdG9rZW4gc3VwcGxpZXIgb3B0aW9ucyB0byBidWlsZCB0aGUgc3VwcGxpZXIgd2l0aC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHRoaXMudXJsID0gb3B0cy51cmw7XG4gICAgICAgIHRoaXMuZm9ybWF0VHlwZSA9IG9wdHMuZm9ybWF0VHlwZTtcbiAgICAgICAgdGhpcy5zdWJqZWN0VG9rZW5GaWVsZE5hbWUgPSBvcHRzLnN1YmplY3RUb2tlbkZpZWxkTmFtZTtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gb3B0cy5oZWFkZXJzO1xuICAgICAgICB0aGlzLmFkZGl0aW9uYWxHYXhpb3NPcHRpb25zID0gb3B0cy5hZGRpdGlvbmFsR2F4aW9zT3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBHRVQgcmVxdWVzdCB0byB0aGUgVVJMIHByb3ZpZGVkIGluIHRoZSBjb25zdHJ1Y3RvciBhbmQgcmVzb2x2ZXNcbiAgICAgKiB3aXRoIHRoZSByZXR1cm5lZCBleHRlcm5hbCBzdWJqZWN0IHRva2VuLlxuICAgICAqIEBwYXJhbSBjb250ZXh0IHtAbGluayBFeHRlcm5hbEFjY291bnRTdXBwbGllckNvbnRleHR9IGZyb20gdGhlIGNhbGxpbmdcbiAgICAgKiAgIHtAbGluayBJZGVudGl0eVBvb2xDbGllbnR9LCBjb250YWlucyB0aGUgcmVxdWVzdGVkIGF1ZGllbmNlIGFuZCBzdWJqZWN0XG4gICAgICogICB0b2tlbiB0eXBlIGZvciB0aGUgZXh0ZXJuYWwgYWNjb3VudCBpZGVudGl0eS4gTm90IHVzZWQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0U3ViamVjdFRva2VuKGNvbnRleHQpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuYWRkaXRpb25hbEdheGlvc09wdGlvbnMsXG4gICAgICAgICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogdGhpcy5mb3JtYXRUeXBlLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgc3ViamVjdFRva2VuO1xuICAgICAgICBpZiAodGhpcy5mb3JtYXRUeXBlID09PSAndGV4dCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29udGV4dC50cmFuc3BvcnRlci5yZXF1ZXN0KG9wdHMpO1xuICAgICAgICAgICAgc3ViamVjdFRva2VuID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmZvcm1hdFR5cGUgPT09ICdqc29uJyAmJiB0aGlzLnN1YmplY3RUb2tlbkZpZWxkTmFtZSkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjb250ZXh0LnRyYW5zcG9ydGVyLnJlcXVlc3Qob3B0cyk7XG4gICAgICAgICAgICBzdWJqZWN0VG9rZW4gPSByZXNwb25zZS5kYXRhW3RoaXMuc3ViamVjdFRva2VuRmllbGROYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN1YmplY3RUb2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gcGFyc2UgdGhlIHN1YmplY3RfdG9rZW4gZnJvbSB0aGUgY3JlZGVudGlhbF9zb3VyY2UgVVJMJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YmplY3RUb2tlbjtcbiAgICB9XG59XG5leHBvcnRzLlVybFN1YmplY3RUb2tlblN1cHBsaWVyID0gVXJsU3ViamVjdFRva2VuU3VwcGxpZXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJVcmxTdWJqZWN0VG9rZW5TdXBwbGllciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInVybCIsImZvcm1hdFR5cGUiLCJzdWJqZWN0VG9rZW5GaWVsZE5hbWUiLCJoZWFkZXJzIiwiYWRkaXRpb25hbEdheGlvc09wdGlvbnMiLCJnZXRTdWJqZWN0VG9rZW4iLCJjb250ZXh0IiwibWV0aG9kIiwicmVzcG9uc2VUeXBlIiwic3ViamVjdFRva2VuIiwicmVzcG9uc2UiLCJ0cmFuc3BvcnRlciIsInJlcXVlc3QiLCJkYXRhIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/crypto/browser/crypto.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/crypto/browser/crypto.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BrowserCrypto = void 0;\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = __webpack_require__(/*! base64-js */ \"(rsc)/./node_modules/base64-js/index.js\");\nconst crypto_1 = __webpack_require__(/*! ../crypto */ \"(rsc)/./node_modules/google-auth-library/build/src/crypto/crypto.js\");\nclass BrowserCrypto {\n    constructor(){\n        if (true) {\n            throw new Error(\"SubtleCrypto not found. Make sure it's an https:// website.\");\n        }\n    }\n    async sha256DigestBase64(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest(\"SHA-256\", inputBuffer);\n        return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    static padBase64(base64) {\n        // base64js requires padding, so let's add some '='\n        while(base64.length % 4 !== 0){\n            base64 += \"=\";\n        }\n        return base64;\n    }\n    async verify(pubkey, data, signature) {\n        const algo = {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        };\n        const dataArray = new TextEncoder().encode(data);\n        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));\n        const cryptoKey = await window.crypto.subtle.importKey(\"jwk\", pubkey, algo, true, [\n            \"verify\"\n        ]);\n        // SubtleCrypto's verify method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n        return result;\n    }\n    async sign(privateKey, data) {\n        const algo = {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        };\n        const dataArray = new TextEncoder().encode(data);\n        const cryptoKey = await window.crypto.subtle.importKey(\"jwk\", privateKey, algo, true, [\n            \"sign\"\n        ]);\n        // SubtleCrypto's sign method is async so we must make\n        // this method async as well.\n        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);\n        return base64js.fromByteArray(new Uint8Array(result));\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */ async sha256DigestHex(str) {\n        // SubtleCrypto digest() method is async, so we must make\n        // this method async as well.\n        // To calculate SHA256 digest using SubtleCrypto, we first\n        // need to convert an input string to an ArrayBuffer:\n        const inputBuffer = new TextEncoder().encode(str);\n        // Result is ArrayBuffer as well.\n        const outputBuffer = await window.crypto.subtle.digest(\"SHA-256\", inputBuffer);\n        return (0, crypto_1.fromArrayBufferToHex)(outputBuffer);\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */ async signWithHmacSha256(key, msg) {\n        // Convert key, if provided in ArrayBuffer format, to string.\n        const rawKey = typeof key === \"string\" ? key : String.fromCharCode(...new Uint16Array(key));\n        const enc = new TextEncoder();\n        const cryptoKey = await window.crypto.subtle.importKey(\"raw\", enc.encode(rawKey), {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        }, false, [\n            \"sign\"\n        ]);\n        return window.crypto.subtle.sign(\"HMAC\", cryptoKey, enc.encode(msg));\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/crypto/browser/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/crypto/crypto.js":
/*!*********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/crypto/crypto.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createCrypto = createCrypto;\nexports.hasBrowserCrypto = hasBrowserCrypto;\nexports.fromArrayBufferToHex = fromArrayBufferToHex;\nconst crypto_1 = __webpack_require__(/*! ./browser/crypto */ \"(rsc)/./node_modules/google-auth-library/build/src/crypto/browser/crypto.js\");\nconst crypto_2 = __webpack_require__(/*! ./node/crypto */ \"(rsc)/./node_modules/google-auth-library/build/src/crypto/node/crypto.js\");\nfunction createCrypto() {\n    if (hasBrowserCrypto()) {\n        return new crypto_1.BrowserCrypto();\n    }\n    return new crypto_2.NodeCrypto();\n}\nfunction hasBrowserCrypto() {\n    return  false && 0;\n}\n/**\n * Converts an ArrayBuffer to a hexadecimal string.\n * @param arrayBuffer The ArrayBuffer to convert to hexadecimal string.\n * @return The hexadecimal encoding of the ArrayBuffer.\n */ function fromArrayBufferToHex(arrayBuffer) {\n    // Convert buffer to byte array.\n    const byteArray = Array.from(new Uint8Array(arrayBuffer));\n    // Convert bytes to hex string.\n    return byteArray.map((byte)=>{\n        return byte.toString(16).padStart(2, \"0\");\n    }).join(\"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvY3J5cHRvL2NyeXB0by5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQyxpQkFBaUIsR0FDakJBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBR0U7QUFDdkJGLHdCQUF3QixHQUFHRztBQUMzQkgsNEJBQTRCLEdBQUdJO0FBQy9CLE1BQU1DLFdBQVdDLG1CQUFPQSxDQUFDLHFHQUFrQjtBQUMzQyxNQUFNQyxXQUFXRCxtQkFBT0EsQ0FBQywrRkFBZTtBQUN4QyxTQUFTSjtJQUNMLElBQUlDLG9CQUFvQjtRQUNwQixPQUFPLElBQUlFLFNBQVNHLGFBQWE7SUFDckM7SUFDQSxPQUFPLElBQUlELFNBQVNFLFVBQVU7QUFDbEM7QUFDQSxTQUFTTjtJQUNMLE9BQVEsTUFDcUIsSUFDekIsQ0FBZ0M7QUFDeEM7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU0MscUJBQXFCUyxXQUFXO0lBQ3JDLGdDQUFnQztJQUNoQyxNQUFNQyxZQUFZQyxNQUFNQyxJQUFJLENBQUMsSUFBSUMsV0FBV0o7SUFDNUMsK0JBQStCO0lBQy9CLE9BQU9DLFVBQ0ZJLEdBQUcsQ0FBQ0MsQ0FBQUE7UUFDTCxPQUFPQSxLQUFLQyxRQUFRLENBQUMsSUFBSUMsUUFBUSxDQUFDLEdBQUc7SUFDekMsR0FDS0MsSUFBSSxDQUFDO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWNvbW1lbnRlci8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9jcnlwdG8vY3J5cHRvLmpzPzQwOGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qIGdsb2JhbCB3aW5kb3cgKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlQ3J5cHRvID0gY3JlYXRlQ3J5cHRvO1xuZXhwb3J0cy5oYXNCcm93c2VyQ3J5cHRvID0gaGFzQnJvd3NlckNyeXB0bztcbmV4cG9ydHMuZnJvbUFycmF5QnVmZmVyVG9IZXggPSBmcm9tQXJyYXlCdWZmZXJUb0hleDtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcIi4vYnJvd3Nlci9jcnlwdG9cIik7XG5jb25zdCBjcnlwdG9fMiA9IHJlcXVpcmUoXCIuL25vZGUvY3J5cHRvXCIpO1xuZnVuY3Rpb24gY3JlYXRlQ3J5cHRvKCkge1xuICAgIGlmIChoYXNCcm93c2VyQ3J5cHRvKCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjcnlwdG9fMS5Ccm93c2VyQ3J5cHRvKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgY3J5cHRvXzIuTm9kZUNyeXB0bygpO1xufVxuZnVuY3Rpb24gaGFzQnJvd3NlckNyeXB0bygpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cuY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93LmNyeXB0by5zdWJ0bGUgIT09ICd1bmRlZmluZWQnKTtcbn1cbi8qKlxuICogQ29udmVydHMgYW4gQXJyYXlCdWZmZXIgdG8gYSBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKiBAcGFyYW0gYXJyYXlCdWZmZXIgVGhlIEFycmF5QnVmZmVyIHRvIGNvbnZlcnQgdG8gaGV4YWRlY2ltYWwgc3RyaW5nLlxuICogQHJldHVybiBUaGUgaGV4YWRlY2ltYWwgZW5jb2Rpbmcgb2YgdGhlIEFycmF5QnVmZmVyLlxuICovXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXJUb0hleChhcnJheUJ1ZmZlcikge1xuICAgIC8vIENvbnZlcnQgYnVmZmVyIHRvIGJ5dGUgYXJyYXkuXG4gICAgY29uc3QgYnl0ZUFycmF5ID0gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICAgIC8vIENvbnZlcnQgYnl0ZXMgdG8gaGV4IHN0cmluZy5cbiAgICByZXR1cm4gYnl0ZUFycmF5XG4gICAgICAgIC5tYXAoYnl0ZSA9PiB7XG4gICAgICAgIHJldHVybiBieXRlLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCAnMCcpO1xuICAgIH0pXG4gICAgICAgIC5qb2luKCcnKTtcbn1cbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyZWF0ZUNyeXB0byIsImhhc0Jyb3dzZXJDcnlwdG8iLCJmcm9tQXJyYXlCdWZmZXJUb0hleCIsImNyeXB0b18xIiwicmVxdWlyZSIsImNyeXB0b18yIiwiQnJvd3NlckNyeXB0byIsIk5vZGVDcnlwdG8iLCJ3aW5kb3ciLCJjcnlwdG8iLCJzdWJ0bGUiLCJhcnJheUJ1ZmZlciIsImJ5dGVBcnJheSIsIkFycmF5IiwiZnJvbSIsIlVpbnQ4QXJyYXkiLCJtYXAiLCJieXRlIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/crypto/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/crypto/node/crypto.js":
/*!**************************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/crypto/node/crypto.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NodeCrypto = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nclass NodeCrypto {\n    async sha256DigestBase64(str) {\n        return crypto.createHash(\"sha256\").update(str).digest(\"base64\");\n    }\n    randomBytesBase64(count) {\n        return crypto.randomBytes(count).toString(\"base64\");\n    }\n    async verify(pubkey, data, signature) {\n        const verifier = crypto.createVerify(\"RSA-SHA256\");\n        verifier.update(data);\n        verifier.end();\n        return verifier.verify(pubkey, signature, \"base64\");\n    }\n    async sign(privateKey, data) {\n        const signer = crypto.createSign(\"RSA-SHA256\");\n        signer.update(data);\n        signer.end();\n        return signer.sign(privateKey, \"base64\");\n    }\n    decodeBase64StringUtf8(base64) {\n        return Buffer.from(base64, \"base64\").toString(\"utf-8\");\n    }\n    encodeBase64StringUtf8(text) {\n        return Buffer.from(text, \"utf-8\").toString(\"base64\");\n    }\n    /**\n     * Computes the SHA-256 hash of the provided string.\n     * @param str The plain text string to hash.\n     * @return A promise that resolves with the SHA-256 hash of the provided\n     *   string in hexadecimal encoding.\n     */ async sha256DigestHex(str) {\n        return crypto.createHash(\"sha256\").update(str).digest(\"hex\");\n    }\n    /**\n     * Computes the HMAC hash of a message using the provided crypto key and the\n     * SHA-256 algorithm.\n     * @param key The secret crypto key in utf-8 or ArrayBuffer format.\n     * @param msg The plain text message.\n     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer\n     *   format.\n     */ async signWithHmacSha256(key, msg) {\n        const cryptoKey = typeof key === \"string\" ? key : toBuffer(key);\n        return toArrayBuffer(crypto.createHmac(\"sha256\", cryptoKey).update(msg).digest());\n    }\n}\nexports.NodeCrypto = NodeCrypto;\n/**\n * Converts a Node.js Buffer to an ArrayBuffer.\n * https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer\n * @param buffer The Buffer input to covert.\n * @return The ArrayBuffer representation of the input.\n */ function toArrayBuffer(buffer) {\n    return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n}\n/**\n * Converts an ArrayBuffer to a Node.js Buffer.\n * @param arrayBuffer The ArrayBuffer input to covert.\n * @return The Buffer representation of the input.\n */ function toBuffer(arrayBuffer) {\n    return Buffer.from(arrayBuffer);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvY3J5cHRvL25vZGUvY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsNEJBQTRCO0FBQzVCLEVBQUU7QUFDRixrRUFBa0U7QUFDbEUsbUVBQW1FO0FBQ25FLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Ysa0RBQWtEO0FBQ2xELEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsb0VBQW9FO0FBQ3BFLDJFQUEyRTtBQUMzRSxzRUFBc0U7QUFDdEUsaUNBQWlDO0FBQ2pDQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixNQUFNRyxTQUFTQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUMvQixNQUFNRjtJQUNGLE1BQU1HLG1CQUFtQkMsR0FBRyxFQUFFO1FBQzFCLE9BQU9ILE9BQU9JLFVBQVUsQ0FBQyxVQUFVQyxNQUFNLENBQUNGLEtBQUtHLE1BQU0sQ0FBQztJQUMxRDtJQUNBQyxrQkFBa0JDLEtBQUssRUFBRTtRQUNyQixPQUFPUixPQUFPUyxXQUFXLENBQUNELE9BQU9FLFFBQVEsQ0FBQztJQUM5QztJQUNBLE1BQU1DLE9BQU9DLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUU7UUFDbEMsTUFBTUMsV0FBV2YsT0FBT2dCLFlBQVksQ0FBQztRQUNyQ0QsU0FBU1YsTUFBTSxDQUFDUTtRQUNoQkUsU0FBU0UsR0FBRztRQUNaLE9BQU9GLFNBQVNKLE1BQU0sQ0FBQ0MsUUFBUUUsV0FBVztJQUM5QztJQUNBLE1BQU1JLEtBQUtDLFVBQVUsRUFBRU4sSUFBSSxFQUFFO1FBQ3pCLE1BQU1PLFNBQVNwQixPQUFPcUIsVUFBVSxDQUFDO1FBQ2pDRCxPQUFPZixNQUFNLENBQUNRO1FBQ2RPLE9BQU9ILEdBQUc7UUFDVixPQUFPRyxPQUFPRixJQUFJLENBQUNDLFlBQVk7SUFDbkM7SUFDQUcsdUJBQXVCQyxNQUFNLEVBQUU7UUFDM0IsT0FBT0MsT0FBT0MsSUFBSSxDQUFDRixRQUFRLFVBQVViLFFBQVEsQ0FBQztJQUNsRDtJQUNBZ0IsdUJBQXVCQyxJQUFJLEVBQUU7UUFDekIsT0FBT0gsT0FBT0MsSUFBSSxDQUFDRSxNQUFNLFNBQVNqQixRQUFRLENBQUM7SUFDL0M7SUFDQTs7Ozs7S0FLQyxHQUNELE1BQU1rQixnQkFBZ0J6QixHQUFHLEVBQUU7UUFDdkIsT0FBT0gsT0FBT0ksVUFBVSxDQUFDLFVBQVVDLE1BQU0sQ0FBQ0YsS0FBS0csTUFBTSxDQUFDO0lBQzFEO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE1BQU11QixtQkFBbUJDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO1FBQy9CLE1BQU1DLFlBQVksT0FBT0YsUUFBUSxXQUFXQSxNQUFNRyxTQUFTSDtRQUMzRCxPQUFPSSxjQUFjbEMsT0FBT21DLFVBQVUsQ0FBQyxVQUFVSCxXQUFXM0IsTUFBTSxDQUFDMEIsS0FBS3pCLE1BQU07SUFDbEY7QUFDSjtBQUNBVCxrQkFBa0IsR0FBR0U7QUFDckI7Ozs7O0NBS0MsR0FDRCxTQUFTbUMsY0FBY0UsTUFBTTtJQUN6QixPQUFPQSxPQUFPQSxNQUFNLENBQUNDLEtBQUssQ0FBQ0QsT0FBT0UsVUFBVSxFQUFFRixPQUFPRSxVQUFVLEdBQUdGLE9BQU9HLFVBQVU7QUFDdkY7QUFDQTs7OztDQUlDLEdBQ0QsU0FBU04sU0FBU08sV0FBVztJQUN6QixPQUFPaEIsT0FBT0MsSUFBSSxDQUFDZTtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtY29tbWVudGVyLy4vbm9kZV9tb2R1bGVzL2dvb2dsZS1hdXRoLWxpYnJhcnkvYnVpbGQvc3JjL2NyeXB0by9ub2RlL2NyeXB0by5qcz9lMmUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5vZGVDcnlwdG8gPSB2b2lkIDA7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY2xhc3MgTm9kZUNyeXB0byB7XG4gICAgYXN5bmMgc2hhMjU2RGlnZXN0QmFzZTY0KHN0cikge1xuICAgICAgICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShzdHIpLmRpZ2VzdCgnYmFzZTY0Jyk7XG4gICAgfVxuICAgIHJhbmRvbUJ5dGVzQmFzZTY0KGNvdW50KSB7XG4gICAgICAgIHJldHVybiBjcnlwdG8ucmFuZG9tQnl0ZXMoY291bnQpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICB9XG4gICAgYXN5bmMgdmVyaWZ5KHB1YmtleSwgZGF0YSwgc2lnbmF0dXJlKSB7XG4gICAgICAgIGNvbnN0IHZlcmlmaWVyID0gY3J5cHRvLmNyZWF0ZVZlcmlmeSgnUlNBLVNIQTI1NicpO1xuICAgICAgICB2ZXJpZmllci51cGRhdGUoZGF0YSk7XG4gICAgICAgIHZlcmlmaWVyLmVuZCgpO1xuICAgICAgICByZXR1cm4gdmVyaWZpZXIudmVyaWZ5KHB1YmtleSwgc2lnbmF0dXJlLCAnYmFzZTY0Jyk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24ocHJpdmF0ZUtleSwgZGF0YSkge1xuICAgICAgICBjb25zdCBzaWduZXIgPSBjcnlwdG8uY3JlYXRlU2lnbignUlNBLVNIQTI1NicpO1xuICAgICAgICBzaWduZXIudXBkYXRlKGRhdGEpO1xuICAgICAgICBzaWduZXIuZW5kKCk7XG4gICAgICAgIHJldHVybiBzaWduZXIuc2lnbihwcml2YXRlS2V5LCAnYmFzZTY0Jyk7XG4gICAgfVxuICAgIGRlY29kZUJhc2U2NFN0cmluZ1V0ZjgoYmFzZTY0KSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShiYXNlNjQsICdiYXNlNjQnKS50b1N0cmluZygndXRmLTgnKTtcbiAgICB9XG4gICAgZW5jb2RlQmFzZTY0U3RyaW5nVXRmOCh0ZXh0KSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh0ZXh0LCAndXRmLTgnKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBTSEEtMjU2IGhhc2ggb2YgdGhlIHByb3ZpZGVkIHN0cmluZy5cbiAgICAgKiBAcGFyYW0gc3RyIFRoZSBwbGFpbiB0ZXh0IHN0cmluZyB0byBoYXNoLlxuICAgICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgU0hBLTI1NiBoYXNoIG9mIHRoZSBwcm92aWRlZFxuICAgICAqICAgc3RyaW5nIGluIGhleGFkZWNpbWFsIGVuY29kaW5nLlxuICAgICAqL1xuICAgIGFzeW5jIHNoYTI1NkRpZ2VzdEhleChzdHIpIHtcbiAgICAgICAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoc3RyKS5kaWdlc3QoJ2hleCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgSE1BQyBoYXNoIG9mIGEgbWVzc2FnZSB1c2luZyB0aGUgcHJvdmlkZWQgY3J5cHRvIGtleSBhbmQgdGhlXG4gICAgICogU0hBLTI1NiBhbGdvcml0aG0uXG4gICAgICogQHBhcmFtIGtleSBUaGUgc2VjcmV0IGNyeXB0byBrZXkgaW4gdXRmLTggb3IgQXJyYXlCdWZmZXIgZm9ybWF0LlxuICAgICAqIEBwYXJhbSBtc2cgVGhlIHBsYWluIHRleHQgbWVzc2FnZS5cbiAgICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIEhNQUMtU0hBMjU2IGhhc2ggaW4gQXJyYXlCdWZmZXJcbiAgICAgKiAgIGZvcm1hdC5cbiAgICAgKi9cbiAgICBhc3luYyBzaWduV2l0aEhtYWNTaGEyNTYoa2V5LCBtc2cpIHtcbiAgICAgICAgY29uc3QgY3J5cHRvS2V5ID0gdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyBrZXkgOiB0b0J1ZmZlcihrZXkpO1xuICAgICAgICByZXR1cm4gdG9BcnJheUJ1ZmZlcihjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2JywgY3J5cHRvS2V5KS51cGRhdGUobXNnKS5kaWdlc3QoKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob2RlQ3J5cHRvID0gTm9kZUNyeXB0bztcbi8qKlxuICogQ29udmVydHMgYSBOb2RlLmpzIEJ1ZmZlciB0byBhbiBBcnJheUJ1ZmZlci5cbiAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzg2MDkyODkvY29udmVydC1hLWJpbmFyeS1ub2RlanMtYnVmZmVyLXRvLWphdmFzY3JpcHQtYXJyYXlidWZmZXJcbiAqIEBwYXJhbSBidWZmZXIgVGhlIEJ1ZmZlciBpbnB1dCB0byBjb3ZlcnQuXG4gKiBAcmV0dXJuIFRoZSBBcnJheUJ1ZmZlciByZXByZXNlbnRhdGlvbiBvZiB0aGUgaW5wdXQuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXlCdWZmZXIoYnVmZmVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5idWZmZXIuc2xpY2UoYnVmZmVyLmJ5dGVPZmZzZXQsIGJ1ZmZlci5ieXRlT2Zmc2V0ICsgYnVmZmVyLmJ5dGVMZW5ndGgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhbiBBcnJheUJ1ZmZlciB0byBhIE5vZGUuanMgQnVmZmVyLlxuICogQHBhcmFtIGFycmF5QnVmZmVyIFRoZSBBcnJheUJ1ZmZlciBpbnB1dCB0byBjb3ZlcnQuXG4gKiBAcmV0dXJuIFRoZSBCdWZmZXIgcmVwcmVzZW50YXRpb24gb2YgdGhlIGlucHV0LlxuICovXG5mdW5jdGlvbiB0b0J1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlcik7XG59XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJOb2RlQ3J5cHRvIiwiY3J5cHRvIiwicmVxdWlyZSIsInNoYTI1NkRpZ2VzdEJhc2U2NCIsInN0ciIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJyYW5kb21CeXRlc0Jhc2U2NCIsImNvdW50IiwicmFuZG9tQnl0ZXMiLCJ0b1N0cmluZyIsInZlcmlmeSIsInB1YmtleSIsImRhdGEiLCJzaWduYXR1cmUiLCJ2ZXJpZmllciIsImNyZWF0ZVZlcmlmeSIsImVuZCIsInNpZ24iLCJwcml2YXRlS2V5Iiwic2lnbmVyIiwiY3JlYXRlU2lnbiIsImRlY29kZUJhc2U2NFN0cmluZ1V0ZjgiLCJiYXNlNjQiLCJCdWZmZXIiLCJmcm9tIiwiZW5jb2RlQmFzZTY0U3RyaW5nVXRmOCIsInRleHQiLCJzaGEyNTZEaWdlc3RIZXgiLCJzaWduV2l0aEhtYWNTaGEyNTYiLCJrZXkiLCJtc2ciLCJjcnlwdG9LZXkiLCJ0b0J1ZmZlciIsInRvQXJyYXlCdWZmZXIiLCJjcmVhdGVIbWFjIiwiYnVmZmVyIiwic2xpY2UiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImFycmF5QnVmZmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/crypto/node/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GoogleAuth = exports.auth = exports.DefaultTransporter = exports.PassThroughClient = exports.ExecutableError = exports.PluggableAuthClient = exports.DownscopedClient = exports.BaseExternalAccountClient = exports.ExternalAccountClient = exports.IdentityPoolClient = exports.AwsRequestSigner = exports.AwsClient = exports.UserRefreshClient = exports.LoginTicket = exports.ClientAuthentication = exports.OAuth2Client = exports.CodeChallengeMethod = exports.Impersonated = exports.JWT = exports.JWTAccess = exports.IdTokenClient = exports.IAMAuth = exports.GCPEnv = exports.Compute = exports.DEFAULT_UNIVERSE = exports.AuthClient = exports.gaxios = exports.gcpMetadata = void 0;\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst googleauth_1 = __webpack_require__(/*! ./auth/googleauth */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/googleauth.js\");\nObject.defineProperty(exports, \"GoogleAuth\", ({\n    enumerable: true,\n    get: function() {\n        return googleauth_1.GoogleAuth;\n    }\n}));\n// Export common deps to ensure types/instances are the exact match. Useful\n// for consistently configuring the library across versions.\nexports.gcpMetadata = __webpack_require__(/*! gcp-metadata */ \"(rsc)/./node_modules/gcp-metadata/build/src/index.js\");\nexports.gaxios = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nvar authclient_1 = __webpack_require__(/*! ./auth/authclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/authclient.js\");\nObject.defineProperty(exports, \"AuthClient\", ({\n    enumerable: true,\n    get: function() {\n        return authclient_1.AuthClient;\n    }\n}));\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", ({\n    enumerable: true,\n    get: function() {\n        return authclient_1.DEFAULT_UNIVERSE;\n    }\n}));\nvar computeclient_1 = __webpack_require__(/*! ./auth/computeclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/computeclient.js\");\nObject.defineProperty(exports, \"Compute\", ({\n    enumerable: true,\n    get: function() {\n        return computeclient_1.Compute;\n    }\n}));\nvar envDetect_1 = __webpack_require__(/*! ./auth/envDetect */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/envDetect.js\");\nObject.defineProperty(exports, \"GCPEnv\", ({\n    enumerable: true,\n    get: function() {\n        return envDetect_1.GCPEnv;\n    }\n}));\nvar iam_1 = __webpack_require__(/*! ./auth/iam */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/iam.js\");\nObject.defineProperty(exports, \"IAMAuth\", ({\n    enumerable: true,\n    get: function() {\n        return iam_1.IAMAuth;\n    }\n}));\nvar idtokenclient_1 = __webpack_require__(/*! ./auth/idtokenclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/idtokenclient.js\");\nObject.defineProperty(exports, \"IdTokenClient\", ({\n    enumerable: true,\n    get: function() {\n        return idtokenclient_1.IdTokenClient;\n    }\n}));\nvar jwtaccess_1 = __webpack_require__(/*! ./auth/jwtaccess */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/jwtaccess.js\");\nObject.defineProperty(exports, \"JWTAccess\", ({\n    enumerable: true,\n    get: function() {\n        return jwtaccess_1.JWTAccess;\n    }\n}));\nvar jwtclient_1 = __webpack_require__(/*! ./auth/jwtclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/jwtclient.js\");\nObject.defineProperty(exports, \"JWT\", ({\n    enumerable: true,\n    get: function() {\n        return jwtclient_1.JWT;\n    }\n}));\nvar impersonated_1 = __webpack_require__(/*! ./auth/impersonated */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/impersonated.js\");\nObject.defineProperty(exports, \"Impersonated\", ({\n    enumerable: true,\n    get: function() {\n        return impersonated_1.Impersonated;\n    }\n}));\nvar oauth2client_1 = __webpack_require__(/*! ./auth/oauth2client */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/oauth2client.js\");\nObject.defineProperty(exports, \"CodeChallengeMethod\", ({\n    enumerable: true,\n    get: function() {\n        return oauth2client_1.CodeChallengeMethod;\n    }\n}));\nObject.defineProperty(exports, \"OAuth2Client\", ({\n    enumerable: true,\n    get: function() {\n        return oauth2client_1.OAuth2Client;\n    }\n}));\nObject.defineProperty(exports, \"ClientAuthentication\", ({\n    enumerable: true,\n    get: function() {\n        return oauth2client_1.ClientAuthentication;\n    }\n}));\nvar loginticket_1 = __webpack_require__(/*! ./auth/loginticket */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/loginticket.js\");\nObject.defineProperty(exports, \"LoginTicket\", ({\n    enumerable: true,\n    get: function() {\n        return loginticket_1.LoginTicket;\n    }\n}));\nvar refreshclient_1 = __webpack_require__(/*! ./auth/refreshclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/refreshclient.js\");\nObject.defineProperty(exports, \"UserRefreshClient\", ({\n    enumerable: true,\n    get: function() {\n        return refreshclient_1.UserRefreshClient;\n    }\n}));\nvar awsclient_1 = __webpack_require__(/*! ./auth/awsclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/awsclient.js\");\nObject.defineProperty(exports, \"AwsClient\", ({\n    enumerable: true,\n    get: function() {\n        return awsclient_1.AwsClient;\n    }\n}));\nvar awsrequestsigner_1 = __webpack_require__(/*! ./auth/awsrequestsigner */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/awsrequestsigner.js\");\nObject.defineProperty(exports, \"AwsRequestSigner\", ({\n    enumerable: true,\n    get: function() {\n        return awsrequestsigner_1.AwsRequestSigner;\n    }\n}));\nvar identitypoolclient_1 = __webpack_require__(/*! ./auth/identitypoolclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/identitypoolclient.js\");\nObject.defineProperty(exports, \"IdentityPoolClient\", ({\n    enumerable: true,\n    get: function() {\n        return identitypoolclient_1.IdentityPoolClient;\n    }\n}));\nvar externalclient_1 = __webpack_require__(/*! ./auth/externalclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/externalclient.js\");\nObject.defineProperty(exports, \"ExternalAccountClient\", ({\n    enumerable: true,\n    get: function() {\n        return externalclient_1.ExternalAccountClient;\n    }\n}));\nvar baseexternalclient_1 = __webpack_require__(/*! ./auth/baseexternalclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/baseexternalclient.js\");\nObject.defineProperty(exports, \"BaseExternalAccountClient\", ({\n    enumerable: true,\n    get: function() {\n        return baseexternalclient_1.BaseExternalAccountClient;\n    }\n}));\nvar downscopedclient_1 = __webpack_require__(/*! ./auth/downscopedclient */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/downscopedclient.js\");\nObject.defineProperty(exports, \"DownscopedClient\", ({\n    enumerable: true,\n    get: function() {\n        return downscopedclient_1.DownscopedClient;\n    }\n}));\nvar pluggable_auth_client_1 = __webpack_require__(/*! ./auth/pluggable-auth-client */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js\");\nObject.defineProperty(exports, \"PluggableAuthClient\", ({\n    enumerable: true,\n    get: function() {\n        return pluggable_auth_client_1.PluggableAuthClient;\n    }\n}));\nObject.defineProperty(exports, \"ExecutableError\", ({\n    enumerable: true,\n    get: function() {\n        return pluggable_auth_client_1.ExecutableError;\n    }\n}));\nvar passthrough_1 = __webpack_require__(/*! ./auth/passthrough */ \"(rsc)/./node_modules/google-auth-library/build/src/auth/passthrough.js\");\nObject.defineProperty(exports, \"PassThroughClient\", ({\n    enumerable: true,\n    get: function() {\n        return passthrough_1.PassThroughClient;\n    }\n}));\nvar transporters_1 = __webpack_require__(/*! ./transporters */ \"(rsc)/./node_modules/google-auth-library/build/src/transporters.js\");\nObject.defineProperty(exports, \"DefaultTransporter\", ({\n    enumerable: true,\n    get: function() {\n        return transporters_1.DefaultTransporter;\n    }\n}));\nconst auth = new googleauth_1.GoogleAuth();\nexports.auth = auth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/options.js":
/*!***************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/options.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Copyright 2017 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.validate = validate;\n// Accepts an options object passed from the user to the API.  In the\n// previous version of the API, it referred to a `Request` options object.\n// Now it refers to an Axiox Request Config object.  This is here to help\n// ensure users don't pass invalid options when they upgrade from 0.x to 1.x.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validate(options) {\n    const vpairs = [\n        {\n            invalid: \"uri\",\n            expected: \"url\"\n        },\n        {\n            invalid: \"json\",\n            expected: \"data\"\n        },\n        {\n            invalid: \"qs\",\n            expected: \"params\"\n        }\n    ];\n    for (const pair of vpairs){\n        if (options[pair.invalid]) {\n            const e = `'${pair.invalid}' is not a valid configuration option. Please use '${pair.expected}' instead. This library is using Axios for requests. Please see https://github.com/axios/axios to learn more about the valid request options.`;\n            throw new Error(e);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ29vZ2xlLWF1dGgtbGlicmFyeS9idWlsZC9zcmMvb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDRCQUE0QjtBQUM1QixFQUFFO0FBQ0Ysa0VBQWtFO0FBQ2xFLG1FQUFtRTtBQUNuRSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGLGtEQUFrRDtBQUNsRCxFQUFFO0FBQ0Ysc0VBQXNFO0FBQ3RFLG9FQUFvRTtBQUNwRSwyRUFBMkU7QUFDM0Usc0VBQXNFO0FBQ3RFLGlDQUFpQztBQUNqQ0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHRTtBQUNuQixxRUFBcUU7QUFDckUsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSw2RUFBNkU7QUFDN0UsOERBQThEO0FBQzlELFNBQVNBLFNBQVNDLE9BQU87SUFDckIsTUFBTUMsU0FBUztRQUNYO1lBQUVDLFNBQVM7WUFBT0MsVUFBVTtRQUFNO1FBQ2xDO1lBQUVELFNBQVM7WUFBUUMsVUFBVTtRQUFPO1FBQ3BDO1lBQUVELFNBQVM7WUFBTUMsVUFBVTtRQUFTO0tBQ3ZDO0lBQ0QsS0FBSyxNQUFNQyxRQUFRSCxPQUFRO1FBQ3ZCLElBQUlELE9BQU8sQ0FBQ0ksS0FBS0YsT0FBTyxDQUFDLEVBQUU7WUFDdkIsTUFBTUcsSUFBSSxDQUFDLENBQUMsRUFBRUQsS0FBS0YsT0FBTyxDQUFDLG1EQUFtRCxFQUFFRSxLQUFLRCxRQUFRLENBQUMsNklBQTZJLENBQUM7WUFDNU8sTUFBTSxJQUFJRyxNQUFNRDtRQUNwQjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWNvbW1lbnRlci8uL25vZGVfbW9kdWxlcy9nb29nbGUtYXV0aC1saWJyYXJ5L2J1aWxkL3NyYy9vcHRpb25zLmpzPzUzNzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGUgPSB2YWxpZGF0ZTtcbi8vIEFjY2VwdHMgYW4gb3B0aW9ucyBvYmplY3QgcGFzc2VkIGZyb20gdGhlIHVzZXIgdG8gdGhlIEFQSS4gIEluIHRoZVxuLy8gcHJldmlvdXMgdmVyc2lvbiBvZiB0aGUgQVBJLCBpdCByZWZlcnJlZCB0byBhIGBSZXF1ZXN0YCBvcHRpb25zIG9iamVjdC5cbi8vIE5vdyBpdCByZWZlcnMgdG8gYW4gQXhpb3ggUmVxdWVzdCBDb25maWcgb2JqZWN0LiAgVGhpcyBpcyBoZXJlIHRvIGhlbHBcbi8vIGVuc3VyZSB1c2VycyBkb24ndCBwYXNzIGludmFsaWQgb3B0aW9ucyB3aGVuIHRoZXkgdXBncmFkZSBmcm9tIDAueCB0byAxLnguXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gdmFsaWRhdGUob3B0aW9ucykge1xuICAgIGNvbnN0IHZwYWlycyA9IFtcbiAgICAgICAgeyBpbnZhbGlkOiAndXJpJywgZXhwZWN0ZWQ6ICd1cmwnIH0sXG4gICAgICAgIHsgaW52YWxpZDogJ2pzb24nLCBleHBlY3RlZDogJ2RhdGEnIH0sXG4gICAgICAgIHsgaW52YWxpZDogJ3FzJywgZXhwZWN0ZWQ6ICdwYXJhbXMnIH0sXG4gICAgXTtcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgdnBhaXJzKSB7XG4gICAgICAgIGlmIChvcHRpb25zW3BhaXIuaW52YWxpZF0pIHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBgJyR7cGFpci5pbnZhbGlkfScgaXMgbm90IGEgdmFsaWQgY29uZmlndXJhdGlvbiBvcHRpb24uIFBsZWFzZSB1c2UgJyR7cGFpci5leHBlY3RlZH0nIGluc3RlYWQuIFRoaXMgbGlicmFyeSBpcyB1c2luZyBBeGlvcyBmb3IgcmVxdWVzdHMuIFBsZWFzZSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zIHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIHZhbGlkIHJlcXVlc3Qgb3B0aW9ucy5gO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidmFsaWRhdGUiLCJvcHRpb25zIiwidnBhaXJzIiwiaW52YWxpZCIsImV4cGVjdGVkIiwicGFpciIsImUiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/transporters.js":
/*!********************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/transporters.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DefaultTransporter = void 0;\nconst gaxios_1 = __webpack_require__(/*! gaxios */ \"(rsc)/./node_modules/gaxios/build/src/index.js\");\nconst options_1 = __webpack_require__(/*! ./options */ \"(rsc)/./node_modules/google-auth-library/build/src/options.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/google-auth-library/package.json\");\nconst PRODUCT_NAME = \"google-api-nodejs-client\";\nclass DefaultTransporter {\n    constructor(){\n        /**\n         * A configurable, replacable `Gaxios` instance.\n         */ this.instance = new gaxios_1.Gaxios();\n    }\n    /**\n     * Configures request options before making a request.\n     * @param opts GaxiosOptions options.\n     * @return Configured options.\n     */ configure(opts = {}) {\n        opts.headers = opts.headers || {};\n        if (true) {\n            // set transporter user agent if not in browser\n            const uaValue = opts.headers[\"User-Agent\"];\n            if (!uaValue) {\n                opts.headers[\"User-Agent\"] = DefaultTransporter.USER_AGENT;\n            } else if (!uaValue.includes(`${PRODUCT_NAME}/`)) {\n                opts.headers[\"User-Agent\"] = `${uaValue} ${DefaultTransporter.USER_AGENT}`;\n            }\n            // track google-auth-library-nodejs version:\n            if (!opts.headers[\"x-goog-api-client\"]) {\n                const nodeVersion = process.version.replace(/^v/, \"\");\n                opts.headers[\"x-goog-api-client\"] = `gl-node/${nodeVersion}`;\n            }\n        }\n        return opts;\n    }\n    /**\n     * Makes a request using Gaxios with given options.\n     * @param opts GaxiosOptions options.\n     * @param callback optional callback that contains GaxiosResponse object.\n     * @return GaxiosPromise, assuming no callback is passed.\n     */ request(opts) {\n        // ensure the user isn't passing in request-style options\n        opts = this.configure(opts);\n        (0, options_1.validate)(opts);\n        return this.instance.request(opts).catch((e)=>{\n            throw this.processError(e);\n        });\n    }\n    get defaults() {\n        return this.instance.defaults;\n    }\n    set defaults(opts) {\n        this.instance.defaults = opts;\n    }\n    /**\n     * Changes the error to include details from the body.\n     */ processError(e) {\n        const res = e.response;\n        const err = e;\n        const body = res ? res.data : null;\n        if (res && body && body.error && res.status !== 200) {\n            if (typeof body.error === \"string\") {\n                err.message = body.error;\n                err.status = res.status;\n            } else if (Array.isArray(body.error.errors)) {\n                err.message = body.error.errors.map((err2)=>err2.message).join(\"\\n\");\n                err.code = body.error.code;\n                err.errors = body.error.errors;\n            } else {\n                err.message = body.error.message;\n                err.code = body.error.code;\n            }\n        } else if (res && res.status >= 400) {\n            // Consider all 4xx and 5xx responses errors.\n            err.message = body;\n            err.status = res.status;\n        }\n        return err;\n    }\n}\nexports.DefaultTransporter = DefaultTransporter;\n/**\n * Default user agent.\n */ DefaultTransporter.USER_AGENT = `${PRODUCT_NAME}/${pkg.version}`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/transporters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/build/src/util.js":
/*!************************************************************!*\
  !*** ./node_modules/google-auth-library/build/src/util.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LRUCache_instances, _LRUCache_cache, _LRUCache_moveToEnd, _LRUCache_evict;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LRUCache = void 0;\nexports.snakeToCamel = snakeToCamel;\nexports.originalOrCamelOptions = originalOrCamelOptions;\n/**\n * Returns the camel case of a provided string.\n *\n * @remarks\n *\n * Match any `_` and not `_` pair, then return the uppercase of the not `_`\n * character.\n *\n * @internal\n *\n * @param str the string to convert\n * @returns the camelCase'd string\n */ function snakeToCamel(str) {\n    return str.replace(/([_][^_])/g, (match)=>match.slice(1).toUpperCase());\n}\n/**\n * Get the value of `obj[key]` or `obj[camelCaseKey]`, with a preference\n * for original, non-camelCase key.\n *\n * @param obj object to lookup a value in\n * @returns a `get` function for getting `obj[key || snakeKey]`, if available\n */ function originalOrCamelOptions(obj) {\n    /**\n     *\n     * @param key an index of object, preferably snake_case\n     * @returns the value `obj[key || snakeKey]`, if available\n     */ function get(key) {\n        var _a;\n        const o = obj || {};\n        return (_a = o[key]) !== null && _a !== void 0 ? _a : o[snakeToCamel(key)];\n    }\n    return {\n        get\n    };\n}\n/**\n * A simple LRU cache utility.\n * Not meant for external usage.\n *\n * @experimental\n * @internal\n */ class LRUCache {\n    constructor(options){\n        _LRUCache_instances.add(this);\n        /**\n         * Maps are in order. Thus, the older item is the first item.\n         *\n         * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map}\n         */ _LRUCache_cache.set(this, new Map());\n        this.capacity = options.capacity;\n        this.maxAge = options.maxAge;\n    }\n    /**\n     * Add an item to the cache.\n     *\n     * @param key the key to upsert\n     * @param value the value of the key\n     */ set(key, value) {\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, value);\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n    }\n    /**\n     * Get an item from the cache.\n     *\n     * @param key the key to retrieve\n     */ get(key) {\n        const item = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").get(key);\n        if (!item) return;\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_moveToEnd).call(this, key, item.value);\n        __classPrivateFieldGet(this, _LRUCache_instances, \"m\", _LRUCache_evict).call(this);\n        return item.value;\n    }\n}\nexports.LRUCache = LRUCache;\n_LRUCache_cache = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_moveToEnd = function _LRUCache_moveToEnd(key, value) {\n    __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(key);\n    __classPrivateFieldGet(this, _LRUCache_cache, \"f\").set(key, {\n        value,\n        lastAccessed: Date.now()\n    });\n}, _LRUCache_evict = function _LRUCache_evict() {\n    const cutoffDate = this.maxAge ? Date.now() - this.maxAge : 0;\n    /**\n     * Because we know Maps are in order, this item is both the\n     * last item in the list (capacity) and oldest (maxAge).\n     */ let oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n    while(!oldestItem.done && (__classPrivateFieldGet(this, _LRUCache_cache, \"f\").size > this.capacity || // too many\n    oldestItem.value[1].lastAccessed < cutoffDate // too old\n    )){\n        __classPrivateFieldGet(this, _LRUCache_cache, \"f\").delete(oldestItem.value[0]);\n        oldestItem = __classPrivateFieldGet(this, _LRUCache_cache, \"f\").entries().next();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/google-auth-library/build/src/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/google-auth-library/package.json":
/*!*******************************************************!*\
  !*** ./node_modules/google-auth-library/package.json ***!
  \*******************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"google-auth-library","version":"9.15.0","author":"Google Inc.","description":"Google APIs Authentication Client Library for Node.js","engines":{"node":">=14"},"main":"./build/src/index.js","types":"./build/src/index.d.ts","repository":"googleapis/google-auth-library-nodejs.git","keywords":["google","api","google apis","client","client library"],"dependencies":{"base64-js":"^1.3.0","ecdsa-sig-formatter":"^1.0.11","gaxios":"^6.1.1","gcp-metadata":"^6.1.0","gtoken":"^7.0.0","jws":"^4.0.0"},"devDependencies":{"@types/base64-js":"^1.2.5","@types/chai":"^4.1.7","@types/jws":"^3.1.0","@types/mocha":"^9.0.0","@types/mv":"^2.1.0","@types/ncp":"^2.0.1","@types/node":"^20.4.2","@types/sinon":"^17.0.0","assert-rejects":"^1.0.0","c8":"^8.0.0","chai":"^4.2.0","cheerio":"1.0.0-rc.12","codecov":"^3.0.2","execa":"^5.0.0","gts":"^5.0.0","is-docker":"^2.0.0","jsdoc":"^4.0.0","jsdoc-fresh":"^3.0.0","jsdoc-region-tag":"^3.0.0","karma":"^6.0.0","karma-chrome-launcher":"^3.0.0","karma-coverage":"^2.0.0","karma-firefox-launcher":"^2.0.0","karma-mocha":"^2.0.0","karma-sourcemap-loader":"^0.4.0","karma-webpack":"5.0.0","keypair":"^1.0.4","linkinator":"^4.0.0","mocha":"^9.2.2","mv":"^2.1.1","ncp":"^2.0.0","nock":"^13.0.0","null-loader":"^4.0.0","pdfmake":"0.2.12","puppeteer":"^21.0.0","sinon":"^18.0.0","ts-loader":"^8.0.0","typescript":"^5.1.6","webpack":"^5.21.2","webpack-cli":"^4.0.0"},"files":["build/src","!build/src/**/*.map"],"scripts":{"test":"c8 mocha build/test","clean":"gts clean","prepare":"npm run compile","lint":"gts check","compile":"tsc -p .","fix":"gts fix","pretest":"npm run compile -- --sourceMap","docs":"jsdoc -c .jsdoc.json","samples-setup":"cd samples/ && npm link ../ && npm run setup && cd ../","samples-test":"cd samples/ && npm link ../ && npm test && cd ../","system-test":"mocha build/system-test --timeout 60000","presystem-test":"npm run compile -- --sourceMap","webpack":"webpack","browser-test":"karma start","docs-test":"linkinator docs","predocs-test":"npm run docs","prelint":"cd samples; npm link ../; npm install","precompile":"gts clean"},"license":"Apache-2.0"}');

/***/ })

};
;
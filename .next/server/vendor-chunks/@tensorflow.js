"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tensorflow";
exports.ids = ["vendor-chunks/@tensorflow"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphModel: () => (/* binding */ GraphModel),\n/* harmony export */   deregisterOp: () => (/* binding */ deregisterOp),\n/* harmony export */   loadGraphModel: () => (/* binding */ loadGraphModel),\n/* harmony export */   registerOp: () => (/* binding */ registerOp),\n/* harmony export */   version_converter: () => (/* binding */ version)\n/* harmony export */ });\n/* harmony import */ var _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tensorflow/tfjs-core */ \"(ssr)/./node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js\");\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */ \nvar DataType, SaverDef, __assign = function() {\n    return (__assign = Object.assign || function(e) {\n        for(var t, a = 1, r = arguments.length; a < r; a++)for(var n in t = arguments[a])Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n        return e;\n    }).apply(this, arguments);\n};\nfunction __awaiter(e, t, a, r) {\n    return new (a || (a = Promise))(function(n, s) {\n        function o(e) {\n            try {\n                u(r.next(e));\n            } catch (e) {\n                s(e);\n            }\n        }\n        function p(e) {\n            try {\n                u(r.throw(e));\n            } catch (e) {\n                s(e);\n            }\n        }\n        function u(e) {\n            e.done ? n(e.value) : new a(function(t) {\n                t(e.value);\n            }).then(o, p);\n        }\n        u((r = r.apply(e, t || [])).next());\n    });\n}\nfunction __generator(e, t) {\n    var a, r, n, s, o = {\n        label: 0,\n        sent: function() {\n            if (1 & n[0]) throw n[1];\n            return n[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return s = {\n        next: p(0),\n        throw: p(1),\n        return: p(2)\n    }, \"function\" == typeof Symbol && (s[Symbol.iterator] = function() {\n        return this;\n    }), s;\n    function p(s) {\n        return function(p) {\n            return function(s) {\n                if (a) throw new TypeError(\"Generator is already executing.\");\n                for(; o;)try {\n                    if (a = 1, r && (n = 2 & s[0] ? r.return : s[0] ? r.throw || ((n = r.return) && n.call(r), 0) : r.next) && !(n = n.call(r, s[1])).done) return n;\n                    switch(r = 0, n && (s = [\n                        2 & s[0],\n                        n.value\n                    ]), s[0]){\n                        case 0:\n                        case 1:\n                            n = s;\n                            break;\n                        case 4:\n                            return o.label++, {\n                                value: s[1],\n                                done: !1\n                            };\n                        case 5:\n                            o.label++, r = s[1], s = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            s = o.ops.pop(), o.trys.pop();\n                            continue;\n                        default:\n                            if (!(n = (n = o.trys).length > 0 && n[n.length - 1]) && (6 === s[0] || 2 === s[0])) {\n                                o = 0;\n                                continue;\n                            }\n                            if (3 === s[0] && (!n || s[1] > n[0] && s[1] < n[3])) {\n                                o.label = s[1];\n                                break;\n                            }\n                            if (6 === s[0] && o.label < n[1]) {\n                                o.label = n[1], n = s;\n                                break;\n                            }\n                            if (n && o.label < n[2]) {\n                                o.label = n[2], o.ops.push(s);\n                                break;\n                            }\n                            n[2] && o.ops.pop(), o.trys.pop();\n                            continue;\n                    }\n                    s = t.call(e, o);\n                } catch (e) {\n                    s = [\n                        6,\n                        e\n                    ], r = 0;\n                } finally{\n                    a = n = 0;\n                }\n                if (5 & s[0]) throw s[1];\n                return {\n                    value: s[0] ? s[1] : void 0,\n                    done: !0\n                };\n            }([\n                s,\n                p\n            ]);\n        };\n    }\n}\n!function(e) {\n    e[e.DT_INVALID = 0] = \"DT_INVALID\", e[e.DT_FLOAT = 1] = \"DT_FLOAT\", e[e.DT_DOUBLE = 2] = \"DT_DOUBLE\", e[e.DT_INT32 = 3] = \"DT_INT32\", e[e.DT_UINT8 = 4] = \"DT_UINT8\", e[e.DT_INT16 = 5] = \"DT_INT16\", e[e.DT_INT8 = 6] = \"DT_INT8\", e[e.DT_STRING = 7] = \"DT_STRING\", e[e.DT_COMPLEX64 = 8] = \"DT_COMPLEX64\", e[e.DT_INT64 = 9] = \"DT_INT64\", e[e.DT_BOOL = 10] = \"DT_BOOL\", e[e.DT_QINT8 = 11] = \"DT_QINT8\", e[e.DT_QUINT8 = 12] = \"DT_QUINT8\", e[e.DT_QINT32 = 13] = \"DT_QINT32\", e[e.DT_BFLOAT16 = 14] = \"DT_BFLOAT16\", e[e.DT_FLOAT_REF = 101] = \"DT_FLOAT_REF\", e[e.DT_DOUBLE_REF = 102] = \"DT_DOUBLE_REF\", e[e.DT_INT32_REF = 103] = \"DT_INT32_REF\", e[e.DT_UINT8_REF = 104] = \"DT_UINT8_REF\", e[e.DT_INT16_REF = 105] = \"DT_INT16_REF\", e[e.DT_INT8_REF = 106] = \"DT_INT8_REF\", e[e.DT_STRING_REF = 107] = \"DT_STRING_REF\", e[e.DT_COMPLEX64_REF = 108] = \"DT_COMPLEX64_REF\", e[e.DT_INT64_REF = 109] = \"DT_INT64_REF\", e[e.DT_BOOL_REF = 110] = \"DT_BOOL_REF\", e[e.DT_QINT8_REF = 111] = \"DT_QINT8_REF\", e[e.DT_QUINT8_REF = 112] = \"DT_QUINT8_REF\", e[e.DT_QINT32_REF = 113] = \"DT_QINT32_REF\", e[e.DT_BFLOAT16_REF = 114] = \"DT_BFLOAT16_REF\";\n}(DataType || (DataType = {})), function(e) {\n    !function(e) {\n        e[e.LEGACY = 0] = \"LEGACY\", e[e.V1 = 1] = \"V1\", e[e.V2 = 2] = \"V2\";\n    }(e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {}));\n}(SaverDef || (SaverDef = {}));\nvar CUSTOM_OPS = {};\nfunction registerOp(e, t) {\n    var a = {\n        tfOpName: e,\n        category: \"custom\",\n        inputs: [],\n        attrs: [],\n        customExecutor: t\n    };\n    CUSTOM_OPS[e] = a;\n}\nfunction getRegisteredOp(e) {\n    return CUSTOM_OPS[e];\n}\nfunction deregisterOp(e) {\n    delete CUSTOM_OPS[e];\n}\nfunction getParamValue(e, t, a, r) {\n    var n = t.inputParams[e];\n    if (n && void 0 !== n.inputIndexStart) {\n        var s = n.inputIndexStart, o = 0 === n.inputIndexEnd ? void 0 : void 0 === n.inputIndexEnd ? s + 1 : n.inputIndexEnd;\n        if (\"tensor\" === n.type) return getTensor(t.inputNames[n.inputIndexStart], a, r);\n        if (\"tensors\" === n.type) return t.inputNames.slice(s, o).map(function(e) {\n            return getTensor(e, a, r);\n        });\n        var p = Array.prototype.slice.call(getTensor(t.inputNames.slice(s)[0], a, r).dataSync());\n        return \"number\" === n.type ? p[0] : p;\n    }\n    var u = t.attrParams[e];\n    return u && u.value;\n}\nfunction getTensor(e, t, a) {\n    var r = parseNodeName(e), n = r[0], s = r[1], o = a.currentContextIds.find(function(e) {\n        return !!t[getNodeNameWithContextId(n, e)];\n    });\n    return void 0 !== o ? t[getNodeNameWithContextId(n, o)][s] : void 0;\n}\nfunction getTensorsForCurrentContenxt(e, t, a) {\n    return t[getNodeNameWithContextId(e, a.currentContextId)];\n}\nfunction getNodeNameAndIndex(e, t) {\n    var a = parseNodeName(e), r = a[0], n = a[1];\n    return [\n        getNodeNameWithContextId(r, t && t.currentContextId),\n        n\n    ];\n}\nfunction getNodeNameWithContextId(e, t) {\n    return t ? e + \"-\" + t : e;\n}\nfunction parseNodeName(e) {\n    var t = e.lastIndexOf(\":\");\n    return -1 === t ? [\n        e,\n        0\n    ] : [\n        e.substring(0, t),\n        Number(e.substring(t + 1))\n    ];\n}\nfunction split$1(e, t) {\n    for(var a = [], r = 0; r < e.length; r += t)a.push(e.slice(r, r + t));\n    return a;\n}\nvar json = [\n    {\n        tfOpName: \"Add\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"AddV2\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"AddN\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                end: 0,\n                name: \"tensors\",\n                type: \"tensors\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"BiasAdd\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Sub\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"RealDiv\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Div\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"DivNoNan\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"FloorDiv\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Mul\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Maximum\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Minimum\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Pow\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"SquaredDifference\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Mod\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"FloorMod\",\n        category: \"arithmetic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    }\n], arithmetic = Object.freeze({\n    json: json\n}), json$1 = [\n    {\n        tfOpName: \"Abs\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Acos\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Asin\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Atan\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Atan2\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"y\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Ceil\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"ClipByValue\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"clip_value_min\",\n                name: \"clipValueMin\",\n                type: \"number\"\n            },\n            {\n                tfName: \"clip_value_max\",\n                name: \"clipValueMax\",\n                type: \"number\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Complex\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"real\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"imag\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"ComplexAbs\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Cos\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Cosh\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Elu\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Exp\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Floor\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Log\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Imag\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            },\n            {\n                tfName: \"Tout\",\n                name: \"outputType\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Neg\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Real\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            },\n            {\n                tfName: \"Tout\",\n                name: \"outputType\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Prelu\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"alpha\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Relu\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Relu6\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            },\n            {\n                tfName: \"clipValueMin\",\n                name: \"clipValueMin\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"clipValueMax\",\n                name: \"clipValueMax\",\n                type: \"number\",\n                defaultValue: 6\n            }\n        ]\n    },\n    {\n        tfOpName: \"Selu\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Sigmoid\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Sin\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Sinh\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Sqrt\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Rsqrt\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Square\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Tan\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Tanh\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Sign\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Round\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Expm1\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Log1p\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Reciprocal\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Softplus\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Asinh\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Acosh\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Atanh\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Erf\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Prod\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axes\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"keep_dims\",\n                name: \"keepDims\",\n                type: \"bool\",\n                notSupported: !0\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"LeakyRelu\",\n        category: \"basic_math\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"alpha\",\n                name: \"alpha\",\n                type: \"number\",\n                defaultValue: .2\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    }\n], basicMath = Object.freeze({\n    json: json$1\n}), json$2 = [\n    {\n        tfOpName: \"LoopCond\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"pred\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Switch\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"data\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"pred\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Merge\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                end: 0,\n                name: \"tensors\",\n                type: \"tensors\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Enter\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensor\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            },\n            {\n                tfName: \"frame_name\",\n                name: \"frameName\",\n                type: \"string\"\n            },\n            {\n                tfName: \"is_constant\",\n                name: \"isConstant\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Exit\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensor\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"NextIteration\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensor\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"TensorArrayV3\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"size\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"dtype\",\n                name: \"dtype\",\n                type: \"dtype\"\n            },\n            {\n                tfName: \"element_shape\",\n                name: \"elementShape\",\n                type: \"shape\"\n            },\n            {\n                tfName: \"dynamic_size\",\n                name: \"dynamicSize\",\n                type: \"bool\"\n            },\n            {\n                tfName: \"clear_after_read\",\n                name: \"clearAfterRead\",\n                type: \"bool\"\n            },\n            {\n                tfName: \"identical_element_shapes\",\n                name: \"identicalElementShapes\",\n                type: \"bool\"\n            },\n            {\n                tfName: \"tensor_array_name\",\n                name: \"name\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"TensorArrayWriteV3\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensorArrayId\",\n                type: \"number\"\n            },\n            {\n                start: 1,\n                name: \"index\",\n                type: \"number\"\n            },\n            {\n                start: 2,\n                name: \"tensor\",\n                type: \"tensor\"\n            },\n            {\n                start: 3,\n                name: \"flowIn\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"TensorArrayReadV3\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensorArrayId\",\n                type: \"number\"\n            },\n            {\n                start: 1,\n                name: \"index\",\n                type: \"number\"\n            },\n            {\n                start: 2,\n                name: \"flowIn\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"dtype\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"TensorArrayGatherV3\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensorArrayId\",\n                type: \"number\"\n            },\n            {\n                start: 1,\n                name: \"indices\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"flowIn\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"dtype\",\n                name: \"dtype\",\n                type: \"dtype\"\n            },\n            {\n                tfName: \"element_shape\",\n                name: \"elementShape\",\n                type: \"shape\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"TensorArrayScatterV3\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensorArrayId\",\n                type: \"number\"\n            },\n            {\n                start: 1,\n                name: \"indices\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"tensor\",\n                type: \"tensor\"\n            },\n            {\n                start: 3,\n                name: \"flowIn\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"TensorArrayConcatV3\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensorArrayId\",\n                type: \"number\"\n            },\n            {\n                start: 1,\n                name: \"flowIn\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"dtype\",\n                name: \"dtype\",\n                type: \"dtype\"\n            },\n            {\n                tfName: \"element_shape_except0\",\n                name: \"elementShapeExcept0\",\n                type: \"shape\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"TensorArraySplitV3\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensorArrayId\",\n                type: \"number\"\n            },\n            {\n                start: 1,\n                name: \"tensor\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"lengths\",\n                type: \"number[]\"\n            },\n            {\n                start: 3,\n                name: \"flowIn\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"TensorArraySizeV3\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensorArrayId\",\n                type: \"number\"\n            },\n            {\n                start: 1,\n                name: \"flowIn\",\n                type: \"number\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"TensorArrayCloseV3\",\n        category: \"control\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensorArrayId\",\n                type: \"number\"\n            }\n        ]\n    }\n], control = Object.freeze({\n    json: json$2\n}), json$3 = [\n    {\n        tfOpName: \"AvgPool\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                notSupported: !0\n            },\n            {\n                tfName: \"ksize\",\n                name: \"kernelSize\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"MaxPool\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                notSupported: !0\n            },\n            {\n                tfName: \"ksize\",\n                name: \"kernelSize\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"MaxPoolWithArgmax\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"ksize\",\n                name: \"kernelSize\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"include_batch_in_index\",\n                name: \"includeBatchInIndex\",\n                type: \"bool\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"AvgPool3D\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                notSupported: !0\n            },\n            {\n                tfName: \"ksize\",\n                name: \"kernelSize\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"MaxPool3D\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                notSupported: !0\n            },\n            {\n                tfName: \"ksize\",\n                name: \"kernelSize\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Conv1D\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"filter\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"stride\",\n                name: \"stride\",\n                type: \"number\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                defaultValue: \"NWC\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            },\n            {\n                tfName: \"dilation\",\n                name: \"dilation\",\n                type: \"number\",\n                defaultValue: 1\n            }\n        ]\n    },\n    {\n        tfOpName: \"Conv2D\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"filter\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            },\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"useCudnnOnGpu\",\n                name: \"useCudnnOnGpu\",\n                type: \"bool\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                defaultValue: \"NHWC\"\n            },\n            {\n                tfName: \"dilations\",\n                name: \"dilations\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"_FusedConv2D\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"filter\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                end: 0,\n                name: \"args\",\n                type: \"tensors\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"num_args\",\n                name: \"numArgs\",\n                type: \"number\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            },\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"explicit_paddings\",\n                name: \"explicitPaddings\",\n                type: \"number[]\",\n                defaultValue: []\n            },\n            {\n                tfName: \"use_cudnn_on_gpu\",\n                name: \"useCudnnOnGpu\",\n                type: \"bool\",\n                defaultValue: !0\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                defaultValue: \"NHWC\"\n            },\n            {\n                tfName: \"dilations\",\n                name: \"dilations\",\n                type: \"number[]\",\n                defaultValue: [\n                    1,\n                    1,\n                    1,\n                    1\n                ]\n            },\n            {\n                tfName: \"fused_ops\",\n                name: \"fusedOps\",\n                type: \"string[]\",\n                defaultValue: []\n            },\n            {\n                tfName: \"epsilon\",\n                name: \"epsilon\",\n                type: \"number\",\n                defaultValue: 1e-4\n            }\n        ]\n    },\n    {\n        tfOpName: \"Conv2DBackpropInput\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 2,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"filter\",\n                type: \"tensor\"\n            },\n            {\n                start: 0,\n                name: \"outputShape\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"DepthwiseConv2d\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"input\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"filter\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                defaultValue: \"NHWC\"\n            },\n            {\n                tfName: \"dilations\",\n                name: \"dilations\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"DepthwiseConv2dNative\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"input\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"filter\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                defaultValue: \"NHWC\"\n            },\n            {\n                tfName: \"dilations\",\n                name: \"dilations\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"FusedDepthwiseConv2dNative\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"filter\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                end: 0,\n                name: \"args\",\n                type: \"tensors\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"num_args\",\n                name: \"numArgs\",\n                type: \"number\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            },\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                defaultValue: \"NHWC\"\n            },\n            {\n                tfName: \"dilations\",\n                name: \"dilations\",\n                type: \"number[]\",\n                defaultValue: [\n                    1,\n                    1,\n                    1,\n                    1\n                ]\n            },\n            {\n                tfName: \"fused_ops\",\n                name: \"fusedOps\",\n                type: \"string[]\",\n                defaultValue: []\n            }\n        ]\n    },\n    {\n        tfOpName: \"Conv3D\",\n        category: \"convolution\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"filter\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"strides\",\n                name: \"strides\",\n                type: \"number[]\"\n            },\n            {\n                tfName: \"padding\",\n                name: \"pad\",\n                type: \"string\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                defaultValue: \"NHWC\"\n            },\n            {\n                tfName: \"dilations\",\n                name: \"dilations\",\n                type: \"number[]\"\n            }\n        ]\n    }\n], convolution = Object.freeze({\n    json: json$3\n}), json$4 = [\n    {\n        tfOpName: \"Fill\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"shape\",\n                type: \"number[]\"\n            },\n            {\n                start: 1,\n                name: \"value\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"LinSpace\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"start\",\n                type: \"number\"\n            },\n            {\n                start: 1,\n                name: \"stop\",\n                type: \"number\"\n            },\n            {\n                start: 2,\n                name: \"num\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"OneHot\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"indices\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"depth\",\n                type: \"number\"\n            },\n            {\n                start: 2,\n                name: \"onValue\",\n                type: \"number\",\n                defaultValue: 1\n            },\n            {\n                start: 3,\n                name: \"offValue\",\n                type: \"number\",\n                defaultValue: 0\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"axis\",\n                name: \"axis\",\n                type: \"number\",\n                notSupported: !0\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Ones\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"shape\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"OnesLike\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"dtype\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"RandomUniform\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"shape\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"minval\",\n                name: \"minval\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"maxval\",\n                name: \"maxval\",\n                type: \"number\",\n                defaultValue: 1\n            },\n            {\n                tfName: \"dtype\",\n                name: \"dtype\",\n                type: \"dtype\"\n            },\n            {\n                tfName: \"seed\",\n                name: \"seed\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"seed2\",\n                name: \"seed2\",\n                type: \"number\",\n                defaultValue: 0,\n                notSupported: !0\n            },\n            {\n                tfName: \"T\",\n                name: \"T\",\n                type: \"number\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Range\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"start\",\n                type: \"number\"\n            },\n            {\n                start: 1,\n                name: \"stop\",\n                type: \"number\"\n            },\n            {\n                start: 2,\n                name: \"step\",\n                type: \"number\",\n                defaultValue: 0\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"Tidx\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"TruncatedNormal\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"shape\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"means\",\n                name: \"mean\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"stddev\",\n                name: \"stdDev\",\n                type: \"number\",\n                defaultValue: 1\n            },\n            {\n                tfName: \"seed\",\n                name: \"seed\",\n                type: \"number\"\n            },\n            {\n                tfName: \"seed2\",\n                name: \"seed2\",\n                type: \"number\",\n                defaultValue: 0,\n                notSupported: !0\n            },\n            {\n                tfName: \"dtype\",\n                name: \"dtype\",\n                type: \"dtype\"\n            },\n            {\n                tfName: \"T\",\n                name: \"T\",\n                type: \"number\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Zeros\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"shape\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"ZerosLike\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Multinomial\",\n        category: \"creation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"logits\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"numSamples\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"seed\",\n                name: \"seed\",\n                type: \"number\"\n            },\n            {\n                tfName: \"seed2\",\n                name: \"seed2\",\n                type: \"number\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\"\n            },\n            {\n                tfName: \"output_dtype\",\n                name: \"output_dtype\",\n                type: \"dtype\"\n            }\n        ]\n    }\n], creation = Object.freeze({\n    json: json$4\n}), json$5 = [\n    {\n        tfOpName: \"NonMaxSuppressionV2\",\n        category: \"dynamic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"boxes\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"scores\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"maxOutputSize\",\n                type: \"number\"\n            },\n            {\n                start: 3,\n                name: \"iouThreshold\",\n                type: \"number\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"NonMaxSuppressionV3\",\n        category: \"dynamic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"boxes\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"scores\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"maxOutputSize\",\n                type: \"number\"\n            },\n            {\n                start: 3,\n                name: \"iouThreshold\",\n                type: \"number\"\n            },\n            {\n                start: 4,\n                name: \"scoreThreshold\",\n                type: \"number\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"NonMaxSuppressionV5\",\n        category: \"dynamic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"boxes\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"scores\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"maxOutputSize\",\n                type: \"number\"\n            },\n            {\n                start: 3,\n                name: \"iouThreshold\",\n                type: \"number\"\n            },\n            {\n                start: 4,\n                name: \"scoreThreshold\",\n                type: \"number\"\n            },\n            {\n                start: 5,\n                name: \"softNmsSigma\",\n                type: \"number\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Where\",\n        category: \"dynamic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"condition\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"ListDiff\",\n        category: \"dynamic\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"y\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    }\n], dynamic = Object.freeze({\n    json: json$5\n}), json$6 = [\n    {\n        tfOpName: \"TopKV2\",\n        category: \"evaluation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"k\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"sorted\",\n                name: \"sorted\",\n                type: \"bool\"\n            }\n        ]\n    }\n], evaluation = Object.freeze({\n    json: json$6\n}), json$7 = [\n    {\n        tfOpName: \"PlaceholderWithDefault\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                name: \"default\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"shape\",\n                name: \"shape\",\n                type: \"shape\"\n            },\n            {\n                tfName: \"dtype\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Placeholder\",\n        category: \"graph\",\n        attrs: [\n            {\n                tfName: \"shape\",\n                name: \"shape\",\n                type: \"shape\"\n            },\n            {\n                tfName: \"dtype\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Const\",\n        category: \"graph\"\n    },\n    {\n        tfOpName: \"Identity\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"IdentityN\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                end: 0,\n                name: \"x\",\n                type: \"tensors\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Snapshot\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Rank\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Size\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Shape\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"ShapeN\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                end: 0,\n                name: \"x\",\n                type: \"tensors\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Print\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"data\",\n                type: \"tensors\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"message\",\n                name: \"message\",\n                type: \"string\"\n            },\n            {\n                tfName: \"first_n\",\n                name: \"firstN\",\n                type: \"number\",\n                notSupported: !0\n            },\n            {\n                tfName: \"summarize\",\n                name: \"summarize\",\n                type: \"number\",\n                defaultValue: 3\n            }\n        ]\n    },\n    {\n        tfOpName: \"NoOp\",\n        category: \"graph\",\n        inputs: []\n    },\n    {\n        tfOpName: \"StopGradient\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"FakeQuantWithMinMaxVars\",\n        category: \"graph\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"min\",\n                name: \"min\",\n                type: \"number\"\n            },\n            {\n                tfName: \"max\",\n                name: \"max\",\n                type: \"number\"\n            }\n        ]\n    }\n], graph = Object.freeze({\n    json: json$7\n}), json$8 = [\n    {\n        tfOpName: \"ResizeBilinear\",\n        category: \"image\",\n        inputs: [\n            {\n                start: 0,\n                name: \"images\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"size\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"align_corners\",\n                name: \"alignCorners\",\n                type: \"bool\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"ResizeNearestNeighbor\",\n        category: \"image\",\n        inputs: [\n            {\n                start: 0,\n                name: \"images\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"size\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"align_corners\",\n                name: \"alignCorners\",\n                type: \"bool\"\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"CropAndResize\",\n        category: \"image\",\n        inputs: [\n            {\n                start: 0,\n                name: \"image\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"boxes\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"boxInd\",\n                type: \"tensor\"\n            },\n            {\n                start: 3,\n                name: \"cropSize\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"method\",\n                name: \"method\",\n                type: \"string\"\n            },\n            {\n                tfName: \"extrapolation_value\",\n                name: \"extrapolationValue\",\n                type: \"number\"\n            }\n        ]\n    }\n], image$1 = Object.freeze({\n    json: json$8\n}), json$9 = [\n    {\n        tfOpName: \"Equal\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"NotEqual\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Greater\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"GreaterEqual\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Less\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"LessEqual\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"LogicalAnd\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"LogicalNot\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"LogicalOr\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Select\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"condition\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"SelectV2\",\n        category: \"logical\",\n        inputs: [\n            {\n                start: 0,\n                name: \"condition\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    }\n], logical = Object.freeze({\n    json: json$9\n}), json$10 = [\n    {\n        tfOpName: \"_FusedMatMul\",\n        category: \"matrices\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                end: 0,\n                name: \"args\",\n                type: \"tensors\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"num_args\",\n                name: \"numArgs\",\n                type: \"number\"\n            },\n            {\n                tfName: \"fused_ops\",\n                name: \"fusedOps\",\n                type: \"string[]\",\n                defaultValue: []\n            },\n            {\n                tfName: \"epsilon\",\n                name: \"epsilon\",\n                type: \"number\",\n                defaultValue: 1e-4\n            },\n            {\n                tfName: \"transpose_a\",\n                name: \"transposeA\",\n                type: \"bool\",\n                defaultValue: !1\n            },\n            {\n                tfName: \"transpose_b\",\n                name: \"transposeB\",\n                type: \"bool\",\n                defaultValue: !1\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"MatMul\",\n        category: \"matrices\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"transpose_a\",\n                name: \"transposeA\",\n                type: \"bool\",\n                defaultValue: !1\n            },\n            {\n                tfName: \"transpose_b\",\n                name: \"transposeB\",\n                type: \"bool\",\n                defaultValue: !1\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"BatchMatMul\",\n        category: \"matrices\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"adj_x\",\n                name: \"transposeA\",\n                type: \"bool\",\n                defaultValue: !1\n            },\n            {\n                tfName: \"adj_y\",\n                name: \"transposeB\",\n                type: \"bool\",\n                defaultValue: !1\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"BatchMatMulV2\",\n        category: \"matrices\",\n        inputs: [\n            {\n                start: 0,\n                name: \"a\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"b\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"adj_x\",\n                name: \"transposeA\",\n                type: \"bool\",\n                defaultValue: !1\n            },\n            {\n                tfName: \"adj_y\",\n                name: \"transposeB\",\n                type: \"bool\",\n                defaultValue: !1\n            },\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Transpose\",\n        category: \"matrices\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"perm\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"T\",\n                name: \"dtype\",\n                type: \"dtype\",\n                notSupported: !0\n            }\n        ]\n    }\n], matrices = Object.freeze({\n    json: json$10\n}), json$11 = [\n    {\n        tfOpName: \"FusedBatchNorm\",\n        category: \"normalization\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"scale\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"offset\",\n                type: \"tensor\"\n            },\n            {\n                start: 3,\n                name: \"mean\",\n                type: \"tensor\"\n            },\n            {\n                start: 4,\n                name: \"variance\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"epsilon\",\n                name: \"epsilon\",\n                type: \"number\",\n                defaultValue: .001\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"FusedBatchNormV2\",\n        category: \"normalization\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"scale\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"offset\",\n                type: \"tensor\"\n            },\n            {\n                start: 3,\n                name: \"mean\",\n                type: \"tensor\"\n            },\n            {\n                start: 4,\n                name: \"variance\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"epsilon\",\n                name: \"epsilon\",\n                type: \"number\",\n                defaultValue: .001\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"FusedBatchNormV3\",\n        category: \"normalization\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"scale\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"offset\",\n                type: \"tensor\"\n            },\n            {\n                start: 3,\n                name: \"mean\",\n                type: \"tensor\"\n            },\n            {\n                start: 4,\n                name: \"variance\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"epsilon\",\n                name: \"epsilon\",\n                type: \"number\",\n                defaultValue: .001\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"LRN\",\n        category: \"normalization\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"depth_radius\",\n                name: \"radius\",\n                type: \"number\",\n                defaultValue: 5\n            },\n            {\n                tfName: \"bias\",\n                name: \"bias\",\n                type: \"number\",\n                defaultValue: 1\n            },\n            {\n                tfName: \"alpha\",\n                name: \"alpha\",\n                type: \"number\",\n                defaultValue: 1\n            },\n            {\n                tfName: \"beta\",\n                name: \"beta\",\n                type: \"number\",\n                defaultValue: .5\n            }\n        ]\n    },\n    {\n        tfOpName: \"Softmax\",\n        category: \"normalization\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"LogSoftmax\",\n        category: \"normalization\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"SparseToDense\",\n        category: \"normalization\",\n        inputs: [\n            {\n                start: 0,\n                name: \"sparseIndices\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"outputShape\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"sparseValues\",\n                type: \"tensor\"\n            },\n            {\n                start: 3,\n                name: \"defaultValue\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"validate_indices\",\n                name: \"validateIndices\",\n                type: \"bool\",\n                defaultValue: !0,\n                notSupported: !0\n            }\n        ]\n    }\n], normalization = Object.freeze({\n    json: json$11\n}), json$12 = [\n    {\n        tfOpName: \"Max\",\n        category: \"reduction\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"keep_dims\",\n                name: \"keepDims\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Mean\",\n        category: \"reduction\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"keep_dims\",\n                name: \"keepDims\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Min\",\n        category: \"reduction\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"keep_dims\",\n                name: \"keepDims\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Sum\",\n        category: \"reduction\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"keep_dims\",\n                name: \"keepDims\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"All\",\n        category: \"reduction\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"keep_dims\",\n                name: \"keepDims\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Any\",\n        category: \"reduction\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"keep_dims\",\n                name: \"keepDims\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"ArgMax\",\n        category: \"reduction\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"ArgMin\",\n        category: \"reduction\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Prod\",\n        category: \"reduction\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"keep_dims\",\n                name: \"keepDims\",\n                type: \"bool\"\n            }\n        ]\n    }\n], reduction = Object.freeze({\n    json: json$12\n}), json$13 = [\n    {\n        tfOpName: \"ConcatV2\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                end: -1,\n                name: \"tensors\",\n                type: \"tensors\"\n            },\n            {\n                start: -1,\n                name: \"axis\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"N\",\n                name: \"n\",\n                type: \"number\",\n                defaultValue: 2\n            }\n        ]\n    },\n    {\n        tfOpName: \"Concat\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 1,\n                end: 0,\n                name: \"tensors\",\n                type: \"tensors\"\n            },\n            {\n                start: 0,\n                name: \"axis\",\n                type: \"number\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"N\",\n                name: \"n\",\n                type: \"number\",\n                defaultValue: 2\n            }\n        ]\n    },\n    {\n        tfOpName: \"GatherV2\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"indices\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"axis\",\n                type: \"number\",\n                defaultValue: 0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Gather\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"indices\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"axis\",\n                name: \"axis\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"validate_indices\",\n                name: \"validateIndices\",\n                type: \"bool\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Reverse\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"dims\",\n                type: \"bool\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"ReverseV2\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Slice\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"begin\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"size\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"StridedSlice\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"begin\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"end\",\n                type: \"number[]\"\n            },\n            {\n                start: 3,\n                name: \"strides\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"begin_mask\",\n                name: \"beginMask\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"end_mask\",\n                name: \"endMask\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"new_axis_mask\",\n                name: \"newAxisMask\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"ellipsis_mask\",\n                name: \"ellipsisMask\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"shrink_axis_mask\",\n                name: \"shrinkAxisMask\",\n                type: \"number\",\n                defaultValue: 0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Pack\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                end: 0,\n                name: \"tensors\",\n                type: \"tensors\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"axis\",\n                name: \"axis\",\n                type: \"number\",\n                defaultValue: 0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Unpack\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"tensor\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"axis\",\n                name: \"axis\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                tfName: \"num\",\n                name: \"num\",\n                type: \"number\",\n                defaultValue: 0,\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Tile\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"reps\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Split\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"axis\",\n                type: \"number\",\n                defaultValue: 0\n            },\n            {\n                start: 1,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"num_split\",\n                name: \"numOrSizeSplits\",\n                type: \"number\",\n                defaultValue: 1\n            }\n        ]\n    },\n    {\n        tfOpName: \"SplitV\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"numOrSizeSplits\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"axis\",\n                type: \"number\",\n                defaultValue: 0\n            }\n        ]\n    },\n    {\n        tfOpName: \"ScatterNd\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"indices\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"values\",\n                type: \"tensor\"\n            },\n            {\n                start: 2,\n                name: \"shape\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"GatherNd\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"indices\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"SparseToDense\",\n        category: \"slice_join\",\n        inputs: [\n            {\n                start: 0,\n                name: \"sparseIndices\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"outputShape\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"sparseValues\",\n                type: \"tensor\"\n            },\n            {\n                start: 3,\n                name: \"defaultValue\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"validate_indices\",\n                name: \"validateIndices\",\n                type: \"bool\",\n                defaultValue: !1,\n                notSupported: !0\n            }\n        ]\n    }\n], sliceJoin = Object.freeze({\n    json: json$13\n}), json$14 = [\n    {\n        tfOpName: \"FFT\",\n        category: \"spectral\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"IFFT\",\n        category: \"spectral\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"RFFT\",\n        category: \"spectral\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"fft_length\",\n                type: \"number\",\n                notSupported: !0\n            }\n        ]\n    },\n    {\n        tfOpName: \"IRFFT\",\n        category: \"spectral\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"fft_length\",\n                type: \"number\",\n                notSupported: !0\n            }\n        ]\n    }\n], spectral = Object.freeze({\n    json: json$14\n}), json$15 = [\n    {\n        tfOpName: \"Cast\",\n        category: \"transformation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"SrcT\",\n                name: \"sdtype\",\n                type: \"dtype\",\n                notSupported: !0\n            },\n            {\n                tfName: \"DstT\",\n                name: \"dtype\",\n                type: \"dtype\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"ExpandDims\",\n        category: \"transformation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"axis\",\n                type: \"number\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Pad\",\n        category: \"transformation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"padding\",\n                type: \"number[]\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"constant_value\",\n                name: \"constantValue\",\n                type: \"number\",\n                defaultValue: 0\n            }\n        ]\n    },\n    {\n        tfOpName: \"PadV2\",\n        category: \"transformation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"padding\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"constantValue\",\n                type: \"number\",\n                defaultValue: 0\n            }\n        ]\n    },\n    {\n        tfOpName: \"Reshape\",\n        category: \"transformation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"shape\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"Squeeze\",\n        category: \"transformation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"axis\",\n                tfDeprecatedName: \"squeeze_dims\",\n                name: \"axis\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"SpaceToBatchND\",\n        category: \"transformation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"blockShape\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"paddings\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"BatchToSpaceND\",\n        category: \"transformation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            },\n            {\n                start: 1,\n                name: \"blockShape\",\n                type: \"number[]\"\n            },\n            {\n                start: 2,\n                name: \"crops\",\n                type: \"number[]\"\n            }\n        ]\n    },\n    {\n        tfOpName: \"DepthToSpace\",\n        category: \"transformation\",\n        inputs: [\n            {\n                start: 0,\n                name: \"x\",\n                type: \"tensor\"\n            }\n        ],\n        attrs: [\n            {\n                tfName: \"block_size\",\n                name: \"blockSize\",\n                type: \"number\"\n            },\n            {\n                tfName: \"data_format\",\n                name: \"dataFormat\",\n                type: \"string\"\n            }\n        ]\n    }\n], transformation = Object.freeze({\n    json: json$15\n}), OperationMapper = function() {\n    function e() {\n        var e = [\n            arithmetic,\n            basicMath,\n            control,\n            convolution,\n            creation,\n            dynamic,\n            evaluation,\n            logical,\n            image$1,\n            graph,\n            matrices,\n            normalization,\n            reduction,\n            sliceJoin,\n            spectral,\n            transformation\n        ], t = [].concat.apply([], e.map(function(e) {\n            return e.json;\n        }));\n        this.opMappers = t.reduce(function(e, t) {\n            return e[t.tfOpName] = t, e;\n        }, {});\n    }\n    return Object.defineProperty(e, \"Instance\", {\n        get: function() {\n            return this._instance || (this._instance = new this);\n        },\n        enumerable: !0,\n        configurable: !0\n    }), e.prototype.transformGraph = function(e, t) {\n        var a = this;\n        void 0 === t && (t = {});\n        var r = [], n = [], s = e.node.reduce(function(e, t) {\n            return e[t.name] = a.mapNode(t), t.op.startsWith(\"Placeholder\") && r.push(e[t.name]), \"Const\" === t.op && n.push(e[t.name]), e;\n        }, {}), o = [], p = [], u = {}, i = {};\n        null != t && (u = this.mapSignatureEntries(t.inputs), i = this.mapSignatureEntries(t.outputs));\n        var m = Object.keys(s);\n        return m.forEach(function(e) {\n            var t = s[e];\n            t.inputNames.forEach(function(e) {\n                var a = getNodeNameAndIndex(e)[0];\n                t.inputs.push(s[a]), s[a].children.push(t);\n            });\n        }), 0 === Object.keys(i).length ? m.forEach(function(e) {\n            var t = s[e];\n            0 === t.children.length && p.push(t);\n        }) : Object.keys(i).forEach(function(e) {\n            var t = getNodeNameAndIndex(e)[0], a = s[t];\n            null != a && (a.signatureKey = i[e], p.push(a));\n        }), Object.keys(u).length > 0 ? Object.keys(u).forEach(function(e) {\n            var t = getNodeNameAndIndex(e)[0], a = s[t];\n            a && (a.signatureKey = u[e], o.push(a));\n        }) : o = r, {\n            nodes: s,\n            inputs: o,\n            outputs: p,\n            weights: n,\n            placeholders: r,\n            signature: t\n        };\n    }, e.prototype.mapSignatureEntries = function(e) {\n        return Object.keys(e || {}).reduce(function(t, a) {\n            return t[e[a].name] = a, t;\n        }, {});\n    }, e.prototype.mapNode = function(e) {\n        var t = getRegisteredOp(e.op) || this.opMappers[e.op] || {};\n        null == e.attr && (e.attr = {});\n        var a = {\n            name: e.name,\n            op: e.op,\n            category: t.category,\n            inputNames: (e.input || []).map(function(e) {\n                return e.startsWith(\"^\") ? e.substr(1) : e;\n            }),\n            inputs: [],\n            children: [],\n            inputParams: {},\n            attrParams: {},\n            rawAttrs: e.attr\n        };\n        return null != t.inputs && (a.inputParams = t.inputs.reduce(function(e, t) {\n            return e[t.name] = {\n                type: t.type,\n                inputIndexStart: t.start,\n                inputIndexEnd: t.end\n            }, e;\n        }, {})), null != t.attrs && (a.attrParams = t.attrs.reduce(function(t, a) {\n            var r = a.type, n = void 0;\n            switch(a.type){\n                case \"string\":\n                    void 0 === (n = getStringParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getStringParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"string[]\":\n                    void 0 === (n = getStringArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getStringArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"number\":\n                    void 0 === (n = getNumberParam(e.attr, a.tfName, a.defaultValue || 0)) && a.tfDeprecatedName && (n = getNumberParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"number[]\":\n                    void 0 === (n = getNumericArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getNumericArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"bool\":\n                    void 0 === (n = getBoolParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getBoolParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"bool[]\":\n                    void 0 === (n = getBoolArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getBoolArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"shape\":\n                    void 0 === (n = getTensorShapeParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getTensorShapeParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"shape[]\":\n                    void 0 === (n = getTensorShapeArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getTensorShapeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"dtype\":\n                    void 0 === (n = getDtypeParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getDtypeParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"dtype[]\":\n                    void 0 === (n = getDtypeArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getDtypeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n                    break;\n                case \"tensor\":\n                case \"tensors\":\n                    break;\n                default:\n                    throw new Error(\"Unsupported param type: \" + a.type + \" for op: \" + e.op);\n            }\n            return t[a.name] = {\n                value: n,\n                type: r\n            }, t;\n        }, {})), a;\n    }, e;\n}();\nfunction decodeBase64(e) {\n    var t = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.env)().global;\n    if (void 0 !== t.atob) return t.atob(e);\n    if (\"undefined\" != typeof Buffer) return new Buffer(e, \"base64\").toString();\n    throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\");\n}\nfunction parseStringParam(e, t) {\n    var a = Array.isArray(e) ? String.fromCharCode.apply(null, e) : decodeBase64(e);\n    return t ? a : a.toLowerCase();\n}\nfunction getStringParam(e, t, a, r) {\n    void 0 === r && (r = !1);\n    var n = e[t];\n    return null != n ? parseStringParam(n.s, r) : a;\n}\nfunction getBoolParam(e, t, a) {\n    var r = e[t];\n    return r ? r.b : a;\n}\nfunction getNumberParam(e, t, a) {\n    var r = e[t] || {}, n = null != r.i ? r.i : null != r.f ? r.f : a;\n    return \"number\" == typeof n ? n : parseInt(n, 10);\n}\nfunction parseDtypeParam(e) {\n    switch(\"string\" == typeof e && (e = DataType[e]), e){\n        case DataType.DT_FLOAT:\n            return \"float32\";\n        case DataType.DT_INT32:\n        case DataType.DT_INT64:\n        case DataType.DT_INT8:\n        case DataType.DT_UINT8:\n            return \"int32\";\n        case DataType.DT_BOOL:\n            return \"bool\";\n        case DataType.DT_DOUBLE:\n            return \"float32\";\n        case DataType.DT_STRING:\n            return \"string\";\n        default:\n            return null;\n    }\n}\nfunction getDtypeParam(e, t, a) {\n    var r = e[t];\n    return r && r.type ? parseDtypeParam(r.type) : a;\n}\nfunction getDtypeArrayParam(e, t, a) {\n    var r = e[t];\n    return r && r.list && r.list.type ? r.list.type.map(function(e) {\n        return parseDtypeParam(e);\n    }) : a;\n}\nfunction parseTensorShapeParam(e) {\n    if (!e.unknownRank) return null != e.dim ? e.dim.map(function(e) {\n        return \"number\" == typeof e.size ? e.size : parseInt(e.size, 10);\n    }) : [];\n}\nfunction getTensorShapeParam(e, t, a) {\n    var r = e[t];\n    return r && r.shape ? parseTensorShapeParam(r.shape) : a;\n}\nfunction getNumericArrayParam(e, t, a) {\n    var r = e[t];\n    return r ? ((r.list.f && r.list.f.length ? r.list.f : r.list.i) || []).map(function(e) {\n        return \"number\" == typeof e ? e : parseInt(e, 10);\n    }) : a;\n}\nfunction getStringArrayParam(e, t, a, r) {\n    void 0 === r && (r = !1);\n    var n = e[t];\n    return n && n.list && n.list.s ? n.list.s.map(function(e) {\n        return parseStringParam(e, r);\n    }) : a;\n}\nfunction getTensorShapeArrayParam(e, t, a) {\n    var r = e[t];\n    return r && r.list && r.list.shape ? r.list.shape.map(function(e) {\n        return parseTensorShapeParam(e);\n    }) : a;\n}\nfunction getBoolArrayParam(e, t, a) {\n    var r = e[t];\n    return r && r.list && r.list.b ? r.list.b : a;\n}\nvar NodeValueImpl = function() {\n    function e(e, t, a) {\n        var r = this;\n        this.node = e, this.tensorMap = t, this.context = a, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map(function(e) {\n            return r.getInput(e);\n        }), null != e.rawAttrs && (this.attrs = Object.keys(e.rawAttrs).reduce(function(e, t) {\n            return e[t] = r.getAttr(t), e;\n        }, {}));\n    }\n    return e.prototype.getInput = function(e) {\n        return getTensor(e, this.tensorMap, this.context);\n    }, e.prototype.getAttr = function(e, t) {\n        var a = this.node.rawAttrs[e];\n        if (null != a.tensor) return getTensor(e, this.tensorMap, this.context);\n        if (null != a.i || null != a.f) return getNumberParam(this.node.rawAttrs, e, t);\n        if (null != a.s) return getStringParam(this.node.rawAttrs, e, t);\n        if (null != a.b) return getBoolParam(this.node.rawAttrs, e, t);\n        if (null != a.shape) return getTensorShapeParam(this.node.rawAttrs, e, t);\n        if (null != a.type) return getDtypeParam(this.node.rawAttrs, e, t);\n        if (null != a.list) {\n            if (null != a.list.i || null != a.list.f) return getNumericArrayParam(this.node.rawAttrs, e, t);\n            if (null != a.list.s) return getStringArrayParam(this.node.rawAttrs, e, t);\n            if (null != a.list.shape) return getTensorShapeArrayParam(this.node.rawAttrs, e, t);\n            if (null != a.list.b) return getBoolArrayParam(this.node.rawAttrs, e, t);\n            if (null != a.list.type) return getDtypeArrayParam(this.node.rawAttrs, e, t);\n        }\n        return t;\n    }, e;\n}(), executeOp = function(e, t, a) {\n    switch(e.op){\n        case \"BiasAdd\":\n        case \"AddV2\":\n        case \"Add\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.add)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"AddN\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.addN)(getParamValue(\"tensors\", e, t, a))\n            ];\n        case \"FloorMod\":\n        case \"Mod\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mod)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"Mul\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mul)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"RealDiv\":\n        case \"Div\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.div)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"DivNoNan\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.divNoNan)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"FloorDiv\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.floorDiv)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"Sub\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sub)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"Minimum\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.minimum)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"Maximum\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maximum)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"Pow\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pow)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"SquaredDifference\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.squaredDifference)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$1 = function(e, t, a) {\n    switch(e.op){\n        case \"Abs\":\n        case \"ComplexAbs\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.abs)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Acos\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.acos)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Acosh\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.acosh)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Asin\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.asin)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Asinh\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.asinh)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Atan\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.atan)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Atan2\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.atan2)(getParamValue(\"x\", e, t, a), getParamValue(\"y\", e, t, a))\n            ];\n        case \"Atanh\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.atanh)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Ceil\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ceil)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Complex\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.complex)(getParamValue(\"real\", e, t, a), getParamValue(\"imag\", e, t, a))\n            ];\n        case \"Cos\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cos)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Cosh\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cosh)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Elu\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.elu)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Erf\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.erf)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Exp\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.exp)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Expm1\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expm1)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Floor\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.floor)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Log\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Log1p\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.log1p)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Imag\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.imag)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Neg\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.neg)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Reciprocal\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reciprocal)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Real\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.real)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Relu\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.relu)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Round\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.round)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Selu\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.selu)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Sigmoid\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sigmoid)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Sin\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sin)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Sign\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sign)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Sinh\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sinh)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Softplus\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.softplus)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Sqrt\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sqrt)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Square\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.square)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Tanh\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tanh)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Tan\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tan)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"Relu6\":\n        case \"ClipByValue\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.clipByValue)(getParamValue(\"x\", e, t, a), getParamValue(\"clipValueMin\", e, t, a), getParamValue(\"clipValueMax\", e, t, a))\n            ];\n        case \"Rsqrt\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.rsqrt)(getTensor(e.inputNames[0], t, a))\n            ];\n        case \"Prod\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.prod)(getParamValue(\"x\", e, t, a), getParamValue(\"axes\", e, t, a))\n            ];\n        case \"LeakyRelu\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.leakyRelu)(getParamValue(\"x\", e, t, a), getParamValue(\"alpha\", e, t, a))\n            ];\n        case \"Prelu\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.prelu)(getParamValue(\"x\", e, t, a), getParamValue(\"alpha\", e, t, a))\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, TensorArray = function() {\n    function e(t, a, r, n, s, o, p) {\n        this.name = t, this.dtype = a, this.maxSize = r, this.elementShape = n, this.identicalElementShapes = s, this.dynamicSize = o, this.clearAfterRead = p, this.tensors = [], this.closed_ = !1, this.id = e.nextId++;\n    }\n    return Object.defineProperty(e.prototype, \"closed\", {\n        get: function() {\n            return this.closed_;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), e.prototype.clearAndClose = function() {\n        this.tensors.forEach(function(e) {\n            return e.tensor.dispose();\n        }), this.tensors = [], this.closed_ = !0;\n    }, e.prototype.size = function() {\n        return this.tensors.length;\n    }, e.prototype.read = function(e) {\n        if (this.closed_) throw new Error(\"TensorArray \" + this.name + \" has already been closed.\");\n        if (e < 0 || e >= this.tensors.length) throw new Error(\"Tried to read from index \" + e + \", but array size is: \" + this.tensors.length);\n        var t = this.tensors[e];\n        if (t.cleared) throw new Error(\"TensorArray \" + this.name + \": Could not read index \" + e + \" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).\");\n        return this.clearAfterRead && (t.cleared = !0), t.read = !0, t.tensor;\n    }, e.prototype.readMany = function(e) {\n        var t = this;\n        return e.map(function(e) {\n            return t.read(e);\n        });\n    }, e.prototype.write = function(e, t) {\n        if (this.closed_) throw new Error(\"TensorArray \" + this.name + \" has already been closed.\");\n        if (e < 0 || !this.dynamicSize && e >= this.maxSize) throw new Error(\"Tried to write to index \" + e + \", but array is not resizeable and size is: \" + this.maxSize);\n        var a = this.tensors[e] || {};\n        if (t.dtype !== this.dtype) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \",\\n          because the value dtype is \" + t.dtype + \", but TensorArray dtype is \" + this.dtype + \".\");\n        if (0 !== this.size() || null != this.elementShape && 0 !== this.elementShape.length || (this.elementShape = t.shape), this.assertShapesMatchAllowUndefinedSize(this.elementShape, t.shape, \"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \".\"), a && a.read) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \", because it has already been read.\");\n        if (a && a.written) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \", because it has already been written.\");\n        a.tensor = t, a.written = !0, this.tensors[e] = a;\n    }, e.prototype.writeMany = function(e, t) {\n        var a = this;\n        if (e.length !== t.length) throw new Error(\"TensorArray \" + this.name + \": could not write multiple tensors,because the index size: \" + e.length + \" is not the same as tensors size: \" + t.length + \".\");\n        e.forEach(function(e, r) {\n            return a.write(e, t[r]);\n        });\n    }, e.prototype.gather = function(e, t) {\n        if (t && t !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but gather requested dtype \" + t);\n        if (!e) {\n            e = [];\n            for(var a = 0; a < this.size(); a++)e.push(a);\n        }\n        if (0 === e.length) return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [\n            0\n        ].concat(this.elementShape));\n        var r = this.readMany(e);\n        return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r[0].shape, \"TensorArray shape mismatch: \"), (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)(r, 0);\n    }, e.prototype.concat = function(e) {\n        if (e && e !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but concat requested dtype \" + e);\n        if (0 === this.size()) return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor)([], [\n            0\n        ].concat(this.elementShape));\n        for(var t = [], a = 0; a < this.size(); a++)t.push(a);\n        var r = this.readMany(t);\n        return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r[0].shape, \"TensorArray shape mismatch: tensor array shape (\" + this.elementShape + \") vs first tensor shape (\" + r[0].shape + \")\"), (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat)(r, 0);\n    }, e.prototype.scatter = function(e, t) {\n        if (t.dtype !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but tensor has dtype \" + t.dtype);\n        if (e.length !== t.shape[0]) throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \" + e.length + \" vs. \" + t.shape[0]);\n        var a = Math.max.apply(Math, e);\n        if (!this.dynamicSize && a >= this.maxSize) throw new Error(\"Max index must be < array size (\" + a + \"  vs. \" + this.maxSize + \")\");\n        this.writeMany(e, (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(t, 0));\n    }, e.prototype.split = function(e, t) {\n        var a = this;\n        if (t.dtype !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but tensor has dtype \" + t.dtype);\n        var r = 0, n = e.map(function(e) {\n            return r += e;\n        });\n        if (r !== t.shape[0]) throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \" + r + \", and tensor's shape is: \" + t.shape);\n        if (!this.dynamicSize && e.length !== this.maxSize) throw new Error(\"TensorArray's size is not equal to the size of lengths (\" + this.maxSize + \" vs. \" + e.length + \"), and the TensorArray is not marked as dynamically resizeable\");\n        var s = 0 === r ? 0 : t.size / r, o = [];\n        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n            t = t.reshape([\n                1,\n                r,\n                s\n            ]);\n            for(var p = 0; p < e.length; ++p){\n                var u = [\n                    0,\n                    0 === p ? 0 : n[p - 1],\n                    0\n                ], i = [\n                    1,\n                    e[p],\n                    s\n                ];\n                o[p] = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice)(t, u, i).reshape(a.elementShape);\n            }\n            return o;\n        });\n        for(var p = [], u = 0; u < e.length; u++)p[u] = u;\n        this.writeMany(p, o);\n    }, e.prototype.assertShapesMatchAllowUndefinedSize = function(e, t, a) {\n        void 0 === a && (a = \"\"), _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(this.shapesEqualAllowUndefinedSize(e, t), function() {\n            return a + \" Shapes \" + e + \" and \" + t + \" must match\";\n        });\n    }, e.prototype.shapesEqualAllowUndefinedSize = function(e, t) {\n        if (e.length !== t.length) return !1;\n        for(var a = 0; a < e.length; a++)if (-1 !== e[a] && -1 !== t[a] && e[a] !== t[a]) return !1;\n        return !0;\n    }, e.nextId = 0, e;\n}(), _this = void 0, executeOp$2 = function(e, t, a) {\n    return __awaiter(_this, void 0, void 0, function() {\n        var r, n, s, o, p, u, i, m, l, c, d, y, f, g, h, N, x, V, b, P, T, v, O, S, _, w, A, D, E, I, M, C, k, z, F;\n        return __generator(this, function(j) {\n            switch(j.label){\n                case 0:\n                    switch(e.op){\n                        case \"LoopCond\":\n                            return [\n                                3,\n                                1\n                            ];\n                        case \"Switch\":\n                            return [\n                                3,\n                                2\n                            ];\n                        case \"Merge\":\n                            return [\n                                3,\n                                4\n                            ];\n                        case \"Enter\":\n                            return [\n                                3,\n                                5\n                            ];\n                        case \"Exit\":\n                            return [\n                                3,\n                                6\n                            ];\n                        case \"NextIteration\":\n                            return [\n                                3,\n                                7\n                            ];\n                        case \"TensorArrayV3\":\n                            return [\n                                3,\n                                8\n                            ];\n                        case \"TensorArrayWriteV3\":\n                            return [\n                                3,\n                                9\n                            ];\n                        case \"TensorArrayReadV3\":\n                            return [\n                                3,\n                                10\n                            ];\n                        case \"TensorArrayGatherV3\":\n                            return [\n                                3,\n                                11\n                            ];\n                        case \"TensorArrayScatterV3\":\n                            return [\n                                3,\n                                12\n                            ];\n                        case \"TensorArrayConcatV3\":\n                            return [\n                                3,\n                                13\n                            ];\n                        case \"TensorArraySplitV3\":\n                            return [\n                                3,\n                                14\n                            ];\n                        case \"TensorArraySizeV3\":\n                            return [\n                                3,\n                                15\n                            ];\n                        case \"TensorArrayCloseV3\":\n                            return [\n                                3,\n                                16\n                            ];\n                    }\n                    return [\n                        3,\n                        17\n                    ];\n                case 1:\n                    return [\n                        2,\n                        [\n                            getParamValue(\"pred\", e, t, a).clone()\n                        ]\n                    ];\n                case 2:\n                    return r = getParamValue(\"pred\", e, t, a), n = getParamValue(\"data\", e, t, a), [\n                        4,\n                        r.data()\n                    ];\n                case 3:\n                    return [\n                        2,\n                        j.sent()[0] ? [\n                            void 0,\n                            n.clone()\n                        ] : [\n                            n.clone(),\n                            void 0\n                        ]\n                    ];\n                case 4:\n                    return [\n                        2,\n                        (s = e.inputNames.find(function(e) {\n                            return void 0 !== getTensor(e, t, a);\n                        })) ? [\n                            getTensor(s, t, a).clone()\n                        ] : void 0\n                    ];\n                case 5:\n                    return o = getParamValue(\"frameName\", e, t, a), p = getParamValue(\"tensor\", e, t, a), a.enterFrame(o), [\n                        2,\n                        [\n                            p.clone()\n                        ]\n                    ];\n                case 6:\n                    return u = getParamValue(\"tensor\", e, t, a), a.exitFrame(), [\n                        2,\n                        [\n                            u.clone()\n                        ]\n                    ];\n                case 7:\n                    return i = getParamValue(\"tensor\", e, t, a), a.nextIteration(), [\n                        2,\n                        [\n                            i.clone()\n                        ]\n                    ];\n                case 8:\n                    return m = getParamValue(\"size\", e, t, a), l = getParamValue(\"dtype\", e, t, a), c = getParamValue(\"elementShape\", e, t, a), d = getParamValue(\"dynamicSize\", e, t, a), y = getParamValue(\"clearAfterRead\", e, t, a), f = getParamValue(\"identicalElementShapes\", e, t, a), g = getParamValue(\"name\", e, t, a), h = new TensorArray(g, l, m, c, f, d, y), a.addTensorArray(h), [\n                        2,\n                        [\n                            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(h.id),\n                            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(1)\n                        ]\n                    ];\n                case 9:\n                    return N = getParamValue(\"tensorArrayId\", e, t, a), x = getParamValue(\"index\", e, t, a), V = getParamValue(\"tensor\", e, t, a), a.getTensorArray(N).write(x, V), [\n                        2,\n                        [\n                            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(1)\n                        ]\n                    ];\n                case 10:\n                    return b = getParamValue(\"tensorArrayId\", e, t, a), P = getParamValue(\"index\", e, t, a), [\n                        2,\n                        [\n                            a.getTensorArray(b).read(P)\n                        ]\n                    ];\n                case 11:\n                    return T = getParamValue(\"tensorArrayId\", e, t, a), v = getParamValue(\"indices\", e, t, a), O = getParamValue(\"dtype\", e, t, a), [\n                        2,\n                        [\n                            a.getTensorArray(T).gather(v, O)\n                        ]\n                    ];\n                case 12:\n                    return S = getParamValue(\"tensorArrayId\", e, t, a), _ = getParamValue(\"indices\", e, t, a), w = getParamValue(\"tensor\", e, t, a), a.getTensorArray(S).scatter(_, w), [\n                        2,\n                        [\n                            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(1)\n                        ]\n                    ];\n                case 13:\n                    return A = getParamValue(\"tensorArrayId\", e, t, a), D = a.getTensorArray(A), E = getParamValue(\"dtype\", e, t, a), [\n                        2,\n                        [\n                            D.concat(E)\n                        ]\n                    ];\n                case 14:\n                    return I = getParamValue(\"tensorArrayId\", e, t, a), M = getParamValue(\"tensor\", e, t, a), C = getParamValue(\"lengths\", e, t, a), a.getTensorArray(I).split(C, M), [\n                        2,\n                        [\n                            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(1)\n                        ]\n                    ];\n                case 15:\n                    return k = getParamValue(\"tensorArrayId\", e, t, a), z = a.getTensorArray(k), [\n                        2,\n                        [\n                            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(z.size(), \"int32\")\n                        ]\n                    ];\n                case 16:\n                    return F = getParamValue(\"tensorArrayId\", e, t, a), a.getTensorArray(F).clearAndClose(), [\n                        2,\n                        [\n                            (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(0)\n                        ]\n                    ];\n                case 17:\n                    throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n            }\n        });\n    });\n}, executeOp$3 = function(e, t, a) {\n    switch(e.op){\n        case \"Conv1D\":\n            var r = getParamValue(\"stride\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase(), o = getParamValue(\"dilation\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv1d)(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), r, n, s, o)\n            ];\n        case \"Conv2D\":\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n            var p = getParamValue(\"dilations\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv2d)(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), [\n                    r[1],\n                    r[2]\n                ], n, s, [\n                    p[1],\n                    p[2]\n                ])\n            ];\n        case \"_FusedConv2D\":\n        case \"FusedDepthwiseConv2dNative\":\n            var u = getParamValue(\"fusedOps\", e, t, a), i = u[0], m = u[1], l = \"biasadd\" === i, c = \"prelu\" === m, d = \"fusedbatchnorm\" === i, y = getParamValue(\"numArgs\", e, t, a);\n            if (l) {\n                if (c && 2 !== y) throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");\n                if (!c && 1 !== y) throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.\");\n            }\n            if (d) throw new Error(\"FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.\");\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase(), p = getParamValue(\"dilations\", e, t, a);\n            var f = getParamValue(\"args\", e, t, a), g = f[0], h = f[1];\n            return [\n                (\"_FusedConv2D\" === e.op ? _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fused.conv2d : _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fused.depthwiseConv2d)({\n                    x: getParamValue(\"x\", e, t, a),\n                    filter: getParamValue(\"filter\", e, t, a),\n                    strides: [\n                        r[1],\n                        r[2]\n                    ],\n                    pad: n,\n                    dataFormat: s,\n                    dilations: [\n                        p[1],\n                        p[2]\n                    ],\n                    bias: g,\n                    activation: m,\n                    preluActivationWeights: h\n                })\n            ];\n        case \"Conv2DBackpropInput\":\n        case \"Conv2dTranspose\":\n            var N = getParamValue(\"outputShape\", e, t, a);\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv2dTranspose)(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), N, [\n                    r[1],\n                    r[2]\n                ], n)\n            ];\n        case \"DepthwiseConv2dNative\":\n        case \"DepthwiseConv2d\":\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), p = getParamValue(\"dilations\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.depthwiseConv2d)(getParamValue(\"input\", e, t, a), getParamValue(\"filter\", e, t, a), [\n                    r[1],\n                    r[2]\n                ], n, s, [\n                    p[1],\n                    p[2]\n                ])\n            ];\n        case \"Conv3D\":\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), s = getParamValue(\"dataFormat\", e, t, a).toUpperCase(), p = getParamValue(\"dilations\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.conv3d)(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), [\n                    r[1],\n                    r[2],\n                    r[3]\n                ], n, s, [\n                    p[1],\n                    p[2],\n                    p[3]\n                ])\n            ];\n        case \"AvgPool\":\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a);\n            var x = getParamValue(\"kernelSize\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.avgPool)(getParamValue(\"x\", e, t, a), [\n                    x[1],\n                    x[2]\n                ], [\n                    r[1],\n                    r[2]\n                ], n)\n            ];\n        case \"MaxPool\":\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maxPool)(getParamValue(\"x\", e, t, a), [\n                    x[1],\n                    x[2]\n                ], [\n                    r[1],\n                    r[2]\n                ], n)\n            ];\n        case \"MaxPoolWithArgmax\":\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n            var V = getParamValue(\"includeBatchInIndex\", e, t, a), b = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maxPoolWithArgmax)(getParamValue(\"x\", e, t, a), [\n                x[1],\n                x[2]\n            ], [\n                r[1],\n                r[2]\n            ], n, V);\n            return [\n                b.result,\n                b.indexes\n            ];\n        case \"AvgPool3D\":\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.avgPool3d)(getParamValue(\"x\", e, t, a), [\n                    x[1],\n                    x[2],\n                    x[3]\n                ], [\n                    r[1],\n                    r[2],\n                    r[3]\n                ], n)\n            ];\n        case \"MaxPool3D\":\n            r = getParamValue(\"strides\", e, t, a), n = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.maxPool3d)(getParamValue(\"x\", e, t, a), [\n                    x[1],\n                    x[2],\n                    x[3]\n                ], [\n                    r[1],\n                    r[2],\n                    r[3]\n                ], n)\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$4 = function(e, t, a) {\n    switch(e.op){\n        case \"Fill\":\n            var r = getParamValue(\"shape\", e, t, a), n = getParamValue(\"dtype\", e, t, a), s = getParamValue(\"value\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fill)(r, s, n)\n            ];\n        case \"LinSpace\":\n            var o = getParamValue(\"start\", e, t, a), p = getParamValue(\"stop\", e, t, a), u = getParamValue(\"num\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.linspace)(o, p, u)\n            ];\n        case \"Multinomial\":\n            var i = getParamValue(\"logits\", e, t, a), m = getParamValue(\"numSamples\", e, t, a), l = getParamValue(\"seed\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.multinomial)(i, m, l)\n            ];\n        case \"OneHot\":\n            var c = getParamValue(\"indices\", e, t, a), d = getParamValue(\"depth\", e, t, a), y = getParamValue(\"onValue\", e, t, a), f = getParamValue(\"offValue\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.oneHot)(c, d, y, f)\n            ];\n        case \"Ones\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ones)(getParamValue(\"shape\", e, t, a), getParamValue(\"dtype\", e, t, a))\n            ];\n        case \"OnesLike\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.onesLike)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"RandomUniform\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.randomUniform)(getParamValue(\"shape\", e, t, a), getParamValue(\"minval\", e, t, a), getParamValue(\"maxval\", e, t, a), getParamValue(\"dtype\", e, t, a))\n            ];\n        case \"Range\":\n            o = getParamValue(\"start\", e, t, a);\n            var g = getParamValue(\"stop\", e, t, a), h = getParamValue(\"step\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.range)(o, g, h, getParamValue(\"dtype\", e, t, a))\n            ];\n        case \"TruncatedNormal\":\n            r = getParamValue(\"shape\", e, t, a);\n            var N = getParamValue(\"mean\", e, t, a), x = getParamValue(\"stdDev\", e, t, a);\n            l = getParamValue(\"seed\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.truncatedNormal)(r, N, x, getParamValue(\"dtype\", e, t, a), l)\n            ];\n        case \"Zeros\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zeros)(getParamValue(\"shape\", e, t, a), getParamValue(\"dtype\", e, t, a))\n            ];\n        case \"ZerosLike\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.zerosLike)(getParamValue(\"x\", e, t, a))\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, _this$1 = void 0, executeOp$5 = function(e, t, a) {\n    return __awaiter(_this$1, void 0, void 0, function() {\n        var r, n, s, o, p, u, i, m;\n        return __generator(this, function(l) {\n            switch(l.label){\n                case 0:\n                    switch(e.op){\n                        case \"NonMaxSuppressionV5\":\n                        case \"NonMaxSuppressionV3\":\n                        case \"NonMaxSuppressionV2\":\n                            return [\n                                3,\n                                1\n                            ];\n                        case \"Where\":\n                            return [\n                                3,\n                                5\n                            ];\n                        case \"ListDiff\":\n                            return [\n                                3,\n                                7\n                            ];\n                    }\n                    return [\n                        3,\n                        8\n                    ];\n                case 1:\n                    return r = getParamValue(\"boxes\", e, t, a), n = getParamValue(\"scores\", e, t, a), s = getParamValue(\"maxOutputSize\", e, t, a), o = getParamValue(\"iouThreshold\", e, t, a), p = getParamValue(\"scoreThreshold\", e, t, a), \"NonMaxSuppressionV5\" !== e.op ? [\n                        3,\n                        3\n                    ] : (u = getParamValue(\"softNmsSigma\", e, t, a), [\n                        4,\n                        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.nonMaxSuppressionWithScoreAsync(r, n, s, o, p, u)\n                    ]);\n                case 2:\n                    return [\n                        2,\n                        [\n                            (m = l.sent()).selectedIndices,\n                            m.selectedScores\n                        ]\n                    ];\n                case 3:\n                    return [\n                        4,\n                        _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.nonMaxSuppressionAsync(r, n, s, o, p)\n                    ];\n                case 4:\n                    return [\n                        2,\n                        [\n                            l.sent()\n                        ]\n                    ];\n                case 5:\n                    return i = getParamValue(\"condition\", e, t, a).asType(\"bool\"), [\n                        4,\n                        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.whereAsync)(i)\n                    ];\n                case 6:\n                    return m = [\n                        l.sent()\n                    ], i.dispose(), [\n                        2,\n                        m\n                    ];\n                case 7:\n                    return [\n                        2,\n                        (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.setdiff1dAsync)(getParamValue(\"x\", e, t, a), getParamValue(\"y\", e, t, a))\n                    ];\n                case 8:\n                    throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n            }\n        });\n    });\n}, executeOp$6 = function(e, t, a) {\n    switch(e.op){\n        case \"TopKV2\":\n            var r = getParamValue(\"x\", e, t, a), n = getParamValue(\"k\", e, t, a), s = getParamValue(\"sorted\", e, t, a), o = (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.topk)(r, n, s);\n            return [\n                o.values,\n                o.indices\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$7 = function(e, t, a) {\n    switch(e.op){\n        case \"Const\":\n            return t[e.name];\n        case \"PlaceholderWithDefault\":\n            var r = getParamValue(\"default\", e, t, a);\n            return [\n                getTensor(e.name, t, a) || r\n            ];\n        case \"Placeholder\":\n            return [\n                getTensor(e.name, t, a)\n            ];\n        case \"Identity\":\n        case \"StopGradient\":\n        case \"FakeQuantWithMinMaxVars\":\n            return [\n                getParamValue(\"x\", e, t, a).clone()\n            ];\n        case \"IdentityN\":\n            return getParamValue(\"x\", e, t, a).map(function(e) {\n                return e.clone();\n            });\n        case \"Snapshot\":\n            return [\n                getParamValue(\"x\", e, t, a).clone()\n            ];\n        case \"Shape\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor1d)(getParamValue(\"x\", e, t, a).shape, \"int32\")\n            ];\n        case \"ShapeN\":\n            return getParamValue(\"x\", e, t, a).map(function(e) {\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tensor1d)(e.shape);\n            });\n        case \"Size\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(getParamValue(\"x\", e, t, a).size, \"int32\")\n            ];\n        case \"Rank\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(getParamValue(\"x\", e, t, a).rank, \"int32\")\n            ];\n        case \"NoOp\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scalar)(1)\n            ];\n        case \"Print\":\n            var n = getParamValue(\"x\", e, t, a), s = getParamValue(\"data\", e, t, a), o = getParamValue(\"message\", e, t, a), p = getParamValue(\"summarize\", e, t, a);\n            console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\"), console.log(o);\n            for(var u = 0; u < s.length; u++)console.log(Array.prototype.slice.call(s[u].dataSync()).slice(0, p));\n            return [\n                n\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$8 = function(e, t, a) {\n    switch(e.op){\n        case \"ResizeBilinear\":\n            var r = getParamValue(\"images\", e, t, a), n = getParamValue(\"size\", e, t, a), s = getParamValue(\"alignCorners\", e, t, a);\n            return [\n                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeBilinear(r, [\n                    n[0],\n                    n[1]\n                ], s)\n            ];\n        case \"ResizeNearestNeighbor\":\n            r = getParamValue(\"images\", e, t, a), n = getParamValue(\"size\", e, t, a), s = getParamValue(\"alignCorners\", e, t, a);\n            return [\n                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.resizeNearestNeighbor(r, [\n                    n[0],\n                    n[1]\n                ], s)\n            ];\n        case \"CropAndResize\":\n            var o = getParamValue(\"image\", e, t, a), p = getParamValue(\"boxes\", e, t, a), u = getParamValue(\"boxInd\", e, t, a), i = getParamValue(\"cropSize\", e, t, a), m = getParamValue(\"method\", e, t, a), l = getParamValue(\"extrapolationValue\", e, t, a);\n            return [\n                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.image.cropAndResize(o, p, u, i, m, l)\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$9 = function(e, t, a) {\n    switch(e.op){\n        case \"Equal\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.equal)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"NotEqual\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.notEqual)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"Greater\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greater)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"GreaterEqual\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.greaterEqual)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"Less\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.less)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"LessEqual\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.lessEqual)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"LogicalAnd\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalAnd)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"LogicalNot\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalNot)(getParamValue(\"a\", e, t, a))\n            ];\n        case \"LogicalOr\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logicalOr)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        case \"Select\":\n        case \"SelectV2\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.where)(getParamValue(\"condition\", e, t, a), getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$10 = function(e, t, a) {\n    switch(e.op){\n        case \"BatchMatMul\":\n        case \"BatchMatMulV2\":\n        case \"MatMul\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.matMul)(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a), getParamValue(\"transposeA\", e, t, a), getParamValue(\"transposeB\", e, t, a))\n            ];\n        case \"Transpose\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.transpose)(getParamValue(\"x\", e, t, a), getParamValue(\"perm\", e, t, a))\n            ];\n        case \"_FusedMatMul\":\n            var r = getParamValue(\"fusedOps\", e, t, a), n = r[0], s = r[1], o = \"biasadd\" === n, p = \"prelu\" === s, u = getParamValue(\"numArgs\", e, t, a);\n            if (o) {\n                if (p && 2 !== u) throw new Error(\"Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");\n                if (!p && 1 !== u) throw new Error(\"Fused MatMul with BiasAdd must have one extra argument: bias.\");\n            }\n            var i = getParamValue(\"args\", e, t, a), m = i[0], l = i[1];\n            return [\n                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fused.matMul({\n                    a: getParamValue(\"a\", e, t, a),\n                    b: getParamValue(\"b\", e, t, a),\n                    transposeA: getParamValue(\"transposeA\", e, t, a),\n                    transposeB: getParamValue(\"transposeB\", e, t, a),\n                    bias: m,\n                    activation: s,\n                    preluActivationWeights: l\n                })\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$11 = function(e, t, a) {\n    switch(e.op){\n        case \"FusedBatchNorm\":\n        case \"FusedBatchNormV2\":\n        case \"FusedBatchNormV3\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchNorm)(getParamValue(\"x\", e, t, a), getParamValue(\"mean\", e, t, a), getParamValue(\"variance\", e, t, a), getParamValue(\"offset\", e, t, a), getParamValue(\"scale\", e, t, a), getParamValue(\"epsilon\", e, t, a))\n            ];\n        case \"LRN\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.localResponseNormalization)(getParamValue(\"x\", e, t, a), getParamValue(\"radius\", e, t, a), getParamValue(\"bias\", e, t, a), getParamValue(\"alpha\", e, t, a), getParamValue(\"beta\", e, t, a))\n            ];\n        case \"Softmax\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.softmax)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"LogSoftmax\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.logSoftmax)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"SparseToDense\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sparseToDense)(getParamValue(\"sparseIndices\", e, t, a), getParamValue(\"outputShape\", e, t, a), getParamValue(\"sparseValues\", e, t, a), getParamValue(\"defaultValue\", e, t, a))\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$12 = function(e, t, a) {\n    switch(e.op){\n        case \"Max\":\n            var r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.max)(getParamValue(\"x\", e, t, a), r, n)\n            ];\n        case \"Mean\":\n            r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.mean)(getParamValue(\"x\", e, t, a), r, n)\n            ];\n        case \"Min\":\n            r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.min)(getParamValue(\"x\", e, t, a), r, n)\n            ];\n        case \"Sum\":\n            r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sum)(getParamValue(\"x\", e, t, a), r, n)\n            ];\n        case \"All\":\n            r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.all)(getParamValue(\"x\", e, t, a), r, n)\n            ];\n        case \"Any\":\n            r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.any)(getParamValue(\"x\", e, t, a), r, n)\n            ];\n        case \"ArgMax\":\n            r = getParamValue(\"axis\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.argMax)(getParamValue(\"x\", e, t, a), r)\n            ];\n        case \"ArgMin\":\n            r = getParamValue(\"axis\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.argMin)(getParamValue(\"x\", e, t, a), r)\n            ];\n        case \"Prod\":\n            r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.prod)(getParamValue(\"x\", e, t, a), r, n)\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$13 = function(e, t, a) {\n    switch(e.op){\n        case \"ConcatV2\":\n        case \"Concat\":\n            var r = getParamValue(\"n\", e, t, a), n = getParamValue(\"axis\", e, t, a), s = getParamValue(\"tensors\", e, t, a);\n            return s = s.slice(0, r), [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.concat)(s, n)\n            ];\n        case \"GatherV2\":\n        case \"Gather\":\n            n = getParamValue(\"axis\", e, t, a);\n            var o = getParamValue(\"x\", e, t, a), p = getParamValue(\"indices\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.gather)(o, p.asType(\"int32\"), n)\n            ];\n        case \"ReverseV2\":\n        case \"Reverse\":\n            n = getParamValue(\"axis\", e, t, a), o = getParamValue(\"x\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reverse)(o, n)\n            ];\n        case \"Slice\":\n            var u = getParamValue(\"begin\", e, t, a), i = getParamValue(\"size\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.slice)(getParamValue(\"x\", e, t, a), u, i)\n            ];\n        case \"StridedSlice\":\n            u = getParamValue(\"begin\", e, t, a);\n            var m = getParamValue(\"end\", e, t, a), l = getParamValue(\"strides\", e, t, a), c = getParamValue(\"beginMask\", e, t, a), d = getParamValue(\"endMask\", e, t, a), y = getParamValue(\"ellipsisMask\", e, t, a), f = getParamValue(\"newAxisMask\", e, t, a), g = getParamValue(\"shrinkAxisMask\", e, t, a), h = getParamValue(\"x\", e, t, a);\n            if (1 === u.length && h.shape.length > 1) for(var N = 1; N < h.shape.length; N++)u.push(0), m.push(h.shape[N]), l.push(l[0]);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stridedSlice)(h, u, m, l, c, d, y, f, g)\n            ];\n        case \"Pack\":\n            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                var r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"tensors\", e, t, a), s = n[0].shape, o = n[0].squeeze().shape, p = n.map(function(e) {\n                    var t = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(e.shape, s);\n                    if (!t && !_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.arraysEqual(e.squeeze().shape, o)) throw new Error(\"the input tensors shape does not match\");\n                    return t ? e : e.reshape(s);\n                });\n                return [\n                    (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.stack)(p, r)\n                ];\n            });\n        case \"Unpack\":\n            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                var r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"tensor\", e, t, a);\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.unstack)(n, r);\n            });\n        case \"Tile\":\n            var x = getParamValue(\"reps\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tile)(getParamValue(\"x\", e, t, a), x)\n            ];\n        case \"Split\":\n        case \"SplitV\":\n            n = getParamValue(\"axis\", e, t, a);\n            var V = getParamValue(\"numOrSizeSplits\", e, t, a);\n            return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.split)(getParamValue(\"x\", e, t, a), V, n);\n        case \"ScatterNd\":\n            p = getParamValue(\"indices\", e, t, a);\n            var b = getParamValue(\"values\", e, t, a), P = getParamValue(\"shape\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.scatterND)(p, b, P)\n            ];\n        case \"GatherNd\":\n            var T = getParamValue(\"x\", e, t, a);\n            p = getParamValue(\"indices\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.gatherND)(T, p)\n            ];\n        case \"SparseToDense\":\n            p = getParamValue(\"sparseIndices\", e, t, a), P = getParamValue(\"outputShape\", e, t, a);\n            var v = getParamValue(\"sparseValues\", e, t, a), O = getParamValue(\"defaultValue\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.sparseToDense)(p, v, P, v.dtype === O.dtype ? O : O.asType(v.dtype))\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$14 = function(e, t, a) {\n    switch(e.op){\n        case \"FFT\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.fft)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"IFFT\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.ifft)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"RFFT\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.rfft)(getParamValue(\"x\", e, t, a))\n            ];\n        case \"IRFFT\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.irfft)(getParamValue(\"x\", e, t, a))\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n}, executeOp$15 = function(e, t, a) {\n    switch(e.op){\n        case \"Cast\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.cast)(getParamValue(\"x\", e, t, a), getParamValue(\"dtype\", e, t, a))\n            ];\n        case \"ExpandDims\":\n            var r = getParamValue(\"axis\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.expandDims)(getParamValue(\"x\", e, t, a), r)\n            ];\n        case \"Squeeze\":\n            r = getParamValue(\"axis\", e, t, a);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.squeeze)(getParamValue(\"x\", e, t, a), r)\n            ];\n        case \"Reshape\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.reshape)(getParamValue(\"x\", e, t, a), getParamValue(\"shape\", e, t, a))\n            ];\n        case \"PadV2\":\n        case \"Pad\":\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.pad)(getParamValue(\"x\", e, t, a), split$1(getParamValue(\"padding\", e, t, a), 2), getParamValue(\"constantValue\", e, t, a))\n            ];\n        case \"SpaceToBatchND\":\n            var n = getParamValue(\"blockShape\", e, t, a), s = split$1(getParamValue(\"paddings\", e, t, a), 2);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.spaceToBatchND)(getParamValue(\"x\", e, t, a), n, s)\n            ];\n        case \"BatchToSpaceND\":\n            n = getParamValue(\"blockShape\", e, t, a);\n            var o = split$1(getParamValue(\"crops\", e, t, a), 2);\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.batchToSpaceND)(getParamValue(\"x\", e, t, a), n, o)\n            ];\n        case \"DepthToSpace\":\n            var p = getParamValue(\"blockSize\", e, t, a), u = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n            return [\n                (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.depthToSpace)(getParamValue(\"x\", e, t, a), p, u)\n            ];\n        default:\n            throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n};\nfunction executeOp$16(e, t, a) {\n    var r = function(e, t, a) {\n        switch(e.category){\n            case \"arithmetic\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp(e, t, a);\n                });\n            case \"basic_math\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$1(e, t, a);\n                });\n            case \"control\":\n                return executeOp$2(e, t, a);\n            case \"convolution\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$3(e, t, a);\n                });\n            case \"creation\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$4(e, t, a);\n                });\n            case \"dynamic\":\n                return executeOp$5(e, t, a);\n            case \"evaluation\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$6(e, t, a);\n                });\n            case \"image\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$8(e, t, a);\n                });\n            case \"graph\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$7(e, t, a);\n                });\n            case \"logical\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$9(e, t, a);\n                });\n            case \"matrices\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$10(e, t, a);\n                });\n            case \"normalization\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$11(e, t, a);\n                });\n            case \"reduction\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$12(e, t, a);\n                });\n            case \"slice_join\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$13(e, t, a);\n                });\n            case \"spectral\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$14(e, t, a);\n                });\n            case \"transformation\":\n                return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n                    return executeOp$15(e, t, a);\n                });\n            case \"custom\":\n                var r = getRegisteredOp(e.op);\n                if (r && r.customExecutor) return r.customExecutor(new NodeValueImpl(e, t, a));\n                throw TypeError(\"Custom op \" + e.op + \" is not registered.\");\n            default:\n                throw TypeError(\"Unknown op '\" + e.op + \"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()\");\n        }\n    }(e, t, a);\n    return r instanceof Promise ? r.then(function(e) {\n        return [].concat(e);\n    }) : [].concat(r);\n}\nvar ExecutionContext = function() {\n    function e(e, t) {\n        this.weightMap = e, this.tensorArrayMap = t, this.rootContext = {\n            id: 0,\n            frameName: \"\",\n            iterationId: 0\n        }, this.contexts = [\n            this.rootContext\n        ], this.lastId = 0, this.generateCurrentContextIds();\n    }\n    return e.prototype.newFrame = function(e, t) {\n        return {\n            id: e,\n            frameName: t,\n            iterationId: 0\n        };\n    }, Object.defineProperty(e.prototype, \"currentContext\", {\n        get: function() {\n            return this.contexts;\n        },\n        set: function(e) {\n            this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"currentContextId\", {\n        get: function() {\n            return this._currentContextIds[0];\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"currentContextIds\", {\n        get: function() {\n            return this._currentContextIds;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), e.prototype.generateCurrentContextIds = function() {\n        for(var e = [], t = 0; t < this.contexts.length - 1; t++){\n            var a = this.contexts.slice(0, this.contexts.length - t);\n            e.push(this.contextIdforContexts(a));\n        }\n        e.push(\"\"), this._currentContextIds = e;\n    }, e.prototype.contextIdforContexts = function(e) {\n        return e ? e.map(function(e) {\n            return 0 === e.id && 0 === e.iterationId ? \"\" : e.frameName + \"-\" + e.iterationId;\n        }).join(\"/\") : \"\";\n    }, e.prototype.enterFrame = function(e) {\n        this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));\n    }, e.prototype.exitFrame = function() {\n        if (!(this.contexts && this.contexts.length > 1)) throw new Error(\"Cannot exit frame, the context is empty\");\n        this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();\n    }, e.prototype.nextIteration = function() {\n        if (!(this.contexts && this.contexts.length > 0)) throw new Error(\"Cannot increase frame iteration, the context is empty\");\n        this.contexts = this.contexts.slice(), this.lastId++;\n        var e = Object.assign({}, this.contexts[this.contexts.length - 1]);\n        e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n    }, e.prototype.getWeight = function(e) {\n        return this.weightMap[e];\n    }, e.prototype.addTensorArray = function(e) {\n        this.tensorArrayMap[e.id] = e;\n    }, e.prototype.getTensorArray = function(e) {\n        return this.tensorArrayMap[e];\n    }, e;\n}();\nfunction getExecutionSubgraph(e, t, a) {\n    for(var r = new Set, n = [], s = null, o = null, p = new Set, u = Object.keys(e).map(function(e) {\n        return parseNodeName(e)[0];\n    }), i = t.slice(); i.length > 0;){\n        var m = i.pop();\n        (isControlFlow(m) || isDynamicShape(m)) && null == s && (o = (s = m).children.map(function(e) {\n            return e.name;\n        }).filter(function(e) {\n            return r.has(e);\n        })), r.add(m.name), null == a[m.name] && -1 === u.indexOf(m.name) && (0 !== m.inputs.length ? m.inputs.forEach(function(e) {\n            p.has(e.name) || (p.add(e.name), i.push(e));\n        }) : n.push(m.name));\n    }\n    return {\n        inputs: e,\n        outputs: t,\n        usedNodes: r,\n        missingInputs: n,\n        dynamicNode: s,\n        syncInputs: o\n    };\n}\nfunction getNodesInTopologicalOrder(e, t, a) {\n    var r = a.usedNodes, n = a.inputs, s = [];\n    Object.keys(n).map(function(e) {\n        return parseNodeName(e)[0];\n    }).map(function(t) {\n        return e.nodes[t];\n    }).forEach(function(e) {\n        r.has(e.name) && s.push(e);\n    }), e.weights.forEach(function(e) {\n        r.has(e.name) && s.push(e);\n    });\n    for(var o = new Set, p = []; s.length > 0;){\n        var u = s.pop();\n        o.add(u.name), t[u.name] || p.push(u), u.children.forEach(function(e) {\n            !o.has(e.name) && r.has(e.name) && e.inputs.every(function(e) {\n                return o.has(e.name);\n            }) && s.push(e);\n        });\n    }\n    return p;\n}\nvar CONTROL_FLOW_OPS = [\n    \"Switch\",\n    \"Merge\",\n    \"Enter\",\n    \"Exit\",\n    \"NextIteration\"\n], DYNAMIC_SHAPE_OPS = [\n    \"NonMaxSuppressionV2\",\n    \"NonMaxSuppressionV3\",\n    \"NonMaxSuppressionV5\",\n    \"Where\"\n];\nfunction isControlFlow(e) {\n    return CONTROL_FLOW_OPS.indexOf(e.op) >= 0;\n}\nfunction isDynamicShape(e) {\n    return DYNAMIC_SHAPE_OPS.indexOf(e.op) >= 0;\n}\nvar GraphExecutor = function() {\n    function e(e) {\n        this.graph = e, this.compiledMap = new Map, this._weightMap = {}, this.SEPERATOR = \",\", this._outputs = e.outputs, this._inputs = e.inputs, this._signature = e.signature;\n    }\n    return Object.defineProperty(e.prototype, \"weightMap\", {\n        get: function() {\n            return this._weightMap;\n        },\n        set: function(e) {\n            var t = Object.keys(e).map(function(t) {\n                return e[t].map(function(e) {\n                    return e.id;\n                });\n            });\n            this.weightIds = [].concat.apply([], t), this._weightMap = e;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputs\", {\n        get: function() {\n            return this._inputs.map(function(e) {\n                return {\n                    name: e.name,\n                    shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,\n                    dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0\n                };\n            });\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputs\", {\n        get: function() {\n            return this._outputs.map(function(e) {\n                return {\n                    name: e.name,\n                    shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,\n                    dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0\n                };\n            });\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputNodes\", {\n        get: function() {\n            return this._inputs.map(function(e) {\n                return e.signatureKey || e.name;\n            });\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputNodes\", {\n        get: function() {\n            return this._outputs.map(function(e) {\n                return e.signatureKey || e.name;\n            });\n        },\n        enumerable: !0,\n        configurable: !0\n    }), e.prototype.getCompilationKey = function(e, t) {\n        var a = e.map(function(e) {\n            return e.name;\n        }).sort(), r = t.map(function(e) {\n            return e.name;\n        }).sort();\n        return a.join(this.SEPERATOR) + \"--\" + r.join(this.SEPERATOR);\n    }, e.prototype.compile = function(e, t) {\n        var a = getExecutionSubgraph(e, t, this.weightMap), r = a.missingInputs, n = a.dynamicNode, s = a.syncInputs;\n        if (null != n) throw new Error(\"This execution contains the node '\" + n.name + \"', which has the dynamic op '\" + n.op + \"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [\" + s + \"]\");\n        if (r.length > 0) {\n            var o = t.map(function(e) {\n                return e.name;\n            }), p = Object.keys(e);\n            throw new Error(\"Cannot compute the outputs [\" + o + \"] from the provided inputs [\" + p + \"]. Missing the following inputs: [\" + r + \"]\");\n        }\n        return getNodesInTopologicalOrder(this.graph, this.weightMap, a);\n    }, e.prototype.execute = function(e, t) {\n        var a = this;\n        e = this.mapInputs(e);\n        var r = Object.keys(e).sort();\n        this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t);\n        var n = r.map(function(e) {\n            return a.graph.nodes[parseNodeName(e)[0]];\n        }), s = t.map(function(e) {\n            return a.graph.nodes[parseNodeName(e)[0]];\n        }), o = this.getCompilationKey(n, s), p = this.compiledMap.get(o);\n        null == p && (p = this.compile(e, s), this.compiledMap.set(o, p));\n        var u = {};\n        return (0,_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.tidy)(function() {\n            var r = new ExecutionContext(a._weightMap, u), n = __assign({}, a.weightMap);\n            Object.keys(e).forEach(function(t) {\n                var a = parseNodeName(t), r = a[0], s = [];\n                s[a[1]] = e[t], n[r] = s;\n            });\n            for(var s = a.getFrozenTensorIds(n), o = {}, i = 0; i < p.length; i++){\n                var m = p[i];\n                if (!n[m.name]) {\n                    var l = executeOp$16(m, n, r);\n                    if (l instanceof Promise) throw new Error(\"The execution of the op '\" + m.op + \"' returned a promise. Please use model.executeAsync() instead.\");\n                    n[m.name] = l, a.checkTensorForDisposal(m.name, m, n, r, s, t, o);\n                }\n            }\n            return t.map(function(e) {\n                return getTensor(e, n, r);\n            });\n        });\n    }, e.prototype.getFrozenTensorIds = function(e) {\n        var t = [].concat.apply([], Object.keys(e).map(function(t) {\n            return e[t];\n        }).map(function(e) {\n            return e.map(function(e) {\n                return e.id;\n            });\n        }));\n        return new Set(t);\n    }, e.prototype.checkTensorForDisposal = function(e, t, a, r, n, s, o) {\n        \"control\" !== t.category && -1 === s.indexOf(e) && (a[e].forEach(function(e) {\n            null != e && (o[e.id] = (o[e.id] || 0) + t.children.length);\n        }), t.inputs.forEach(function(e) {\n            if (\"control\" !== e.category) {\n                var t = getTensorsForCurrentContenxt(e.name, a, r);\n                null != t && t.forEach(function(e) {\n                    if (e && !n.has(e.id)) {\n                        var t = o[e.id];\n                        1 === t ? (e.dispose(), delete o[e.id]) : null != t && o[e.id]--;\n                    }\n                });\n            }\n        }));\n    }, e.prototype.executeAsync = function(e, t) {\n        return __awaiter(this, void 0, void 0, function() {\n            var a, r, n, s, o, p, u = this;\n            return __generator(this, function(i) {\n                switch(i.label){\n                    case 0:\n                        return e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), t = this.mapOutputs(t), this.checkOutputs(t), a = {}, r = new ExecutionContext(this._weightMap, a), [\n                            4,\n                            this.executeWithControlFlow(e, r, t)\n                        ];\n                    case 1:\n                        return n = i.sent(), s = t.map(function(e) {\n                            return getTensor(e, n, r);\n                        }), o = new Set(s.map(function(e) {\n                            return e.id;\n                        })), p = new Set(Object.keys(e).map(function(t) {\n                            return e[t].id;\n                        })), Object.keys(n).forEach(function(e) {\n                            n[e].forEach(function(e) {\n                                !e || e.isDisposed || o.has(e.id) || p.has(e.id) || -1 !== u.weightIds.indexOf(e.id) || e.dispose();\n                            });\n                        }), [\n                            2,\n                            s\n                        ];\n                }\n            });\n        });\n    }, e.prototype.executeWithControlFlow = function(e, t, a) {\n        return __awaiter(this, void 0, void 0, function() {\n            var r, n, s, o, p, u, i, m, l, c, d, y, f, g, h, N, x = this;\n            return __generator(this, function(V) {\n                switch(V.label){\n                    case 0:\n                        r = Object.keys(e), n = r.map(function(e) {\n                            return x.graph.nodes[parseNodeName(e)[0]];\n                        }), s = a.map(function(e) {\n                            return x.graph.nodes[parseNodeName(e)[0]];\n                        }), o = getExecutionSubgraph(e, s, this.weightMap), p = o.usedNodes, u = o.missingInputs, i = o.dynamicNode, m = o.syncInputs, l = n.concat(this.graph.weights).map(function(e) {\n                            return {\n                                node: e,\n                                contexts: t.currentContext\n                            };\n                        }), c = __assign({}, this.weightMap), Object.keys(e).forEach(function(t) {\n                            var a = parseNodeName(t), r = a[0], n = [];\n                            n[a[1]] = e[t], c[r] = n;\n                        }), d = {}, y = this.getFrozenTensorIds(c), f = {}, V.label = 1;\n                    case 1:\n                        return l.length > 0 ? (g = this.processStack(n, l, t, c, f, y, a, d, p), [\n                            4,\n                            Promise.all(g)\n                        ]) : [\n                            3,\n                            3\n                        ];\n                    case 2:\n                        return V.sent(), [\n                            3,\n                            1\n                        ];\n                    case 3:\n                        if (null == i && console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\"), (h = s.filter(function(e) {\n                            return !isControlFlow(e) && !getTensor(e.name, c, t);\n                        }).map(function(e) {\n                            return e.name;\n                        })).length > 0) throw N = \"\", null != i && (N = \"Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [\" + m + \"]\"), new Error(\"Cannot compute the outputs [\" + h + \"] from the provided inputs [\" + r + \"]. Consider providing the following inputs: [\" + u + \"]. \" + N);\n                        return [\n                            2,\n                            c\n                        ];\n                }\n            });\n        });\n    }, e.prototype.processStack = function(e, t, a, r, n, s, o, p, u) {\n        for(var i = this, m = [], l = function() {\n            var l = t.pop();\n            a.currentContext = l.contexts;\n            var d = \"\";\n            if (\"Enter\" === l.node.op && getParamValue(\"isConstant\", l.node, r, a) && (d = getNodeNameAndIndex(l.node.name, a)[0]), -1 === e.indexOf(l.node)) {\n                var y = executeOp$16(l.node, r, a);\n                d || (d = getNodeNameAndIndex(l.node.name, a)[0]);\n                var f = a.currentContext;\n                y instanceof Promise ? m.push(y.then(function(e) {\n                    return r[d] = e, a.currentContext = f, i.checkTensorForDisposal(d, l.node, r, a, s, o, p), i.processChildNodes(l.node, t, a, r, n, u), e;\n                })) : (r[d] = y, c.checkTensorForDisposal(d, l.node, r, a, s, o, p), c.processChildNodes(l.node, t, a, r, n, u));\n            } else c.processChildNodes(l.node, t, a, r, n, u);\n        }, c = this; t.length > 0;)l();\n        return m;\n    }, e.prototype.processChildNodes = function(e, t, a, r, n, s) {\n        e.children.forEach(function(e) {\n            var o = getNodeNameAndIndex(e.name, a)[0];\n            !n[o] && s.has(e.name) && (\"Merge\" === e.op ? e.inputNames.some(function(e) {\n                return !!getTensor(e, r, a);\n            }) && (n[o] = !0, t.push({\n                contexts: a.currentContext,\n                node: e\n            })) : e.inputNames.every(function(e) {\n                return !!getTensor(e, r, a);\n            }) && (n[o] = !0, t.push({\n                contexts: a.currentContext,\n                node: e\n            })));\n        });\n    }, e.prototype.dispose = function() {\n        var e = this;\n        Object.keys(this.weightMap).forEach(function(t) {\n            return e.weightMap[t].forEach(function(e) {\n                return e.dispose();\n            });\n        });\n    }, e.prototype.checkInputShapeAndType = function(e) {\n        var t = this;\n        Object.keys(e).forEach(function(a) {\n            var r = e[a], n = parseNodeName(a)[0], s = t.graph.nodes[n];\n            if (s.attrParams.shape && s.attrParams.shape.value) {\n                var o = s.attrParams.shape.value, p = o.length === r.shape.length && r.shape.every(function(e, t) {\n                    return -1 === o[t] || o[t] === e;\n                });\n                _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(p, function() {\n                    return \"The shape of dict['\" + s.name + \"'] provided in model.execute(dict) must be [\" + o + \"], but was [\" + r.shape + \"]\";\n                });\n            }\n            s.attrParams.dtype && s.attrParams.dtype.value && _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.util.assert(r.dtype === s.attrParams.dtype.value, function() {\n                return \"The dtype of dict['\" + s.name + \"'] provided in model.execute(dict) must be \" + s.attrParams.dtype.value + \", but was \" + r.dtype;\n            });\n        });\n    }, e.prototype.mapInputs = function(e) {\n        var t = {};\n        for(var a in e){\n            if (null != this._signature && null != this._signature.inputs && null != this._signature.inputs[a]) t[this._signature.inputs[a].name] = e[a];\n            else t[a] = e[a];\n        }\n        return t;\n    }, e.prototype.checkInputs = function(e) {\n        var t = this, a = Object.keys(e).filter(function(e) {\n            var a = parseNodeName(e)[0];\n            return null == t.graph.nodes[a];\n        });\n        if (a.length > 0) throw new Error(\"The dict provided in model.execute(dict) has keys: [\" + a + \"] that are not part of graph\");\n    }, e.prototype.mapOutputs = function(e) {\n        var t = this;\n        return e.map(function(e) {\n            return null != t._signature && null != t._signature.outputs && null != t._signature.outputs[e] ? t._signature.outputs[e].name : e;\n        }, {});\n    }, e.prototype.checkOutputs = function(e) {\n        var t = this;\n        e.forEach(function(e) {\n            var a = parseNodeName(e)[0];\n            if (!t.graph.nodes[a]) throw new Error(\"The output '\" + e + \"' is not found in the graph\");\n        });\n    }, e;\n}(), TFHUB_SEARCH_PARAM = \"?tfjs-format=file\", DEFAULT_MODEL_NAME = \"model.json\", GraphModel = function() {\n    function e(e, t) {\n        void 0 === t && (t = {}), this.modelUrl = e, this.loadOptions = t, this.version = \"n/a\", null == t && (this.loadOptions = {});\n    }\n    return Object.defineProperty(e.prototype, \"modelVersion\", {\n        get: function() {\n            return this.version;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputNodes\", {\n        get: function() {\n            return this.executor.inputNodes;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputNodes\", {\n        get: function() {\n            return this.executor.outputNodes;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputs\", {\n        get: function() {\n            return this.executor.inputs;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputs\", {\n        get: function() {\n            return this.executor.outputs;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"weights\", {\n        get: function() {\n            return this.executor.weightMap;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), e.prototype.findIOHandler = function() {\n        var e = this.modelUrl;\n        if (null != e.load) this.handler = e;\n        else if (null != this.loadOptions.requestInit) this.handler = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.browserHTTPRequest(e, this.loadOptions);\n        else {\n            var t = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.getLoadHandlers(e, this.loadOptions.onProgress);\n            if (0 === t.length) t.push(_tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.browserHTTPRequest(e, this.loadOptions));\n            else if (t.length > 1) throw new Error(\"Found more than one (\" + t.length + \") load handlers for URL '\" + [\n                e\n            ] + \"'\");\n            this.handler = t[0];\n        }\n    }, e.prototype.load = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var e, t, a, r;\n            return __generator(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        if (this.findIOHandler(), null == this.handler.load) throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");\n                        return e = this, [\n                            4,\n                            this.handler.load()\n                        ];\n                    case 1:\n                        return e.artifacts = n.sent(), t = this.artifacts.modelTopology, a = {}, null != this.artifacts.userDefinedMetadata && (a = this.artifacts.userDefinedMetadata.signature), this.version = t.versions.producer + \".\" + t.versions.minConsumer, r = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs), this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(t, a)), this.executor.weightMap = this.convertTensorMapToTensorsMap(r), [\n                            2,\n                            !0\n                        ];\n                }\n            });\n        });\n    }, e.prototype.save = function(e, t) {\n        return __awaiter(this, void 0, void 0, function() {\n            var t;\n            return __generator(this, function(a) {\n                if (\"string\" == typeof e) {\n                    if (0 === (t = _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.io.getSaveHandlers(e)).length) throw new Error(\"Cannot find any save handlers for URL '\" + e + \"'\");\n                    if (t.length > 1) throw new Error(\"Found more than one (\" + t.length + \") save handlers for URL '\" + e + \"'\");\n                    e = t[0];\n                }\n                if (null == e.save) throw new Error(\"GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");\n                return [\n                    2,\n                    e.save(this.artifacts)\n                ];\n            });\n        });\n    }, e.prototype.predict = function(e, t) {\n        return this.execute(e, this.outputNodes);\n    }, e.prototype.normalizeInputs = function(e) {\n        if (!(e instanceof _tensorflow_tfjs_core__WEBPACK_IMPORTED_MODULE_0__.Tensor || Array.isArray(e))) return e;\n        if ((e = Array.isArray(e) ? e : [\n            e\n        ]).length !== this.inputNodes.length) throw new Error(\"Input tensor count mismatch,the graph model has \" + this.inputNodes.length + \" placeholders, while there are \" + e.length + \" input tensors.\");\n        return this.inputNodes.reduce(function(t, a, r) {\n            return t[a] = e[r], t;\n        }, {});\n    }, e.prototype.normalizeOutputs = function(e) {\n        return e = e || this.outputNodes, Array.isArray(e) ? e : [\n            e\n        ];\n    }, e.prototype.execute = function(e, t) {\n        e = this.normalizeInputs(e), t = this.normalizeOutputs(t);\n        var a = this.executor.execute(e, t);\n        return a.length > 1 ? a : a[0];\n    }, e.prototype.executeAsync = function(e, t) {\n        return __awaiter(this, void 0, void 0, function() {\n            var a;\n            return __generator(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return e = this.normalizeInputs(e), t = this.normalizeOutputs(t), [\n                            4,\n                            this.executor.executeAsync(e, t)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            (a = r.sent()).length > 1 ? a : a[0]\n                        ];\n                }\n            });\n        });\n    }, e.prototype.convertTensorMapToTensorsMap = function(e) {\n        return Object.keys(e).reduce(function(t, a) {\n            return t[a] = [\n                e[a]\n            ], t;\n        }, {});\n    }, e.prototype.dispose = function() {\n        this.executor.dispose();\n    }, e;\n}();\nfunction loadGraphModel(e, t) {\n    return void 0 === t && (t = {}), __awaiter(this, void 0, void 0, function() {\n        var a;\n        return __generator(this, function(r) {\n            switch(r.label){\n                case 0:\n                    if (null == e) throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");\n                    return null == t && (t = {}), t.fromTFHub && null == e.load && (e.endsWith(\"/\") || (e += \"/\"), e = \"\" + e + DEFAULT_MODEL_NAME + TFHUB_SEARCH_PARAM), [\n                        4,\n                        (a = new GraphModel(e, t)).load()\n                    ];\n                case 1:\n                    return r.sent(), [\n                        2,\n                        a\n                    ];\n            }\n        });\n    });\n}\nvar version = \"1.7.4\";\n //# sourceMappingURL=tf-converter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tensorflow/tfjs-converter/dist/tf-converter.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdadeltaOptimizer: () => (/* binding */ Yd),\n/* harmony export */   AdagradOptimizer: () => (/* binding */ $d),\n/* harmony export */   AdamOptimizer: () => (/* binding */ Qd),\n/* harmony export */   AdamaxOptimizer: () => (/* binding */ Jd),\n/* harmony export */   Add: () => (/* binding */ xr),\n/* harmony export */   AddN: () => (/* binding */ br),\n/* harmony export */   BroadcastTo: () => (/* binding */ Sr),\n/* harmony export */   DataStorage: () => (/* binding */ ca),\n/* harmony export */   Div: () => (/* binding */ wr),\n/* harmony export */   ENV: () => (/* binding */ s),\n/* harmony export */   Environment: () => (/* binding */ o),\n/* harmony export */   FromPixels: () => (/* binding */ Fr),\n/* harmony export */   FusedBatchNorm: () => (/* binding */ Cr),\n/* harmony export */   Identity: () => (/* binding */ Tr),\n/* harmony export */   KernelBackend: () => (/* binding */ la),\n/* harmony export */   MaxPoolWithArgmax: () => (/* binding */ _r),\n/* harmony export */   MomentumOptimizer: () => (/* binding */ tp),\n/* harmony export */   NonMaxSuppressionV5: () => (/* binding */ kr),\n/* harmony export */   OneHot: () => (/* binding */ Ar),\n/* harmony export */   Optimizer: () => (/* binding */ Xd),\n/* harmony export */   PadV2: () => (/* binding */ Nr),\n/* harmony export */   RMSPropOptimizer: () => (/* binding */ ep),\n/* harmony export */   Rank: () => (/* binding */ Ct),\n/* harmony export */   Reduction: () => (/* binding */ Nh),\n/* harmony export */   SGDOptimizer: () => (/* binding */ Zd),\n/* harmony export */   Square: () => (/* binding */ Rr),\n/* harmony export */   SquaredDifference: () => (/* binding */ Er),\n/* harmony export */   Tensor: () => (/* binding */ wt),\n/* harmony export */   TensorBuffer: () => (/* binding */ mt),\n/* harmony export */   Tile: () => (/* binding */ Dr),\n/* harmony export */   Transpose: () => (/* binding */ Ir),\n/* harmony export */   Variable: () => (/* binding */ St),\n/* harmony export */   abs: () => (/* binding */ Lr),\n/* harmony export */   acos: () => (/* binding */ Wr),\n/* harmony export */   acosh: () => (/* binding */ Ur),\n/* harmony export */   add: () => (/* binding */ Or),\n/* harmony export */   addN: () => (/* binding */ $u),\n/* harmony export */   addStrict: () => (/* binding */ xo),\n/* harmony export */   all: () => (/* binding */ ql),\n/* harmony export */   any: () => (/* binding */ Kl),\n/* harmony export */   argMax: () => (/* binding */ jl),\n/* harmony export */   argMin: () => (/* binding */ Xl),\n/* harmony export */   asin: () => (/* binding */ Vr),\n/* harmony export */   asinh: () => (/* binding */ zr),\n/* harmony export */   atan: () => (/* binding */ Gr),\n/* harmony export */   atan2: () => (/* binding */ bo),\n/* harmony export */   atanh: () => (/* binding */ Hr),\n/* harmony export */   avgPool: () => (/* binding */ Ol),\n/* harmony export */   avgPool3d: () => (/* binding */ Pl),\n/* harmony export */   backend: () => (/* binding */ hn),\n/* harmony export */   backend_util: () => (/* binding */ Sa),\n/* harmony export */   basicLSTMCell: () => (/* binding */ lh),\n/* harmony export */   batchNorm: () => (/* binding */ nc),\n/* harmony export */   batchNorm2d: () => (/* binding */ ac),\n/* harmony export */   batchNorm3d: () => (/* binding */ uc),\n/* harmony export */   batchNorm4d: () => (/* binding */ hc),\n/* harmony export */   batchNormalization: () => (/* binding */ ec),\n/* harmony export */   batchNormalization2d: () => (/* binding */ oc),\n/* harmony export */   batchNormalization3d: () => (/* binding */ sc),\n/* harmony export */   batchNormalization4d: () => (/* binding */ lc),\n/* harmony export */   batchToSpaceND: () => (/* binding */ rr),\n/* harmony export */   booleanMaskAsync: () => (/* binding */ ul),\n/* harmony export */   broadcastTo: () => (/* binding */ fc),\n/* harmony export */   browser: () => (/* binding */ Vd),\n/* harmony export */   buffer: () => (/* binding */ er),\n/* harmony export */   cast: () => (/* binding */ or),\n/* harmony export */   ceil: () => (/* binding */ qr),\n/* harmony export */   clipByValue: () => (/* binding */ Kr),\n/* harmony export */   clone: () => (/* binding */ dc),\n/* harmony export */   complex: () => (/* binding */ Tn),\n/* harmony export */   concat: () => (/* binding */ Yn),\n/* harmony export */   concat1d: () => (/* binding */ $n),\n/* harmony export */   concat2d: () => (/* binding */ Qn),\n/* harmony export */   concat3d: () => (/* binding */ Jn),\n/* harmony export */   concat4d: () => (/* binding */ Zn),\n/* harmony export */   conv1d: () => (/* binding */ fl),\n/* harmony export */   conv2d: () => (/* binding */ dl),\n/* harmony export */   conv2dTranspose: () => (/* binding */ wl),\n/* harmony export */   conv3d: () => (/* binding */ pl),\n/* harmony export */   conv3dTranspose: () => (/* binding */ Cl),\n/* harmony export */   cos: () => (/* binding */ jr),\n/* harmony export */   cosh: () => (/* binding */ Xr),\n/* harmony export */   cumsum: () => (/* binding */ ar),\n/* harmony export */   customGrad: () => (/* binding */ oa),\n/* harmony export */   deprecationWarn: () => (/* binding */ Xe),\n/* harmony export */   depthToSpace: () => (/* binding */ ir),\n/* harmony export */   depthwiseConv2d: () => (/* binding */ ml),\n/* harmony export */   diag: () => (/* binding */ Eh),\n/* harmony export */   disableDeprecationWarnings: () => (/* binding */ je),\n/* harmony export */   dispose: () => (/* binding */ tn),\n/* harmony export */   disposeVariables: () => (/* binding */ Ye),\n/* harmony export */   div: () => (/* binding */ Bo),\n/* harmony export */   divNoNan: () => (/* binding */ bc),\n/* harmony export */   divStrict: () => (/* binding */ wo),\n/* harmony export */   dot: () => (/* binding */ Rl),\n/* harmony export */   dropout: () => (/* binding */ Rh),\n/* harmony export */   elu: () => (/* binding */ nh),\n/* harmony export */   enableDebugMode: () => (/* binding */ Ke),\n/* harmony export */   enableProdMode: () => (/* binding */ qe),\n/* harmony export */   engine: () => (/* binding */ $e),\n/* harmony export */   env: () => (/* binding */ i),\n/* harmony export */   equal: () => (/* binding */ Kc),\n/* harmony export */   equalStrict: () => (/* binding */ jc),\n/* harmony export */   erf: () => (/* binding */ Yr),\n/* harmony export */   exp: () => (/* binding */ $r),\n/* harmony export */   expandDims: () => (/* binding */ sr),\n/* harmony export */   expm1: () => (/* binding */ Qr),\n/* harmony export */   eye: () => (/* binding */ Cc),\n/* harmony export */   fft: () => (/* binding */ gh),\n/* harmony export */   fill: () => (/* binding */ Hn),\n/* harmony export */   findBackend: () => (/* binding */ un),\n/* harmony export */   findBackendFactory: () => (/* binding */ cn),\n/* harmony export */   floor: () => (/* binding */ Jr),\n/* harmony export */   floorDiv: () => (/* binding */ Co),\n/* harmony export */   frame: () => (/* binding */ Ah),\n/* harmony export */   fused: () => (/* binding */ hf),\n/* harmony export */   gather: () => (/* binding */ il),\n/* harmony export */   gatherND: () => (/* binding */ Ch),\n/* harmony export */   gather_util: () => (/* binding */ Lo),\n/* harmony export */   getBackend: () => (/* binding */ an),\n/* harmony export */   getGradient: () => (/* binding */ h),\n/* harmony export */   getKernel: () => (/* binding */ l),\n/* harmony export */   getKernelsForBackend: () => (/* binding */ f),\n/* harmony export */   grad: () => (/* binding */ Zo),\n/* harmony export */   grads: () => (/* binding */ ta),\n/* harmony export */   greater: () => (/* binding */ Xc),\n/* harmony export */   greaterEqual: () => (/* binding */ Yc),\n/* harmony export */   greaterEqualStrict: () => (/* binding */ $c),\n/* harmony export */   greaterStrict: () => (/* binding */ Qc),\n/* harmony export */   hammingWindow: () => (/* binding */ Sh),\n/* harmony export */   hannWindow: () => (/* binding */ kh),\n/* harmony export */   ifft: () => (/* binding */ mh),\n/* harmony export */   imag: () => (/* binding */ Nn),\n/* harmony export */   image: () => (/* binding */ nf),\n/* harmony export */   inTopKAsync: () => (/* binding */ Fh),\n/* harmony export */   io: () => (/* binding */ Bd),\n/* harmony export */   irfft: () => (/* binding */ xh),\n/* harmony export */   isFinite: () => (/* binding */ lo),\n/* harmony export */   isInf: () => (/* binding */ co),\n/* harmony export */   isNaN: () => (/* binding */ uo),\n/* harmony export */   keep: () => (/* binding */ en),\n/* harmony export */   leakyRelu: () => (/* binding */ rh),\n/* harmony export */   less: () => (/* binding */ Jc),\n/* harmony export */   lessEqual: () => (/* binding */ Zc),\n/* harmony export */   lessEqualStrict: () => (/* binding */ tl),\n/* harmony export */   lessStrict: () => (/* binding */ el),\n/* harmony export */   linalg: () => (/* binding */ jh),\n/* harmony export */   linspace: () => (/* binding */ qn),\n/* harmony export */   localResponseNormalization: () => (/* binding */ uh),\n/* harmony export */   log: () => (/* binding */ Zr),\n/* harmony export */   log1p: () => (/* binding */ to),\n/* harmony export */   logSigmoid: () => (/* binding */ eo),\n/* harmony export */   logSoftmax: () => (/* binding */ sa),\n/* harmony export */   logSumExp: () => (/* binding */ Yl),\n/* harmony export */   logicalAnd: () => (/* binding */ pc),\n/* harmony export */   logicalNot: () => (/* binding */ vc),\n/* harmony export */   logicalOr: () => (/* binding */ gc),\n/* harmony export */   logicalXor: () => (/* binding */ mc),\n/* harmony export */   losses: () => (/* binding */ zh),\n/* harmony export */   matMul: () => (/* binding */ El),\n/* harmony export */   math: () => (/* binding */ Wd),\n/* harmony export */   max: () => (/* binding */ $l),\n/* harmony export */   maxPool: () => (/* binding */ _l),\n/* harmony export */   maxPool3d: () => (/* binding */ Bl),\n/* harmony export */   maxPoolWithArgmax: () => (/* binding */ Ll),\n/* harmony export */   maximum: () => (/* binding */ Eo),\n/* harmony export */   maximumStrict: () => (/* binding */ Ro),\n/* harmony export */   mean: () => (/* binding */ Ql),\n/* harmony export */   memory: () => (/* binding */ Qe),\n/* harmony export */   min: () => (/* binding */ Jl),\n/* harmony export */   minimum: () => (/* binding */ Io),\n/* harmony export */   minimumStrict: () => (/* binding */ ko),\n/* harmony export */   mod: () => (/* binding */ So),\n/* harmony export */   modStrict: () => (/* binding */ Ao),\n/* harmony export */   moments: () => (/* binding */ Zl),\n/* harmony export */   movingAverage: () => (/* binding */ fh),\n/* harmony export */   mul: () => (/* binding */ To),\n/* harmony export */   mulStrict: () => (/* binding */ Do),\n/* harmony export */   multiRNNCell: () => (/* binding */ hh),\n/* harmony export */   multinomial: () => (/* binding */ Ec),\n/* harmony export */   neg: () => (/* binding */ no),\n/* harmony export */   nextFrame: () => (/* binding */ ap),\n/* harmony export */   norm: () => (/* binding */ ch),\n/* harmony export */   notEqual: () => (/* binding */ nl),\n/* harmony export */   notEqualStrict: () => (/* binding */ rl),\n/* harmony export */   oneHot: () => (/* binding */ Rc),\n/* harmony export */   ones: () => (/* binding */ zn),\n/* harmony export */   onesLike: () => (/* binding */ jn),\n/* harmony export */   op: () => (/* binding */ An),\n/* harmony export */   outerProduct: () => (/* binding */ Il),\n/* harmony export */   pad: () => (/* binding */ Ic),\n/* harmony export */   pad1d: () => (/* binding */ kc),\n/* harmony export */   pad2d: () => (/* binding */ Sc),\n/* harmony export */   pad3d: () => (/* binding */ Ac),\n/* harmony export */   pad4d: () => (/* binding */ Tc),\n/* harmony export */   pool: () => (/* binding */ Ml),\n/* harmony export */   pow: () => (/* binding */ No),\n/* harmony export */   powStrict: () => (/* binding */ Fo),\n/* harmony export */   prelu: () => (/* binding */ oh),\n/* harmony export */   print: () => (/* binding */ nr),\n/* harmony export */   prod: () => (/* binding */ eh),\n/* harmony export */   profile: () => (/* binding */ Je),\n/* harmony export */   rand: () => (/* binding */ Dc),\n/* harmony export */   randomGamma: () => (/* binding */ Uc),\n/* harmony export */   randomNormal: () => (/* binding */ Vc),\n/* harmony export */   randomUniform: () => (/* binding */ zc),\n/* harmony export */   range: () => (/* binding */ Kn),\n/* harmony export */   ready: () => (/* binding */ on),\n/* harmony export */   real: () => (/* binding */ Dn),\n/* harmony export */   reciprocal: () => (/* binding */ ro),\n/* harmony export */   registerBackend: () => (/* binding */ ln),\n/* harmony export */   registerGradient: () => (/* binding */ p),\n/* harmony export */   registerKernel: () => (/* binding */ d),\n/* harmony export */   relu: () => (/* binding */ ah),\n/* harmony export */   relu6: () => (/* binding */ ih),\n/* harmony export */   removeBackend: () => (/* binding */ sn),\n/* harmony export */   reshape: () => (/* binding */ ur),\n/* harmony export */   reverse: () => (/* binding */ kl),\n/* harmony export */   reverse1d: () => (/* binding */ Sl),\n/* harmony export */   reverse2d: () => (/* binding */ Al),\n/* harmony export */   reverse3d: () => (/* binding */ Tl),\n/* harmony export */   reverse4d: () => (/* binding */ Dl),\n/* harmony export */   rfft: () => (/* binding */ yh),\n/* harmony export */   round: () => (/* binding */ oo),\n/* harmony export */   rsqrt: () => (/* binding */ ao),\n/* harmony export */   scalar: () => (/* binding */ On),\n/* harmony export */   scatterND: () => (/* binding */ vh),\n/* harmony export */   scatter_util: () => (/* binding */ Ho),\n/* harmony export */   selu: () => (/* binding */ sh),\n/* harmony export */   separableConv2d: () => (/* binding */ bl),\n/* harmony export */   serialization: () => (/* binding */ qd),\n/* harmony export */   setBackend: () => (/* binding */ rn),\n/* harmony export */   setPlatform: () => (/* binding */ fn),\n/* harmony export */   setdiff1dAsync: () => (/* binding */ dr),\n/* harmony export */   sigmoid: () => (/* binding */ io),\n/* harmony export */   sign: () => (/* binding */ so),\n/* harmony export */   signal: () => (/* binding */ Dh),\n/* harmony export */   sin: () => (/* binding */ ho),\n/* harmony export */   sinh: () => (/* binding */ fo),\n/* harmony export */   slice: () => (/* binding */ Wl),\n/* harmony export */   slice1d: () => (/* binding */ Ul),\n/* harmony export */   slice2d: () => (/* binding */ Vl),\n/* harmony export */   slice3d: () => (/* binding */ zl),\n/* harmony export */   slice4d: () => (/* binding */ Gl),\n/* harmony export */   slice_util: () => (/* binding */ Jo),\n/* harmony export */   softmax: () => (/* binding */ ia),\n/* harmony export */   softplus: () => (/* binding */ po),\n/* harmony export */   spaceToBatchND: () => (/* binding */ cr),\n/* harmony export */   sparseToDense: () => (/* binding */ wh),\n/* harmony export */   spectral: () => (/* binding */ bh),\n/* harmony export */   split: () => (/* binding */ tr),\n/* harmony export */   sqrt: () => (/* binding */ vo),\n/* harmony export */   square: () => (/* binding */ Gc),\n/* harmony export */   squaredDifference: () => (/* binding */ Hc),\n/* harmony export */   squaredDifferenceStrict: () => (/* binding */ _o),\n/* harmony export */   squeeze: () => (/* binding */ lr),\n/* harmony export */   stack: () => (/* binding */ hr),\n/* harmony export */   step: () => (/* binding */ go),\n/* harmony export */   stft: () => (/* binding */ Th),\n/* harmony export */   stridedSlice: () => (/* binding */ dh),\n/* harmony export */   sub: () => (/* binding */ Oo),\n/* harmony export */   subStrict: () => (/* binding */ Mo),\n/* harmony export */   sum: () => (/* binding */ th),\n/* harmony export */   sumOutType: () => (/* binding */ Dt),\n/* harmony export */   tan: () => (/* binding */ mo),\n/* harmony export */   tanh: () => (/* binding */ yo),\n/* harmony export */   tensor: () => (/* binding */ Fn),\n/* harmony export */   tensor1d: () => (/* binding */ Mn),\n/* harmony export */   tensor2d: () => (/* binding */ Bn),\n/* harmony export */   tensor3d: () => (/* binding */ Pn),\n/* harmony export */   tensor4d: () => (/* binding */ Ln),\n/* harmony export */   tensor5d: () => (/* binding */ Wn),\n/* harmony export */   tensor6d: () => (/* binding */ Un),\n/* harmony export */   tensor_util: () => (/* binding */ Mt),\n/* harmony export */   test_util: () => (/* binding */ Bc),\n/* harmony export */   tidy: () => (/* binding */ Ze),\n/* harmony export */   tile: () => (/* binding */ wc),\n/* harmony export */   time: () => (/* binding */ nn),\n/* harmony export */   topk: () => (/* binding */ ph),\n/* harmony export */   train: () => (/* binding */ rp),\n/* harmony export */   transpose: () => (/* binding */ ua),\n/* harmony export */   truncatedNormal: () => (/* binding */ qc),\n/* harmony export */   unregisterGradient: () => (/* binding */ g),\n/* harmony export */   unregisterKernel: () => (/* binding */ v),\n/* harmony export */   unsortedSegmentSum: () => (/* binding */ sl),\n/* harmony export */   unstack: () => (/* binding */ fr),\n/* harmony export */   util: () => (/* binding */ st),\n/* harmony export */   valueAndGrad: () => (/* binding */ ea),\n/* harmony export */   valueAndGrads: () => (/* binding */ na),\n/* harmony export */   variable: () => (/* binding */ Vn),\n/* harmony export */   variableGrads: () => (/* binding */ ra),\n/* harmony export */   version_core: () => (/* binding */ Kd),\n/* harmony export */   webgl: () => (/* binding */ jd),\n/* harmony export */   where: () => (/* binding */ yc),\n/* harmony export */   whereAsync: () => (/* binding */ xc),\n/* harmony export */   zeros: () => (/* binding */ Gn),\n/* harmony export */   zerosLike: () => (/* binding */ Xn)\n/* harmony export */ });\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */ var t = function(e, n) {\n    return (t = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(t, e) {\n        t.__proto__ = e;\n    } || function(t, e) {\n        for(var n in e)e.hasOwnProperty(n) && (t[n] = e[n]);\n    })(e, n);\n};\nfunction e(e, n) {\n    function r() {\n        this.constructor = e;\n    }\n    t(e, n), e.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype, new r);\n}\nfunction n(t, e, n, r) {\n    return new (n || (n = Promise))(function(o, a) {\n        function i(t) {\n            try {\n                u(r.next(t));\n            } catch (t) {\n                a(t);\n            }\n        }\n        function s(t) {\n            try {\n                u(r.throw(t));\n            } catch (t) {\n                a(t);\n            }\n        }\n        function u(t) {\n            t.done ? o(t.value) : new n(function(e) {\n                e(t.value);\n            }).then(i, s);\n        }\n        u((r = r.apply(t, e || [])).next());\n    });\n}\nfunction r(t, e) {\n    var n, r, o, a, i = {\n        label: 0,\n        sent: function() {\n            if (1 & o[0]) throw o[1];\n            return o[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return a = {\n        next: s(0),\n        throw: s(1),\n        return: s(2)\n    }, \"function\" == typeof Symbol && (a[Symbol.iterator] = function() {\n        return this;\n    }), a;\n    function s(a) {\n        return function(s) {\n            return function(a) {\n                if (n) throw new TypeError(\"Generator is already executing.\");\n                for(; i;)try {\n                    if (n = 1, r && (o = 2 & a[0] ? r.return : a[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, a[1])).done) return o;\n                    switch(r = 0, o && (a = [\n                        2 & a[0],\n                        o.value\n                    ]), a[0]){\n                        case 0:\n                        case 1:\n                            o = a;\n                            break;\n                        case 4:\n                            return i.label++, {\n                                value: a[1],\n                                done: !1\n                            };\n                        case 5:\n                            i.label++, r = a[1], a = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            a = i.ops.pop(), i.trys.pop();\n                            continue;\n                        default:\n                            if (!(o = (o = i.trys).length > 0 && o[o.length - 1]) && (6 === a[0] || 2 === a[0])) {\n                                i = 0;\n                                continue;\n                            }\n                            if (3 === a[0] && (!o || a[1] > o[0] && a[1] < o[3])) {\n                                i.label = a[1];\n                                break;\n                            }\n                            if (6 === a[0] && i.label < o[1]) {\n                                i.label = o[1], o = a;\n                                break;\n                            }\n                            if (o && i.label < o[2]) {\n                                i.label = o[2], i.ops.push(a);\n                                break;\n                            }\n                            o[2] && i.ops.pop(), i.trys.pop();\n                            continue;\n                    }\n                    a = e.call(t, i);\n                } catch (t) {\n                    a = [\n                        6,\n                        t\n                    ], r = 0;\n                } finally{\n                    n = o = 0;\n                }\n                if (5 & a[0]) throw a[1];\n                return {\n                    value: a[0] ? a[1] : void 0,\n                    done: !0\n                };\n            }([\n                a,\n                s\n            ]);\n        };\n    }\n}\nvar o = function() {\n    function t(t) {\n        this.global = t, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.populateURLFlags();\n    }\n    return t.prototype.setPlatform = function(t, e) {\n        null != this.platform && console.warn(\"Platform \" + this.platformName + \" has already been set. Overwriting the platform with \" + e + \".\"), this.platformName = t, this.platform = e;\n    }, t.prototype.registerFlag = function(t, e, n) {\n        if (this.flagRegistry[t] = {\n            evaluationFn: e,\n            setHook: n\n        }, null != this.urlFlags[t]) {\n            var r = this.urlFlags[t];\n            console.warn(\"Setting feature override from URL \" + t + \": \" + r + \".\"), this.set(t, r);\n        }\n    }, t.prototype.get = function(t) {\n        return t in this.flags ? this.flags[t] : (this.flags[t] = this.evaluateFlag(t), this.flags[t]);\n    }, t.prototype.getNumber = function(t) {\n        return this.get(t);\n    }, t.prototype.getBool = function(t) {\n        return this.get(t);\n    }, t.prototype.getFlags = function() {\n        return this.flags;\n    }, Object.defineProperty(t.prototype, \"features\", {\n        get: function() {\n            return this.flags;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.set = function(t, e) {\n        if (null == this.flagRegistry[t]) throw new Error(\"Cannot set flag \" + t + \" as it has not been registered.\");\n        this.flags[t] = e, null != this.flagRegistry[t].setHook && this.flagRegistry[t].setHook(e);\n    }, t.prototype.evaluateFlag = function(t) {\n        if (null == this.flagRegistry[t]) throw new Error(\"Cannot evaluate flag '\" + t + \"': no evaluation function found.\");\n        return this.flagRegistry[t].evaluationFn();\n    }, t.prototype.setFlags = function(t) {\n        this.flags = Object.assign({}, t);\n    }, t.prototype.reset = function() {\n        this.flags = {}, this.urlFlags = {}, this.populateURLFlags();\n    }, t.prototype.populateURLFlags = function() {\n        var t = this;\n        if (void 0 !== this.global && void 0 !== this.global.location && void 0 !== this.global.location.search) {\n            var e, n, r = (e = this.global.location.search, n = {}, e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function(t) {\n                for(var e = [], r = 1; r < arguments.length; r++)e[r - 1] = arguments[r];\n                return a(n, e[0], e[1]), e.join(\"=\");\n            }), n);\n            if (\"tfjsflags\" in r) r.tfjsflags.split(\",\").forEach(function(e) {\n                var n = e.split(\":\"), r = n[0], o = n[1];\n                t.urlFlags[r] = function(t, e) {\n                    if (\"true\" === (e = e.toLowerCase()) || \"false\" === e) return \"true\" === e;\n                    if (\"\" + +e === e) return +e;\n                    throw new Error(\"Could not parse value flag value \" + e + \" for flag \" + t + \".\");\n                }(r, o);\n            });\n        }\n    }, t;\n}();\nfunction a(t, e, n) {\n    t[decodeURIComponent(e)] = decodeURIComponent(n || \"\");\n}\nfunction i() {\n    return s;\n}\nvar s = null;\nvar u = new Map, c = new Map;\nfunction l(t, e) {\n    var n = m(t, e);\n    return u.get(n);\n}\nfunction h(t) {\n    return c.get(t);\n}\nfunction f(t) {\n    for(var e = u.entries(), n = [];;){\n        var r = e.next(), o = r.done, a = r.value;\n        if (o) break;\n        var i = a[0], s = a[1];\n        i.split(\"_\")[0] === t && n.push(s);\n    }\n    return n;\n}\nfunction d(t) {\n    var e = t.kernelName, n = t.backendName, r = m(e, n);\n    if (u.has(r)) throw new Error(\"The kernel '\" + e + \"' for backend '\" + n + \"' is already registered\");\n    u.set(r, t);\n}\nfunction p(t) {\n    var e = t.kernelName;\n    c.has(e) && console.warn(\"Overriding the gradient for '\" + e + \"'\"), c.set(e, t);\n}\nfunction v(t, e) {\n    var n = m(t, e);\n    if (!u.has(n)) throw new Error(\"The kernel '\" + t + \"' for backend '\" + e + \"' is not registered\");\n    u.delete(n);\n}\nfunction g(t) {\n    if (!c.has(t)) throw new Error(\"The gradient '\" + t + \"' for backend is not registered\");\n    c.delete(t);\n}\nfunction m(t, e) {\n    return e + \"_\" + t;\n}\nfunction y(t) {\n    for(var e = t.length, n = 0, r = 0; e > 0;)r = Math.random() * e | 0, n = t[--e], t[e] = t[r], t[r] = n;\n}\nfunction x(t, e, n) {\n    return Math.max(t, Math.min(e, n));\n}\nfunction b(t) {\n    return t % 2 == 0 ? t : t + 1;\n}\nfunction w(t) {\n    for(var e = 0, n = 0; n < t.length; n++)e += t[n];\n    return e;\n}\nfunction C(t, e) {\n    if (!t) throw new Error(\"string\" == typeof e ? e : e());\n}\nfunction E(t, e, n) {\n    void 0 === n && (n = \"\"), C(S(t, e), function() {\n        return n + \" Shapes \" + t + \" and \" + e + \" must match\";\n    });\n}\nfunction R(t) {\n    C(null != t, function() {\n        return \"The input to the tensor constructor must be a non-null value.\";\n    });\n}\nfunction I(t, e, n) {\n    if (void 0 === e && (e = []), void 0 === n && (n = !1), null == e && (e = []), Array.isArray(t) || V(t) && !n) for(var r = 0; r < t.length; ++r)I(t[r], e, n);\n    else e.push(t);\n    return e;\n}\nfunction k(t) {\n    if (0 === t.length) return 1;\n    for(var e = t[0], n = 1; n < t.length; n++)e *= t[n];\n    return e;\n}\nfunction S(t, e) {\n    if (t === e) return !0;\n    if (null == t || null == e) return !1;\n    if (t.length !== e.length) return !1;\n    for(var n = 0; n < t.length; n++)if (t[n] !== e[n]) return !1;\n    return !0;\n}\nfunction A(t) {\n    return t % 1 == 0;\n}\nfunction T(t) {\n    if (null != Math.tanh) return Math.tanh(t);\n    if (t === 1 / 0) return 1;\n    if (t === -1 / 0) return -1;\n    var e = Math.exp(2 * t);\n    return (e - 1) / (e + 1);\n}\nfunction D(t) {\n    var e = Math.ceil(Math.sqrt(t));\n    return [\n        e,\n        Math.ceil(t / e)\n    ];\n}\nfunction N(t, e) {\n    return e <= t.length ? t : t + \" \".repeat(e - t.length);\n}\nfunction F(t, e, n) {\n    return void 0 === e && (e = function(t) {\n        return 0;\n    }), new Promise(function(r, o) {\n        var a = 0, i = function() {\n            if (t()) r();\n            else {\n                a++;\n                var s = e(a);\n                null != n && a >= n ? o() : setTimeout(i, s);\n            }\n        };\n        i();\n    });\n}\nfunction _(t, e) {\n    for(var n = 1, r = -1, o = 0; o < t.length; ++o)if (t[o] >= 0) n *= t[o];\n    else if (-1 === t[o]) {\n        if (-1 !== r) throw Error(\"Shapes can only have 1 implicit size. Found -1 at dim \" + r + \" and dim \" + o);\n        r = o;\n    } else if (t[o] < 0) throw Error(\"Shapes can not be < 0. Found \" + t[o] + \" at dim \" + o);\n    if (-1 === r) {\n        if (e > 0 && e !== n) throw Error(\"Size(\" + e + \") must match the product of shape \" + t);\n        return t;\n    }\n    if (0 === n) throw Error(\"Cannot infer the missing size in [\" + t + \"] when there are 0 elements\");\n    if (e % n != 0) throw Error(\"The implicit shape can't be a fractional number. Got \" + e + \" / \" + n);\n    var a = t.slice();\n    return a[r] = e / n, a;\n}\nfunction O(t, e) {\n    var n = e.length;\n    return C((t = null == t ? e.map(function(t, e) {\n        return e;\n    }) : [].concat(t)).every(function(t) {\n        return t >= -n && t < n;\n    }), function() {\n        return \"All values in axis param must be in range [-\" + n + \", \" + n + \") but got axis \" + t;\n    }), C(t.every(function(t) {\n        return A(t);\n    }), function() {\n        return \"All values in axis param must be integers but got axis \" + t;\n    }), t.map(function(t) {\n        return t < 0 ? n + t : t;\n    });\n}\nfunction M(t, e) {\n    for(var n = [], r = [], o = null != e && Array.isArray(e) && 0 === e.length, a = null == e || o ? null : O(e, t).sort(), i = 0, s = 0; s < t.length; ++s){\n        if (null != a) {\n            if (a[i] === s && 1 !== t[s]) throw new Error(\"Can't squeeze axis \" + s + \" since its dim '\" + t[s] + \"' is not 1\");\n            (null == a[i] || a[i] > s) && 1 === t[s] && (n.push(t[s]), r.push(s)), a[i] <= s && i++;\n        }\n        1 !== t[s] && (n.push(t[s]), r.push(s));\n    }\n    return {\n        newShape: n,\n        keptDims: r\n    };\n}\nfunction B(t, e) {\n    var n = null;\n    if (null == t || \"float32\" === t) n = new Float32Array(e);\n    else if (\"int32\" === t) n = new Int32Array(e);\n    else {\n        if (\"bool\" !== t) throw new Error(\"Unknown data type \" + t);\n        n = new Uint8Array(e);\n    }\n    return n;\n}\nfunction P(t, e) {\n    var n = null;\n    if (null == t || \"float32\" === t) n = new Float32Array(e);\n    else if (\"int32\" === t) n = new Int32Array(e);\n    else if (\"bool\" === t) n = new Uint8Array(e);\n    else {\n        if (\"string\" !== t) throw new Error(\"Unknown data type \" + t);\n        n = new Array(e);\n    }\n    return n;\n}\nfunction L(t, e) {\n    for(var n = 0; n < t.length; n++){\n        var r = t[n];\n        if (isNaN(r) || !isFinite(r)) throw Error(\"A tensor of type \" + e + \" being uploaded contains \" + r + \".\");\n    }\n}\nfunction W(t) {\n    return \"bool\" === t || \"complex64\" === t || \"float32\" === t || \"int32\" === t || \"string\" === t;\n}\nfunction U(t, e) {\n    return \"complex64\" !== e && (\"float32\" !== e || \"complex64\" === t) && (\"int32\" !== e || \"float32\" === t || \"complex64\" === t) && (\"bool\" !== e || \"bool\" !== t);\n}\nfunction V(t) {\n    return t instanceof Float32Array || t instanceof Int32Array || t instanceof Uint8Array;\n}\nfunction z(t) {\n    if (\"float32\" === t || \"int32\" === t) return 4;\n    if (\"complex64\" === t) return 8;\n    if (\"bool\" === t) return 1;\n    throw new Error(\"Unknown dtype \" + t);\n}\nfunction G(t) {\n    if (null == t) return 0;\n    var e = 0;\n    return t.forEach(function(t) {\n        return e += t.length;\n    }), e;\n}\nfunction H(t) {\n    return \"string\" == typeof t || t instanceof String;\n}\nfunction q(t) {\n    return \"boolean\" == typeof t;\n}\nfunction K(t) {\n    return \"number\" == typeof t;\n}\nfunction j(t) {\n    return Array.isArray(t) ? j(t[0]) : t instanceof Float32Array ? \"float32\" : t instanceof Int32Array || t instanceof Uint8Array ? \"int32\" : K(t) ? \"float32\" : H(t) ? \"string\" : q(t) ? \"bool\" : \"float32\";\n}\nfunction X(t) {\n    return !!(t && t.constructor && t.call && t.apply);\n}\nfunction Y(t, e) {\n    for(var n = e; n < t; ++n)if (t % n == 0) return n;\n    return t;\n}\nfunction $(t) {\n    var e = t.length;\n    if (e < 2) return [];\n    var n = new Array(e - 1);\n    n[e - 2] = t[e - 1];\n    for(var r = e - 3; r >= 0; --r)n[r] = n[r + 1] * t[r + 1];\n    return n;\n}\nfunction Q(t, e, n) {\n    if (\"string\" === e) throw new Error(\"Cannot convert a string[] to a TypedArray\");\n    if (Array.isArray(t) && (t = I(t)), n && L(t, e), function(t, e) {\n        return t instanceof Float32Array && \"float32\" === e || t instanceof Int32Array && \"int32\" === e || t instanceof Uint8Array && \"bool\" === e;\n    }(t, e)) return t;\n    if (null == e || \"float32\" === e || \"complex64\" === e) return new Float32Array(t);\n    if (\"int32\" === e) return new Int32Array(t);\n    if (\"bool\" === e) {\n        for(var r = new Uint8Array(t.length), o = 0; o < r.length; ++o)0 !== Math.round(t[o]) && (r[o] = 1);\n        return r;\n    }\n    throw new Error(\"Unknown data type \" + e);\n}\nfunction J(t, e) {\n    if (0 === t.length) return e[0];\n    var n = t.reduce(function(t, e) {\n        return t * e;\n    });\n    if (0 === n) return [];\n    if (n !== e.length) throw new Error(\"[\" + t + \"] does not match the input size.\");\n    return function t(e, n, r) {\n        var o = new Array;\n        if (1 === n.length) for(var a = n[0], i = 0; i < a; i++)o[i] = r[e + i];\n        else {\n            a = n[0];\n            var s = n.slice(1), u = s.reduce(function(t, e) {\n                return t * e;\n            });\n            for(i = 0; i < a; i++)o[i] = t(e + i * u, s, r);\n        }\n        return o;\n    }(0, t, e);\n}\nfunction Z(t, e) {\n    for(var n = tt(t, e), r = 0; r < n.length; r++)n[r] = 1;\n    return n;\n}\nfunction tt(t, e) {\n    if (null == e || \"float32\" === e || \"complex64\" === e) return new Float32Array(t);\n    if (\"int32\" === e) return new Int32Array(t);\n    if (\"bool\" === e) return new Uint8Array(t);\n    throw new Error(\"Unknown data type \" + e);\n}\nfunction et() {\n    return i().platform.now();\n}\nfunction nt(t) {\n    t.forEach(function(e) {\n        C(Number.isInteger(e) && e >= 0, function() {\n            return \"Tensor must have a shape comprised of positive integers but got shape [\" + t + \"].\";\n        });\n    });\n}\nfunction rt(t, e) {\n    return void 0 === e && (e = \"utf-8\"), e = e || \"utf-8\", i().platform.encode(t, e);\n}\nfunction ot(t, e) {\n    return void 0 === e && (e = \"utf-8\"), e = e || \"utf-8\", i().platform.decode(t, e);\n}\nfunction at(t, e, n) {\n    if (0 === e) return 0;\n    if (1 === e) return t[0];\n    for(var r = t[t.length - 1], o = 0; o < t.length - 1; ++o)r += n[o] * t[o];\n    return r;\n}\nfunction it(t, e, n) {\n    if (0 === e) return [];\n    if (1 === e) return [\n        t\n    ];\n    for(var r = new Array(e), o = 0; o < r.length - 1; ++o)r[o] = Math.floor(t / n[o]), t -= r[o] * n[o];\n    return r[r.length - 1] = t, r;\n}\nvar st = Object.freeze({\n    shuffle: y,\n    clamp: x,\n    nearestLargerEven: b,\n    sum: w,\n    randUniform: function(t, e) {\n        var n = Math.random();\n        return e * n + (1 - n) * t;\n    },\n    distSquared: function(t, e) {\n        for(var n = 0, r = 0; r < t.length; r++){\n            var o = Number(t[r]) - Number(e[r]);\n            n += o * o;\n        }\n        return n;\n    },\n    assert: C,\n    assertShapesMatch: E,\n    assertNonNull: R,\n    flatten: I,\n    sizeFromShape: k,\n    isScalarShape: function(t) {\n        return 0 === t.length;\n    },\n    arraysEqual: S,\n    isInt: A,\n    tanh: T,\n    sizeToSquarishShape: D,\n    createShuffledIndices: function(t) {\n        for(var e = new Uint32Array(t), n = 0; n < t; ++n)e[n] = n;\n        return y(e), e;\n    },\n    rightPad: N,\n    repeatedTry: F,\n    inferFromImplicitShape: _,\n    parseAxisParam: O,\n    squeezeShape: M,\n    getTypedArrayFromDType: B,\n    getArrayFromDType: P,\n    checkConversionForErrors: L,\n    isValidDtype: W,\n    hasEncodingLoss: U,\n    isTypedArray: V,\n    bytesPerElement: z,\n    bytesFromStringArray: G,\n    isString: H,\n    isBoolean: q,\n    isNumber: K,\n    inferDtype: j,\n    isFunction: X,\n    nearestDivisor: Y,\n    computeStrides: $,\n    toTypedArray: Q,\n    toNestedArray: J,\n    makeOnesTypedArray: Z,\n    makeZerosTypedArray: tt,\n    now: et,\n    assertNonNegativeIntegerDimensions: nt,\n    fetch: function(t, e) {\n        return i().platform.fetch(t, e);\n    },\n    encodeString: rt,\n    decodeString: ot,\n    locToIndex: at,\n    indexToLoc: it\n}), ut = function() {\n    function t(t, e) {\n        this.backendTimer = t, this.logger = e, null == e && (this.logger = new ct);\n    }\n    return t.prototype.profileKernel = function(t, e, n) {\n        var r, o = this, a = this.backendTimer.time(function() {\n            r = n();\n        });\n        return r.forEach(function(n) {\n            n.data().then(function(r) {\n                !function(t, e, n) {\n                    if (\"float32\" !== e) return !1;\n                    for(var r = 0; r < t.length; r++){\n                        var o = t[r];\n                        if (isNaN(o) || !isFinite(o)) return console.warn(\"Found \" + o + \" in the result of '\" + n + \"'\"), !0;\n                    }\n                }(r, n.dtype, t), a.then(function(a) {\n                    var i = \"\";\n                    null != a.getExtraProfileInfo && (i = a.getExtraProfileInfo()), o.logger.logKernelProfile(t, n, r, a.kernelMs, e, i);\n                });\n            });\n        }), r;\n    }, t;\n}();\nvar ct = function() {\n    function t() {}\n    return t.prototype.logKernelProfile = function(t, e, n, r, o, a) {\n        var i = \"number\" == typeof r ? N(r + \"ms\", 9) : r.error, s = N(t, 25), u = e.rank, c = e.size, l = N(e.shape.toString(), 14), h = \"\";\n        for(var f in o){\n            var d = o[f].shape || e.shape, p = d.length;\n            h += f + \": \" + p + \"D \" + (p > 0 ? d : \"\") + \" \";\n        }\n        console.log(\"%c\" + s + \"\t%c\" + i + \"\t%c\" + u + \"D \" + l + \"\t%c\" + c + \"\t%c\" + h + \"\t%c\" + a, \"font-weight:bold\", \"color:red\", \"color:blue\", \"color: orange\", \"color: green\", \"color: steelblue\");\n    }, t;\n}();\nvar lt = 20, ht = 3, ft = 7;\nfunction dt(t, e, n, r) {\n    var o = $(e), a = function(t, e, n, r) {\n        var o = k(e), a = r[r.length - 1], i = new Array(a).fill(0), s = e.length, u = \"complex64\" === n ? gt(t) : t;\n        if (s > 1) for(var c = 0; c < o / a; c++)for(var l = c * a, h = 0; h < a; h++)i[h] = Math.max(i[h], pt(u[l + h], 0, n).length);\n        return i;\n    }(t, e, n, o), i = e.length, s = function t(e, n, r, o, a, i) {\n        void 0 === i && (i = !0);\n        var s = \"complex64\" === r ? 2 : 1, u = n[0], c = n.length;\n        if (0 === c) {\n            return \"complex64\" === r ? [\n                pt(gt(e)[0], 0, r)\n            ] : \"bool\" === r ? [\n                vt(e[0])\n            ] : [\n                e[0].toString()\n            ];\n        }\n        if (1 === c) {\n            if (u > lt) {\n                var l = ht * s, h = Array.from(e.slice(0, l)), f = Array.from(e.slice((u - ht) * s, u * s));\n                return \"complex64\" === r && (h = gt(h), f = gt(f)), [\n                    \"[\" + h.map(function(t, e) {\n                        return pt(t, a[e], r);\n                    }).join(\", \") + \", ..., \" + f.map(function(t, e) {\n                        return pt(t, a[u - ht + e], r);\n                    }).join(\", \") + \"]\"\n                ];\n            }\n            return [\n                \"[\" + (\"complex64\" === r ? gt(e) : Array.from(e)).map(function(t, e) {\n                    return pt(t, a[e], r);\n                }).join(\", \") + \"]\"\n            ];\n        }\n        var d = n.slice(1), p = o.slice(1), v = o[0] * s, g = [];\n        if (u > lt) {\n            for(var m = 0; m < ht; m++){\n                var y = (x = m * v) + v;\n                g.push.apply(g, t(e.slice(x, y), d, r, p, a, !1));\n            }\n            g.push(\"...\");\n            for(m = u - ht; m < u; m++){\n                y = (x = m * v) + v;\n                g.push.apply(g, t(e.slice(x, y), d, r, p, a, m === u - 1));\n            }\n        } else for(m = 0; m < u; m++){\n            var x;\n            y = (x = m * v) + v;\n            g.push.apply(g, t(e.slice(x, y), d, r, p, a, m === u - 1));\n        }\n        var b = 2 === c ? \",\" : \"\";\n        g[0] = \"[\" + g[0] + b;\n        for(m = 1; m < g.length - 1; m++)g[m] = \" \" + g[m] + b;\n        var w = \",\\n\";\n        for(m = 2; m < c; m++)w += \"\\n\";\n        return g[g.length - 1] = \" \" + g[g.length - 1] + \"]\" + (i ? \"\" : w), g;\n    }(t, e, n, o, a), u = [\n        \"Tensor\"\n    ];\n    return r && (u.push(\"  dtype: \" + n), u.push(\"  rank: \" + i), u.push(\"  shape: [\" + e + \"]\"), u.push(\"  values:\")), u.push(s.map(function(t) {\n        return \"    \" + t;\n    }).join(\"\\n\")), u.join(\"\\n\");\n}\nfunction pt(t, e, n) {\n    return N(Array.isArray(t) ? parseFloat(t[0].toFixed(ft)) + \" + \" + parseFloat(t[1].toFixed(ft)) + \"j\" : H(t) ? \"'\" + t + \"'\" : \"bool\" === n ? vt(t) : parseFloat(t.toFixed(ft)).toString(), e);\n}\nfunction vt(t) {\n    return 0 === t ? \"false\" : \"true\";\n}\nfunction gt(t) {\n    for(var e = [], n = 0; n < t.length; n += 2)e.push([\n        t[n],\n        t[n + 1]\n    ]);\n    return e;\n}\nvar mt = function() {\n    function t(t, e, n) {\n        var r = this;\n        if (this.dtype = e, this.shape = t.slice(), this.size = k(t), null != n) {\n            var o = n.length;\n            C(o === this.size, function() {\n                return \"Length of values '\" + o + \"' does not match the size inferred by the shape '\" + r.size + \"'.\";\n            });\n        }\n        if (\"complex64\" === e) throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).\");\n        this.values = n || P(e, this.size), this.strides = $(t);\n    }\n    return t.prototype.set = function(t) {\n        for(var e = this, n = [], r = 1; r < arguments.length; r++)n[r - 1] = arguments[r];\n        0 === n.length && (n = [\n            0\n        ]), C(n.length === this.rank, function() {\n            return \"The number of provided coordinates (\" + n.length + \") must match the rank (\" + e.rank + \")\";\n        });\n        var o = this.locToIndex(n);\n        this.values[o] = t;\n    }, t.prototype.get = function() {\n        for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];\n        0 === t.length && (t = [\n            0\n        ]);\n        for(var n = 0, r = 0, o = t; r < o.length; r++){\n            var a = o[r];\n            if (a < 0 || a >= this.shape[n]) {\n                var i = \"Requested out of range element at \" + t + \".   Buffer shape=\" + this.shape;\n                throw new Error(i);\n            }\n            n++;\n        }\n        for(var s = t[t.length - 1], u = 0; u < t.length - 1; ++u)s += this.strides[u] * t[u];\n        return this.values[s];\n    }, t.prototype.locToIndex = function(t) {\n        if (0 === this.rank) return 0;\n        if (1 === this.rank) return t[0];\n        for(var e = t[t.length - 1], n = 0; n < t.length - 1; ++n)e += this.strides[n] * t[n];\n        return e;\n    }, t.prototype.indexToLoc = function(t) {\n        if (0 === this.rank) return [];\n        if (1 === this.rank) return [\n            t\n        ];\n        for(var e = new Array(this.shape.length), n = 0; n < e.length - 1; ++n)e[n] = Math.floor(t / this.strides[n]), t -= e[n] * this.strides[n];\n        return e[e.length - 1] = t, e;\n    }, Object.defineProperty(t.prototype, \"rank\", {\n        get: function() {\n            return this.shape.length;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.toTensor = function() {\n        return yt().makeTensor(this.values, this.shape, this.dtype);\n    }, t;\n}(), yt = null, xt = null, bt = null;\nvar wt = function() {\n    function t(t, e, n, r) {\n        this.kept = !1, this.isDisposedInternal = !1, this.shape = t.slice(), this.dtype = e || \"float32\", this.size = k(t), this.strides = $(t), this.dataId = n, this.id = r, this.rankType = this.rank < 5 ? this.rank.toString() : \"higher\";\n    }\n    return t.prototype.flatten = function() {\n        return this.throwIfDisposed(), this.as1D();\n    }, t.prototype.asScalar = function() {\n        return this.throwIfDisposed(), C(1 === this.size, function() {\n            return \"The array must have only 1 element.\";\n        }), this.reshape([]);\n    }, t.prototype.as1D = function() {\n        return this.throwIfDisposed(), this.reshape([\n            this.size\n        ]);\n    }, t.prototype.as2D = function(t, e) {\n        return this.throwIfDisposed(), this.reshape([\n            t,\n            e\n        ]);\n    }, t.prototype.as3D = function(t, e, n) {\n        return this.throwIfDisposed(), this.reshape([\n            t,\n            e,\n            n\n        ]);\n    }, t.prototype.as4D = function(t, e, n, r) {\n        return this.throwIfDisposed(), this.reshape([\n            t,\n            e,\n            n,\n            r\n        ]);\n    }, t.prototype.as5D = function(t, e, n, r, o) {\n        return this.throwIfDisposed(), this.reshape([\n            t,\n            e,\n            n,\n            r,\n            o\n        ]);\n    }, t.prototype.asType = function(t) {\n        return this.throwIfDisposed(), xt.cast(this, t);\n    }, Object.defineProperty(t.prototype, \"rank\", {\n        get: function() {\n            return this.shape.length;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.buffer = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.data()\n                        ];\n                    case 1:\n                        return t = e.sent(), [\n                            2,\n                            xt.buffer(this.shape, this.dtype, t)\n                        ];\n                }\n            });\n        });\n    }, t.prototype.bufferSync = function() {\n        return xt.buffer(this.shape, this.dtype, this.dataSync());\n    }, t.prototype.array = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.data()\n                        ];\n                    case 1:\n                        return t = e.sent(), [\n                            2,\n                            J(this.shape, t)\n                        ];\n                }\n            });\n        });\n    }, t.prototype.arraySync = function() {\n        return J(this.shape, this.dataSync());\n    }, t.prototype.data = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return this.throwIfDisposed(), t = yt().read(this.dataId), \"string\" !== this.dtype ? [\n                            3,\n                            2\n                        ] : [\n                            4,\n                            t\n                        ];\n                    case 1:\n                        e = n.sent();\n                        try {\n                            return [\n                                2,\n                                e.map(function(t) {\n                                    return ot(t);\n                                })\n                            ];\n                        } catch (t) {\n                            throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\");\n                        }\n                        n.label = 2;\n                    case 2:\n                        return [\n                            2,\n                            t\n                        ];\n                }\n            });\n        });\n    }, t.prototype.dataSync = function() {\n        this.throwIfDisposed();\n        var t = yt().readSync(this.dataId);\n        if (\"string\" === this.dtype) try {\n            return t.map(function(t) {\n                return ot(t);\n            });\n        } catch (t) {\n            throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\");\n        }\n        return t;\n    }, t.prototype.bytes = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return this.throwIfDisposed(), [\n                            4,\n                            yt().read(this.dataId)\n                        ];\n                    case 1:\n                        return t = e.sent(), \"string\" === this.dtype ? [\n                            2,\n                            t\n                        ] : [\n                            2,\n                            new Uint8Array(t.buffer)\n                        ];\n                }\n            });\n        });\n    }, t.prototype.dispose = function() {\n        this.isDisposed || (yt().disposeTensor(this), this.isDisposedInternal = !0);\n    }, Object.defineProperty(t.prototype, \"isDisposed\", {\n        get: function() {\n            return this.isDisposedInternal;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.throwIfDisposed = function() {\n        if (this.isDisposed) throw new Error(\"Tensor is disposed.\");\n    }, t.prototype.toFloat = function() {\n        return this.asType(\"float32\");\n    }, t.prototype.toInt = function() {\n        return this.asType(\"int32\");\n    }, t.prototype.toBool = function() {\n        return this.asType(\"bool\");\n    }, t.prototype.print = function(t) {\n        return void 0 === t && (t = !1), xt.print(this, t);\n    }, t.prototype.reshape = function(t) {\n        return this.throwIfDisposed(), xt.reshape(this, t);\n    }, t.prototype.reshapeAs = function(t) {\n        return this.throwIfDisposed(), this.reshape(t.shape);\n    }, t.prototype.expandDims = function(t) {\n        return void 0 === t && (t = 0), xt.expandDims(this, t);\n    }, t.prototype.cumsum = function(t, e, n) {\n        return void 0 === t && (t = 0), void 0 === e && (e = !1), void 0 === n && (n = !1), xt.cumsum(this, t, e, n);\n    }, t.prototype.squeeze = function(t) {\n        return this.throwIfDisposed(), xt.squeeze(this, t);\n    }, t.prototype.clone = function() {\n        return this.throwIfDisposed(), xt.clone(this);\n    }, t.prototype.toString = function(t) {\n        return void 0 === t && (t = !1), dt(this.dataSync(), this.shape, this.dtype, t);\n    }, t.prototype.gather = function(t, e) {\n        return void 0 === e && (e = 0), this.throwIfDisposed(), xt.gather(this, t, e);\n    }, t.prototype.matMul = function(t, e, n) {\n        return void 0 === e && (e = !1), void 0 === n && (n = !1), this.throwIfDisposed(), xt.matMul(this, t, e, n);\n    }, t.prototype.dot = function(t) {\n        return this.throwIfDisposed(), xt.dot(this, t);\n    }, t.prototype.norm = function(t, e, n) {\n        return void 0 === t && (t = \"euclidean\"), void 0 === e && (e = null), void 0 === n && (n = !1), this.throwIfDisposed(), xt.norm(this, t, e, n);\n    }, t.prototype.slice = function(t, e) {\n        return this.throwIfDisposed(), xt.slice(this, t, e);\n    }, t.prototype.reverse = function(t) {\n        return this.throwIfDisposed(), xt.reverse(this, t);\n    }, t.prototype.concat = function(e, n) {\n        return void 0 === n && (n = 0), this.throwIfDisposed(), e instanceof t && (e = [\n            e\n        ]), xt.concat([\n            this\n        ].concat(e), n);\n    }, t.prototype.split = function(t, e) {\n        return void 0 === e && (e = 0), this.throwIfDisposed(), xt.split(this, t, e);\n    }, t.prototype.stack = function(t, e) {\n        return void 0 === e && (e = 0), xt.stack([\n            this,\n            t\n        ], e);\n    }, t.prototype.unstack = function(t) {\n        return void 0 === t && (t = 0), xt.unstack(this, t);\n    }, t.prototype.batchNormalization = function(t, e, n, r, o) {\n        return void 0 === n && (n = .001), bt(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\"), this.batchNorm(t, e, o, r, n);\n    }, t.prototype.all = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.all(this, t, e);\n    }, t.prototype.any = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.any(this, t, e);\n    }, t.prototype.logSumExp = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.logSumExp(this, t, e);\n    }, t.prototype.sum = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.sum(this, t, e);\n    }, t.prototype.prod = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.prod(this, t, e);\n    }, t.prototype.mean = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.mean(this, t, e);\n    }, t.prototype.min = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.min(this, t, e);\n    }, t.prototype.max = function(t, e) {\n        return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), xt.max(this, t, e);\n    }, t.prototype.argMin = function(t) {\n        return void 0 === t && (t = null), this.throwIfDisposed(), xt.argMin(this, t);\n    }, t.prototype.argMax = function(t) {\n        return void 0 === t && (t = null), this.throwIfDisposed(), xt.argMax(this, t);\n    }, t.prototype.cast = function(t) {\n        return this.throwIfDisposed(), xt.cast(this, t);\n    }, t.prototype.addStrict = function(t) {\n        return this.throwIfDisposed(), xt.addStrict(this, t);\n    }, t.prototype.atan2 = function(t) {\n        return this.throwIfDisposed(), xt.atan2(this, t);\n    }, t.prototype.sub = function(t) {\n        return this.throwIfDisposed(), xt.sub(this, t);\n    }, t.prototype.subStrict = function(t) {\n        return this.throwIfDisposed(), xt.subStrict(this, t);\n    }, t.prototype.pow = function(t) {\n        return this.throwIfDisposed(), xt.pow(this, t);\n    }, t.prototype.powStrict = function(t) {\n        return this.throwIfDisposed(), xt.powStrict(this, t);\n    }, t.prototype.mul = function(t) {\n        return this.throwIfDisposed(), xt.mul(this, t);\n    }, t.prototype.mulStrict = function(t) {\n        return this.throwIfDisposed(), xt.mulStrict(this, t);\n    }, t.prototype.floorDiv = function(t) {\n        return this.throwIfDisposed(), xt.floorDiv(this, t);\n    }, t.prototype.divStrict = function(t) {\n        return this.throwIfDisposed(), xt.divStrict(this, t);\n    }, t.prototype.minimum = function(t) {\n        return this.throwIfDisposed(), xt.minimum(this, t);\n    }, t.prototype.minimumStrict = function(t) {\n        return this.throwIfDisposed(), xt.minimumStrict(this, t);\n    }, t.prototype.maximum = function(t) {\n        return this.throwIfDisposed(), xt.maximum(this, t);\n    }, t.prototype.maximumStrict = function(t) {\n        return this.throwIfDisposed(), xt.maximumStrict(this, t);\n    }, t.prototype.mod = function(t) {\n        return this.throwIfDisposed(), xt.mod(this, t);\n    }, t.prototype.modStrict = function(t) {\n        return this.throwIfDisposed(), xt.modStrict(this, t);\n    }, t.prototype.squaredDifferenceStrict = function(t) {\n        return this.throwIfDisposed(), xt.squaredDifferenceStrict(this, t);\n    }, t.prototype.notEqual = function(t) {\n        return this.throwIfDisposed(), xt.notEqual(this, t);\n    }, t.prototype.notEqualStrict = function(t) {\n        return this.throwIfDisposed(), xt.notEqualStrict(this, t);\n    }, t.prototype.less = function(t) {\n        return this.throwIfDisposed(), xt.less(this, t);\n    }, t.prototype.lessStrict = function(t) {\n        return this.throwIfDisposed(), xt.lessStrict(this, t);\n    }, t.prototype.equal = function(t) {\n        return this.throwIfDisposed(), xt.equal(this, t);\n    }, t.prototype.equalStrict = function(t) {\n        return this.throwIfDisposed(), xt.equalStrict(this, t);\n    }, t.prototype.lessEqual = function(t) {\n        return this.throwIfDisposed(), xt.lessEqual(this, t);\n    }, t.prototype.lessEqualStrict = function(t) {\n        return this.throwIfDisposed(), xt.lessEqualStrict(this, t);\n    }, t.prototype.greater = function(t) {\n        return this.throwIfDisposed(), xt.greater(this, t);\n    }, t.prototype.greaterStrict = function(t) {\n        return this.throwIfDisposed(), xt.greaterStrict(this, t);\n    }, t.prototype.greaterEqual = function(t) {\n        return this.throwIfDisposed(), xt.greaterEqual(this, t);\n    }, t.prototype.greaterEqualStrict = function(t) {\n        return this.throwIfDisposed(), xt.greaterEqualStrict(this, t);\n    }, t.prototype.logicalAnd = function(t) {\n        return this.throwIfDisposed(), xt.logicalAnd(this, t);\n    }, t.prototype.logicalOr = function(t) {\n        return this.throwIfDisposed(), xt.logicalOr(this, t);\n    }, t.prototype.logicalNot = function() {\n        return this.throwIfDisposed(), xt.logicalNot(this);\n    }, t.prototype.logicalXor = function(t) {\n        return this.throwIfDisposed(), xt.logicalXor(this, t);\n    }, t.prototype.where = function(t, e) {\n        return this.throwIfDisposed(), xt.where(t, this, e);\n    }, t.prototype.neg = function() {\n        return this.throwIfDisposed(), xt.neg(this);\n    }, t.prototype.ceil = function() {\n        return this.throwIfDisposed(), xt.ceil(this);\n    }, t.prototype.floor = function() {\n        return this.throwIfDisposed(), xt.floor(this);\n    }, t.prototype.sign = function() {\n        return this.throwIfDisposed(), xt.sign(this);\n    }, t.prototype.isNaN = function() {\n        return this.throwIfDisposed(), xt.isNaN(this);\n    }, t.prototype.isInf = function() {\n        return this.throwIfDisposed(), xt.isInf(this);\n    }, t.prototype.isFinite = function() {\n        return this.throwIfDisposed(), xt.isFinite(this);\n    }, t.prototype.exp = function() {\n        return this.throwIfDisposed(), xt.exp(this);\n    }, t.prototype.expm1 = function() {\n        return this.throwIfDisposed(), xt.expm1(this);\n    }, t.prototype.log = function() {\n        return this.throwIfDisposed(), xt.log(this);\n    }, t.prototype.log1p = function() {\n        return this.throwIfDisposed(), xt.log1p(this);\n    }, t.prototype.sqrt = function() {\n        return this.throwIfDisposed(), xt.sqrt(this);\n    }, t.prototype.rsqrt = function() {\n        return this.throwIfDisposed(), xt.rsqrt(this);\n    }, t.prototype.square = function() {\n        return this.throwIfDisposed(), xt.square(this);\n    }, t.prototype.reciprocal = function() {\n        return this.throwIfDisposed(), xt.reciprocal(this);\n    }, t.prototype.abs = function() {\n        return this.throwIfDisposed(), xt.abs(this);\n    }, t.prototype.clipByValue = function(t, e) {\n        return this.throwIfDisposed(), xt.clipByValue(this, t, e);\n    }, t.prototype.relu = function() {\n        return this.throwIfDisposed(), xt.relu(this);\n    }, t.prototype.relu6 = function() {\n        return this.throwIfDisposed(), xt.relu6(this);\n    }, t.prototype.elu = function() {\n        return this.throwIfDisposed(), xt.elu(this);\n    }, t.prototype.selu = function() {\n        return this.throwIfDisposed(), xt.selu(this);\n    }, t.prototype.leakyRelu = function(t) {\n        return void 0 === t && (t = .2), this.throwIfDisposed(), xt.leakyRelu(this, t);\n    }, t.prototype.prelu = function(t) {\n        return this.throwIfDisposed(), xt.prelu(this, t);\n    }, t.prototype.sigmoid = function() {\n        return this.throwIfDisposed(), xt.sigmoid(this);\n    }, t.prototype.logSigmoid = function() {\n        return this.throwIfDisposed(), xt.logSigmoid(this);\n    }, t.prototype.softplus = function() {\n        return this.throwIfDisposed(), xt.softplus(this);\n    }, t.prototype.zerosLike = function() {\n        return this.throwIfDisposed(), xt.zerosLike(this);\n    }, t.prototype.onesLike = function() {\n        return this.throwIfDisposed(), xt.onesLike(this);\n    }, t.prototype.sin = function() {\n        return this.throwIfDisposed(), xt.sin(this);\n    }, t.prototype.cos = function() {\n        return this.throwIfDisposed(), xt.cos(this);\n    }, t.prototype.tan = function() {\n        return this.throwIfDisposed(), xt.tan(this);\n    }, t.prototype.asin = function() {\n        return this.throwIfDisposed(), xt.asin(this);\n    }, t.prototype.acos = function() {\n        return this.throwIfDisposed(), xt.acos(this);\n    }, t.prototype.atan = function() {\n        return this.throwIfDisposed(), xt.atan(this);\n    }, t.prototype.sinh = function() {\n        return this.throwIfDisposed(), xt.sinh(this);\n    }, t.prototype.cosh = function() {\n        return this.throwIfDisposed(), xt.cosh(this);\n    }, t.prototype.tanh = function() {\n        return this.throwIfDisposed(), xt.tanh(this);\n    }, t.prototype.asinh = function() {\n        return this.throwIfDisposed(), xt.asinh(this);\n    }, t.prototype.acosh = function() {\n        return this.throwIfDisposed(), xt.acosh(this);\n    }, t.prototype.atanh = function() {\n        return this.throwIfDisposed(), xt.atanh(this);\n    }, t.prototype.erf = function() {\n        return this.throwIfDisposed(), xt.erf(this);\n    }, t.prototype.round = function() {\n        return this.throwIfDisposed(), xt.round(this);\n    }, t.prototype.step = function(t) {\n        return void 0 === t && (t = 0), this.throwIfDisposed(), xt.step(this, t);\n    }, t.prototype.softmax = function(t) {\n        return void 0 === t && (t = -1), this.throwIfDisposed(), xt.softmax(this, t);\n    }, t.prototype.logSoftmax = function(t) {\n        return void 0 === t && (t = -1), this.throwIfDisposed(), xt.logSoftmax(this, t);\n    }, t.prototype.resizeBilinear = function(t, e) {\n        return void 0 === e && (e = !1), this.throwIfDisposed(), xt.image.resizeBilinear(this, t, e);\n    }, t.prototype.resizeNearestNeighbor = function(t, e) {\n        return void 0 === e && (e = !1), this.throwIfDisposed(), xt.image.resizeNearestNeighbor(this, t, e);\n    }, t.prototype.conv1d = function(t, e, n, r, o, a) {\n        return void 0 === r && (r = \"NWC\"), void 0 === o && (o = 1), this.throwIfDisposed(), xt.conv1d(this, t, e, n, r, o, a);\n    }, t.prototype.conv2d = function(t, e, n, r, o, a) {\n        return void 0 === r && (r = \"NHWC\"), void 0 === o && (o = [\n            1,\n            1\n        ]), this.throwIfDisposed(), xt.conv2d(this, t, e, n, r, o, a);\n    }, t.prototype.conv2dTranspose = function(t, e, n, r, o) {\n        return this.throwIfDisposed(), xt.conv2dTranspose(this, t, e, n, r, o);\n    }, t.prototype.depthwiseConv2D = function(t, e, n, r, o, a) {\n        return void 0 === r && (r = \"NHWC\"), void 0 === o && (o = [\n            1,\n            1\n        ]), this.throwIfDisposed(), xt.depthwiseConv2d(this, t, e, n, r, o, a);\n    }, t.prototype.separableConv2d = function(t, e, n, r, o, a) {\n        return void 0 === o && (o = [\n            1,\n            1\n        ]), void 0 === a && (a = \"NHWC\"), this.throwIfDisposed(), xt.separableConv2d(this, t, e, n, r, o, a);\n    }, t.prototype.avgPool = function(t, e, n, r) {\n        return this.throwIfDisposed(), xt.avgPool(this, t, e, n, r);\n    }, t.prototype.maxPool = function(t, e, n, r) {\n        return this.throwIfDisposed(), xt.maxPool(this, t, e, n, r);\n    }, t.prototype.localResponseNormalization = function(t, e, n, r) {\n        return void 0 === t && (t = 5), void 0 === e && (e = 1), void 0 === n && (n = 1), void 0 === r && (r = .5), xt.localResponseNormalization(this, t, e, n, r);\n    }, t.prototype.pool = function(t, e, n, r, o) {\n        return this.throwIfDisposed(), xt.pool(this, t, e, n, r, o);\n    }, t.prototype.variable = function(t, e, n) {\n        return void 0 === t && (t = !0), this.throwIfDisposed(), yt().makeVariable(this, t, e, n);\n    }, t.prototype.unsortedSegmentSum = function(t, e) {\n        return this.throwIfDisposed(), xt.unsortedSegmentSum(this, t, e);\n    }, t.prototype.batchToSpaceND = function(t, e) {\n        return this.throwIfDisposed(), xt.batchToSpaceND(this, t, e);\n    }, t.prototype.spaceToBatchND = function(t, e) {\n        return this.throwIfDisposed(), xt.spaceToBatchND(this, t, e);\n    }, t.prototype.topk = function(t, e) {\n        return void 0 === t && (t = 1), void 0 === e && (e = !0), this.throwIfDisposed(), xt.topk(this, t, e);\n    }, t.prototype.stridedSlice = function(t, e, n, r, o, a, i, s) {\n        return void 0 === r && (r = 0), void 0 === o && (o = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), this.throwIfDisposed(), xt.stridedSlice(this, t, e, n, r, o, a, i, s);\n    }, t.prototype.depthToSpace = function(t, e) {\n        return this.throwIfDisposed(), xt.depthToSpace(this, t, e);\n    }, t.prototype.fft = function() {\n        return this.throwIfDisposed(), xt.spectral.fft(this);\n    }, t.prototype.ifft = function() {\n        return this.throwIfDisposed(), xt.spectral.ifft(this);\n    }, t.prototype.rfft = function() {\n        return this.throwIfDisposed(), xt.spectral.rfft(this);\n    }, t.prototype.irfft = function() {\n        return this.throwIfDisposed(), xt.spectral.irfft(this);\n    }, t;\n}();\nObject.defineProperty(wt, Symbol.hasInstance, {\n    value: function(t) {\n        return !!t && null != t.dataId && null != t.shape && null != t.dtype;\n    }\n});\nvar Ct, Et, Rt, It, kt, St = function(t) {\n    function n(e, n, r, o) {\n        var a = t.call(this, e.shape, e.dtype, e.dataId, o) || this;\n        return a.trainable = n, a.name = r, a;\n    }\n    return e(n, t), n.prototype.assign = function(t) {\n        if (t.dtype !== this.dtype) throw new Error(\"dtype of the new value (\" + t.dtype + \") and previous value (\" + this.dtype + \") must match\");\n        if (!S(t.shape, this.shape)) throw new Error(\"shape of the new value (\" + t.shape + \") and previous value (\" + this.shape + \") must match\");\n        yt().disposeTensor(this), this.dataId = t.dataId, yt().incRef(this, null);\n    }, n.prototype.dispose = function() {\n        yt().disposeVariable(this), this.isDisposedInternal = !0;\n    }, n;\n}(wt);\nObject.defineProperty(St, Symbol.hasInstance, {\n    value: function(t) {\n        return t instanceof wt && null != t.assign && t.assign instanceof Function;\n    }\n}), function(t) {\n    t.R0 = \"R0\", t.R1 = \"R1\", t.R2 = \"R2\", t.R3 = \"R3\", t.R4 = \"R4\", t.R5 = \"R5\", t.R6 = \"R6\";\n}(Ct || (Ct = {})), function(t) {\n    t.float32 = \"float32\", t.int32 = \"int32\", t.bool = \"int32\", t.complex64 = \"complex64\";\n}(Et || (Et = {})), function(t) {\n    t.float32 = \"float32\", t.int32 = \"int32\", t.bool = \"bool\", t.complex64 = \"complex64\";\n}(Rt || (Rt = {})), function(t) {\n    t.float32 = \"float32\", t.int32 = \"float32\", t.bool = \"float32\", t.complex64 = \"complex64\";\n}(It || (It = {})), function(t) {\n    t.float32 = \"complex64\", t.int32 = \"complex64\", t.bool = \"complex64\", t.complex64 = \"complex64\";\n}(kt || (kt = {}));\nvar At = {\n    float32: It,\n    int32: Et,\n    bool: Rt,\n    complex64: kt\n};\nfunction Tt(t, e) {\n    if (\"string\" === t || \"string\" === e) {\n        if (\"string\" === t && \"string\" === e) return \"string\";\n        throw new Error(\"Can not upcast \" + t + \" with \" + e);\n    }\n    return At[t][e];\n}\nfunction Dt(t) {\n    return Tt(t, \"int32\");\n}\nfunction Nt(t, e) {\n    if (t.dtype === e.dtype) return [\n        t,\n        e\n    ];\n    var n = Tt(t.dtype, e.dtype);\n    return [\n        t.cast(n),\n        e.cast(n)\n    ];\n}\nfunction Ft(t, e) {\n    C(t.dtype === e.dtype, function() {\n        return \"The dtypes of the first(\" + t.dtype + \") and second(\" + e.dtype + \") input must match\";\n    });\n}\nfunction _t(t) {\n    var e = [];\n    return function t(e, n, r) {\n        if (null == e) return;\n        if (e instanceof wt) return void n.push(e);\n        if (o = e, !Array.isArray(o) && \"object\" != typeof o) return;\n        var o;\n        var a = e;\n        for(var i in a){\n            var s = a[i];\n            r.has(s) || (r.add(s), t(s, n, r));\n        }\n    }(t, e, new Set), e;\n}\nvar Ot, Mt = Object.freeze({\n    makeTypesMatch: Nt,\n    assertTypesMatch: Ft,\n    isTensorInList: function(t, e) {\n        return e.some(function(e) {\n            return e.id === t.id;\n        });\n    },\n    getTensorsInContainer: _t\n}), Bt = function() {\n    function t() {\n        this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = new WeakMap, this.profiling = !1, this.activeProfile = {\n            newBytes: 0,\n            newTensors: 0,\n            peakBytes: 0,\n            kernels: [],\n            result: null\n        };\n    }\n    return t.prototype.dispose = function() {\n        for(var t in this.registeredVariables)this.registeredVariables[t].dispose();\n    }, t;\n}(), Pt = function() {\n    function t(t) {\n        this.ENV = t, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Bt;\n    }\n    return t.prototype.ready = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (null != this.pendingBackendInit) return [\n                            2,\n                            this.pendingBackendInit.then(function() {})\n                        ];\n                        if (null != this.backendInstance) return [\n                            2\n                        ];\n                        t = this.getSortedBackends(), e = 0, r.label = 1;\n                    case 1:\n                        return e < t.length ? (n = t[e], [\n                            4,\n                            this.initializeBackend(n).success\n                        ]) : [\n                            3,\n                            5\n                        ];\n                    case 2:\n                        return r.sent() ? [\n                            4,\n                            this.setBackend(n)\n                        ] : [\n                            3,\n                            4\n                        ];\n                    case 3:\n                        return r.sent(), [\n                            2\n                        ];\n                    case 4:\n                        return e++, [\n                            3,\n                            1\n                        ];\n                    case 5:\n                        throw new Error(\"Could not initialize any backends, all backend initializations failed.\");\n                }\n            });\n        });\n    }, Object.defineProperty(t.prototype, \"backend\", {\n        get: function() {\n            if (null != this.pendingBackendInit) throw new Error(\"Backend '\" + this.backendName + \"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");\n            if (null == this.backendInstance) {\n                var t = this.initializeBackendsAndReturnBest(), e = t.name;\n                if (t.asyncInit) throw new Error(\"The highest priority backend '\" + e + \"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods\");\n                this.setBackend(e);\n            }\n            return this.backendInstance;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.backendNames = function() {\n        return Object.keys(this.registryFactory);\n    }, t.prototype.findBackend = function(t) {\n        if (!(t in this.registry)) {\n            if (!(t in this.registryFactory)) return null;\n            if (this.initializeBackend(t).asyncInit) return null;\n        }\n        return this.registry[t];\n    }, t.prototype.findBackendFactory = function(t) {\n        return t in this.registryFactory ? this.registryFactory[t].factory : null;\n    }, t.prototype.registerBackend = function(t, e, n) {\n        return void 0 === n && (n = 1), t in this.registryFactory ? (console.warn(t + \" backend was already registered. Reusing existing backend factory.\"), !1) : (this.registryFactory[t] = {\n            factory: e,\n            priority: n\n        }, !0);\n    }, t.prototype.setBackend = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (null == this.registryFactory[t]) throw new Error(\"Backend name '\" + t + \"' not found in registry\");\n                        return this.backendName = t, null != this.registry[t] ? [\n                            3,\n                            4\n                        ] : (this.backendInstance = null, e = this.initializeBackend(t), n = e.success, e.asyncInit ? [\n                            4,\n                            n\n                        ] : [\n                            3,\n                            2\n                        ]);\n                    case 1:\n                        return o = r.sent(), [\n                            3,\n                            3\n                        ];\n                    case 2:\n                        o = n, r.label = 3;\n                    case 3:\n                        if (!o) return [\n                            2,\n                            !1\n                        ];\n                        r.label = 4;\n                    case 4:\n                        return this.backendInstance = this.registry[t], this.setupRegisteredKernels(), this.profiler = new ut(this.backendInstance), [\n                            2,\n                            !0\n                        ];\n                }\n            });\n        });\n    }, t.prototype.setupRegisteredKernels = function() {\n        var t = this;\n        f(this.backendName).forEach(function(e) {\n            null != e.setupFunc && e.setupFunc(t.backendInstance);\n        });\n    }, t.prototype.disposeRegisteredKernels = function(t) {\n        var e = this;\n        f(t).forEach(function(n) {\n            null != n.disposeFunc && n.disposeFunc(e.registry[t]);\n        });\n    }, t.prototype.initializeBackend = function(t) {\n        var e = this, n = this.registryFactory[t];\n        if (null == n) throw new Error(\"Cannot initialize backend \" + t + \", no registration found.\");\n        try {\n            var r = n.factory();\n            if (Promise.resolve(r) === r) {\n                var o = ++this.pendingBackendInitId, a = r.then(function(n) {\n                    return !(o < e.pendingBackendInitId) && (e.registry[t] = n, e.pendingBackendInit = null, !0);\n                }).catch(function(n) {\n                    return !(o < e.pendingBackendInitId) && (e.pendingBackendInit = null, console.warn(\"Initialization of backend \" + t + \" failed\"), console.warn(n.stack || n.message), !1);\n                });\n                return this.pendingBackendInit = a, {\n                    success: a,\n                    asyncInit: !0\n                };\n            }\n            return this.registry[t] = r, {\n                success: !0,\n                asyncInit: !1\n            };\n        } catch (e) {\n            return console.warn(\"Initialization of backend \" + t + \" failed\"), console.warn(e.stack || e.message), {\n                success: !1,\n                asyncInit: !1\n            };\n        }\n    }, t.prototype.removeBackend = function(t) {\n        if (!(t in this.registryFactory)) throw new Error(t + \" backend not found in registry\");\n        this.backendName === t && null != this.pendingBackendInit && this.pendingBackendInitId++, t in this.registry && (this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t]), delete this.registryFactory[t], this.backendName === t && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);\n    }, t.prototype.getSortedBackends = function() {\n        var t = this;\n        if (0 === Object.keys(this.registryFactory).length) throw new Error(\"No backend found in registry.\");\n        return Object.keys(this.registryFactory).sort(function(e, n) {\n            return t.registryFactory[n].priority - t.registryFactory[e].priority;\n        });\n    }, t.prototype.initializeBackendsAndReturnBest = function() {\n        for(var t = this.getSortedBackends(), e = 0; e < t.length; e++){\n            var n = t[e], r = this.initializeBackend(n), o = r.success, a = r.asyncInit;\n            if (a || o) return {\n                name: n,\n                asyncInit: a\n            };\n        }\n        throw new Error(\"Could not initialize any backends, all backend initializations failed.\");\n    }, t.prototype.moveData = function(t, e) {\n        var n = this.state.tensorInfo.get(e), r = n.backend, o = this.readSync(e);\n        r.disposeData(e), n.backend = t, t.move(e, o, n.shape, n.dtype), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n    }, t.prototype.tidy = function(t, e) {\n        var n, r = this, o = null;\n        if (null == e) {\n            if (\"function\" != typeof t) throw new Error(\"Please provide a function to tidy()\");\n            e = t;\n        } else {\n            if (\"string\" != typeof t && !(t instanceof String)) throw new Error(\"When calling with two arguments, the first argument to tidy() must be a string\");\n            if (\"function\" != typeof e) throw new Error(\"When calling with two arguments, the 2nd argument to tidy() must be a function\");\n            o = t;\n        }\n        return this.scopedRun(function() {\n            return r.startScope(o);\n        }, function() {\n            return r.endScope(n);\n        }, function() {\n            return (n = e()) instanceof Promise && console.error(\"Cannot return a Promise inside of tidy.\"), n;\n        });\n    }, t.prototype.scopedRun = function(t, e, n) {\n        t();\n        try {\n            var r = n();\n            return e(), r;\n        } catch (t) {\n            throw e(), t;\n        }\n    }, t.prototype.nextTensorId = function() {\n        return t.nextTensorId++;\n    }, t.prototype.nextVariableId = function() {\n        return t.nextVariableId++;\n    }, t.prototype.clone = function(t) {\n        var e = this.makeTensorFromDataId(t.dataId, t.shape, t.dtype), n = {\n            x: t\n        };\n        return this.addTapeNode(this.state.activeScope.name, n, [\n            e\n        ], function(t) {\n            return {\n                x: function() {\n                    return t.toFloat();\n                }\n            };\n        }, [], {}), e;\n    }, t.prototype.runKernel = function(t, e, n, r, o) {\n        return this.runKernelFunc(null, e, null, t, n, r, o);\n    }, t.prototype.shouldCheckForMemLeaks = function() {\n        return this.ENV.getBool(\"IS_TEST\");\n    }, t.prototype.checkKernelForMemLeak = function(t, e, n) {\n        var r = this.backend.numDataIds(), o = 0;\n        n.forEach(function(t) {\n            o += \"complex64\" === t.dtype ? 3 : 1;\n        });\n        var a = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i = r - e - o - a;\n        if (i > 0) throw new Error(\"Backend '\" + this.backendName + \"' has an internal memory leak (\" + i + \" data ids) after running '\" + t + \"'\");\n    }, t.prototype.runKernelFunc = function(t, e, n, r, o, a, i) {\n        var s, u = this, c = [], h = this.isTapeOn();\n        null == r && (r = null != this.state.activeScope ? this.state.activeScope.name : \"\");\n        var f, d = this.state.numBytes, p = this.state.numTensors;\n        this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);\n        var v, g = l(r, this.backendName);\n        if (null != g) f = function() {\n            var t = u.backend.numDataIds();\n            v = g.kernelFunc({\n                inputs: e,\n                attrs: o,\n                backend: u.backend\n            });\n            var n = Array.isArray(v) ? v : [\n                v\n            ];\n            u.shouldCheckForMemLeaks() && u.checkKernelForMemLeak(r, t, n);\n            var s = n.map(function(t) {\n                var e = t.dataId, n = t.shape, r = t.dtype;\n                return u.makeTensorFromDataId(e, n, r);\n            });\n            if (h) {\n                var l = u.getTensorsForGradient(r, e, s);\n                if (null == l) {\n                    null == i && (i = []);\n                    var f = s.filter(function(t, e) {\n                        return i[e];\n                    });\n                    l = (a || []).slice().concat(f);\n                }\n                c = u.saveTensorsForBackwardMode(l);\n            }\n            return s;\n        };\n        else {\n            var m = function(t) {\n                h && (c = t.map(function(t) {\n                    return u.keep(u.clone(t));\n                }));\n            };\n            f = function() {\n                var e = u.backend.numDataIds();\n                v = u.tidy(function() {\n                    return t(u.backend, m);\n                });\n                var n = Array.isArray(v) ? v : [\n                    v\n                ];\n                return u.shouldCheckForMemLeaks() && u.checkKernelForMemLeak(r, e, n), n;\n            };\n        }\n        return this.scopedRun(function() {\n            return u.state.kernelDepth++;\n        }, function() {\n            return u.state.kernelDepth--;\n        }, function() {\n            s = u.ENV.getBool(\"DEBUG\") ? u.profiler.profileKernel(r, e, function() {\n                return f();\n            }) : f();\n        }), h && this.addTapeNode(r, e, s, n, c, o), this.state.profiling && this.state.activeProfile.kernels.push({\n            name: r,\n            bytesAdded: this.state.numBytes - d,\n            totalBytesSnapshot: this.state.numBytes,\n            tensorsAdded: this.state.numTensors - p,\n            totalTensorsSnapshot: this.state.numTensors,\n            inputShapes: Object.keys(e).map(function(t) {\n                return e[t].shape;\n            }),\n            outputShapes: s.map(function(t) {\n                return t.shape;\n            })\n        }), Array.isArray(v) ? s : s[0];\n    }, t.prototype.saveTensorsForBackwardMode = function(t) {\n        var e = this;\n        return t.map(function(t) {\n            return e.keep(e.clone(t));\n        });\n    }, t.prototype.getTensorsForGradient = function(t, e, n) {\n        var r = h(t);\n        if (null != r) {\n            var o = r.inputsToSave || [], a = r.outputsToSave || [], i = void 0;\n            r.saveAllInputs ? (C(Array.isArray(e), function() {\n                return \"saveAllInputs is true, expected inputs to be an array.\";\n            }), i = Object.keys(e).map(function(t) {\n                return e[t];\n            })) : i = o.map(function(t) {\n                return e[t];\n            });\n            var s = n.filter(function(t, e) {\n                return a[e];\n            });\n            return i.concat(s);\n        }\n        return null;\n    }, t.prototype.makeTensor = function(t, e, n, r) {\n        if (null == t) throw new Error(\"Values passed to engine.makeTensor() are null\");\n        n = n || \"float32\", r = r || this.backend;\n        var o = t;\n        \"string\" === n && H(t[0]) && (o = t.map(function(t) {\n            return rt(t);\n        }));\n        var a = r.write(o, e, n), i = new wt(e, n, a, this.nextTensorId());\n        if (this.incRef(i, r), \"string\" === n) {\n            var s = this.state.tensorInfo.get(a), u = G(o);\n            this.state.numBytes += u - s.bytes, s.bytes = u;\n        }\n        return i;\n    }, t.prototype.makeTensorFromDataId = function(t, e, n, r) {\n        var o = new wt(e, n = n || \"float32\", t, this.nextTensorId());\n        return this.incRef(o, r), o;\n    }, t.prototype.makeVariable = function(t, e, n, r) {\n        void 0 === e && (e = !0), n = n || this.nextVariableId().toString(), null != r && r !== t.dtype && (t = t.asType(r));\n        var o = new St(t, e, n, this.nextTensorId());\n        if (null != this.state.registeredVariables[o.name]) throw new Error(\"Variable with name \" + o.name + \" was already registered\");\n        return this.state.registeredVariables[o.name] = o, this.incRef(o, this.backend), o;\n    }, t.prototype.incRef = function(t, e) {\n        var n = this.state.tensorInfo.has(t.dataId) ? this.state.tensorInfo.get(t.dataId).refCount : 0;\n        if (this.state.numTensors++, \"string\" === t.dtype && this.state.numStringTensors++, 0 === n) {\n            this.state.numDataBuffers++;\n            var r = 0;\n            \"complex64\" !== t.dtype && \"string\" !== t.dtype && (r = t.size * z(t.dtype)), this.state.tensorInfo.set(t.dataId, {\n                backend: e || this.backend,\n                dtype: t.dtype,\n                shape: t.shape,\n                bytes: r,\n                refCount: 0\n            }), this.state.numBytes += r;\n        }\n        this.state.tensorInfo.get(t.dataId).refCount++, t instanceof St || this.track(t);\n    }, t.prototype.disposeTensor = function(t) {\n        if (this.state.tensorInfo.has(t.dataId)) {\n            this.state.numTensors--, \"string\" === t.dtype && this.state.numStringTensors--;\n            var e = this.state.tensorInfo.get(t.dataId);\n            e.refCount <= 1 ? (\"complex64\" !== t.dtype && (this.state.numBytes -= e.bytes), this.state.numDataBuffers--, e.backend.disposeData(t.dataId), this.state.tensorInfo.delete(t.dataId)) : this.state.tensorInfo.get(t.dataId).refCount--;\n        }\n    }, t.prototype.disposeVariables = function() {\n        for(var t in this.state.registeredVariables){\n            var e = this.state.registeredVariables[t];\n            this.disposeVariable(e);\n        }\n    }, t.prototype.disposeVariable = function(t) {\n        this.disposeTensor(t), null != this.state.registeredVariables[t.name] && delete this.state.registeredVariables[t.name];\n    }, t.prototype.memory = function() {\n        var t = this.backend.memory();\n        return t.numTensors = this.state.numTensors, t.numDataBuffers = this.state.numDataBuffers, t.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (t.unreliable = !0, null == t.reasons && (t.reasons = []), t.reasons.push(\"Memory usage by string tensors is approximate (2 bytes per character)\")), t;\n    }, t.prototype.profile = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n;\n            return r(this, function(r) {\n                return this.state.profiling = !0, e = this.state.numBytes, n = this.state.numTensors, this.state.activeProfile.kernels = [], this.state.activeProfile.result = t(), this.state.profiling = !1, this.state.activeProfile.peakBytes = Math.max.apply(Math, this.state.activeProfile.kernels.map(function(t) {\n                    return t.totalBytesSnapshot;\n                })), this.state.activeProfile.newBytes = this.state.numBytes - e, this.state.activeProfile.newTensors = this.state.numTensors - n, [\n                    2,\n                    this.state.activeProfile\n                ];\n            });\n        });\n    }, t.prototype.isTapeOn = function() {\n        return this.state.gradientDepth > 0 && 0 === this.state.kernelDepth;\n    }, t.prototype.addTapeNode = function(t, e, n, r, o, a) {\n        var i = this, s = {\n            id: this.state.nextTapeNodeId++,\n            kernelName: t,\n            inputs: e,\n            outputs: n,\n            saved: o\n        }, u = h(t);\n        null != u && (r = u.gradFunc), null != r && (s.gradient = function(t) {\n            return t = t.map(function(t, e) {\n                if (null == t) {\n                    var r = n[e], o = tt(r.size, r.dtype);\n                    return i.makeTensor(o, r.shape, r.dtype);\n                }\n                return t;\n            }), r(t.length > 1 ? t : t[0], o, a);\n        }), this.state.activeTape.push(s);\n    }, t.prototype.keep = function(t) {\n        return t.kept = !0, t;\n    }, t.prototype.startTape = function() {\n        0 === this.state.gradientDepth && (this.state.activeTape = []), this.state.gradientDepth++;\n    }, t.prototype.endTape = function() {\n        this.state.gradientDepth--;\n    }, t.prototype.startScope = function(t) {\n        var e = {\n            track: [],\n            name: \"unnamed scope\",\n            id: this.state.nextScopeId++\n        };\n        t && (e.name = t), this.state.scopeStack.push(e), this.state.activeScope = e;\n    }, t.prototype.endScope = function(t) {\n        for(var e = this, n = _t(t), r = new Set(n.map(function(t) {\n            return t.id;\n        })), o = 0; o < this.state.activeScope.track.length; o++){\n            var a = this.state.activeScope.track[o];\n            a.kept || r.has(a.id) || a.dispose();\n        }\n        var i = this.state.scopeStack.pop();\n        this.state.activeScope = 0 === this.state.scopeStack.length ? null : this.state.scopeStack[this.state.scopeStack.length - 1], n.forEach(function(t) {\n            t.kept || t.scopeId !== i.id || e.track(t);\n        });\n    }, t.prototype.gradients = function(t, e, n, r) {\n        var o = this;\n        if (void 0 === r && (r = !1), C(e.length > 0, function() {\n            return \"gradients() received an empty list of xs.\";\n        }), null != n && \"float32\" !== n.dtype) throw new Error(\"dy must have 'float32' dtype, but has '\" + n.dtype + \"'\");\n        var a = this.scopedRun(function() {\n            return o.startTape();\n        }, function() {\n            return o.endTape();\n        }, function() {\n            return o.tidy(\"forward\", t);\n        });\n        C(a instanceof wt, function() {\n            return \"The result y returned by f() must be a tensor.\";\n        });\n        var i = function(t, e, n) {\n            for(var r = {}, o = {}, a = 0; a < e.length; a++)r[e[a].id] = !0;\n            for(a = 0; a < t.length; a++){\n                var i = (p = t[a]).inputs;\n                for(var s in i){\n                    for(var u = i[s], c = !1, l = 0; l < e.length; l++)if (r[u.id]) {\n                        p.outputs.forEach(function(t) {\n                            return r[t.id] = !0;\n                        }), c = !0, o[p.id] = !0;\n                        break;\n                    }\n                    if (c) break;\n                }\n            }\n            var h = {};\n            h[n.id] = !0;\n            var f = {};\n            for(a = t.length - 1; a >= 0; a--)for(i = (p = t[a]).inputs, l = 0; l < p.outputs.length; l++)if (h[p.outputs[l].id]) {\n                for(var s in i)h[i[s].id] = !0, f[p.id] = !0;\n                break;\n            }\n            var d = [];\n            for(a = 0; a < t.length; a++){\n                var p;\n                if (o[(p = t[a]).id] && f[p.id]) {\n                    var v = {};\n                    for(var s in p.inputs){\n                        var g = p.inputs[s];\n                        r[g.id] && (v[s] = g);\n                    }\n                    var m = Object.assign({}, p);\n                    m.inputs = v, m.outputs = p.outputs, d.push(m);\n                }\n            }\n            return d;\n        }(this.state.activeTape, e, a);\n        if (!r && 0 === i.length && e.length > 0) throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.\");\n        return this.tidy(\"backward\", function() {\n            var t, r, s = {};\n            s[a.id] = null == n ? (t = a.shape, r = Z(k(t), \"float32\"), Lt.makeTensor(r, t, \"float32\")) : n, function(t, e, n) {\n                for(var r = function(r) {\n                    var o = e[r], a = [];\n                    if (o.outputs.forEach(function(e) {\n                        var n = t[e.id];\n                        null != n ? a.push(n) : a.push(null);\n                    }), null == o.gradient) throw new Error(\"Cannot compute gradient: gradient function not found for \" + o.kernelName + \".\");\n                    var i = o.gradient(a), s = function(e) {\n                        if (!(e in i)) throw new Error(\"Cannot backprop through input \" + e + \". Available gradients found: \" + Object.keys(i) + \".\");\n                        var r = n(function() {\n                            return i[e]();\n                        });\n                        if (\"float32\" !== r.dtype) throw new Error(\"Error in gradient for op \" + o.kernelName + \". The gradient of input \" + e + \" must have 'float32' dtype, but has '\" + r.dtype + \"'\");\n                        var a = o.inputs[e];\n                        if (!S(r.shape, a.shape)) throw new Error(\"Error in gradient for op \" + o.kernelName + \". The gradient of input '\" + e + \"' has shape '\" + r.shape + \"', which does not match the shape of the input '\" + a.shape + \"'\");\n                        if (null == t[a.id]) t[a.id] = r;\n                        else {\n                            var s = t[a.id];\n                            t[a.id] = s.add(r), s.dispose();\n                        }\n                    };\n                    for(var u in o.inputs)s(u);\n                }, o = e.length - 1; o >= 0; o--)r(o);\n            }(s, i, function(t) {\n                return o.tidy(t);\n            });\n            var u = e.map(function(t) {\n                return s[t.id];\n            });\n            return 0 === o.state.gradientDepth && (o.state.activeTape.forEach(function(t) {\n                for(var e = 0, n = t.saved; e < n.length; e++){\n                    n[e].dispose();\n                }\n            }), o.state.activeTape = null), {\n                value: a,\n                grads: u\n            };\n        });\n    }, t.prototype.customGrad = function(t) {\n        var e = this;\n        return C(X(t), function() {\n            return \"The f passed in customGrad(f) must be a function.\";\n        }), function() {\n            for(var n, r = [], o = 0; o < arguments.length; o++)r[o] = arguments[o];\n            C(r.every(function(t) {\n                return t instanceof wt;\n            }), function() {\n                return \"The args passed in customGrad(f)(x1, x2,...) must all be tensors\";\n            });\n            var a = {};\n            return r.forEach(function(t, e) {\n                a[e] = t;\n            }), e.runKernelFunc(function(e, o) {\n                return C((n = t.apply(void 0, r.concat([\n                    o\n                ]))).value instanceof wt, function() {\n                    return \"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor\";\n                }), C(X(n.gradFunc), function() {\n                    return \"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.\";\n                }), n.value;\n            }, a, function(t, e) {\n                var o = n.gradFunc(t, e), a = Array.isArray(o) ? o : [\n                    o\n                ];\n                C(a.length === r.length, function() {\n                    return \"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).\";\n                }), C(a.every(function(t) {\n                    return t instanceof wt;\n                }), function() {\n                    return \"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.\";\n                });\n                var i = {};\n                return a.forEach(function(t, e) {\n                    i[e] = function() {\n                        return t;\n                    };\n                }), i;\n            });\n        };\n    }, t.prototype.readSync = function(t) {\n        return this.state.tensorInfo.get(t).backend.readSync(t);\n    }, t.prototype.read = function(t) {\n        return this.state.tensorInfo.get(t).backend.read(t);\n    }, t.prototype.time = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return e = et(), [\n                            4,\n                            this.backend.time(t)\n                        ];\n                    case 1:\n                        return (n = r.sent()).wallMs = et() - e, [\n                            2,\n                            n\n                        ];\n                }\n            });\n        });\n    }, t.prototype.track = function(t) {\n        return null != this.state.activeScope && (t.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(t)), t;\n    }, Object.defineProperty(t.prototype, \"registeredVariables\", {\n        get: function() {\n            return this.state.registeredVariables;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.reset = function() {\n        for(var t in this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Bt, this.registry)this.disposeRegisteredKernels(t), this.registry[t].dispose(), delete this.registry[t];\n        this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;\n    }, t.nextTensorId = 0, t.nextVariableId = 0, t;\n}();\nvar Lt = function() {\n    var t = function() {\n        if (null == Ot) {\n            var t = void 0;\n            if (false) {}\n            else if (\"undefined\" != typeof global) t = global;\n            else if (\"undefined\" != typeof process) t = process;\n            else {\n                if (\"undefined\" == typeof self) throw new Error(\"Could not find a global object\");\n                t = self;\n            }\n            Ot = t;\n        }\n        return Ot;\n    }();\n    if (null == t._tfengine) {\n        var e = new o(t);\n        t._tfengine = new Pt(e);\n    }\n    return function(t) {\n        s = t;\n    }(t._tfengine.ENV), yt = function() {\n        return t._tfengine;\n    }, t._tfengine;\n}();\nfunction Wt() {\n    return  false || \"undefined\" != typeof WorkerGlobalScope;\n}\nvar Ut = i();\nUt.registerFlag(\"DEBUG\", function() {\n    return !1;\n}, function(t) {\n    t && console.warn(\"Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.\");\n}), Ut.registerFlag(\"IS_BROWSER\", function() {\n    return Wt();\n}), Ut.registerFlag(\"IS_NODE\", function() {\n    return \"undefined\" != typeof process && void 0 !== process.versions && void 0 !== process.versions.node;\n}), Ut.registerFlag(\"IS_CHROME\", function() {\n    return \"undefined\" != typeof navigator && null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n}), Ut.registerFlag(\"PROD\", function() {\n    return !1;\n}), Ut.registerFlag(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\", function() {\n    return Ut.getBool(\"DEBUG\");\n}), Ut.registerFlag(\"DEPRECATION_WARNINGS_ENABLED\", function() {\n    return !0;\n}), Ut.registerFlag(\"IS_TEST\", function() {\n    return !1;\n});\nvar Vt, zt, Gt, Ht = {}, qt = {\n    alpha: !1,\n    antialias: !1,\n    premultipliedAlpha: !1,\n    preserveDrawingBuffer: !1,\n    depth: !1,\n    stencil: !1,\n    failIfMajorPerformanceCaveat: !0\n};\nfunction Kt(t, e) {\n    Ht[t] = e;\n}\nfunction jt(t) {\n    t in Ht || (Ht[t] = function(t) {\n        if (1 !== t && 2 !== t) throw new Error(\"Cannot get WebGL rendering context, WebGL is disabled.\");\n        var e = function(t) {\n            if (\"undefined\" != typeof OffscreenCanvas && 2 === t) return new OffscreenCanvas(300, 150);\n            if (\"undefined\" != typeof document) return document.createElement(\"canvas\");\n            throw new Error(\"Cannot create a canvas in this context\");\n        }(t);\n        if (e.addEventListener(\"webglcontextlost\", function(e) {\n            e.preventDefault(), delete Ht[t];\n        }, !1), 1 === t) return e.getContext(\"webgl\", qt) || e.getContext(\"experimental-webgl\", qt);\n        return e.getContext(\"webgl2\", qt);\n    }(t));\n    var e = Ht[t];\n    return e.isContextLost() ? (delete Ht[t], jt(t)) : (e.disable(e.DEPTH_TEST), e.disable(e.STENCIL_TEST), e.disable(e.BLEND), e.disable(e.DITHER), e.disable(e.POLYGON_OFFSET_FILL), e.disable(e.SAMPLE_COVERAGE), e.enable(e.SCISSOR_TEST), e.enable(e.CULL_FACE), e.cullFace(e.BACK), Ht[t]);\n}\nfunction Xt(t, e) {\n    return [\n        e,\n        t\n    ];\n}\nfunction Yt(t) {\n    var e = k(t);\n    return D(Math.ceil(e / 4));\n}\nfunction $t(t, e) {\n    return [\n        Math.max(1, Math.ceil(e / 2)),\n        Math.max(1, Math.ceil(t / 2))\n    ];\n}\nfunction Qt(t, e) {\n    var n, r, o, a, s, u, c, l, h, f = t;\n    return 2 === i().getNumber(\"WEBGL_VERSION\") ? (n = f.R32F, r = f.R16F, o = f.RGBA16F, a = f.RGBA32F, s = f.RED, u = 4, c = 1, l = f.HALF_FLOAT, h = f.FLOAT) : (n = t.RGBA, r = t.RGBA, o = t.RGBA, a = f.RGBA, s = t.RGBA, u = 4, c = 4, l = null != e ? e.HALF_FLOAT_OES : null, h = t.FLOAT), {\n        internalFormatFloat: n,\n        internalFormatHalfFloat: r,\n        internalFormatPackedHalfFloat: o,\n        internalFormatPackedFloat: a,\n        textureFormatFloat: s,\n        downloadTextureFormat: t.RGBA,\n        downloadUnpackNumChannels: u,\n        defaultNumChannels: c,\n        textureTypeHalfFloat: l,\n        textureTypeFloat: h\n    };\n}\nfunction Jt(t, e, n) {\n    var r = n();\n    return e && function(t) {\n        var e = t.getError();\n        if (e !== t.NO_ERROR) throw new Error(\"WebGL Error: \" + ne(t, e));\n    }(t), r;\n}\n!function(t) {\n    t[t.DENSE = 0] = \"DENSE\", t[t.SHARED_BATCH = 1] = \"SHARED_BATCH\";\n}(Vt || (Vt = {})), function(t) {\n    t[t.RENDER = 0] = \"RENDER\", t[t.UPLOAD = 1] = \"UPLOAD\", t[t.PIXELS = 2] = \"PIXELS\", t[t.DOWNLOAD = 3] = \"DOWNLOAD\";\n}(zt || (zt = {})), function(t) {\n    t[t.UNPACKED_FLOAT16 = 0] = \"UNPACKED_FLOAT16\", t[t.UNPACKED_FLOAT32 = 1] = \"UNPACKED_FLOAT32\", t[t.PACKED_4X1_UNSIGNED_BYTE = 2] = \"PACKED_4X1_UNSIGNED_BYTE\", t[t.PACKED_2X2_FLOAT32 = 3] = \"PACKED_2X2_FLOAT32\", t[t.PACKED_2X2_FLOAT16 = 4] = \"PACKED_2X2_FLOAT16\";\n}(Gt || (Gt = {}));\nvar Zt = 5.96e-8, te = 65504;\nfunction ee(t) {\n    return !!(i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\") || 0 === t || Zt < Math.abs(t) && Math.abs(t) < te);\n}\nfunction ne(t, e) {\n    switch(e){\n        case t.NO_ERROR:\n            return \"NO_ERROR\";\n        case t.INVALID_ENUM:\n            return \"INVALID_ENUM\";\n        case t.INVALID_VALUE:\n            return \"INVALID_VALUE\";\n        case t.INVALID_OPERATION:\n            return \"INVALID_OPERATION\";\n        case t.INVALID_FRAMEBUFFER_OPERATION:\n            return \"INVALID_FRAMEBUFFER_OPERATION\";\n        case t.OUT_OF_MEMORY:\n            return \"OUT_OF_MEMORY\";\n        case t.CONTEXT_LOST_WEBGL:\n            return \"CONTEXT_LOST_WEBGL\";\n        default:\n            return \"Unknown error code \" + e;\n    }\n}\nfunction re(t, e, n) {\n    return ke(t, e, function() {\n        return t.getExtension(n);\n    }, 'Extension \"' + n + '\" not supported on this browser.');\n}\nfunction oe(t, e, n) {\n    var r = ke(t, e, function() {\n        return t.createShader(t.VERTEX_SHADER);\n    }, \"Unable to create vertex WebGLShader.\");\n    if (Jt(t, e, function() {\n        return t.shaderSource(r, n);\n    }), Jt(t, e, function() {\n        return t.compileShader(r);\n    }), !1 === t.getShaderParameter(r, t.COMPILE_STATUS)) throw console.log(t.getShaderInfoLog(r)), new Error(\"Failed to compile vertex shader.\");\n    return r;\n}\nfunction ae(t, e, n) {\n    var r = ke(t, e, function() {\n        return t.createShader(t.FRAGMENT_SHADER);\n    }, \"Unable to create fragment WebGLShader.\");\n    if (Jt(t, e, function() {\n        return t.shaderSource(r, n);\n    }), Jt(t, e, function() {\n        return t.compileShader(r);\n    }), !1 === t.getShaderParameter(r, t.COMPILE_STATUS)) throw function(t, e) {\n        var n = ue.exec(e);\n        if (null == n) return console.log(\"Couldn't parse line number in error: \" + e), void console.log(t);\n        for(var r = +n[1], o = t.split(\"\\n\"), a = o.length.toString().length + 2, i = o.map(function(t, e) {\n            return N((e + 1).toString(), a) + t;\n        }), s = 0, u = 0; u < i.length; u++)s = Math.max(i[u].length, s);\n        var c = i.slice(0, r - 1), l = i.slice(r - 1, r), h = i.slice(r);\n        console.log(c.join(\"\\n\")), console.log(e.split(\"\\n\")[0]), console.log(\"%c \" + N(l[0], s), \"border:1px solid red; background-color:#e3d2d2; color:#a61717\"), console.log(h.join(\"\\n\"));\n    }(n, t.getShaderInfoLog(r)), new Error(\"Failed to compile fragment shader.\");\n    return r;\n}\nvar ie, se, ue = /ERROR: [0-9]+:([0-9]+):/g;\nfunction ce(t, e) {\n    return ke(t, e, function() {\n        return t.createProgram();\n    }, \"Unable to create WebGLProgram.\");\n}\nfunction le(t, e, n) {\n    if (Jt(t, e, function() {\n        return t.linkProgram(n);\n    }), !1 === t.getProgramParameter(n, t.LINK_STATUS)) throw console.log(t.getProgramInfoLog(n)), new Error(\"Failed to link vertex and fragment shaders.\");\n}\nfunction he(t, e, n) {\n    if (Jt(t, e, function() {\n        return t.validateProgram(n);\n    }), !1 === t.getProgramParameter(n, t.VALIDATE_STATUS)) throw console.log(t.getProgramInfoLog(n)), new Error(\"Shader program validation failed.\");\n}\nfunction fe(t, e, n) {\n    var r = ke(t, e, function() {\n        return t.createBuffer();\n    }, \"Unable to create WebGLBuffer\");\n    return Jt(t, e, function() {\n        return t.bindBuffer(t.ARRAY_BUFFER, r);\n    }), Jt(t, e, function() {\n        return t.bufferData(t.ARRAY_BUFFER, n, t.STATIC_DRAW);\n    }), r;\n}\nfunction de(t, e, n) {\n    var r = ke(t, e, function() {\n        return t.createBuffer();\n    }, \"Unable to create WebGLBuffer\");\n    return Jt(t, e, function() {\n        return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, r);\n    }), Jt(t, e, function() {\n        return t.bufferData(t.ELEMENT_ARRAY_BUFFER, n, t.STATIC_DRAW);\n    }), r;\n}\nfunction pe(t, e) {\n    return ke(t, e, function() {\n        return t.createTexture();\n    }, \"Unable to create WebGLTexture.\");\n}\nfunction ve(t, e) {\n    var n = i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");\n    if (t <= 0 || e <= 0) {\n        var r = \"[\" + t + \"x\" + e + \"]\";\n        throw new Error(\"Requested texture size \" + r + \" is invalid.\");\n    }\n    if (t > n || e > n) {\n        r = \"[\" + t + \"x\" + e + \"]\";\n        throw new Error(\"Requested texture size \" + r + \" greater than WebGL maximum on this browser / GPU \" + (\"[\" + n + \"x\" + n + \"]\") + \".\");\n    }\n}\nfunction ge(t, e) {\n    return ke(t, e, function() {\n        return t.createFramebuffer();\n    }, \"Unable to create WebGLFramebuffer.\");\n}\nfunction me(t, e, n, r, o, a, i, s) {\n    var u = t.getAttribLocation(n, r);\n    return -1 !== u && (Jt(t, e, function() {\n        return t.bindBuffer(t.ARRAY_BUFFER, o);\n    }), Jt(t, e, function() {\n        return t.vertexAttribPointer(u, a, t.FLOAT, !1, i, s);\n    }), Jt(t, e, function() {\n        return t.enableVertexAttribArray(u);\n    }), !0);\n}\nfunction ye(t, e, n, r) {\n    Se(t, r), Jt(t, e, function() {\n        return t.activeTexture(t.TEXTURE0 + r);\n    }), Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, n);\n    });\n}\nfunction xe(t, e, n, r) {\n    return ke(t, e, function() {\n        return t.getUniformLocation(n, r);\n    }, 'uniform \"' + r + '\" not present in program.');\n}\nfunction be(t, e, n) {\n    return t.getUniformLocation(e, n);\n}\nfunction we(t, e, n, r, o, a) {\n    Jt(t, e, function() {\n        return ye(t, e, r, a);\n    }), Jt(t, e, function() {\n        return t.uniform1i(o, a);\n    });\n}\nfunction Ce(t, e, n, r) {\n    Jt(t, e, function() {\n        return t.bindFramebuffer(t.FRAMEBUFFER, r);\n    }), Jt(t, e, function() {\n        return t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, n, 0);\n    });\n}\nfunction Ee(t, e, n) {\n    Jt(t, e, function() {\n        return t.bindFramebuffer(t.FRAMEBUFFER, n);\n    }), Jt(t, e, function() {\n        return t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, null, 0);\n    });\n}\nfunction Re(t) {\n    var e = t.checkFramebufferStatus(t.FRAMEBUFFER);\n    if (e !== t.FRAMEBUFFER_COMPLETE) throw new Error(\"Error binding framebuffer: \" + Ie(t, e));\n}\nfunction Ie(t, e) {\n    switch(e){\n        case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n            return \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\n        case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n            return \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\n        case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n            return \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\n        case t.FRAMEBUFFER_UNSUPPORTED:\n            return \"FRAMEBUFFER_UNSUPPORTED\";\n        default:\n            return \"unknown error \" + e;\n    }\n}\nfunction ke(t, e, n, r) {\n    var o = Jt(t, e, function() {\n        return n();\n    });\n    if (null == o) throw new Error(r);\n    return o;\n}\nfunction Se(t, e) {\n    var n = t.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, r = e + t.TEXTURE0;\n    if (r < t.TEXTURE0 || r > n) throw new Error(\"textureUnit must be in \" + (\"[gl.TEXTURE0, gl.TEXTURE\" + n + \"]\") + \".\");\n}\nfunction Ae(t, e) {\n    return void 0 === e && (e = 2), k(t.slice(0, t.length - e));\n}\nfunction Te(t) {\n    if (0 === t.length) throw Error(\"Cannot get rows and columns of an empty shape array.\");\n    return [\n        t.length > 1 ? t[t.length - 2] : 1,\n        t[t.length - 1]\n    ];\n}\nfunction De(t) {\n    var e = [\n        1,\n        1,\n        1\n    ];\n    return 0 === t.length || 1 === t.length && 1 === t[0] || (e = [\n        Ae(t)\n    ].concat(Te(t))), e;\n}\nfunction Ne(t, e) {\n    var n;\n    void 0 === e && (e = !1);\n    var r = i().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");\n    if (e && (r *= 2, 1 === (t = t.map(function(e, n) {\n        return n >= t.length - 2 ? b(t[n]) : t[n];\n    })).length && (t = [\n        2,\n        t[0]\n    ])), 2 !== t.length) {\n        var o = M(t);\n        t = o.newShape;\n    }\n    var a = k(t);\n    if (t.length <= 1 && a <= r) return [\n        1,\n        a\n    ];\n    if (2 === t.length && t[0] <= r && t[1] <= r) return t;\n    if (3 === t.length && t[0] * t[1] <= r && t[2] <= r) return [\n        t[0] * t[1],\n        t[2]\n    ];\n    if (3 === t.length && t[0] <= r && t[1] * t[2] <= r) return [\n        t[0],\n        t[1] * t[2]\n    ];\n    if (4 === t.length && t[0] * t[1] * t[2] <= r && t[3] <= r) return [\n        t[0] * t[1] * t[2],\n        t[3]\n    ];\n    if (4 === t.length && t[0] <= r && t[1] * t[2] * t[3] <= r) return [\n        t[0],\n        t[1] * t[2] * t[3]\n    ];\n    if (e) {\n        var s = Ae(t), u = 2, c = 2;\n        return t.length && (u = (n = Te(t))[0], c = n[1]), D(a = s * (u / 2) * (c / 2)).map(function(t) {\n            return 2 * t;\n        });\n    }\n    return D(a);\n}\nfunction Fe(t) {\n    return t % 2 == 0;\n}\nfunction _e(t, e) {\n    if (S(t = t.slice(-2), e = e.slice(-2))) return !0;\n    if (!t.length || !e.length) return !0;\n    if (0 === t[0] || 0 === t[1] || 0 === e[0] || 0 === e[1]) return !0;\n    if (t.length !== e.length) {\n        var n = t.slice(-1)[0], r = e.slice(-1)[0];\n        if (n === r) return !0;\n        if (Fe(n) && Fe(r) && (1 === t[0] || 1 === e[0])) return !0;\n    }\n    return t[1] === e[1] && Fe(t[0]) && Fe(e[0]);\n}\nfunction Oe(t) {\n    if (null == ie) {\n        var e = jt(t);\n        ie = e.getParameter(e.MAX_TEXTURE_SIZE);\n    }\n    return ie;\n}\nfunction Me(t) {\n    if (null == se) {\n        var e = jt(t);\n        se = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);\n    }\n    return Math.min(16, se);\n}\nfunction Be(t) {\n    if (0 === t) return 0;\n    var e = jt(t);\n    return Pe(e, \"EXT_disjoint_timer_query_webgl2\") && 2 === t ? 2 : Pe(e, \"EXT_disjoint_timer_query\") ? 1 : 0;\n}\nfunction Pe(t, e) {\n    return null != t.getExtension(e);\n}\nfunction Le(t) {\n    try {\n        if (null != jt(t)) return !0;\n    } catch (t) {\n        return !1;\n    }\n    return !1;\n}\nfunction We(t) {\n    if (0 === t) return !1;\n    var e = jt(t);\n    if (1 === t) {\n        if (!Pe(e, \"OES_texture_float\")) return !1;\n    } else if (!Pe(e, \"EXT_color_buffer_float\")) return !1;\n    return Ve(e);\n}\nfunction Ue(t) {\n    if (0 === t) return !1;\n    var e = jt(t);\n    if (1 !== t) {\n        if (Pe(e, \"EXT_color_buffer_float\")) return Ve(e);\n        if (Pe(e, \"EXT_color_buffer_half_float\")) {\n            var n = e.getExtension(\"EXT_color_buffer_half_float\");\n            return function(t, e) {\n                var n = Qt(t, e), r = t.createTexture();\n                t.bindTexture(t.TEXTURE_2D, r);\n                t.texImage2D(t.TEXTURE_2D, 0, n.internalFormatHalfFloat, 1, 1, 0, n.textureFormatFloat, n.textureTypeHalfFloat, null);\n                var o = t.createFramebuffer();\n                t.bindFramebuffer(t.FRAMEBUFFER, o), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, r, 0);\n                var a = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;\n                return t.bindTexture(t.TEXTURE_2D, null), t.bindFramebuffer(t.FRAMEBUFFER, null), t.deleteTexture(r), t.deleteFramebuffer(o), a;\n            }(e, n);\n        }\n        return !1;\n    }\n    return !!Pe(e, \"OES_texture_float\") && !!Pe(e, \"WEBGL_color_buffer_float\") && Ve(e);\n}\nfunction Ve(t) {\n    var e = Qt(t), n = t.createTexture();\n    t.bindTexture(t.TEXTURE_2D, n);\n    t.texImage2D(t.TEXTURE_2D, 0, e.internalFormatFloat, 1, 1, 0, e.textureFormatFloat, e.textureTypeFloat, null);\n    var r = t.createFramebuffer();\n    t.bindFramebuffer(t.FRAMEBUFFER, r), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, n, 0);\n    var o = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;\n    return t.bindTexture(t.TEXTURE_2D, null), t.bindFramebuffer(t.FRAMEBUFFER, null), t.deleteTexture(n), t.deleteFramebuffer(r), o;\n}\nfunction ze(t) {\n    return 2 === t && null != jt(t).fenceSync;\n}\nvar Ge = Object.freeze({\n    callAndCheck: Jt,\n    canBeRepresented: ee,\n    getWebGLErrorMessage: ne,\n    getExtensionOrThrow: re,\n    createVertexShader: oe,\n    createFragmentShader: ae,\n    createProgram: ce,\n    linkProgram: le,\n    validateProgram: he,\n    createStaticVertexBuffer: fe,\n    createStaticIndexBuffer: de,\n    getNumChannels: function() {\n        return 2 === i().getNumber(\"WEBGL_VERSION\") ? 1 : 4;\n    },\n    createTexture: pe,\n    validateTextureSize: ve,\n    createFramebuffer: ge,\n    bindVertexBufferToProgramAttribute: me,\n    bindTextureUnit: ye,\n    unbindTextureUnit: function(t, e, n) {\n        Se(t, n), Jt(t, e, function() {\n            return t.activeTexture(t.TEXTURE0 + n);\n        }), Jt(t, e, function() {\n            return t.bindTexture(t.TEXTURE_2D, null);\n        });\n    },\n    getProgramUniformLocationOrThrow: xe,\n    getProgramUniformLocation: be,\n    bindTextureToProgramUniformSampler: we,\n    bindCanvasToFramebuffer: function(t, e) {\n        Jt(t, e, function() {\n            return t.bindFramebuffer(t.FRAMEBUFFER, null);\n        }), Jt(t, e, function() {\n            return t.viewport(0, 0, t.canvas.width, t.canvas.height);\n        }), Jt(t, e, function() {\n            return t.scissor(0, 0, t.canvas.width, t.canvas.height);\n        });\n    },\n    bindColorTextureToFramebuffer: Ce,\n    unbindColorTextureFromFramebuffer: Ee,\n    validateFramebuffer: Re,\n    getFramebufferErrorMessage: Ie,\n    getBatchDim: Ae,\n    getRowsCols: Te,\n    getShapeAs3D: De,\n    getTextureShapeFromLogicalShape: Ne,\n    isReshapeFree: _e,\n    getWebGLMaxTextureSize: Oe,\n    resetMaxTextureSize: function() {\n        ie = null;\n    },\n    resetMaxTexturesInShader: function() {\n        se = null;\n    },\n    getMaxTexturesInShader: Me,\n    getWebGLDisjointQueryTimerVersion: Be,\n    hasExtension: Pe,\n    isWebGLVersionEnabled: Le,\n    isCapableOfRenderingToFloatTexture: We,\n    isDownloadFloatTextureEnabled: Ue,\n    isWebGLFenceEnabled: ze\n}), He = i();\nfunction qe() {\n    i().set(\"PROD\", !0);\n}\nfunction Ke() {\n    i().set(\"DEBUG\", !0);\n}\nfunction je() {\n    i().set(\"DEPRECATION_WARNINGS_ENABLED\", !1), console.warn(\"TensorFlow.js deprecation warnings have been disabled.\");\n}\nfunction Xe(t) {\n    i().getBool(\"DEPRECATION_WARNINGS_ENABLED\") && console.warn(t + \" You can disable deprecation warnings with tf.disableDeprecationWarnings().\");\n}\nfunction Ye() {\n    Lt.disposeVariables();\n}\nfunction $e() {\n    return Lt;\n}\nfunction Qe() {\n    return Lt.memory();\n}\nfunction Je(t) {\n    return Lt.profile(t);\n}\nfunction Ze(t, e) {\n    return Lt.tidy(t, e);\n}\nfunction tn(t) {\n    _t(t).forEach(function(t) {\n        return t.dispose();\n    });\n}\nfunction en(t) {\n    return Lt.keep(t);\n}\nfunction nn(t) {\n    return Lt.time(t);\n}\nfunction rn(t) {\n    return Lt.setBackend(t);\n}\nfunction on() {\n    return Lt.ready();\n}\nfunction an() {\n    return Lt.backendName;\n}\nfunction sn(t) {\n    Lt.removeBackend(t);\n}\nfunction un(t) {\n    return Lt.findBackend(t);\n}\nfunction cn(t) {\n    return Lt.findBackendFactory(t);\n}\nfunction ln(t, e, n) {\n    return void 0 === n && (n = 1), Lt.registerBackend(t, e, n);\n}\nfunction hn() {\n    return Lt.backend;\n}\nfunction fn(t, e) {\n    i().setPlatform(t, e);\n}\nfunction dn() {\n    for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];\n    i().getBool(\"IS_TEST\") || console.warn.apply(console, t);\n}\nfunction pn(t, e) {\n    var n = t;\n    if (V(t)) return \"string\" === e ? [] : [\n        t.length\n    ];\n    if (!Array.isArray(t)) return [];\n    for(var r = []; Array.isArray(n) || V(n) && \"string\" !== e;)r.push(n.length), n = n[0];\n    return Array.isArray(t) && i().getBool(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\") && function t(e, n, r) {\n        if (r = r || [], !Array.isArray(e) && !V(e)) return void C(0 === n.length, function() {\n            return \"Element arr[\" + r.join(\"][\") + \"] is a primitive, but should be an array/TypedArray of \" + n[0] + \" elements\";\n        });\n        C(n.length > 0, function() {\n            return \"Element arr[\" + r.join(\"][\") + \"] should be a primitive, but is an array of \" + e.length + \" elements\";\n        }), C(e.length === n[0], function() {\n            return \"Element arr[\" + r.join(\"][\") + \"] should have \" + n[0] + \" elements, but has \" + e.length + \" elements\";\n        });\n        for(var o = n.slice(1), a = 0; a < e.length; ++a)t(e[a], o, r.concat(a));\n    }(t, r, []), r;\n}\nfunction vn(t, e, n, r) {\n    if (null != t && (\"numeric\" !== t && t !== e || \"numeric\" === t && \"string\" === e)) throw new Error(\"Argument '\" + n + \"' passed to '\" + r + \"' must be \" + t + \" tensor, but got \" + e + \" tensor\");\n}\nfunction gn(t, e, n, r) {\n    if (void 0 === r && (r = \"numeric\"), t instanceof wt) return vn(r, t.dtype, e, n), t;\n    var o = j(t);\n    if (\"string\" !== o && [\n        \"bool\",\n        \"int32\",\n        \"float32\"\n    ].indexOf(r) >= 0 && (o = r), vn(r, o, e, n), null == t || !V(t) && !Array.isArray(t) && \"number\" != typeof t && \"boolean\" != typeof t && \"string\" != typeof t) {\n        var a = null == t ? \"null\" : t.constructor.name;\n        throw new Error(\"Argument '\" + e + \"' passed to '\" + n + \"' must be a Tensor or TensorLike, but got '\" + a + \"'\");\n    }\n    var s = pn(t, o);\n    V(t) || Array.isArray(t) || (t = [\n        t\n    ]);\n    var u = \"string\" !== o ? Q(t, o, i().getBool(\"DEBUG\")) : I(t, [], !0);\n    return Lt.makeTensor(u, s, o);\n}\nfunction mn(t, e, n, r) {\n    if (void 0 === r && (r = \"numeric\"), !Array.isArray(t)) throw new Error(\"Argument \" + e + \" passed to \" + n + \" must be a `Tensor[]` or `TensorLike[]`\");\n    return t.map(function(t, r) {\n        return gn(t, e + \"[\" + r + \"]\", n);\n    }, r);\n}\nfunction yn(t, e) {\n    for(var n = 0; n < t.length; ++n)if (t[t.length - n - 1] !== e - 1 - n) return !1;\n    return !0;\n}\nfunction xn(t, e, n) {\n    for(var r = t.length + e.length, o = [], a = 0, i = 0, s = 0; s < r; s++)-1 === n.indexOf(s) ? o.push(t[a++]) : o.push(e[i++]);\n    return o;\n}\nfunction bn(t, e) {\n    for(var n = [], r = t.length, o = 0; o < r; o++)-1 === e.indexOf(o) && n.push(t[o]);\n    return [\n        n,\n        e.map(function(e) {\n            return t[e];\n        })\n    ];\n}\nfunction wn(t, e) {\n    return xn(t, e.map(function(t) {\n        return 1;\n    }), e);\n}\nfunction Cn(t, e, n) {\n    C(yn(e, n), function() {\n        return t + \" supports only inner-most axes for now. Got axes \" + e + \" and rank-\" + n + \" input.\";\n    });\n}\nfunction En(t, e) {\n    if (yn(t, e)) return null;\n    for(var n = [], r = 0; r < e; ++r)-1 === t.indexOf(r) && n.push(r);\n    return t.forEach(function(t) {\n        return n.push(t);\n    }), n;\n}\nfunction Rn(t) {\n    return t.map(function(t, e) {\n        return [\n            e,\n            t\n        ];\n    }).sort(function(t, e) {\n        return t[1] - e[1];\n    }).map(function(t) {\n        return t[0];\n    });\n}\nfunction In(t, e) {\n    for(var n = [], r = e - t; r < e; ++r)n.push(r);\n    return n;\n}\nfunction kn(t, e) {\n    var n = t[0].length;\n    t.forEach(function(t, e) {\n        C(t.length === n, function() {\n            return \"Error in concat\" + n + \"D: rank of tensors[\" + e + \"] must be the same as the rank of the rest (\" + n + \")\";\n        });\n    }), C(e >= 0 && e < n, function() {\n        return \"Error in concat\" + n + \"D: axis must be between 0 and \" + (n - 1) + \".\";\n    });\n    var r = t[0];\n    t.forEach(function(t, o) {\n        for(var a = 0; a < n; a++)C(a === e || t[a] === r[a], function() {\n            return \"Error in concat\" + n + \"D: Shape of tensors[\" + o + \"] (\" + t + \") does not match the shape of the rest (\" + r + \") along the non-concatenated axis \" + o + \".\";\n        });\n    });\n}\nfunction Sn(t, e) {\n    for(var n = t[0].slice(), r = 1; r < t.length; r++)n[e] += t[r][e];\n    return n;\n}\nfunction An(t) {\n    var e = Object.keys(t);\n    if (1 !== e.length) throw new Error(\"Please provide an object with a single key (operation name) mapping to a function. Got an object with \" + e.length + \" keys.\");\n    var n = e[0], r = t[n];\n    n.endsWith(\"_\") && (n = n.substring(0, n.length - 1));\n    var o = function() {\n        for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];\n        Lt.startScope(n);\n        try {\n            var o = r.apply(void 0, t);\n            return o instanceof Promise && console.error(\"Cannot return a Promise inside of tidy.\"), Lt.endScope(o), o;\n        } catch (t) {\n            throw Lt.endScope(null), t;\n        }\n    };\n    return Object.defineProperty(o, \"name\", {\n        value: n,\n        configurable: !0\n    }), o;\n}\nHe.registerFlag(\"HAS_WEBGL\", function() {\n    return He.getNumber(\"WEBGL_VERSION\") > 0;\n}), He.registerFlag(\"WEBGL_VERSION\", function() {\n    return Le(2) ? 2 : Le(1) ? 1 : 0;\n}), He.registerFlag(\"WEBGL_BUFFER_SUPPORTED\", function() {\n    return 2 === He.get(\"WEBGL_VERSION\");\n}), He.registerFlag(\"WEBGL_CPU_FORWARD\", function() {\n    return !0;\n}), He.registerFlag(\"WEBGL_FORCE_F16_TEXTURES\", function() {\n    return !1;\n}), He.registerFlag(\"WEBGL_PACK\", function() {\n    return He.getBool(\"HAS_WEBGL\");\n}), He.registerFlag(\"WEBGL_PACK_NORMALIZATION\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_CLIP\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_DEPTHWISECONV\", function() {\n    return !1;\n}), He.registerFlag(\"WEBGL_PACK_BINARY_OPERATIONS\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_UNARY_OPERATIONS\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_ARRAY_OPERATIONS\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_IMAGE_OPERATIONS\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_PACK_REDUCE\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_LAZILY_UNPACK\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_CONV_IM2COL\", function() {\n    return He.getBool(\"WEBGL_PACK\");\n}), He.registerFlag(\"WEBGL_MAX_TEXTURE_SIZE\", function() {\n    return Oe(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_MAX_TEXTURES_IN_SHADER\", function() {\n    return Me(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\", function() {\n    var t = He.getNumber(\"WEBGL_VERSION\");\n    return 0 === t ? 0 : Be(t);\n}), He.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\", function() {\n    return He.getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") > 0 && (t = navigator.userAgent || navigator.vendor || window.opera, !(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(t.substr(0, 4))));\n    var t;\n}), He.registerFlag(\"WEBGL_RENDER_FLOAT32_CAPABLE\", function() {\n    return We(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_RENDER_FLOAT32_ENABLED\", function() {\n    return !He.getBool(\"WEBGL_FORCE_F16_TEXTURES\") && He.getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\");\n}), He.registerFlag(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\", function() {\n    return Ue(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_FENCE_API_ENABLED\", function() {\n    return ze(He.getNumber(\"WEBGL_VERSION\"));\n}), He.registerFlag(\"WEBGL_SIZE_UPLOAD_UNIFORM\", function() {\n    return He.getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\") ? 4 : 0;\n}), bt = Xe;\nvar Tn = An({\n    complex_: function(t, e) {\n        var n = gn(t, \"real\", \"complex\"), r = gn(e, \"imag\", \"complex\");\n        return E(n.shape, r.shape, \"real and imag shapes, \" + n.shape + \" and \" + r.shape + \", must match in call to tf.complex().\"), Lt.runKernelFunc(function(t) {\n            return t.complex(n, r);\n        }, {\n            $real: n,\n            $imag: r\n        });\n    }\n}), Dn = An({\n    real_: function(t) {\n        var e = gn(t, \"input\", \"real\");\n        return Lt.runKernelFunc(function(t) {\n            return t.real(e);\n        }, {\n            $input: e\n        });\n    }\n}), Nn = An({\n    imag_: function(t) {\n        var e = gn(t, \"input\", \"imag\");\n        return Lt.runKernelFunc(function(t) {\n            return t.imag(e);\n        }, {\n            $input: e\n        });\n    }\n});\nfunction Fn(t, e, n) {\n    return _n(t, e, pn(t, n), n);\n}\nfunction _n(t, e, n, r) {\n    if (null == r && (r = j(t)), \"complex64\" === r) throw new Error(\"Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).\");\n    if (!V(t) && !Array.isArray(t) && \"number\" != typeof t && \"boolean\" != typeof t && \"string\" != typeof t) throw new Error(\"values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray\");\n    if (null != e) {\n        nt(e);\n        var o = k(e), a = k(n);\n        C(o === a, function() {\n            return \"Based on the provided shape, [\" + e + \"], the tensor should have \" + o + \" values but has \" + a;\n        });\n        for(var s = 0; s < n.length; ++s){\n            var u = n[s], c = s !== n.length - 1 || u !== k(e.slice(s));\n            C(n[s] === e[s] || !c, function() {\n                return \"Error creating a new Tensor. Inferred shape (\" + n + \") does not match the provided shape (\" + e + \"). \";\n            });\n        }\n    }\n    return V(t) || Array.isArray(t) || (t = [\n        t\n    ]), e = e || n, t = \"string\" !== r ? Q(t, r, i().getBool(\"DEBUG\")) : I(t, [], !0), Lt.makeTensor(t, e, r);\n}\nfunction On(t, e) {\n    if ((V(t) && \"string\" !== e || Array.isArray(t)) && \"complex64\" !== e) throw new Error(\"Error creating a new Scalar: value must be a primitive (number|boolean|string)\");\n    if (\"string\" === e && V(t) && !(t instanceof Uint8Array)) throw new Error(\"When making a scalar from encoded string, the value must be `Uint8Array`.\");\n    return _n(t, [], [], e);\n}\nfunction Mn(t, e) {\n    R(t);\n    var n = pn(t, e);\n    if (1 !== n.length) throw new Error(\"tensor1d() requires values to be a flat/TypedArray\");\n    return _n(t, null, n, e);\n}\nfunction Bn(t, e, n) {\n    if (R(t), null != e && 2 !== e.length) throw new Error(\"tensor2d() requires shape to have two numbers\");\n    var r = pn(t, n);\n    if (2 !== r.length && 1 !== r.length) throw new Error(\"tensor2d() requires values to be number[][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor2d() requires shape to be provided when `values` are a flat/TypedArray\");\n    return _n(t, e, r, n);\n}\nfunction Pn(t, e, n) {\n    if (R(t), null != e && 3 !== e.length) throw new Error(\"tensor3d() requires shape to have three numbers\");\n    var r = pn(t, n);\n    if (3 !== r.length && 1 !== r.length) throw new Error(\"tensor3d() requires values to be number[][][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor3d() requires shape to be provided when `values` are a flat array\");\n    return _n(t, e, r, n);\n}\nfunction Ln(t, e, n) {\n    if (R(t), null != e && 4 !== e.length) throw new Error(\"tensor4d() requires shape to have four numbers\");\n    var r = pn(t, n);\n    if (4 !== r.length && 1 !== r.length) throw new Error(\"tensor4d() requires values to be number[][][][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor4d() requires shape to be provided when `values` are a flat array\");\n    return _n(t, e, r, n);\n}\nfunction Wn(t, e, n) {\n    if (R(t), null != e && 5 !== e.length) throw new Error(\"tensor5d() requires shape to have five numbers\");\n    var r = pn(t, n);\n    if (5 !== r.length && 1 !== r.length) throw new Error(\"tensor5d() requires values to be number[][][][][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor5d() requires shape to be provided when `values` are a flat array\");\n    return _n(t, e, r, n);\n}\nfunction Un(t, e, n) {\n    if (R(t), null != e && 6 !== e.length) throw new Error(\"tensor6d() requires shape to have six numbers\");\n    var r = pn(t, n);\n    if (6 !== r.length && 1 !== r.length) throw new Error(\"tensor6d() requires values to be number[][][][][][] or flat/TypedArray\");\n    if (1 === r.length && null == e) throw new Error(\"tensor6d() requires shape to be provided when `values` are a flat array\");\n    return _n(t, e = e || r, r, n);\n}\nfunction Vn(t, e, n, r) {\n    return void 0 === e && (e = !0), Lt.makeVariable(t, e, n, r);\n}\nfunction zn(t, e) {\n    if (void 0 === e && (e = \"float32\"), \"complex64\" === e) {\n        var n = zn(t, \"float32\"), r = Gn(t, \"float32\");\n        return Tn(n, r);\n    }\n    var o = Z(k(t), e);\n    return Lt.makeTensor(o, t, e);\n}\nfunction Gn(t, e) {\n    if (void 0 === e && (e = \"float32\"), \"complex64\" === e) {\n        var n = Gn(t, \"float32\"), r = Gn(t, \"float32\");\n        return Tn(n, r);\n    }\n    var o = tt(k(t), e);\n    return Lt.makeTensor(o, t, e);\n}\nfunction Hn(t, e, n) {\n    return Lt.runKernelFunc(function(r) {\n        return r.fill(t, e, n);\n    }, {});\n}\nfunction qn(t, e, n) {\n    if (n <= 0) throw new Error(\"The number of values should be positive.\");\n    return Lt.runKernelFunc(function(r) {\n        return r.linspace(t, e, n);\n    }, {});\n}\nfunction Kn(t, e, n, r) {\n    if (void 0 === n && (n = 1), void 0 === r && (r = \"float32\"), 0 === n) throw new Error(\"Cannot have a step of zero\");\n    if (t === e || t < e && n < 0 || e < t && n > 1) return Gn([\n        0\n    ], r);\n    var o = tt(Math.abs(Math.ceil((e - t) / n)), r);\n    e < t && 1 === n && (n = -1), o[0] = t;\n    for(var a = 1; a < o.length; a++)o[a] = o[a - 1] + n;\n    return Mn(o, r);\n}\nvar jn = An({\n    onesLike_: function(t) {\n        var e = gn(t, \"x\", \"onesLike\");\n        if (\"complex64\" === e.dtype) {\n            var n = jn(Dn(e)), r = Xn(Nn(e));\n            return Tn(n, r);\n        }\n        return Lt.runKernelFunc(function(t) {\n            return t.onesLike(e);\n        }, {\n            x: e\n        }, function(t, e) {\n            return {\n                x: function() {\n                    return Xn(t);\n                }\n            };\n        }, \"OnesLike\");\n    }\n}), Xn = An({\n    zerosLike_: function(t) {\n        var e = gn(t, \"x\", \"zerosLike\");\n        return Lt.runKernelFunc(function(t) {\n            return t.zerosLike(e);\n        }, {\n            x: e\n        }, function(t, e) {\n            return {\n                x: function() {\n                    return Xn(t);\n                }\n            };\n        }, \"ZerosLike\");\n    }\n});\nvar Yn = An({\n    concat_: function(t, e) {\n        void 0 === e && (e = 0), C(t.length >= 1, function() {\n            return \"Pass at least one tensor to concat\";\n        });\n        var n = mn(t, \"tensors\", \"concat\");\n        \"complex64\" === n[0].dtype && n.forEach(function(t) {\n            if (\"complex64\" !== t.dtype) throw new Error(\"Cannot concatenate complex64 tensors with a tensor\\n          with dtype \" + t.dtype + \". \");\n        }), e = O(e, n[0].shape)[0];\n        var r = Sn(n.map(function(t) {\n            return t.shape;\n        }), e);\n        if (0 === k(r)) return Fn([], r);\n        if (1 === (n = n.filter(function(t) {\n            return t.size > 0;\n        })).length) return n[0];\n        var o = n.map(function(t) {\n            return t.shape;\n        });\n        kn(o, e);\n        var a = n, i = {\n            axis: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.concat(n, e);\n        }, a, function(t) {\n            var n = o.map(function(t) {\n                return t[e];\n            });\n            return tr(t, n, e).map(function(t) {\n                return function() {\n                    return t;\n                };\n            });\n        }, \"Concat\", i);\n    }\n}), $n = An({\n    concat1d_: function(t) {\n        return Yn(t, 0);\n    }\n}), Qn = An({\n    concat2d_: function(t, e) {\n        return Yn(t, e);\n    }\n}), Jn = An({\n    concat3d_: function(t, e) {\n        return Yn(t, e);\n    }\n}), Zn = An({\n    concat4d_: function(t, e) {\n        return Yn(t, e);\n    }\n}), tr = An({\n    split_: function(t, e, n) {\n        void 0 === n && (n = 0);\n        var r, o = gn(t, \"x\", \"split\");\n        return n = O(n, o.shape)[0], \"number\" == typeof e ? (C(o.shape[n] % e == 0, function() {\n            return \"Number of splits must evenly divide the axis.\";\n        }), r = new Array(e).fill(o.shape[n] / e)) : (C(o.shape[n] === e.reduce(function(t, e) {\n            return t + e;\n        }), function() {\n            return \"The sum of sizes must match the size of the axis dimension.\";\n        }), r = e), Lt.runKernelFunc(function(t) {\n            return t.split(o, r, n);\n        }, {\n            $x: o\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Yn(t, n);\n                }\n            };\n        });\n    }\n});\nfunction er(t, e, n) {\n    return void 0 === e && (e = \"float32\"), e = e || \"float32\", nt(t), new mt(t, e, n);\n}\nfunction nr(t, e) {\n    void 0 === e && (e = !1), console.log(t.toString(e));\n}\nvar rr = An({\n    batchToSpaceND_: function(t, e, n) {\n        var r = gn(t, \"x\", \"batchToSpaceND\"), o = e.reduce(function(t, e) {\n            return t * e;\n        });\n        return C(r.rank >= 1 + e.length, function() {\n            return \"input rank is \" + r.rank + \" but should be > than blockShape.length \" + e.length;\n        }), C(n.length === e.length, function() {\n            return \"crops.length is \" + n.length + \" but should be equal to blockShape.length  \" + e.length;\n        }), C(r.shape[0] % o == 0, function() {\n            return \"input tensor batch is \" + r.shape[0] + \" but is not divisible by the product of the elements of blockShape \" + e.join(\" * \") + \" === \" + o;\n        }), Lt.runKernelFunc(function(t) {\n            return t.batchToSpaceND(r, e, n);\n        }, {\n            $x: r\n        }, function(t) {\n            return {\n                $x: function() {\n                    return t.spaceToBatchND(e, n);\n                }\n            };\n        });\n    }\n}), or = An({\n    cast_: function(t, e) {\n        var n = gn(t, \"x\", \"cast\");\n        if (!W(e)) throw new Error(\"Failed to cast to unknown dtype \" + e);\n        if (\"string\" === e && \"string\" !== n.dtype || \"string\" !== e && \"string\" === n.dtype) throw new Error(\"Only strings can be casted to strings\");\n        var r = {\n            dtype: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.cast(n, e);\n        }, {\n            x: n\n        }, function(t) {\n            return {\n                x: function() {\n                    return t.clone();\n                }\n            };\n        }, \"Cast\", r);\n    }\n}), ar = An({\n    cumsum_: function(t, e, n, r) {\n        void 0 === e && (e = 0), void 0 === n && (n = !1), void 0 === r && (r = !1);\n        var o = gn(t, \"x\", \"cumsum\"), a = En([\n            e |= 0\n        ], o.rank), i = o;\n        null != a && (i = o.transpose(a));\n        var s = In(1, o.rank)[0], u = Lt.runKernelFunc(function(t) {\n            return t.cumsum(i, s, n, r);\n        }, {\n            permutedX: i\n        }, function(t) {\n            return {\n                permutedX: function() {\n                    return t.cumsum(e, n, !r);\n                }\n            };\n        });\n        return null != a && (u = u.transpose(a)), u;\n    }\n}), ir = An({\n    depthToSpace_: function(t, e, n) {\n        void 0 === n && (n = \"NHWC\");\n        var r = gn(t, \"x\", \"depthToSpace\"), o = \"NHWC\" === n ? r.shape[1] : r.shape[2], a = \"NHWC\" === n ? r.shape[2] : r.shape[3], i = \"NHWC\" === n ? r.shape[3] : r.shape[1];\n        return C(o * e >= 0, function() {\n            return \"Negative dimension size caused by overflow when multiplying\\n      \" + o + \" and \" + e + \"  for depthToSpace with input shape\\n      \" + r.shape;\n        }), C(a * e >= 0, function() {\n            return \"Negative dimension size caused by overflow when multiplying\\n      \" + a + \" and \" + e + \" for depthToSpace with input shape\\n          \" + r.shape;\n        }), C(i % (e * e) == 0, function() {\n            return \"Dimension size must be evenly divisible by \" + e * e + \" but is \" + i + \" for depthToSpace with input shape \" + r.shape;\n        }), Lt.runKernelFunc(function(t) {\n            return t.depthToSpace(r, e, n);\n        }, {\n            $x: r\n        });\n    }\n}), sr = An({\n    expandDims_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = gn(t, \"x\", \"expandDims\", null);\n        C(e <= n.rank, function() {\n            return \"Axis must be <= rank of the tensor\";\n        });\n        var r = n.shape.slice();\n        return e < 0 && (C(-(n.rank + 1) <= e, function() {\n            return \"Axis must be in the interval [\" + -(n.rank + 1) + \", \" + n.rank + \"]\";\n        }), e = n.rank + e + 1), r.splice(e, 0, 1), ur(n, r);\n    }\n}), ur = An({\n    reshape_: function(t, e) {\n        var n = gn(t, \"x\", \"reshape\", null);\n        e = _(e, n.size), C(n.size === k(e), function() {\n            return \"new shape and old shape must have the same number of elements.\";\n        });\n        var r = {\n            shape: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.reshape(n, e);\n        }, {\n            x: n\n        }, function(t) {\n            return {\n                x: function() {\n                    return t.reshape(n.shape);\n                }\n            };\n        }, \"Reshape\", r);\n    }\n}), cr = An({\n    spaceToBatchND_: function(t, e, n) {\n        var r = gn(t, \"x\", \"spaceToBatchND\");\n        return C(r.rank >= 1 + e.length, function() {\n            return \"input rank \" + r.rank + \" should be > than [blockShape] \" + e.length;\n        }), C(n.length === e.length, function() {\n            return \"paddings.shape[0] \" + n.length + \" must be equal to [blockShape] \" + e.length;\n        }), C(r.shape.reduce(function(t, r, o) {\n            return o > 0 && o <= e.length ? t && (r + n[o - 1][0] + n[o - 1][1]) % e[o - 1] == 0 : t;\n        }, !0), function() {\n            return \"input spatial dimensions \" + r.shape.slice(1) + \" with paddings \" + n.toString() + \" must be divisible by blockShapes \" + e.toString();\n        }), Lt.runKernelFunc(function(t) {\n            return t.spaceToBatchND(r, e, n);\n        }, {\n            $x: r\n        }, function(t) {\n            return {\n                $x: function() {\n                    return t.batchToSpaceND(e, n);\n                }\n            };\n        });\n    }\n}), lr = An({\n    squeeze_: function(t, e) {\n        var n = gn(t, \"x\", \"squeeze\");\n        return ur(n, M(n.shape, e).newShape);\n    }\n}), hr = An({\n    stack_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = mn(t, \"tensors\", \"stack\");\n        if (C(n.length >= 1, function() {\n            return \"Pass at least one tensor to tf.stack\";\n        }), 1 === n.length) return n[0].expandDims(e);\n        var r = n[0].rank, o = n[0].shape, a = n[0].dtype;\n        C(e <= r, function() {\n            return \"Axis must be <= rank of the tensor\";\n        }), n.forEach(function(t) {\n            E(o, t.shape, \"All tensors passed to stack must have matching shapes\");\n        }), n.forEach(function(t) {\n            C(a === t.dtype, function() {\n                return \"All tensors passed to stack must have matching dtypes\";\n            });\n        });\n        var i = n.map(function(t) {\n            return t.expandDims(e);\n        });\n        return Yn(i, e);\n    }\n}), fr = An({\n    unstack_: function(t, e) {\n        void 0 === e && (e = 0), e = e || 0;\n        var n = gn(t, \"x\", \"unstack\");\n        C(e >= -n.shape.length && e < n.shape.length, function() {\n            return \"Axis = \" + e + \" is not in [-\" + n.shape.length + \", \" + n.shape.length + \")\";\n        }), e < 0 && (e += n.shape.length);\n        var r = {\n            axis: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.unstack(n, e);\n        }, {\n            x: n\n        }, function(t) {\n            return {\n                x: function() {\n                    return hr(t, e);\n                }\n            };\n        }, \"Unpack\", r);\n    }\n}), dr = function(t, e) {\n    return n(this, void 0, void 0, function() {\n        var n, o, a, i, s, u, c, l, h, f;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return n = gn(t, \"x\", \"setdiff1d\"), o = gn(e, \"y\", \"setdiff1d\"), C(n.dtype === o.dtype, function() {\n                        return \"x and y should have the same dtype, but got x (\" + n.dtype + \") and y (\" + o.dtype + \").\";\n                    }), C(1 === n.rank, function() {\n                        return \"x should be 1D tensor, but got x (\" + n.shape + \").\";\n                    }), C(1 === o.rank, function() {\n                        return \"y should be 1D tensor, but got y (\" + o.shape + \").\";\n                    }), [\n                        4,\n                        n.data()\n                    ];\n                case 1:\n                    return a = r.sent(), [\n                        4,\n                        o.data()\n                    ];\n                case 2:\n                    for(i = r.sent(), s = new Set(i), u = 0, h = 0; h < a.length; h++)s.has(a[h]) || u++;\n                    for(c = new mt([\n                        u\n                    ], n.dtype), l = new mt([\n                        u\n                    ], \"int32\"), h = 0, f = 0; h < a.length; h++)s.has(a[h]) || (c.values[f] = a[h], l.values[f] = h, f++);\n                    return [\n                        2,\n                        [\n                            c.toTensor(),\n                            l.toTensor()\n                        ]\n                    ];\n            }\n        });\n    });\n};\nfunction pr(t, e, n, r) {\n    void 0 === r && (r = !0);\n    var o = [];\n    if (r) (o = o.concat(e.slice(0))).push(t[0] / n), o = o.concat(t.slice(1));\n    else {\n        o = o.concat(t[0]);\n        for(var a = e.length, i = 0; i < a; ++i)o = o.concat([\n            t[i + 1] / e[i],\n            e[i]\n        ]);\n        o = o.concat(t.slice(a + 1));\n    }\n    return o;\n}\nfunction vr(t, e, n) {\n    void 0 === n && (n = !0);\n    var r = [];\n    if (n) {\n        r.push(e);\n        for(var o = e + 1; o < t; ++o)o <= 2 * e ? (r.push(o), r.push(o - (e + 1))) : r.push(o);\n    } else {\n        var a = [], i = [];\n        for(o = 1; o < t; ++o)o >= 2 * e + 1 || o % 2 == 1 ? i.push(o) : a.push(o);\n        r.push.apply(r, a), r.push(0), r.push.apply(r, i);\n    }\n    return r;\n}\nfunction gr(t, e, n, r) {\n    void 0 === r && (r = !0);\n    var o = [];\n    r ? o.push(t[0] / n) : o.push(t[0] * n);\n    for(var a = 1; a < t.length; ++a)a <= e.length ? r ? o.push(e[a - 1] * t[a]) : o.push(t[a] / e[a - 1]) : o.push(t[a]);\n    return o;\n}\nfunction mr(t, e) {\n    for(var n = [\n        0\n    ], r = 0; r < e; ++r)n.push(t[r][0]);\n    return n;\n}\nfunction yr(t, e, n) {\n    for(var r = t.slice(0, 1), o = 0; o < n; ++o)r.push(t[o + 1] - e[o][0] - e[o][1]);\n    return r;\n}\nvar xr = \"Add\", br = \"AddN\", wr = \"Div\", Cr = \"FusedBatchNorm\", Er = \"SquaredDifference\", Rr = \"Square\", Ir = \"Transpose\", kr = \"NonMaxSuppressionV5\", Sr = \"BroadcastTo\", Ar = \"OneHot\", Tr = \"Identity\", Dr = \"Tile\", Nr = \"PadV2\", Fr = \"FromPixels\", _r = \"MaxPoolWithArgmax\";\nvar Or = An({\n    add_: function(t, e) {\n        var n, r = gn(t, \"a\", \"add\"), o = gn(e, \"b\", \"add\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = {\n            a: r,\n            b: o\n        };\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.add(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, a, null, xr);\n    }\n});\nfunction Mr(t, e) {\n    for(var n = t.length, r = [], o = 0; o < n; o++){\n        var a = n - 1 - o, i = t[a] || 1;\n        (e[e.length - 1 - o] || 1) > 1 && 1 === i && r.unshift(a);\n    }\n    return r;\n}\nfunction Br(t, e) {\n    for(var n = [], r = 0; r < e.length; r++){\n        var o = t[t.length - r - 1], a = e.length - r - 1, i = e[a];\n        (null == o || 1 === o && i > 1) && n.unshift(a);\n    }\n    return n;\n}\nfunction Pr(t, e) {\n    for(var n = [], r = Math.max(t.length, e.length), o = 0; o < r; o++){\n        var a = t[t.length - o - 1];\n        null == a && (a = 1);\n        var i = e[e.length - o - 1];\n        if (null == i && (i = 1), 1 === a) n.unshift(i);\n        else if (1 === i) n.unshift(a);\n        else {\n            if (a !== i) throw Error(\"Operands could not be broadcast together with shapes \" + t + \" and \" + e + \".\");\n            n.unshift(a);\n        }\n    }\n    return n;\n}\nvar Lr = An({\n    abs_: function(t) {\n        var e = gn(t, \"x\", \"abs\");\n        return \"complex64\" === e.dtype ? Lt.runKernelFunc(function(t) {\n            return t.complexAbs(e);\n        }, {\n            $x: e\n        }) : Lt.runKernelFunc(function(t, n) {\n            var r = t.abs(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.mul(n.toFloat().step(-1));\n                }\n            };\n        }, \"Abs\");\n    }\n}), Wr = An({\n    acos_: function(t) {\n        var e = gn(t, \"x\", \"acos\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.acos(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.divStrict(On(1).sub(n.toFloat().square()).sqrt()).neg();\n                }\n            };\n        });\n    }\n}), Ur = An({\n    acosh_: function(t) {\n        var e = gn(t, \"x\", \"acosh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.acosh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.divStrict(n.toFloat().square().sub(1).sqrt());\n                }\n            };\n        });\n    }\n}), Vr = An({\n    asin_: function(t) {\n        var e = gn(t, \"x\", \"asin\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.asin(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.divStrict(On(1).sub(n.toFloat().square()).sqrt());\n                }\n            };\n        });\n    }\n}), zr = An({\n    asinh_: function(t) {\n        var e = gn(t, \"x\", \"asinh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.asinh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.divStrict(On(1).add(n.toFloat().square()).sqrt());\n                }\n            };\n        });\n    }\n}), Gr = An({\n    atan_: function(t) {\n        var e = gn(t, \"x\", \"atan\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.atan(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.toFloat().square().add(1));\n                }\n            };\n        });\n    }\n}), Hr = An({\n    atanh_: function(t) {\n        var e = gn(t, \"x\", \"atanh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.atanh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(On(1).sub(n.toFloat().square()));\n                }\n            };\n        });\n    }\n}), qr = An({\n    ceil_: function(t) {\n        var e = gn(t, \"x\", \"ceil\");\n        return Lt.runKernelFunc(function(t) {\n            return t.ceil(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), Kr = An({\n    clipByValue_: function(t, e, n) {\n        var r = gn(t, \"x\", \"clipByValue\");\n        C(e <= n, function() {\n            return \"Error in clip: min (\" + e + \") must be less than or equal to max (\" + n + \").\";\n        });\n        var o = [\n            r\n        ], a = {\n            min: e,\n            max: n\n        };\n        return Lt.runKernelFunc(function(t, o) {\n            var a = t.clip(r, e, n);\n            return o([\n                r\n            ]), a;\n        }, {\n            x: r\n        }, function(t, r) {\n            var o = r[0];\n            return {\n                x: function() {\n                    return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)), Xn(t));\n                }\n            };\n        }, \"ClipByValue\", a, o);\n    }\n}), jr = An({\n    cos_: function(t) {\n        var e = gn(t, \"x\", \"cos\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.cos(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return n.toFloat().sin().neg().mul(t);\n                }\n            };\n        }, \"Cos\", {}, n);\n    }\n}), Xr = An({\n    cosh_: function(t) {\n        var e = gn(t, \"x\", \"cosh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.cosh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return n.toFloat().sinh().mulStrict(t);\n                }\n            };\n        });\n    }\n}), Yr = An({\n    erf_: function(t) {\n        var e = gn(t, \"x\", \"erf\");\n        return C(\"int32\" === e.dtype || \"float32\" === e.dtype, function() {\n            return \"Input dtype must be `int32` or `float32`.\";\n        }), \"int32\" === e.dtype && (e = e.toFloat()), Lt.runKernelFunc(function(t, n) {\n            var r = t.erf(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.mul(n.square().neg().exp().mul(2 / Math.sqrt(Math.PI)));\n                }\n            };\n        });\n    }\n}), $r = An({\n    exp_: function(t) {\n        var e = gn(t, \"x\", \"exp\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.exp(e);\n            return n([\n                r\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            return {\n                x: function() {\n                    return t.mulStrict(e[0]);\n                }\n            };\n        }, \"Exp\", {}, [], [\n            !0\n        ]);\n    }\n}), Qr = An({\n    expm1_: function(t) {\n        var e = gn(t, \"x\", \"expm1\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.expm1(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.mul(n.exp());\n                }\n            };\n        });\n    }\n}), Jr = An({\n    floor_: function(t) {\n        var e = gn(t, \"x\", \"floor\");\n        return Lt.runKernelFunc(function(t) {\n            return t.floor(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), Zr = An({\n    log_: function(t) {\n        var e = gn(t, \"x\", \"log\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.log(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.div(n.toFloat());\n                }\n            };\n        }, \"Log\", {}, n);\n    }\n}), to = An({\n    log1p_: function(t) {\n        var e = gn(t, \"x\", \"log1p\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.log1p(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.add(1));\n                }\n            };\n        });\n    }\n}), eo = An({\n    logSigmoid_: function(t) {\n        var e = gn(t, \"x\", \"logSigmoid\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.softplus(e.neg()).neg();\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.mul(n.neg().sigmoid());\n                }\n            };\n        });\n    }\n}), no = An({\n    neg_: function(t) {\n        var e = gn(t, \"x\", \"neg\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t) {\n            return t.neg(e);\n        }, {\n            x: e\n        }, function(t) {\n            return {\n                x: function() {\n                    return t.neg();\n                }\n            };\n        }, \"Neg\", {}, n);\n    }\n}), ro = An({\n    reciprocal_: function(t) {\n        var e = gn(t, \"x\", \"reciprocal\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.reciprocal(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.square().neg());\n                }\n            };\n        });\n    }\n}), oo = An({\n    round_: function(t) {\n        var e = gn(t, \"x\", \"round\");\n        return Lt.runKernelFunc(function(t) {\n            return t.round(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), ao = An({\n    rsqrt_: function(t) {\n        var e = gn(t, \"x\", \"rsqrt\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.rsqrt(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.div(n.pow(1.5).mul(2)).neg();\n                }\n            };\n        }, \"Rsqrt\", {}, n);\n    }\n}), io = An({\n    sigmoid_: function(t) {\n        var e = gn(t, \"x\", \"sigmoid\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.sigmoid(e);\n            return n([\n                r\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.mul(n.mul(On(1).sub(n)));\n                }\n            };\n        }, \"Sigmoid\");\n    }\n}), so = An({\n    sign_: function(t) {\n        var e = gn(t, \"x\", \"sign\");\n        return Lt.runKernelFunc(function(t) {\n            return t.sign(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), uo = An({\n    isNaN_: function(t) {\n        var e = gn(t, \"x\", \"isNaN\");\n        return Lt.runKernelFunc(function(t) {\n            return t.isNaN(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), co = An({\n    isInf_: function(t) {\n        var e = gn(t, \"x\", \"isInf\");\n        return Lt.runKernelFunc(function(t) {\n            return t.isInf(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), lo = An({\n    isFinite_: function(t) {\n        var e = gn(t, \"x\", \"isFinite\");\n        return Lt.runKernelFunc(function(t) {\n            return t.isFinite(e);\n        }, {\n            $x: e\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), ho = An({\n    sin_: function(t) {\n        var e = gn(t, \"x\", \"sin\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.sin(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return n.toFloat().cos().mul(t);\n                }\n            };\n        }, \"Sin\", {}, n);\n    }\n}), fo = An({\n    sinh_: function(t) {\n        var e = gn(t, \"x\", \"sinh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.sinh(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return n.toFloat().cosh().mulStrict(t);\n                }\n            };\n        });\n    }\n}), po = An({\n    softplus_: function(t) {\n        var e = gn(t, \"x\", \"softplus\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.softplus(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.mul(n.sigmoid());\n                }\n            };\n        });\n    }\n}), vo = An({\n    sqrt_: function(t) {\n        var e = gn(t, \"x\", \"sqrt\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.sqrt(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.toFloat().sqrt().mul(2));\n                }\n            };\n        });\n    }\n}), go = An({\n    step_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = gn(t, \"x\", \"step\");\n        return Lt.runKernelFunc(function(t) {\n            return t.step(n, e);\n        }, {\n            $x: n\n        }, function(t) {\n            return {\n                $x: function() {\n                    return Xn(t);\n                }\n            };\n        });\n    }\n}), mo = An({\n    tan_: function(t) {\n        var e = gn(t, \"x\", \"tan\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.tan(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return t.div(n.cos().square());\n                }\n            };\n        });\n    }\n}), yo = An({\n    tanh_: function(t) {\n        var e = gn(t, \"x\", \"tanh\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.tanh(e);\n            return n([\n                r\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return On(1).sub(n.square()).mulStrict(t);\n                }\n            };\n        }, \"Tanh\", {}, null, [\n            !0\n        ]);\n    }\n});\nvar xo = An({\n    addStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"addStrict\"), r = gn(e, \"b\", \"addStrict\");\n        return E(n.shape, r.shape, \"Error in addStrict: \"), n.add(r);\n    }\n}), bo = An({\n    atan2_: function(t, e) {\n        var n, r = gn(t, \"a\", \"atan2\"), o = gn(e, \"b\", \"atan2\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Pr(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.atan2(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            $a: r,\n            $b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                $a: function() {\n                    var e = Or(n.square(), r.square()), o = t.mul(r.div(e)), i = Br(n.shape, a);\n                    return i.length > 0 && (o = o.sum(i)), o.reshape(n.shape);\n                },\n                $b: function() {\n                    var e = Or(n.square(), r.square()), o = no(t.mul(n.div(e))), i = Br(r.shape, a);\n                    return i.length > 0 && (o = o.sum(i)), o.reshape(r.shape);\n                }\n            };\n        });\n    }\n}), wo = An({\n    divStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"div\"), r = gn(e, \"b\", \"div\");\n        return E(n.shape, r.shape, \"Error in divideStrict: \"), n.div(r);\n    }\n}), Co = An({\n    floorDiv_: function(t, e) {\n        var n, r = gn(t, \"a\", \"floorDiv\"), o = gn(e, \"b\", \"floorDiv\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Pr(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.floorDiv(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    var e = t.div(r.toFloat()), o = Br(n.shape, a);\n                    return o.length > 0 ? e.sum(o).reshape(n.shape) : e;\n                },\n                b: function() {\n                    var e = t.mul(n.toFloat()), o = Br(r.shape, a);\n                    o.length > 0 && (e = e.sum(o).reshape(r.shape));\n                    var i = r.square();\n                    return e.div(i.toFloat()).neg();\n                }\n            };\n        }, \"FloorDiv\");\n    }\n}), Eo = An({\n    maximum_: function(t, e) {\n        var n, r = gn(t, \"a\", \"maximum\"), o = gn(e, \"b\", \"maximum\");\n        return n = Nt(r, o), r = n[0], o = n[1], \"bool\" === r.dtype && (r = r.toInt(), o = o.toInt()), Pr(r.shape, o.shape), Lt.runKernelFunc(function(t, e) {\n            var n = t.maximum(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    return t.mul(n.greaterEqual(r).toFloat());\n                },\n                b: function() {\n                    return t.mul(n.less(r).toFloat());\n                }\n            };\n        }, \"Maximum\");\n    }\n}), Ro = An({\n    maximumStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"maximumStrict\"), r = gn(e, \"b\", \"maximumStrict\");\n        return E(n.shape, r.shape, \"Error in maximumStrict: \"), n.maximum(r);\n    }\n}), Io = An({\n    minimum_: function(t, e) {\n        var n, r = gn(t, \"a\", \"minimum\"), o = gn(e, \"b\", \"minimum\");\n        return n = Nt(r, o), r = n[0], o = n[1], \"bool\" === r.dtype && (r = r.toInt(), o = o.toInt()), Pr(r.shape, o.shape), Lt.runKernelFunc(function(t, e) {\n            var n = t.minimum(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    return t.mul(n.lessEqual(r).toFloat());\n                },\n                b: function() {\n                    return t.mul(n.greater(r).toFloat());\n                }\n            };\n        }, \"Minimum\");\n    }\n}), ko = An({\n    minimumStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"minimumStrict\"), r = gn(e, \"b\", \"minimumStrict\");\n        return E(n.shape, r.shape, \"Error in minimumStrict: \"), n.minimum(r);\n    }\n}), So = An({\n    mod_: function(t, e) {\n        var n, r = gn(t, \"a\", \"mod\"), o = gn(e, \"b\", \"mod\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Pr(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.mod(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            $a: r,\n            $b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                $a: function() {\n                    var e = Br(n.shape, a);\n                    return e.length > 0 ? t.sum(e).reshape(n.shape) : t;\n                },\n                $b: function() {\n                    var e = t.mul(n.div(r).floor().neg()), o = Br(r.shape, a);\n                    return o.length > 0 ? e.sum(o).reshape(r.shape) : e;\n                }\n            };\n        });\n    }\n}), Ao = An({\n    modStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"modStrict\"), r = gn(e, \"b\", \"modStrict\");\n        return E(n.shape, r.shape, \"Error in modStrict: \"), n.mod(r);\n    }\n}), To = An({\n    mul_: function(t, e) {\n        var n, r = gn(t, \"a\", \"mul\"), o = gn(e, \"b\", \"mul\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Pr(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.multiply(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    var e = t.mul(r.toFloat()), o = Br(n.shape, a);\n                    return o.length > 0 ? e.sum(o).reshape(n.shape) : e;\n                },\n                b: function() {\n                    var e = t.mul(n.toFloat()), o = Br(r.shape, a);\n                    return o.length > 0 ? e.sum(o).reshape(r.shape) : e;\n                }\n            };\n        }, \"Mul\");\n    }\n}), Do = An({\n    mulStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"mul\"), r = gn(e, \"b\", \"mul\");\n        return E(n.shape, r.shape, \"Error in multiplyStrict: \"), n.mul(r);\n    }\n}), No = An({\n    pow_: function(t, e) {\n        var n, r = gn(t, \"base\", \"pow\"), o = gn(e, \"exp\", \"pow\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Pr(r.shape, o.shape), i = [\n            r,\n            o\n        ];\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.pow(r, o);\n            return e([\n                r,\n                o,\n                n\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1], o = e[2];\n            return {\n                a: function() {\n                    var e = r.toFloat(), o = t.mul(e.mul(n.pow(e.sub(On(1))))), i = Br(n.shape, a);\n                    return i.length > 0 && (o = o.sum(i)), o.reshape(n.shape);\n                },\n                b: function() {\n                    var e = n.greater(0), i = n.log().where(e, Xn(n)), s = t.mul(o.mul(i)), u = Br(r.shape, a);\n                    return u.length > 0 && (s = s.sum(u)), s.reshape(r.shape);\n                }\n            };\n        }, \"Pow\", {}, i, [\n            !0\n        ]);\n    }\n}), Fo = An({\n    powStrict_: function(t, e) {\n        return E(t.shape, e.shape, \"Error in powStrict: \"), t.pow(e);\n    }\n}), _o = An({\n    squaredDifferenceStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"squaredDifferenceStrict\"), r = gn(e, \"b\", \"squaredDifferenceStrict\");\n        return E(n.shape, r.shape, \"Error in squaredDifferenceStrict: \"), n.squaredDifference(r);\n    }\n}), Oo = An({\n    sub_: function(t, e) {\n        var n, r = gn(t, \"a\", \"sub\"), o = gn(e, \"b\", \"sub\");\n        n = Nt(r, o), r = n[0], o = n[1];\n        var a = Pr(r.shape, o.shape);\n        return Lt.runKernelFunc(function(t) {\n            return t.subtract(r, o);\n        }, {\n            a: r,\n            b: o\n        }, function(t) {\n            return {\n                a: function() {\n                    var e = t, n = Br(r.shape, a);\n                    return n.length > 0 && (e = e.sum(n)), e.reshape(r.shape);\n                },\n                b: function() {\n                    var e = t, n = Br(o.shape, a);\n                    return n.length > 0 && (e = e.sum(n)), e.neg().reshape(o.shape);\n                }\n            };\n        }, \"Sub\");\n    }\n}), Mo = An({\n    subStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"subStrict\"), r = gn(e, \"b\", \"subStrict\");\n        return E(n.shape, r.shape, \"Error in subStrict: \"), n.sub(r);\n    }\n});\nvar Bo = An({\n    div_: function(t, e) {\n        var n, r = gn(t, \"a\", \"div\"), o = gn(e, \"b\", \"div\");\n        if (n = Nt(r, o), r = n[0], o = n[1], \"int32\" === r.dtype && \"int32\" === o.dtype) return Co(r, o);\n        var a = {\n            a: r,\n            b: o\n        };\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.realDivide(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, a, null, wr, {});\n    }\n});\nfunction Po(t, e) {\n    if (t.rank < 1) throw new Error(\"tf.gatherND() expects the input to be rank 1 or higher, but the rank was \" + t.rank + \".\");\n    if (e.rank < 1) throw new Error(\"tf.gatherND() expects the indices to be rank 1 or higher, but the rank was \" + e.rank + \".\");\n    if (\"int32\" !== e.dtype) throw new Error(\"tf.gatherND() expects the indices to be int32 type, but the dtype was \" + e.dtype + \".\");\n    if (e.shape[e.rank - 1] > t.rank) throw new Error(\"index innermost dimension length must be <= tensor rank; saw: \" + e.shape[e.rank - 1] + \" vs. \" + t.rank);\n    if (0 === t.size) throw new Error(\"Requested more than 0 entries, but input is empty. Input shape: \" + t.shape + \".\");\n    for(var n = e.shape, r = n[n.length - 1], o = 1, a = 0; a < n.length - 1; ++a)o *= n[a];\n    var i = t.shape, s = n.slice();\n    s.pop();\n    var u = 1;\n    for(a = r; a < t.rank; ++a)u *= i[a], s.push(i[a]);\n    var c = $(t.shape).map(function(t) {\n        return t / u;\n    }).concat([\n        1\n    ]).slice(0, r);\n    return [\n        s,\n        o,\n        u,\n        c\n    ];\n}\nvar Lo = Object.freeze({\n    prepareAndValidate: Po\n}), Wo = 30;\nfunction Uo(t) {\n    return t <= Wo ? t : Y(t, Math.floor(Math.sqrt(t)));\n}\nfunction Vo(t, e, n) {\n    var r = e.rank > 1 ? e.shape[e.rank - 1] : 1, o = e.rank > 1 ? e.rank - 1 : 1, a = \"Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: \" + n.shape + \", indices.shape: \" + e.shape + \", shape: \" + t + \", sliceDim: \" + r + \", and batchDim: \" + o + \".\";\n    if (n.rank < o) throw new Error(a + \" update.rank < \" + o + \". \");\n    if (t.length < r + (n.rank - o)) throw new Error(a + \" Output shape length < \" + (r + (n.rank - o)));\n    if (n.rank !== o + t.length - r) throw new Error(a + \" update.rank != \" + (o + t.length - r));\n    for(var i = 0; i < o; ++i)if (n.shape[i] !== e.shape[i]) throw new Error(a + \" updates.shape[\" + i + \"] (\" + n.shape[i] + \") != indices.shape[\" + i + \"] (\" + e.shape[i] + \").\");\n    for(i = 0; i < n.rank - o; ++i)if (n.shape[i + o] !== t[i + r]) throw new Error(a + \" updates.shape[\" + (i + o) + \"] (\" + n.shape[i + o] + \") != shape[\" + (i + o) + \"] (\" + t[i + o] + \")\");\n}\nfunction zo(t, e, n) {\n    if (e.rank < 1) throw new Error(\"tf.scatterND() expects the indices to be rank 1 or higher, but the rank was \" + e.rank + \".\");\n    if (t.rank < 1) throw new Error(\"tf.scatterND() expects the updates to be rank 1 or higher, but the rank was \" + t.rank + \".\");\n    if (\"int32\" !== e.dtype) throw new Error(\"The dtype of 'indices' should be int32, but got dtype: \" + e.dtype);\n    if (n.length < 1) throw new Error(\"Output rank must be greater or equal to 1, but got shape: \" + n);\n    if (0 === n.length) {\n        if (0 === e.size) throw new Error(\"Indices specified for empty output. indices shape: \" + e.shape);\n        if (0 === t.size) throw new Error(\"Updates specified for empty output. updates shape: \" + t.shape);\n    }\n    Vo(n, e, t);\n}\nfunction Go(t, e, n) {\n    for(var r = e.shape.length, o = r > 1 ? e.shape[r - 1] : 1, a = n.length, i = 1, s = o; s < a; ++s)i *= n[s];\n    var u = o < 1 ? 1 : o;\n    return {\n        sliceRank: o,\n        numUpdates: k(e.shape) / u,\n        sliceSize: i,\n        strides: $(n.slice(0, o)).concat([\n            1\n        ]),\n        outputSize: k(n)\n    };\n}\nvar Ho = Object.freeze({\n    validateUpdateShape: Vo,\n    validateInput: zo,\n    calculateShapes: Go\n});\nfunction qo(t, e, n) {\n    C(t.rank === e.length, function() {\n        return \"Error in slice\" + t.rank + \"D: Length of begin \" + e + \" must match the rank of the array (\" + t.rank + \").\";\n    }), C(t.rank === n.length, function() {\n        return \"Error in slice\" + t.rank + \"D: Length of size \" + n + \" must match the rank of the array (\" + t.rank + \").\";\n    });\n    for(var r = function(r) {\n        C(e[r] + n[r] <= t.shape[r], function() {\n            return \"Error in slice\" + t.rank + \"D: begin[\" + r + \"] + size[\" + r + \"] (\" + (e[r] + n[r]) + \") would overflow input.shape[\" + r + \"] (\" + t.shape[r] + \")\";\n        });\n    }, o = 0; o < t.rank; ++o)r(o);\n}\nfunction Ko(t) {\n    for(var e = [], n = 0; t > 0;)1 & t && e.push(n), t /= 2, n++;\n    return e;\n}\nfunction jo(t, e, n) {\n    for(var r = [], o = 0; o < t.length; o++)r[o] = Math.ceil((e[o] - t[o]) / n[o]);\n    return r;\n}\nfunction Xo(t, e, n, r, o) {\n    var a = e[o], i = n[o] || 1;\n    (t & 1 << o || null == a) && (a = i > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);\n    var s = r[o];\n    return a < 0 && (a += s), a = x(0, a, s - 1);\n}\nfunction Yo(t, e, n, r, o) {\n    var a = e[o], i = n[o] || 1;\n    (t & 1 << o || null == a) && (a = i > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);\n    var s = r[o];\n    return a < 0 && (a += s), a = i > 0 ? x(0, a, s) : x(-1, a, s - 1);\n}\nfunction $o(t, e, n) {\n    for(var r = n.length, o = 0; o < n.length; o++)if (n[o] > 1) {\n        r = o;\n        break;\n    }\n    for(o = r + 1; o < n.length; o++)if (e[o] > 0 || n[o] !== t[o]) return !1;\n    return !0;\n}\nfunction Qo(t, e) {\n    for(var n = t.length > 0 ? t[t.length - 1] : 1, r = 0; r < t.length - 1; r++)n += t[r] * e[r];\n    return n;\n}\nvar Jo = Object.freeze({\n    assertParamsValid: qo,\n    maskToAxes: Ko,\n    computeOutShape: jo,\n    startForAxis: Xo,\n    stopForAxis: Yo,\n    isSliceContinous: $o,\n    computeFlatOffset: Qo\n});\nfunction Zo(t) {\n    return C(X(t), function() {\n        return \"The f passed in grad(f) must be a function\";\n    }), function(e, n) {\n        var r = gn(e, \"x\", \"tf.grad\", null), o = null != n ? gn(n, \"dy\", \"tf.grad\") : null;\n        return Lt.tidy(function() {\n            var e = Lt.gradients(function() {\n                return t(r);\n            }, [\n                r\n            ], o), n = e.value, a = e.grads;\n            return null != o && E(n.shape, o.shape, \"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)\"), aa(a), a[0];\n        });\n    };\n}\nfunction ta(t) {\n    return C(X(t), function() {\n        return \"The f passed in grads(f) must be a function\";\n    }), function(e, n) {\n        C(Array.isArray(e), function() {\n            return \"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s\";\n        });\n        var r = mn(e, \"args\", \"tf.grads\", null), o = null != n ? gn(n, \"dy\", \"tf.grads\") : null;\n        return Lt.tidy(function() {\n            var e = Lt.gradients(function() {\n                return t.apply(void 0, r);\n            }, r, o), n = e.value, a = e.grads;\n            return null != o && E(n.shape, o.shape, \"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"), aa(a), a;\n        });\n    };\n}\nfunction ea(t) {\n    return C(X(t), function() {\n        return \"The f passed in valueAndGrad(f) must be a function\";\n    }), function(e, n) {\n        C(e instanceof wt, function() {\n            return \"The x passed in valueAndGrad(f)(x) must be a tensor\";\n        }), C(null == n || n instanceof wt, function() {\n            return \"The dy passed in valueAndGrad(f)(x, dy) must be a tensor\";\n        });\n        var r = Lt.gradients(function() {\n            return t(e);\n        }, [\n            e\n        ], n), o = r.grads, a = r.value;\n        return aa(o), {\n            grad: o[0],\n            value: a\n        };\n    };\n}\nfunction na(t) {\n    return C(X(t), function() {\n        return \"The f passed in valueAndGrads(f) must be a function\";\n    }), function(e, n) {\n        C(Array.isArray(e) && e.every(function(t) {\n            return t instanceof wt;\n        }), function() {\n            return \"The args passed in valueAndGrads(f)(args) must be array of tensors\";\n        }), C(null == n || n instanceof wt, function() {\n            return \"The dy passed in valueAndGrads(f)(args, dy) must be a tensor\";\n        });\n        var r = Lt.gradients(function() {\n            return t.apply(void 0, e);\n        }, e, n);\n        return null != n && E(r.value.shape, n.shape, \"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"), aa(r.grads), r;\n    };\n}\nfunction ra(t, e) {\n    C(X(t), function() {\n        return \"The f passed in variableGrads(f) must be a function\";\n    }), C(null == e || Array.isArray(e) && e.every(function(t) {\n        return t instanceof St;\n    }), function() {\n        return \"The varList passed in variableGrads(f, varList) must be an array of variables\";\n    });\n    var n = null != e;\n    if (!n) for(var r in e = [], Lt.registeredVariables)e.push(Lt.registeredVariables[r]);\n    var o = n ? e.filter(function(t) {\n        return !t.trainable;\n    }) : null, a = e.length;\n    C((e = e.filter(function(t) {\n        return t.trainable;\n    })).length > 0, function() {\n        return \"variableGrads() expects at least one of the input variables to be trainable, but none of the \" + a + \" variables is trainable.\";\n    });\n    var i = Lt.gradients(t, e, null, !0), s = i.value, u = i.grads;\n    C(u.some(function(t) {\n        return null != t;\n    }), function() {\n        return \"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().\";\n    }), C(0 === s.rank, function() {\n        return \"The f passed in variableGrads(f) must return a scalar, but it returned a rank-\" + s.rank + \" tensor\";\n    });\n    var c = {};\n    return e.forEach(function(t, e) {\n        null != u[e] && (c[t.name] = u[e]);\n    }), null != o && o.forEach(function(t) {\n        return c[t.name] = null;\n    }), {\n        value: s,\n        grads: c\n    };\n}\nfunction oa(t) {\n    return Lt.customGrad(t);\n}\nfunction aa(t) {\n    if (t.filter(function(t) {\n        return null == t;\n    }).length > 0) throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\");\n}\nvar ia = An({\n    softmax_: function(t, e) {\n        void 0 === e && (e = -1);\n        var n = gn(t, \"logits\", \"softmax\", \"float32\");\n        if (-1 === e && (e = n.rank - 1), e !== n.rank - 1) throw Error(\"Softmax along a non-last dimension is not yet supported. Logits was rank \" + n.rank + \" and dim was \" + e);\n        return Lt.runKernelFunc(function(t, r) {\n            var o = t.softmax(n, e);\n            return r([\n                o\n            ]), o;\n        }, {\n            logits: n\n        }, function(t, n) {\n            var r = n[0], o = t.mul(r);\n            return {\n                logits: function() {\n                    return o.sub(o.sum([\n                        e\n                    ], !0).mul(r));\n                }\n            };\n        }, \"Softmax\", {\n            dim: e\n        }, [], [\n            !0\n        ]);\n    }\n}), sa = An({\n    logSoftmax_: function(t, e) {\n        void 0 === e && (e = -1);\n        var n = gn(t, \"logits\", \"logSoftmax\");\n        if (-1 === e && (e = n.rank - 1), e !== n.rank - 1) throw Error(\"Log Softmax along a non-last dimension is not yet supported. Logits was rank \" + n.rank + \" and axis was \" + e);\n        return oa(function(t, n) {\n            var r = t.max(e, !0), o = t.sub(r), a = o.toFloat().sub(o.exp().sum(e, !0).log());\n            n([\n                a\n            ]);\n            return {\n                value: a,\n                gradFunc: function(t, n) {\n                    var r = n[0].exp();\n                    return t.sub(t.sum(e, !0).mul(r));\n                }\n            };\n        })(n);\n    }\n});\nvar ua = An({\n    transpose_: function(t, e) {\n        var n = gn(t, \"x\", \"transpose\");\n        if (null == e && (e = n.shape.map(function(t, e) {\n            return e;\n        }).reverse()), C(n.rank === e.length, function() {\n            return \"Error in transpose: rank of input \" + n.rank + \" must match length of perm \" + e + \".\";\n        }), e.forEach(function(t) {\n            C(t >= 0 && t < n.rank, function() {\n                return \"All entries in 'perm' must be between 0 and \" + (n.rank - 1) + \" but got \" + e;\n            });\n        }), n.rank <= 1) return n.clone();\n        var r = {\n            perm: e\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.transpose(n, e);\n        }, {\n            x: n\n        }, null, \"Transpose\", r);\n    }\n}), ca = function() {\n    function t(t, e) {\n        this.backend = t, this.dataMover = e, this.data = new WeakMap, this.dataIdsCount = 0;\n    }\n    return t.prototype.get = function(t) {\n        return this.data.has(t) || this.dataMover.moveData(this.backend, t), this.data.get(t);\n    }, t.prototype.set = function(t, e) {\n        this.dataIdsCount++, this.data.set(t, e);\n    }, t.prototype.has = function(t) {\n        return this.data.has(t);\n    }, t.prototype.delete = function(t) {\n        return this.dataIdsCount--, this.data.delete(t);\n    }, t.prototype.numDataIds = function() {\n        return this.dataIdsCount;\n    }, t;\n}(), la = function() {\n    function t() {}\n    return t.prototype.time = function(t) {\n        return ha(\"time\");\n    }, t.prototype.read = function(t) {\n        return ha(\"read\");\n    }, t.prototype.readSync = function(t) {\n        return ha(\"readSync\");\n    }, t.prototype.numDataIds = function() {\n        return ha(\"numDataIds\");\n    }, t.prototype.disposeData = function(t) {\n        return ha(\"disposeData\");\n    }, t.prototype.write = function(t, e, n) {\n        return ha(\"write\");\n    }, t.prototype.move = function(t, e, n, r) {\n        return ha(\"move\");\n    }, t.prototype.memory = function() {\n        return ha(\"memory\");\n    }, t.prototype.floatPrecision = function() {\n        return ha(\"floatPrecision\");\n    }, t.prototype.epsilon = function() {\n        return 32 === this.floatPrecision() ? 1e-7 : 1e-4;\n    }, t.prototype.batchMatMul = function(t, e, n, r) {\n        return ha(\"batchMatMul\");\n    }, t.prototype.fusedBatchMatMul = function(t) {\n        t.a, t.b, t.transposeA, t.transposeB, t.bias, t.activation, t.preluActivationWeights;\n        return ha(\"fusedBatchMatMul\");\n    }, t.prototype.slice = function(t, e, n) {\n        return ha(\"slice\");\n    }, t.prototype.stridedSlice = function(t, e, n, r) {\n        return ha(\"stridedSlice\");\n    }, t.prototype.unstack = function(t, e) {\n        return ha(\"unstack\");\n    }, t.prototype.reverse = function(t, e) {\n        return ha(\"reverse\");\n    }, t.prototype.concat = function(t, e) {\n        return ha(\"concat\");\n    }, t.prototype.neg = function(t) {\n        return ha(\"neg\");\n    }, t.prototype.add = function(t, e) {\n        return ha(\"add\");\n    }, t.prototype.addN = function(t) {\n        return ha(\"addN\");\n    }, t.prototype.subtract = function(t, e) {\n        return ha(\"subtract\");\n    }, t.prototype.multiply = function(t, e) {\n        return ha(\"multiply\");\n    }, t.prototype.realDivide = function(t, e) {\n        return ha(\"realDivide\");\n    }, t.prototype.floorDiv = function(t, e) {\n        return ha(\"floorDiv\");\n    }, t.prototype.sum = function(t, e) {\n        return ha(\"sum\");\n    }, t.prototype.prod = function(t, e) {\n        return ha(\"prod\");\n    }, t.prototype.unsortedSegmentSum = function(t, e, n) {\n        return ha(\"unsortedSegmentSum\");\n    }, t.prototype.argMin = function(t, e) {\n        return ha(\"argMin\");\n    }, t.prototype.argMax = function(t, e) {\n        return ha(\"argMax\");\n    }, t.prototype.equal = function(t, e) {\n        return ha(\"equal\");\n    }, t.prototype.notEqual = function(t, e) {\n        return ha(\"notEqual\");\n    }, t.prototype.less = function(t, e) {\n        return ha(\"less\");\n    }, t.prototype.lessEqual = function(t, e) {\n        return ha(\"lessEqual\");\n    }, t.prototype.greater = function(t, e) {\n        return ha(\"greater\");\n    }, t.prototype.greaterEqual = function(t, e) {\n        return ha(\"greaterEqual\");\n    }, t.prototype.logicalNot = function(t) {\n        return ha(\"logicalNot\");\n    }, t.prototype.logicalAnd = function(t, e) {\n        return ha(\"logicalAnd\");\n    }, t.prototype.logicalOr = function(t, e) {\n        return ha(\"logicalOr\");\n    }, t.prototype.where = function(t) {\n        return ha(\"where\");\n    }, t.prototype.select = function(t, e, n) {\n        return ha(\"select\");\n    }, t.prototype.topk = function(t, e, n) {\n        return ha(\"topk\");\n    }, t.prototype.min = function(t, e) {\n        return ha(\"min\");\n    }, t.prototype.minimum = function(t, e) {\n        return ha(\"minimum\");\n    }, t.prototype.mod = function(t, e) {\n        return ha(\"mod\");\n    }, t.prototype.max = function(t, e) {\n        return ha(\"max\");\n    }, t.prototype.maximum = function(t, e) {\n        return ha(\"maximum\");\n    }, t.prototype.all = function(t, e) {\n        return ha(\"all\");\n    }, t.prototype.any = function(t, e) {\n        return ha(\"any\");\n    }, t.prototype.squaredDifference = function(t, e) {\n        return ha(\"squaredDifference\");\n    }, t.prototype.ceil = function(t) {\n        return ha(\"ceil\");\n    }, t.prototype.floor = function(t) {\n        return ha(\"floor\");\n    }, t.prototype.round = function(t) {\n        return ha(\"round\");\n    }, t.prototype.sign = function(t) {\n        return ha(\"sign\");\n    }, t.prototype.isNaN = function(t) {\n        return ha(\"isNaN\");\n    }, t.prototype.isInf = function(t) {\n        return ha(\"isInf\");\n    }, t.prototype.isFinite = function(t) {\n        return ha(\"isFinite\");\n    }, t.prototype.pow = function(t, e) {\n        return ha(\"pow\");\n    }, t.prototype.exp = function(t) {\n        return ha(\"exp\");\n    }, t.prototype.expm1 = function(t) {\n        return ha(\"expm1\");\n    }, t.prototype.softmax = function(t, e) {\n        return ha(\"softmax\");\n    }, t.prototype.log = function(t) {\n        return ha(\"log\");\n    }, t.prototype.log1p = function(t) {\n        return ha(\"log1p\");\n    }, t.prototype.sqrt = function(t) {\n        return ha(\"sqrt\");\n    }, t.prototype.rsqrt = function(t) {\n        return ha(\"rsqrt\");\n    }, t.prototype.square = function(t) {\n        return ha(\"square\");\n    }, t.prototype.reciprocal = function(t) {\n        return ha(\"reciprocal\");\n    }, t.prototype.relu = function(t) {\n        return ha(\"relu\");\n    }, t.prototype.relu6 = function(t) {\n        return ha(\"relu6\");\n    }, t.prototype.prelu = function(t, e) {\n        return ha(\"prelu\");\n    }, t.prototype.elu = function(t) {\n        return ha(\"elu\");\n    }, t.prototype.eluDer = function(t, e) {\n        return ha(\"eluDer\");\n    }, t.prototype.selu = function(t) {\n        return ha(\"selu\");\n    }, t.prototype.int = function(t) {\n        return ha(\"int\");\n    }, t.prototype.clip = function(t, e, n) {\n        return ha(\"clip\");\n    }, t.prototype.abs = function(t) {\n        return ha(\"abs\");\n    }, t.prototype.complexAbs = function(t) {\n        return ha(\"complexAbs\");\n    }, t.prototype.sigmoid = function(t) {\n        return ha(\"sigmoid\");\n    }, t.prototype.softplus = function(t) {\n        return ha(\"softplus\");\n    }, t.prototype.sin = function(t) {\n        return ha(\"sin\");\n    }, t.prototype.cos = function(t) {\n        return ha(\"cos\");\n    }, t.prototype.tan = function(t) {\n        return ha(\"tan\");\n    }, t.prototype.asin = function(t) {\n        return ha(\"asin\");\n    }, t.prototype.acos = function(t) {\n        return ha(\"acos\");\n    }, t.prototype.atan = function(t) {\n        return ha(\"atan\");\n    }, t.prototype.atan2 = function(t, e) {\n        return ha(\"atan2\");\n    }, t.prototype.sinh = function(t) {\n        return ha(\"sinh\");\n    }, t.prototype.cosh = function(t) {\n        return ha(\"cosh\");\n    }, t.prototype.tanh = function(t) {\n        return ha(\"tanh\");\n    }, t.prototype.asinh = function(t) {\n        return ha(\"asinh\");\n    }, t.prototype.acosh = function(t) {\n        return ha(\"acosh\");\n    }, t.prototype.atanh = function(t) {\n        return ha(\"atanh\");\n    }, t.prototype.erf = function(t) {\n        return ha(\"erf\");\n    }, t.prototype.step = function(t, e) {\n        return ha(\"step\");\n    }, t.prototype.fusedConv2d = function(t) {\n        t.input, t.filter, t.convInfo, t.bias, t.activation, t.preluActivationWeights;\n        return ha(\"fusedConv2d\");\n    }, t.prototype.conv2d = function(t, e, n) {\n        return ha(\"conv2d\");\n    }, t.prototype.conv2dDerInput = function(t, e, n) {\n        return ha(\"conv2dDerInput\");\n    }, t.prototype.conv2dDerFilter = function(t, e, n) {\n        return ha(\"conv2dDerFilter\");\n    }, t.prototype.fusedDepthwiseConv2D = function(t) {\n        t.input, t.filter, t.convInfo, t.bias, t.activation, t.preluActivationWeights;\n        return ha(\"fusedDepthwiseConv2D\");\n    }, t.prototype.depthwiseConv2D = function(t, e, n) {\n        return ha(\"depthwiseConv2D\");\n    }, t.prototype.depthwiseConv2DDerInput = function(t, e, n) {\n        return ha(\"depthwiseConv2DDerInput\");\n    }, t.prototype.depthwiseConv2DDerFilter = function(t, e, n) {\n        return ha(\"depthwiseConv2DDerFilter\");\n    }, t.prototype.conv3d = function(t, e, n) {\n        return ha(\"conv3d\");\n    }, t.prototype.conv3dDerInput = function(t, e, n) {\n        return ha(\"conv3dDerInput\");\n    }, t.prototype.conv3dDerFilter = function(t, e, n) {\n        return ha(\"conv3dDerFilter\");\n    }, t.prototype.maxPool = function(t, e) {\n        return ha(\"maxPool\");\n    }, t.prototype.maxPoolBackprop = function(t, e, n, r) {\n        return ha(\"maxPoolBackprop\");\n    }, t.prototype.avgPool = function(t, e) {\n        return ha(\"avgPool\");\n    }, t.prototype.avgPoolBackprop = function(t, e, n) {\n        return ha(\"avgPoolBackprop\");\n    }, t.prototype.avgPool3d = function(t, e) {\n        return ha(\"avgPool3d\");\n    }, t.prototype.avgPool3dBackprop = function(t, e, n) {\n        return ha(\"avgPool3dBackprop\");\n    }, t.prototype.maxPool3d = function(t, e) {\n        return ha(\"maxPool3d\");\n    }, t.prototype.maxPool3dBackprop = function(t, e, n, r) {\n        return ha(\"maxPool3dBackprop\");\n    }, t.prototype.reshape = function(t, e) {\n        return ha(\"reshape\");\n    }, t.prototype.cast = function(t, e) {\n        return ha(\"cast\");\n    }, t.prototype.tile = function(t, e) {\n        return ha(\"tile\");\n    }, t.prototype.pad = function(t, e, n) {\n        return ha(\"pad\");\n    }, t.prototype.transpose = function(t, e) {\n        return ha(\"transpose\");\n    }, t.prototype.gather = function(t, e, n) {\n        return ha(\"gather\");\n    }, t.prototype.gatherND = function(t, e) {\n        return ha(\"gatherND\");\n    }, t.prototype.scatterND = function(t, e, n) {\n        return ha(\"scatterND\");\n    }, t.prototype.batchToSpaceND = function(t, e, n) {\n        return ha(\"batchToSpaceND\");\n    }, t.prototype.spaceToBatchND = function(t, e, n) {\n        return ha(\"spaceToBatchND\");\n    }, t.prototype.resizeBilinear = function(t, e, n, r) {\n        return ha(\"resizeBilinear\");\n    }, t.prototype.resizeBilinearBackprop = function(t, e, n) {\n        return ha(\"resizeBilinearBackprop\");\n    }, t.prototype.resizeNearestNeighbor = function(t, e, n, r) {\n        return ha(\"resizeNearestNeighbor\");\n    }, t.prototype.resizeNearestNeighborBackprop = function(t, e, n) {\n        return ha(\"resizeNearestNeighborBackprop\");\n    }, t.prototype.batchNormalization = function(t, e, n, r, o, a) {\n        return ha(\"batchNormalization\");\n    }, t.prototype.localResponseNormalization4D = function(t, e, n, r, o) {\n        return ha(\"localResponseNormalization4D\");\n    }, t.prototype.LRNGrad = function(t, e, n, r, o, a, i) {\n        return ha(\"LRNGrad\");\n    }, t.prototype.multinomial = function(t, e, n, r) {\n        return ha(\"multinomial\");\n    }, t.prototype.oneHot = function(t, e, n, r) {\n        return ha(\"oneHot\");\n    }, t.prototype.cumsum = function(t, e, n, r) {\n        return ha(\"cumsum\");\n    }, t.prototype.nonMaxSuppression = function(t, e, n, r, o) {\n        return ha(\"nonMaxSuppression\");\n    }, t.prototype.fft = function(t) {\n        return ha(\"fft\");\n    }, t.prototype.ifft = function(t) {\n        return ha(\"ifft\");\n    }, t.prototype.complex = function(t, e) {\n        return ha(\"complex\");\n    }, t.prototype.real = function(t) {\n        return ha(\"real\");\n    }, t.prototype.imag = function(t) {\n        return ha(\"imag\");\n    }, t.prototype.cropAndResize = function(t, e, n, r, o, a) {\n        return ha(\"cropAndResize\");\n    }, t.prototype.depthToSpace = function(t, e, n) {\n        return ha(\"depthToSpace\");\n    }, t.prototype.split = function(t, e, n) {\n        return ha(\"split\");\n    }, t.prototype.sparseToDense = function(t, e, n, r) {\n        return ha(\"sparseToDense\");\n    }, t.prototype.diag = function(t) {\n        return ha(\"diag\");\n    }, t.prototype.fill = function(t, e, n) {\n        return ha(\"fill\");\n    }, t.prototype.onesLike = function(t) {\n        return ha(\"onesLike\");\n    }, t.prototype.zerosLike = function(t) {\n        return ha(\"zerosLike\");\n    }, t.prototype.linspace = function(t, e, n) {\n        return ha(\"linspace\");\n    }, t.prototype.dispose = function() {\n        return ha(\"dispose\");\n    }, t;\n}();\nfunction ha(t) {\n    throw new Error(\"'\" + t + \"' not yet implemented or not found in the registry. Did you forget to import the kernel?\");\n}\nfunction fa(t, e, n, r, o, a, i) {\n    void 0 === i && (i = \"channelsLast\");\n    var s, u = ma(e), c = u[0], l = u[1];\n    if (\"channelsLast\" === i) s = [\n        c,\n        l,\n        t[3],\n        t[3]\n    ];\n    else {\n        if (\"channelsFirst\" !== i) throw new Error(\"Unknown dataFormat \" + i);\n        s = [\n            c,\n            l,\n            t[1],\n            t[1]\n        ];\n    }\n    return pa(t, s, n, r, o, a, !1, i);\n}\nfunction da(t, e, n, r, o, a, i) {\n    void 0 === i && (i = \"NDHWC\");\n    var s, u, c = ya(e), l = c[0], h = c[1], f = c[2];\n    if (\"NDHWC\" === i) u = \"channelsLast\", s = [\n        l,\n        h,\n        f,\n        t[4],\n        t[4]\n    ];\n    else {\n        if (\"NCDHW\" !== i) throw new Error(\"Unknown dataFormat \" + i);\n        u = \"channelsFirst\", s = [\n            l,\n            h,\n            f,\n            t[1],\n            t[1]\n        ];\n    }\n    return va(t, s, n, r, o, !1, u, a);\n}\nfunction pa(t, e, n, r, o, a, i, s) {\n    void 0 === i && (i = !1), void 0 === s && (s = \"channelsLast\");\n    var u = [\n        -1,\n        -1,\n        -1,\n        -1\n    ], c = u[0], l = u[1], h = u[2], f = u[3];\n    if (\"channelsLast\" === s) c = t[0], l = t[1], h = t[2], f = t[3];\n    else {\n        if (\"channelsFirst\" !== s) throw new Error(\"Unknown dataFormat \" + s);\n        c = t[0], f = t[1], l = t[2], h = t[3];\n    }\n    var d, p = e[0], v = e[1], g = e[3], m = ma(n), y = m[0], x = m[1], b = ma(r), w = b[0], E = b[1], R = xa(p, w), I = xa(v, E), k = function(t, e, n, r, o, a, i, s) {\n        var u, c, l;\n        if (\"number\" == typeof t) {\n            u = {\n                top: t,\n                bottom: t,\n                left: t,\n                right: t,\n                type: 0 === t ? \"VALID\" : \"NUMBER\"\n            };\n            var h = function(t, e, n, r, o) {\n                null == r && (r = ga(t, e, n));\n                var a = t[0], i = t[1], s = ba((a - e + 2 * r) / n + 1, o);\n                C(A(s), function() {\n                    return \"The output # of rows (\" + s + \") must be an integer. Change the stride and/or zero pad parameters\";\n                });\n                var u = ba((i - e + 2 * r) / n + 1, o);\n                return C(A(u), function() {\n                    return \"The output # of columns (\" + u + \") must be an integer. Change the stride and/or zero pad parameters\";\n                }), [\n                    s,\n                    u\n                ];\n            }([\n                e,\n                n\n            ], a, r, t, s);\n            c = h[0], l = h[1];\n        } else if (\"same\" === t) {\n            c = Math.ceil(e / r), l = Math.ceil(n / o);\n            var f = Math.max(0, (c - 1) * r + a - e), d = Math.max(0, (l - 1) * o + i - n), p = Math.floor(f / 2), v = f - p, g = Math.floor(d / 2);\n            u = {\n                top: p,\n                bottom: v,\n                left: g,\n                right: d - g,\n                type: \"SAME\"\n            };\n        } else {\n            if (\"valid\" !== t) throw Error(\"Unknown padding parameter: \" + t);\n            u = {\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                type: \"VALID\"\n            }, c = Math.ceil((e - a + 1) / r), l = Math.ceil((n - i + 1) / o);\n        }\n        return {\n            padInfo: u,\n            outHeight: c,\n            outWidth: l\n        };\n    }(o, l, h, y, x, R, I, a), S = k.padInfo, T = k.outHeight, D = k.outWidth, N = i ? g * f : g;\n    return \"channelsFirst\" === s ? d = [\n        c,\n        N,\n        T,\n        D\n    ] : \"channelsLast\" === s && (d = [\n        c,\n        T,\n        D,\n        N\n    ]), {\n        batchSize: c,\n        dataFormat: s,\n        inHeight: l,\n        inWidth: h,\n        inChannels: f,\n        outHeight: T,\n        outWidth: D,\n        outChannels: N,\n        padInfo: S,\n        strideHeight: y,\n        strideWidth: x,\n        filterHeight: p,\n        filterWidth: v,\n        effectiveFilterHeight: R,\n        effectiveFilterWidth: I,\n        dilationHeight: w,\n        dilationWidth: E,\n        inShape: t,\n        outShape: d,\n        filterShape: e\n    };\n}\nfunction va(t, e, n, r, o, a, i, s) {\n    void 0 === a && (a = !1), void 0 === i && (i = \"channelsLast\");\n    var u = [\n        -1,\n        -1,\n        -1,\n        -1,\n        -1\n    ], c = u[0], l = u[1], h = u[2], f = u[3], d = u[4];\n    if (\"channelsLast\" === i) c = t[0], l = t[1], h = t[2], f = t[3], d = t[4];\n    else {\n        if (\"channelsFirst\" !== i) throw new Error(\"Unknown dataFormat \" + i);\n        c = t[0], d = t[1], l = t[2], h = t[3], f = t[4];\n    }\n    var p, v = e[0], g = e[1], m = e[2], y = e[4], x = ya(n), b = x[0], w = x[1], E = x[2], R = ya(r), I = R[0], k = R[1], S = R[2], T = xa(v, I), D = xa(g, k), N = xa(m, S), F = function(t, e, n, r, o, a, i, s, u, c, l) {\n        var h, f, d, p;\n        if (\"number\" == typeof t) {\n            h = {\n                top: t,\n                bottom: t,\n                left: t,\n                right: t,\n                front: t,\n                back: t,\n                type: 0 === t ? \"VALID\" : \"NUMBER\"\n            };\n            var v = function(t, e, n, r, o, a) {\n                null == o && (o = ga(t, e, r));\n                var i = t[0], s = t[1], u = t[2], c = ba((i - e + 2 * o) / r + 1, a);\n                C(A(c), function() {\n                    return \"The output # of depths (\" + c + \") must be an integer. Change the stride and/or zero pad parameters\";\n                });\n                var l = ba((s - e + 2 * o) / r + 1, a);\n                C(A(l), function() {\n                    return \"The output # of rows (\" + l + \") must be an integer. Change the stride and/or zero pad parameters\";\n                });\n                var h = ba((u - e + 2 * o) / r + 1, a);\n                return C(A(h), function() {\n                    return \"The output # of columns (\" + h + \") must be an integer. Change the stride and/or zero pad parameters\";\n                }), [\n                    c,\n                    l,\n                    h,\n                    n\n                ];\n            }([\n                e,\n                n,\n                r,\n                1\n            ], s, 1, o, t, l);\n            f = v[0], d = v[1], p = v[2];\n        } else if (\"same\" === t) {\n            f = Math.ceil(e / o), d = Math.ceil(n / a), p = Math.ceil(r / i);\n            var g = (f - 1) * o + s - e, m = (d - 1) * a + u - n, y = (p - 1) * i + c - r, x = Math.floor(g / 2), b = g - x, w = Math.floor(m / 2), E = m - w, R = Math.floor(y / 2);\n            h = {\n                top: w,\n                bottom: E,\n                left: R,\n                right: y - R,\n                front: x,\n                back: b,\n                type: \"SAME\"\n            };\n        } else {\n            if (\"valid\" !== t) throw Error(\"Unknown padding parameter: \" + t);\n            h = {\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n                front: 0,\n                back: 0,\n                type: \"VALID\"\n            }, f = Math.ceil((e - s + 1) / o), d = Math.ceil((n - u + 1) / a), p = Math.ceil((r - c + 1) / i);\n        }\n        return {\n            padInfo: h,\n            outDepth: f,\n            outHeight: d,\n            outWidth: p\n        };\n    }(o, l, h, f, b, w, E, T, D, N, s), _ = F.padInfo, O = F.outDepth, M = F.outHeight, B = F.outWidth, P = a ? y * d : y;\n    return \"channelsFirst\" === i ? p = [\n        c,\n        P,\n        O,\n        M,\n        B\n    ] : \"channelsLast\" === i && (p = [\n        c,\n        O,\n        M,\n        B,\n        P\n    ]), {\n        batchSize: c,\n        dataFormat: i,\n        inDepth: l,\n        inHeight: h,\n        inWidth: f,\n        inChannels: d,\n        outDepth: O,\n        outHeight: M,\n        outWidth: B,\n        outChannels: P,\n        padInfo: _,\n        strideDepth: b,\n        strideHeight: w,\n        strideWidth: E,\n        filterDepth: v,\n        filterHeight: g,\n        filterWidth: m,\n        effectiveFilterDepth: T,\n        effectiveFilterHeight: D,\n        effectiveFilterWidth: N,\n        dilationDepth: I,\n        dilationHeight: k,\n        dilationWidth: S,\n        inShape: t,\n        outShape: p,\n        filterShape: e\n    };\n}\nfunction ga(t, e, n, r) {\n    void 0 === r && (r = 1);\n    var o = xa(e, r);\n    return Math.floor((t[0] * (n - 1) - n + o) / 2);\n}\nfunction ma(t) {\n    return \"number\" == typeof t ? [\n        t,\n        t,\n        t\n    ] : 2 === t.length ? [\n        t[0],\n        t[1],\n        1\n    ] : t;\n}\nfunction ya(t) {\n    return \"number\" == typeof t ? [\n        t,\n        t,\n        t\n    ] : t;\n}\nfunction xa(t, e) {\n    return e <= 1 ? t : t + (t - 1) * (e - 1);\n}\nfunction ba(t, e) {\n    if (!e) return t;\n    switch(e){\n        case \"round\":\n            return Math.round(t);\n        case \"ceil\":\n            return Math.ceil(t);\n        case \"floor\":\n            return Math.floor(t);\n        default:\n            throw new Error(\"Unknown roundingMode \" + e);\n    }\n}\nfunction wa(t) {\n    var e = ma(t), n = e[0], r = e[1], o = e[2];\n    return 1 === n && 1 === r && 1 === o;\n}\nfunction Ca(t, e) {\n    return wa(t) || wa(e);\n}\nfunction Ea(t) {\n    if (\"NHWC\" === t) return \"channelsLast\";\n    if (\"NCHW\" === t) return \"channelsFirst\";\n    throw new Error(\"Unknown dataFormat \" + t);\n}\nfunction Ra(t, e, n) {\n    if (\"complex64\" === e) {\n        if (\"complex64\" === t.dtype) return t.clone();\n        var r = Gn(t.shape), o = t.toFloat(), a = n.complex(o, r);\n        return r.dispose(), o.dispose(), a;\n    }\n    if (!U(t.dtype, e)) return Lt.makeTensorFromDataId(t.dataId, t.shape, e);\n    if (\"complex64\" === t.dtype) {\n        var i = n.real(t);\n        a = i.cast(e);\n        return i.dispose(), a;\n    }\n    if (\"int32\" === e) return n.int(t);\n    if (\"bool\" === e) {\n        var s = On(0, t.dtype);\n        a = n.notEqual(t, s);\n        return s.dispose(), a;\n    }\n    throw new Error(\"Error in Cast: failed to cast \" + t.dtype + \" to \" + e);\n}\nfunction Ia(t, e) {\n    return Lt.makeTensorFromDataId(t.dataId, e, t.dtype);\n}\nfunction ka(t, e, n) {\n    var r = (e - t) / (n - 1), o = tt(n, \"float32\");\n    o[0] = t;\n    for(var a = 1; a < o.length; a++)o[a] = o[a - 1] + r;\n    return Mn(o, \"float32\");\n}\nvar Sa = Object.freeze({\n    castTensor: Ra,\n    reshapeTensor: Ia,\n    linspaceImpl: ka,\n    upcastType: Tt,\n    axesAreInnerMostDims: yn,\n    combineLocations: xn,\n    computeOutAndReduceShapes: bn,\n    expandShapeToKeepDim: wn,\n    assertAxesAreInnerMostDims: Cn,\n    getAxesPermutation: En,\n    getUndoAxesPermutation: Rn,\n    getInnerMostAxes: In,\n    getBroadcastDims: Mr,\n    getReductionAxes: Br,\n    assertAndGetBroadcastShape: Pr,\n    assertParamsConsistent: kn,\n    computeOutShape: Sn,\n    computePool2DInfo: fa,\n    computePool3DInfo: da,\n    computeConv2DInfo: pa,\n    computeConv3DInfo: va,\n    computeDefaultPad: ga,\n    tupleValuesAreOne: wa,\n    eitherStridesOrDilationsAreOne: Ca,\n    convertConv2DDataFormat: Ea,\n    PARALLELIZE_THRESHOLD: Wo,\n    computeOptimalWindowSize: Uo\n});\nfunction Aa(t, e) {\n    if (t.length !== e.length) throw new Error(\"Cannot merge real and imag arrays of different lengths. real:\" + t.length + \", imag: \" + e.length + \".\");\n    for(var n = new Float32Array(2 * t.length), r = 0; r < n.length; r += 2)n[r] = t[r / 2], n[r + 1] = e[r / 2];\n    return n;\n}\nfunction Ta(t, e) {\n    return {\n        real: t[2 * e],\n        imag: t[2 * e + 1]\n    };\n}\nfunction Da(t, e, n, r) {\n    t[2 * r] = e, t[2 * r + 1] = n;\n}\nfunction Na(t, e, n) {\n    var r = (n ? 2 : -2) * Math.PI * (t / e);\n    return {\n        real: Math.cos(r),\n        imag: Math.sin(r)\n    };\n}\nfunction Fa(t, e, n) {\n    var r = function(t, e, n) {\n        return function(t, e, n) {\n            var r = 0, o = t.length, a = 0, i = !1;\n            for(; r < o;){\n                var s = n(e, t[a = r + (o - r >>> 1)]);\n                s > 0 ? r = a + 1 : (o = a, i = !s);\n            }\n            return i ? r : -r - 1;\n        }(t, e, n || _a);\n    }(t, e, n), o = r < 0 ? -(r + 1) : r;\n    t.splice(o, 0, e);\n}\nfunction _a(t, e) {\n    return t > e ? 1 : t < e ? -1 : 0;\n}\nfunction Oa(t, e, n, r, o) {\n    return Ba(t, e, n, r, o, 0).selectedIndices;\n}\nfunction Ma(t, e, n, r, o, a) {\n    var i = Ba(t, e, n, r, o, a, !0);\n    return i.numValidOutputs.dispose(), {\n        selectedIndices: i.selectedIndices,\n        selectedScores: i.selectedScores\n    };\n}\nfunction Ba(t, e, n, r, o, a, i, s) {\n    void 0 === i && (i = !1), void 0 === s && (s = !1);\n    for(var u = Array.from(e).map(function(t, e) {\n        return {\n            score: t,\n            boxIndex: e,\n            suppressBeginIndex: 0\n        };\n    }).filter(function(t) {\n        return t.score > o;\n    }).sort(Wa), c = a > 0 ? -.5 / a : 0, l = [], h = []; l.length < n && u.length > 0;){\n        var f = u.pop(), d = f.score, p = f.boxIndex, v = f.suppressBeginIndex;\n        if (d < o) break;\n        for(var g = !1, m = l.length - 1; m >= v; --m){\n            var y = Pa(t, p, l[m]);\n            if (y >= r) {\n                g = !0;\n                break;\n            }\n            if (f.score = f.score * La(r, c, y), f.score <= o) break;\n        }\n        f.suppressBeginIndex = l.length, g || (f.score === d ? (l.push(p), h.push(f.score)) : f.score > o && Fa(u, f, Wa));\n    }\n    var x = l.length;\n    return s && (l.fill(0, x), h.fill(0, x)), {\n        selectedIndices: Mn(l, \"int32\"),\n        selectedScores: Mn(h, \"float32\"),\n        numValidOutputs: On(x, \"int32\")\n    };\n}\nfunction Pa(t, e, n) {\n    var r = t.subarray(4 * e, 4 * e + 4), o = t.subarray(4 * n, 4 * n + 4), a = Math.min(r[0], r[2]), i = Math.min(r[1], r[3]), s = Math.max(r[0], r[2]), u = Math.max(r[1], r[3]), c = Math.min(o[0], o[2]), l = Math.min(o[1], o[3]), h = Math.max(o[0], o[2]), f = Math.max(o[1], o[3]), d = (s - a) * (u - i), p = (h - c) * (f - l);\n    if (d <= 0 || p <= 0) return 0;\n    var v = Math.max(a, c), g = Math.max(i, l), m = Math.min(s, h), y = Math.min(u, f), x = Math.max(m - v, 0) * Math.max(y - g, 0);\n    return x / (d + p - x);\n}\nfunction La(t, e, n) {\n    var r = Math.exp(e * n * n);\n    return n <= t ? r : 0;\n}\nfunction Wa(t, e) {\n    return t.score - e.score || t.score === e.score && e.boxIndex - t.boxIndex;\n}\nfunction Ua(t, e, n) {\n    var r = new Array(t.rank).fill(0), o = t.shape.slice();\n    return e.map(function(e) {\n        o[n] = e;\n        var a = t.slice(r, o);\n        return r[n] += e, a;\n    });\n}\nfunction Va(t, e) {\n    for(var n = new Array(t.rank), r = 0; r < n.length; r++)n[r] = t.shape[r] * e[r];\n    var o = er(n, t.dtype);\n    for(r = 0; r < o.values.length; ++r){\n        for(var a = o.indexToLoc(r), i = new Array(t.rank), s = 0; s < i.length; s++)i[s] = a[s] % t.shape[s];\n        var u = t.locToIndex(i);\n        o.values[r] = t.values[u];\n    }\n    return o.toTensor();\n}\nfunction za(t, e, n, r, o) {\n    for(var a = e[e.length - 1], i = [\n        t.length / a,\n        a\n    ], s = i[0], u = i[1], c = B(n, s * r), l = B(\"int32\", s * r), h = 0; h < s; h++){\n        for(var f = h * u, d = t.subarray(f, f + u), p = [], v = 0; v < d.length; v++)p.push({\n            value: d[v],\n            index: v\n        });\n        p.sort(function(t, e) {\n            return e.value - t.value;\n        });\n        var g = h * r, m = c.subarray(g, g + r), y = l.subarray(g, g + r);\n        for(v = 0; v < r; v++)m[v] = p[v].value, y[v] = p[v].index;\n    }\n    var x = e.slice();\n    return x[x.length - 1] = r, [\n        Fn(c, x, n),\n        Fn(l, x, \"int32\")\n    ];\n}\nfunction Ga(t, e) {\n    for(var n = [], r = 0; r < e.length; r++)e[r] && n.push(r);\n    var o = er(t, \"int32\"), a = er([\n        n.length,\n        t.length\n    ], \"int32\");\n    for(r = 0; r < n.length; r++){\n        var i = o.indexToLoc(n[r]), s = r * t.length;\n        a.values.set(i, s);\n    }\n    return a.toTensor();\n}\nvar Ha = function(t, e) {\n    this.outputShape = [], this.outputShape = t, this.variableNames = e.map(function(t, e) {\n        return \"T\" + e;\n    });\n    var n = [];\n    this.variableNames.forEach(function(t) {\n        n.push(\"float v\" + t + \" = get\" + t + \"AtOutCoords();\");\n    });\n    var r = this.variableNames.map(function(t) {\n        return \"v\" + t;\n    }).join(\" + \");\n    this.userCode = \"\\n      void main() {\\n        \" + n.join(\"\\n        \") + \"\\n\\n        float result = \" + r + \";\\n        setOutput(result);\\n      }\\n    \";\n}, qa = function(t, e) {\n    this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.variableNames = e.map(function(t, e) {\n        return \"T\" + e;\n    });\n    var n = [];\n    this.variableNames.forEach(function(t) {\n        n.push(\"vec4 v\" + t + \" = get\" + t + \"AtOutCoords();\");\n    });\n    var r = this.variableNames.map(function(t) {\n        return \"v\" + t;\n    }).join(\" + \");\n    this.userCode = \"\\n      void main() {\\n        \" + n.join(\"\\n        \") + \"\\n\\n        vec4 result = \" + r + \";\\n        setOutput(result);\\n      }\\n    \";\n}, Ka = function(t, e, n) {\n    this.variableNames = [\n        \"A\"\n    ];\n    var r = t.windowSize, o = t.batchSize, a = t.inSize, i = Math.ceil(a / r);\n    n || this.variableNames.push(\"bestIndicesA\"), this.outputShape = [\n        o,\n        i\n    ];\n    var s = \"max\" === e ? \">\" : \"<\", u = n ? \"inOffset + i;\" : \"round(getBestIndicesA(batch, inOffset + i));\";\n    this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \" + r + \";\\n\\n        int bestIndex = inOffset;\\n        float bestValue = getA(batch, bestIndex);\\n\\n        for (int i = 0; i < \" + r + \"; i++) {\\n          int inIdx = \" + u + \";\\n          float candidate = getA(batch, inIdx);\\n          if (candidate \" + s + \" bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    \";\n};\nfunction ja(t, e) {\n    return [\n        \"x\",\n        \"y\",\n        \"z\",\n        \"w\",\n        \"u\",\n        \"v\"\n    ].slice(0, e).map(function(e) {\n        return t + \".\" + e;\n    });\n}\nfunction Xa(t, e) {\n    return 1 === e ? [\n        t\n    ] : ja(t, e);\n}\nfunction Ya() {\n    var t, e, n, r, o, a, s, u, c, l;\n    return 2 === i().getNumber(\"WEBGL_VERSION\") ? (t = \"#version 300 es\", e = \"in\", n = \"out\", r = \"in\", o = \"texture\", a = \"outputColor\", s = \"out vec4 outputColor;\", u = \"\\n      bool isnan_custom(float val) {\\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\\n      }\\n\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan_custom(val.x),\\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\\n      }\\n\\n      #define isnan(value) isnan_custom(value)\\n    \", c = \"\", l = \"\\n      #define round(value) newRound(value)\\n      int newRound(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 newRound(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \") : (t = \"\", e = \"attribute\", n = \"varying\", r = \"varying\", o = \"texture2D\", a = \"gl_FragColor\", s = \"\", u = \"\\n      #define isnan(value) isnan_custom(value)\\n      bool isnan_custom(float val) {\\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\\n      }\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\\n      }\\n    \", c = \"\\n      uniform float INFINITY;\\n\\n      bool isinf(float val) {\\n        return abs(val) == INFINITY;\\n      }\\n      bvec4 isinf(vec4 val) {\\n        return equal(abs(val), vec4(INFINITY));\\n      }\\n    \", l = \"\\n      int round(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 round(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"), {\n        version: t,\n        attribute: e,\n        varyingVs: n,\n        varyingFs: r,\n        texture2D: o,\n        output: a,\n        defineOutput: s,\n        defineSpecialNaN: u,\n        defineSpecialInf: c,\n        defineRound: l\n    };\n}\nfunction $a(t, e, n) {\n    void 0 === n && (n = \"index\");\n    var r = $(e);\n    return r.map(function(e, o) {\n        return \"int \" + t[o] + \" = \" + n + \" / \" + e + \"; \" + (o === r.length - 1 ? \"int \" + t[o + 1] + \" = \" + n + \" - \" + t[o] + \" * \" + e : \"index -= \" + t[o] + \" * \" + e) + \";\";\n    }).join(\"\");\n}\nfunction Qa(t) {\n    var e = $(t).map(function(t) {\n        return t.toString();\n    });\n    return \"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * \" + e[0] + \" + coords.y * \" + e[1] + \" + coords.z;\\n  }\\n\";\n}\nvar Ja = \"\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n\";\nfunction Za(t, e, n, r) {\n    var o = [];\n    t.forEach(function(t) {\n        var e = k(t.shapeInfo.logicalShape);\n        t.shapeInfo.isUniform ? o.push(\"uniform float \" + t.name + (e > 1 ? \"[\" + e + \"]\" : \"\") + \";\") : (o.push(\"uniform sampler2D \" + t.name + \";\"), o.push(\"uniform int offset\" + t.name + \";\"));\n    });\n    var a, i, s = o.join(\"\\n\"), u = t.map(function(t) {\n        return function(t, e, n) {\n            void 0 === n && (n = !1);\n            var r = \"\";\n            r += n ? ei(t) : ti(t);\n            var o = t.shapeInfo.logicalShape, a = e.logicalShape;\n            o.length <= a.length && (r += n ? function(t, e) {\n                var n, r = t.name, o = r.charAt(0).toUpperCase() + r.slice(1), a = \"get\" + o + \"AtOutCoords\", i = t.shapeInfo.logicalShape.length, s = e.logicalShape.length, u = Mr(t.shapeInfo.logicalShape, e.logicalShape), c = ui(s), l = s - i, h = [\n                    \"x\",\n                    \"y\",\n                    \"z\",\n                    \"w\",\n                    \"u\",\n                    \"v\"\n                ];\n                n = 0 === i ? \"\" : s < 2 && u.length >= 1 ? \"coords = 0;\" : u.map(function(t) {\n                    return \"coords.\" + h[t + l] + \" = 0;\";\n                }).join(\"\\n\");\n                var f = \"\";\n                f = s < 2 && i > 0 ? \"coords\" : t.shapeInfo.logicalShape.map(function(t, e) {\n                    return \"coords.\" + h[e + l];\n                }).join(\", \");\n                var d = \"return outputValue;\", p = 1 === k(t.shapeInfo.logicalShape), v = 1 === k(e.logicalShape);\n                if (1 !== i || p || v) {\n                    if (p && !v) d = 1 === s ? \"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \" : \"\\n        return vec4(outputValue.x);\\n      \";\n                    else if (u.length) {\n                        var g = i - 2, m = i - 1;\n                        u.indexOf(g) > -1 && u.indexOf(m) > -1 ? d = \"return vec4(outputValue.x);\" : u.indexOf(g) > -1 ? d = \"return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);\" : u.indexOf(m) > -1 && (d = \"return vec4(outputValue.xx, outputValue.zz);\");\n                    }\n                } else d = \"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";\n                return \"\\n    vec4 \" + a + \"() {\\n      \" + c + \" coords = getOutputCoords();\\n      \" + n + \"\\n      vec4 outputValue = get\" + o + \"(\" + f + \");\\n      \" + d + \"\\n    }\\n  \";\n            }(t, e) : function(t, e) {\n                var n = t.name, r = n.charAt(0).toUpperCase() + n.slice(1), o = \"get\" + r + \"AtOutCoords\", a = e.texShape, i = t.shapeInfo.texShape, s = t.shapeInfo.logicalShape.length, u = e.logicalShape.length;\n                if (!t.shapeInfo.isUniform && s === u && null == t.shapeInfo.flatOffset && S(i, a)) return \"\\n      float \" + o + \"() {\\n        return sampleTexture(\" + n + \", resultUV);\\n      }\\n    \";\n                var c, l = ui(u), h = Mr(t.shapeInfo.logicalShape, e.logicalShape), f = u - s, d = [\n                    \"x\",\n                    \"y\",\n                    \"z\",\n                    \"w\",\n                    \"u\",\n                    \"v\"\n                ];\n                c = 0 === s ? \"\" : u < 2 && h.length >= 1 ? \"coords = 0;\" : h.map(function(t) {\n                    return \"coords.\" + d[t + f] + \" = 0;\";\n                }).join(\"\\n\");\n                var p = \"\";\n                p = u < 2 && s > 0 ? \"coords\" : t.shapeInfo.logicalShape.map(function(t, e) {\n                    return \"coords.\" + d[e + f];\n                }).join(\", \");\n                return \"\\n    float \" + o + \"() {\\n      \" + l + \" coords = getOutputCoords();\\n      \" + c + \"\\n      return get\" + r + \"(\" + p + \");\\n    }\\n  \";\n            }(t, e));\n            return r;\n        }(t, e, r);\n    }).join(\"\\n\"), c = e.texShape, l = Ya(), h = function(t) {\n        return \"\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return \" + t.texture2D + \"(textureSampler, uv).r;\\n    }\\n  \";\n    }(l), f = function(t) {\n        return t.version + \"\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    \" + t.varyingFs + \" vec2 resultUV;\\n    \" + t.defineOutput + \"\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    \" + t.defineSpecialNaN + \"\\n    \" + t.defineSpecialInf + \"\\n    \" + t.defineRound + \"\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    \" + ni + \"\\n    \" + ri + \"\\n    \" + oi + \"\\n  \";\n    }(l);\n    return e.isPacked ? (a = function(t, e) {\n        switch(t.length){\n            case 0:\n                return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n            case 1:\n                return function(t, e) {\n                    var n = [\n                        Math.ceil(e[0] / 2),\n                        Math.ceil(e[1] / 2)\n                    ];\n                    if (1 === n[0]) return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * \" + n[1] + \".0);\\n      }\\n    \";\n                    if (1 === n[1]) return \"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * \" + n[0] + \".0);\\n      }\\n    \";\n                    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + n[0] + \", \" + n[1] + \"));\\n      return 2 * (resTexRC.x * \" + n[1] + \" + resTexRC.y);\\n    }\\n  \";\n                }(0, e);\n            case 2:\n                return function(t, e) {\n                    var n = [\n                        Math.ceil(e[0] / 2),\n                        Math.ceil(e[1] / 2)\n                    ];\n                    if (S(t, e)) return \"\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(\" + n[0] + \", \" + n[1] + \"));\\n      }\\n    \";\n                    var r = Math.ceil(t[1] / 2);\n                    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + n[0] + \", \" + n[1] + \"));\\n\\n      int index = resTexRC.x * \" + n[1] + \" + resTexRC.y;\\n      int r = 2 * (index / \" + r + \");\\n      int c = imod(index, \" + r + \") * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \";\n                }(t, e);\n            case 3:\n                return n = t, r = e, o = [\n                    Math.ceil(r[0] / 2),\n                    Math.ceil(r[1] / 2)\n                ], a = Math.ceil(n[2] / 2), i = a * Math.ceil(n[1] / 2), \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + o[0] + \", \" + o[1] + \"));\\n      int index = resTexRC.x * \" + o[1] + \" + resTexRC.y;\\n\\n      int b = index / \" + i + \";\\n      index -= b * \" + i + \";\\n\\n      int r = 2 * (index / \" + a + \");\\n      int c = imod(index, \" + a + \") * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";\n            default:\n                return function(t, e) {\n                    for(var n = [\n                        Math.ceil(e[0] / 2),\n                        Math.ceil(e[1] / 2)\n                    ], r = Math.ceil(t[t.length - 1] / 2), o = r * Math.ceil(t[t.length - 2] / 2), a = o, i = \"\", s = \"b, r, c\", u = 2; u < t.length - 1; u++)a *= t[t.length - u - 1], i = \"\\n      int b\" + u + \" = index / \" + a + \";\\n      index -= b\" + u + \" * \" + a + \";\\n    \" + i, s = \"b\" + u + \", \" + s;\n                    return \"\\n    ivec\" + t.length + \" getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + n[0] + \", \" + n[1] + \"));\\n      int index = resTexRC.x * \" + n[1] + \" + resTexRC.y;\\n\\n      \" + i + \"\\n\\n      int b = index / \" + o + \";\\n      index -= b * \" + o + \";\\n\\n      int r = 2 * (index / \" + r + \");\\n      int c = imod(index, \" + r + \") * 2;\\n\\n      return ivec\" + t.length + \"(\" + s + \");\\n    }\\n  \";\n                }(t, e);\n        }\n        var n, r, o, a, i;\n    }(e.logicalShape, c), i = function(t) {\n        return \"\\n    void setOutput(vec4 val) {\\n      \" + t.output + \" = val;\\n    }\\n  \";\n    }(l)) : (a = function(t, e) {\n        switch(t.length){\n            case 0:\n                return \"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";\n            case 1:\n                return function(t, e) {\n                    if (1 === e[0]) return \"\\n      int getOutputCoords() {\\n        return int(resultUV.x * \" + e[1] + \".0);\\n      }\\n    \";\n                    if (1 === e[1]) return \"\\n      int getOutputCoords() {\\n        return int(resultUV.y * \" + e[0] + \".0);\\n      }\\n    \";\n                    return \"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + e[0] + \", \" + e[1] + \"));\\n      return resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n    }\\n  \";\n                }(0, e);\n            case 2:\n                return function(t, e) {\n                    if (S(t, e)) return \"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(\" + e[0] + \", \" + e[1] + \"));\\n      }\\n    \";\n                    if (1 === t[1]) return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + e[0] + \", \" + e[1] + \"));\\n        int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \";\n                    if (1 === t[0]) return \"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(\" + e[0] + \", \" + e[1] + \"));\\n        int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \";\n                    return \"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + e[0] + \", \" + e[1] + \"));\\n      int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n      int r = index / \" + t[1] + \";\\n      int c = index - r * \" + t[1] + \";\\n      return ivec2(r, c);\\n    }\\n  \";\n                }(t, e);\n            case 3:\n                return n = e, r = $a([\n                    \"r\",\n                    \"c\",\n                    \"d\"\n                ], t), \"\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(\" + n[0] + \", \" + n[1] + \"));\\n      int index = resTexRC.x * \" + n[1] + \" + resTexRC.y;\\n      \" + r + \"\\n      return ivec3(r, c, d);\\n    }\\n  \";\n            case 4:\n                return function(t, e) {\n                    var n = $a([\n                        \"r\",\n                        \"c\",\n                        \"d\",\n                        \"d2\"\n                    ], t);\n                    return \"\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + e[0] + \", \" + e[1] + \"));\\n      int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n      \" + n + \"\\n      return ivec4(r, c, d, d2);\\n    }\\n  \";\n                }(t, e);\n            case 5:\n                return function(t, e) {\n                    var n = $a([\n                        \"r\",\n                        \"c\",\n                        \"d\",\n                        \"d2\",\n                        \"d3\"\n                    ], t);\n                    return \"\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(\" + e[0] + \",\\n                             \" + e[1] + \"));\\n\\n      int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n\\n      \" + n + \"\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  \";\n                }(t, e);\n            case 6:\n                return function(t, e) {\n                    var n = $a([\n                        \"r\",\n                        \"c\",\n                        \"d\",\n                        \"d2\",\n                        \"d3\",\n                        \"d4\"\n                    ], t);\n                    return \"\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(\" + e[0] + \", \" + e[1] + \"));\\n      int index = resTexRC.x * \" + e[1] + \" + resTexRC.y;\\n\\n      \" + n + \"\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  \";\n                }(t, e);\n            default:\n                throw new Error(t.length + \"-D output sampling is not yet supported\");\n        }\n        var n, r;\n    }(e.logicalShape, c), i = function(t) {\n        return \"\\n    void setOutput(float val) {\\n      \" + t.output + \" = vec4(val, 0, 0, 0);\\n    }\\n  \";\n    }(l)), r && (f += ai), [\n        f,\n        h,\n        i,\n        s,\n        a,\n        u,\n        n\n    ].join(\"\\n\");\n}\nfunction ti(t) {\n    var e = t.shapeInfo.logicalShape;\n    switch(e.length){\n        case 0:\n            return function(t) {\n                var e = t.name, n = \"get\" + e.charAt(0).toUpperCase() + e.slice(1);\n                if (t.shapeInfo.isUniform) return \"float \" + n + \"() {return \" + e + \";}\";\n                var r = t.shapeInfo.texShape, o = r[0], a = r[1];\n                if (1 === o && 1 === a) return \"\\n      float \" + n + \"() {\\n        return sampleTexture(\" + e + \", halfCR);\\n      }\\n    \";\n                var i = t.shapeInfo.texShape, s = i[0], u = i[1], c = ii(e);\n                return \"\\n    float \" + n + \"() {\\n      vec2 uv = uvFromFlat(\" + s + \", \" + u + \", \" + c + \");\\n      return sampleTexture(\" + e + \", uv);\\n    }\\n  \";\n            }(t);\n        case 1:\n            return function(t) {\n                var e = t.name, n = \"get\" + e.charAt(0).toUpperCase() + e.slice(1);\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + n + \"(int index) {\\n        \" + si(t) + \"\\n      }\\n    \";\n                var r = t.shapeInfo.texShape, o = r[0], a = r[1];\n                if (1 === a && 1 === o) return \"\\n      float \" + n + \"(int index) {\\n        return sampleTexture(\" + e + \", halfCR);\\n      }\\n    \";\n                var i = ii(e);\n                if (1 === a) return \"\\n      float \" + n + \"(int index) {\\n        vec2 uv = vec2(0.5, (float(index + \" + i + \") + 0.5) / \" + o + \".0);\\n        return sampleTexture(\" + e + \", uv);\\n      }\\n    \";\n                if (1 === o) return \"\\n      float \" + n + \"(int index) {\\n        vec2 uv = vec2((float(index + \" + i + \") + 0.5) / \" + a + \".0, 0.5);\\n        return sampleTexture(\" + e + \", uv);\\n      }\\n    \";\n                return \"\\n    float \" + n + \"(int index) {\\n      vec2 uv = uvFromFlat(\" + o + \", \" + a + \", index + \" + i + \");\\n      return sampleTexture(\" + e + \", uv);\\n    }\\n  \";\n            }(t);\n        case 2:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = t.shapeInfo.texShape;\n                if (null != o && S(e, o)) {\n                    var a = o[0], i = o[1];\n                    return \"\\n    float \" + r + \"(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + i + \".0, \" + a + \".0);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n                }\n                var s = M(e), u = s.newShape, c = s.keptDims, l = u;\n                if (l.length < e.length) {\n                    var h = ci(t, l);\n                    return \"\\n      \" + ti(h) + \"\\n      float \" + r + \"(int row, int col) {\\n        return \" + r + \"(\" + li([\n                        \"row\",\n                        \"col\"\n                    ], c) + \");\\n      }\\n    \";\n                }\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(\" + e[1] + \", 1)));\\n        \" + si(t) + \"\\n      }\\n    \";\n                var f = o[0], d = o[1], p = ii(n);\n                if (1 === d) return \"\\n    float \" + r + \"(int row, int col) {\\n      float index = dot(vec3(row, col, \" + p + \"), vec3(\" + e[1] + \", 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / \" + f + \".0);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n                if (1 === f) return \"\\n    float \" + r + \"(int row, int col) {\\n      float index = dot(vec3(row, col, \" + p + \"), vec3(\" + e[1] + \", 1, 1));\\n      vec2 uv = vec2((index + 0.5) / \" + d + \".0, 0.5);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n                return \"\\n  float \" + r + \"(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * \" + e[1] + \" + col + \" + p + \";\\n    vec2 uv = uvFromFlat(\" + f + \", \" + d + \", index);\\n    return sampleTexture(\" + n + \", uv);\\n  }\\n\";\n            }(t);\n        case 3:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = e[1] * e[2], a = e[2], i = M(e), s = i.newShape, u = i.keptDims, c = s;\n                if (c.length < e.length) {\n                    var l = ci(t, c);\n                    return \"\\n        \" + ti(l) + \"\\n        float \" + r + \"(int row, int col, int depth) {\\n          return \" + r + \"(\" + li([\n                        \"row\",\n                        \"col\",\n                        \"depth\"\n                    ], u) + \");\\n        }\\n      \";\n                }\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(\" + o + \", \" + a + \", 1)));\\n        \" + si(t) + \"\\n      }\\n    \";\n                var h = t.shapeInfo.texShape, f = h[0], d = h[1], p = t.shapeInfo.flatOffset;\n                if (d === o && null == p) return \"\\n        float \" + r + \"(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(\" + a + \", 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(\" + d + \".0, \" + f + \".0);\\n          return sampleTexture(\" + n + \", uv);\\n        }\\n      \";\n                if (d === a && null == p) return \"\\n    float \" + r + \"(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(\" + e[1] + \", 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + d + \".0, \" + f + \".0);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n                var v = ii(n);\n                return \"\\n      float \" + r + \"(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * \" + o + \" + col * \" + a + \" + depth + \" + v + \";\\n        vec2 uv = uvFromFlat(\" + f + \", \" + d + \", index);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n  \";\n            }(t);\n        case 4:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = e[3], a = e[2] * o, i = e[1] * a, s = M(e), u = s.newShape, c = s.keptDims;\n                if (u.length < e.length) {\n                    var l = ci(t, u);\n                    return \"\\n      \" + ti(l) + \"\\n      float \" + r + \"(int row, int col, int depth, int depth2) {\\n        return \" + r + \"(\" + li([\n                        \"row\",\n                        \"col\",\n                        \"depth\",\n                        \"depth2\"\n                    ], c) + \");\\n      }\\n    \";\n                }\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(\" + i + \", \" + a + \", \" + o + \", 1)));\\n        \" + si(t) + \"\\n      }\\n    \";\n                var h = t.shapeInfo.flatOffset, f = t.shapeInfo.texShape, d = f[0], p = f[1];\n                if (p === i && null == h) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(\" + a + \", \" + o + \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + p + \".0, \" + d + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                if (p === o && null == h) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(\" + e[1] * e[2] + \", \" + e[2] + \", 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + p + \".0, \" + d + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                var v = ii(n);\n                return \"\\n    float \" + r + \"(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \" + i + \" + col * \" + a + \" +\\n          depth * \" + o + \" + depth2;\\n      vec2 uv = uvFromFlat(\" + d + \", \" + p + \", index + \" + v + \");\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        case 5:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = e[4], a = e[3] * o, i = e[2] * a, s = e[1] * i, u = M(e), c = u.newShape, l = u.keptDims;\n                if (c.length < e.length) {\n                    var h = ci(t, c);\n                    return \"\\n      \" + ti(h) + \"\\n      float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n        return \" + r + \"(\" + li([\n                        \"row\",\n                        \"col\",\n                        \"depth\",\n                        \"depth2\",\n                        \"depth3\"\n                    ], l) + \");\\n      }\\n    \";\n                }\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\" + s + \", \" + i + \", \" + a + \", \" + o + \")) +\\n          depth3;\\n        \" + si(t) + \"\\n      }\\n    \";\n                var f = t.shapeInfo.flatOffset, d = t.shapeInfo.texShape, p = d[0], v = d[1];\n                if (v === s && null == f) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(\" + i + \", \" + a + \", \" + o + \", 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + v + \".0, \" + p + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                if (v === o && null == f) return \"\\n      float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\" + e[1] * e[2] * e[3] + \",\\n               \" + e[2] * e[3] + \", \" + e[3] + \", 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + v + \".0, \" + p + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                var g = ii(n);\n                return \"\\n    float \" + r + \"(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \" + s + \" + col * \" + i + \" + depth * \" + a + \" +\\n          depth2 * \" + o + \" + depth3 + \" + g + \";\\n      vec2 uv = uvFromFlat(\" + p + \", \" + v + \", index);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        case 6:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = M(e), a = o.newShape, i = o.keptDims;\n                if (a.length < e.length) {\n                    var s = ci(t, a);\n                    return \"\\n      \" + ti(s) + \"\\n      float \" + r + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return \" + r + \"(\" + li([\n                        \"row\",\n                        \"col\",\n                        \"depth\",\n                        \"depth2\",\n                        \"depth3\",\n                        \"depth4\"\n                    ], i) + \");\\n      }\\n    \";\n                }\n                var u = e[5], c = e[4] * u, l = e[3] * c, h = e[2] * l, f = e[1] * h;\n                if (t.shapeInfo.isUniform) return \"\\n      float \" + r + \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(\" + f + \", \" + h + \", \" + l + \", \" + c + \")) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(\" + u + \", 1)));\\n        \" + si(t) + \"\\n      }\\n    \";\n                var d = t.shapeInfo.flatOffset, p = t.shapeInfo.texShape, v = p[0], g = p[1];\n                if (g === f && null == d) return \"\\n      float \" + r + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(\" + h + \", \" + l + \", \" + c + \", \" + u + \")) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(\" + g + \".0, \" + v + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                if (g === u && null == d) return \"\\n      float \" + r + \"(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(\" + e[1] * e[2] * e[3] * e[4] + \",\\n               \" + e[2] * e[3] * e[4] + \",\\n               \" + e[3] * e[4] + \",\\n               \" + e[4] + \")) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(\" + g + \".0, \" + v + \".0);\\n        return sampleTexture(\" + n + \", uv);\\n      }\\n    \";\n                var m = ii(n);\n                return \"\\n    float \" + r + \"(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * \" + f + \" + col * \" + h + \" + depth * \" + l + \" +\\n          depth2 * \" + c + \" + depth3 * \" + u + \" + depth4 + \" + m + \";\\n      vec2 uv = uvFromFlat(\" + v + \", \" + g + \", index);\\n      return sampleTexture(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        default:\n            throw new Error(e.length + \"-D input sampling is not yet supported\");\n    }\n}\nfunction ei(t) {\n    var e, n, r;\n    switch(t.shapeInfo.logicalShape.length){\n        case 0:\n            return e = t.name, n = \"get\" + e.charAt(0).toUpperCase() + e.slice(1), r = Ya(), \"\\n    vec4 \" + n + \"() {\\n      return \" + r.texture2D + \"(\" + e + \", halfCR);\\n    }\\n  \";\n        case 1:\n            return function(t) {\n                var e = t.name, n = \"get\" + e.charAt(0).toUpperCase() + e.slice(1), r = t.shapeInfo.texShape, o = [\n                    Math.ceil(r[0] / 2),\n                    Math.ceil(r[1] / 2)\n                ], a = Ya();\n                return \"\\n    vec4 \" + n + \"(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        \" + o[0] + \", \" + o[1] + \", index);\\n      return \" + a.texture2D + \"(\" + e + \", uv);\\n    }\\n  \";\n            }(t);\n        case 2:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = t.shapeInfo.texShape, a = o[0], i = o[1], s = Ya();\n                if (null != o && S(e, o)) return \"\\n      vec4 \" + r + \"(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(\" + i + \".0, \" + a + \".0);\\n\\n        return \" + s.texture2D + \"(\" + n + \", uv);\\n      }\\n    \";\n                var u = [\n                    Math.ceil(o[0] / 2),\n                    Math.ceil(o[1] / 2)\n                ], c = Math.ceil(e[1] / 2);\n                return \"\\n    vec4 \" + r + \"(int row, int col) {\\n      vec2 uv = packedUVfrom2D(\" + c + \", \" + u[0] + \", \" + u[1] + \", row, col);\\n      return \" + s.texture2D + \"(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        case 3:\n            return function(t) {\n                var e = t.shapeInfo.logicalShape, n = t.name, r = \"get\" + n.charAt(0).toUpperCase() + n.slice(1), o = t.shapeInfo.texShape, a = [\n                    Math.ceil(o[0] / 2),\n                    Math.ceil(o[1] / 2)\n                ];\n                if (1 === e[0]) {\n                    var i = e.slice(1), s = ci(t, i);\n                    return \"\\n        \" + ei(s) + \"\\n        vec4 \" + r + \"(int b, int row, int col) {\\n          return \" + r + \"(\" + li([\n                        \"b\",\n                        \"row\",\n                        \"col\"\n                    ], [\n                        1,\n                        2\n                    ]) + \");\\n        }\\n      \";\n                }\n                var u = a[0], c = a[1], l = Math.ceil(e[2] / 2), h = l * Math.ceil(e[1] / 2), f = Ya();\n                return \"\\n    vec4 \" + r + \"(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        \" + u + \", \" + c + \", \" + h + \", \" + l + \", b, row, col);\\n      return \" + f.texture2D + \"(\" + n + \", uv);\\n    }\\n  \";\n            }(t);\n        default:\n            return function(t) {\n                for(var e = t.shapeInfo.logicalShape, n = e.length, r = t.name, o = \"get\" + r.charAt(0).toUpperCase() + r.slice(1), a = t.shapeInfo.texShape, i = [\n                    Math.ceil(a[0] / 2),\n                    Math.ceil(a[1] / 2)\n                ], s = i[0], u = i[1], c = Math.ceil(e[n - 1] / 2), l = c * Math.ceil(e[n - 2] / 2), h = \"int b, int row, int col\", f = \"b * \" + l + \" + (row / 2) * \" + c + \" + (col / 2)\", d = 2; d < n - 1; d++)h = \"int b\" + d + \", \" + h, l *= e[n - d - 1], f = \"b\" + d + \" * \" + l + \" + \" + f;\n                var p = Ya();\n                return \"\\n    vec4 \" + o + \"(\" + h + \") {\\n      int index = \" + f + \";\\n      int texR = index / \" + u + \";\\n      int texC = index - texR * \" + u + \";\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + u + \", \" + s + \");\\n      return \" + p.texture2D + \"(\" + r + \", uv);\\n    }\\n  \";\n            }(t);\n    }\n}\nvar ni = \"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\", ri = \"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\", oi = \"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\", ai = \"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";\nfunction ii(t) {\n    return \"offset\" + t;\n}\nfunction si(t) {\n    var e = t.name, n = k(t.shapeInfo.logicalShape);\n    return n < 2 ? \"return \" + e + \";\" : \"\\n    for (int i = 0; i < \" + n + \"; i++) {\\n      if (i == index) {\\n        return \" + e + \"[i];\\n      }\\n    }\\n  \";\n}\nfunction ui(t) {\n    if (t <= 1) return \"int\";\n    if (2 === t) return \"ivec2\";\n    if (3 === t) return \"ivec3\";\n    if (4 === t) return \"ivec4\";\n    if (5 === t) return \"ivec5\";\n    if (6 === t) return \"ivec6\";\n    throw Error(\"GPU for rank \" + t + \" is not yet supported\");\n}\nfunction ci(t, e) {\n    var n = JSON.parse(JSON.stringify(t));\n    return n.shapeInfo.logicalShape = e, n;\n}\nfunction li(t, e) {\n    return e.map(function(e) {\n        return t[e];\n    }).join(\", \");\n}\nvar hi = function(t, e, n, r) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, C(t.length > 2, function() {\n        return \"Packed arg\" + (n.charAt(0).toUpperCase() + n.slice(1)) + \" supports only inputs with rank above 2.\";\n    });\n    var o = t[t.length - 1], a = Math.ceil(o / e);\n    this.outputShape = t.slice(0, -1), a > 1 && this.outputShape.push(a), r || this.variableNames.push(\"bestIndicesA\");\n    var i, s, u = this.outputShape, c = u.length, l = ui(c), h = Xa(\"coords\", c);\n    if (1 === a) {\n        var f = ui(s = c + 1);\n        i = \"\\n        \" + f + \" sourceLocR = \" + f + \"(\" + h.join() + \", 0);\\n        ++\" + h[c - 1] + \";\\n        \" + f + \" sourceLocG = \" + f + \"(\" + h.join() + \", 0);\\n        ++\" + h[c - 2] + \";\\n        \" + f + \" sourceLocA = \" + f + \"(\" + h.join() + \", 0);\\n        --\" + h[c - 1] + \";\\n        \" + f + \" sourceLocB = \" + f + \"(\" + h.join() + \", 0);\\n        --\" + h[c - 2] + \";\";\n    } else s = c, i = \"\\n        \" + l + \" sourceLocR = coords;\\n        ++\" + h[c - 1] + \";\\n        \" + l + \" sourceLocG = coords;\\n        ++\" + h[c - 2] + \";\\n        \" + l + \" sourceLocA = coords;\\n        --\" + h[c - 1] + \";\\n        \" + l + \" sourceLocB = coords;\\n        --\" + h[c - 2] + \";\";\n    var d = [\n        \"x\",\n        \"y\",\n        \"z\",\n        \"w\",\n        \"u\",\n        \"v\"\n    ].slice(0, s), p = \".\" + d[s - 1], v = d.map(function(t) {\n        return \"int \" + t;\n    }), g = Xa(\"sourceLocR\", s - 1).concat(\"inIdx.r\"), m = Xa(\"sourceLocG\", s - 1).concat(\"inIdx.g\"), y = Xa(\"sourceLocB\", s - 1).concat(\"inIdx.b\"), x = Xa(\"sourceLocA\", s - 1).concat(\"inIdx.a\"), b = \"max\" === n ? \"greaterThan\" : \"lessThan\", w = r ? \"\" : \"\\n          inIdx = round(vec4(getBestIndicesAChannel(\" + g.join() + \"),\\n                             getBestIndicesAChannel(\" + m.join() + \"),\\n                             getBestIndicesAChannel(\" + y.join() + \"),\\n                             getBestIndicesAChannel(\" + x.join() + \")));\", E = \"vec4(\\n            getAChannel(\" + g.join() + \"),\\n            hasNextCol ? getAChannel(\" + m.join() + \") : 0.,\\n            hasNextRow ? getAChannel(\" + y.join() + \") : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(\" + x.join() + \") : 0.)\", R = r ? \"\" : \"\\n      float getBestIndicesAChannel(\" + v.join() + \") {\\n        return getChannel(getBestIndicesA(\" + d.join() + \"),\\n                                          vec2(\" + d.slice(-2).join() + \"));\\n      }\";\n    this.userCode = \"\\n      float getAChannel(\" + v.join() + \") {\\n        return getChannel(getA(\" + d.join() + \"),\\n                               vec2(\" + d.slice(-2).join() + \"));\\n      }\\n      \" + R + \"\\n      void main() {\\n        \" + l + \" coords = getOutputCoords();\\n        bool hasNextCol = \" + h[c - 1] + \" < \" + (u[c - 1] - 1) + \";\\n        bool hasNextRow = \" + h[c - 2] + \" < \" + (u[c - 2] - 1) + \";\\n        \" + i + \"\\n        ivec4 srcIdx = ivec4(sourceLocR\" + p + \", sourceLocG\" + p + \",\\n          sourceLocB\" + p + \", sourceLocA\" + p + \") * \" + e + \";\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = \" + E + \";\\n\\n        for (int i = 0; i < \" + e + \"; i++) {\\n          inIdx = srcIdx;\\n          \" + w + \"\\n          vec4 candidate = \" + E + \";\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(\" + b + \"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    \";\n}, fi = function(t) {\n    this.variableNames = [\n        \"dy\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterHeight, n = t.filterWidth, r = t.strideHeight, o = t.strideWidth, a = t.dilationHeight, i = t.dilationWidth, s = t.effectiveFilterHeight, u = t.effectiveFilterWidth, c = s - 1 - t.padInfo.top, l = u - 1 - t.padInfo.left, h = 1 / (e * n);\n    this.userCode = \"\\n      const ivec2 pads = ivec2(\" + c + \", \" + l + \");\\n      const float avgMultiplier = float(\" + h + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + s + \";\\n            wR += \" + a + \") {\\n          float dyR = float(dyRCorner + wR) / \" + r + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \" + u + \";\\n            wC+= \" + i + \") {\\n            float dyC = float(dyCCorner + wC) / \" + o + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, di = function(t) {\n    this.variableNames = [\n        \"dy\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterDepth, n = t.filterHeight, r = t.filterWidth, o = t.strideDepth, a = t.strideHeight, i = t.strideWidth, s = t.dilationDepth, u = t.dilationHeight, c = t.dilationWidth, l = t.effectiveFilterDepth, h = t.effectiveFilterHeight, f = t.effectiveFilterWidth, d = l - 1 - t.padInfo.front, p = h - 1 - t.padInfo.top, v = f - 1 - t.padInfo.left, g = 1 / (e * n * r);\n    this.userCode = \"\\n      const ivec3 pads = ivec3(\" + d + \", \" + p + \", \" + v + \");\\n      const float avgMultiplier = float(\" + g + \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \" + l + \";\\n            wD += \" + s + \") {\\n          float dyD = float(dyDCorner + wD) / \" + o + \".0;\\n\\n          if (dyD < 0.0 || dyD >= \" + t.outDepth + \".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \" + h + \";\\n              wR += \" + u + \") {\\n            float dyR = float(dyRCorner + wR) / \" + a + \".0;\\n\\n            if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \" + f + \";\\n                wC += \" + c + \") {\\n              float dyC = float(dyCCorner + wC) / \" + i + \".0;\\n\\n              if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n\\n              dotProd += dyValue * avgMultiplier;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, pi = function(t, e, n, r, o, a) {\n    this.outputShape = [], this.variableNames = [\n        \"x\",\n        \"mean\",\n        \"variance\"\n    ], Pr(t, e), Pr(t, n);\n    var i = \"0.0\";\n    null != r && (Pr(t, r), this.variableNames.push(\"offset\"), i = \"getOffsetAtOutCoords()\");\n    var s = \"1.0\";\n    null != o && (Pr(t, o), this.variableNames.push(\"scale\"), s = \"getScaleAtOutCoords()\"), this.outputShape = t, this.userCode = \"\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = \" + i + \";\\n        float scale = \" + s + \";\\n        float inv = scale * inversesqrt(variance + float(\" + a + \"));\\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\\n      }\\n    \";\n}, vi = function(t, e, n, r, o, a) {\n    this.packedInputs = !0, this.packedOutput = !0, this.variableNames = [\n        \"x\",\n        \"mean\",\n        \"variance\"\n    ], Pr(t, e), Pr(t, n);\n    var i = \"vec4(0.0)\";\n    null != r && (Pr(t, r), this.variableNames.push(\"offset\"), i = \"getOffsetAtOutCoords()\");\n    var s = \"vec4(1.0)\";\n    null != o && (Pr(t, o), this.variableNames.push(\"scale\"), s = \"getScaleAtOutCoords()\"), this.outputShape = t, this.userCode = \"\\n      void main() {\\n        vec4 offset = \" + i + \";\\n        vec4 scale = \" + s + \";\\n\\n        vec4 x = getXAtOutCoords();\\n        vec4 mean = getMeanAtOutCoords();\\n        vec4 variance = getVarianceAtOutCoords();\\n\\n        vec4 inv = scale * inversesqrt(variance + vec4(\" + a + \"));\\n\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    \";\n}, gi = \"return areal * breal - aimag * bimag;\", mi = \"return areal * bimag + aimag * breal;\", yi = function(t, e, n) {\n    this.variableNames = [\n        \"AReal\",\n        \"AImag\",\n        \"BReal\",\n        \"BImag\"\n    ], this.outputShape = Pr(e, n), this.userCode = \"\\n      float binaryOpComplex(\\n          float areal, float aimag, float breal, float bimag) {\\n        \" + t + \"\\n      }\\n\\n      void main() {\\n        float areal = getARealAtOutCoords();\\n        float aimag = getAImagAtOutCoords();\\n        float breal = getBRealAtOutCoords();\\n        float bimag = getBImagAtOutCoords();\\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\\n      }\\n    \";\n}, xi = \"return a + b;\", bi = \"return a - b;\", wi = \"return a * b;\", Ci = \"\\nif (a == b) {\\n  return 1.0;\\n};\\nreturn a / b;\", Ei = \"return (a < 0.) ? b * a : a;\", Ri = function(t, e, n) {\n    this.variableNames = [\n        \"A\",\n        \"B\"\n    ], this.outputShape = Pr(e, n), this.userCode = \"\\n      float binaryOperation(float a, float b) {\\n        \" + t + \"\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    \";\n}, Ii = \"\\n  // vec4 one = vec4(equal(a, b));\\n  // return one + (vec4(1.0) - one) * a / b;\\n  vec4 result = a / b;\\n  if(a.x == b.x) {\\n    result.x = 1.;\\n  }\\n  if(a.y == b.y) {\\n    result.y = 1.;\\n  }\\n  if(a.z == b.z) {\\n    result.z = 1.;\\n  }\\n  if(a.w == b.w) {\\n    result.w = 1.;\\n  }\\n\\n  return result;\\n\", ki = \"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\", Si = function(t, e, n, r) {\n    void 0 === r && (r = !1), this.variableNames = [\n        \"A\",\n        \"B\"\n    ], this.supportsBroadcasting = !0, this.packedInputs = !0, this.packedOutput = !0, this.outputShape = Pr(e, n);\n    var o = this.outputShape.length, a = \"\";\n    if (r) if (0 === o || 1 === k(this.outputShape)) a = \"\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        \";\n    else if (a = \"\\n          \" + ui(o) + \" coords = getOutputCoords();\\n        \", 1 === o) a += \"\\n            result.y = (coords + 1) >= \" + this.outputShape[0] + \" ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          \";\n    else {\n        var i = Xa(\"coords\", o);\n        a += \"\\n            bool nextRowOutOfBounds =\\n              (\" + i[o - 2] + \" + 1) >= \" + this.outputShape[o - 2] + \";\\n            bool nextColOutOfBounds =\\n              (\" + i[o - 1] + \" + 1) >= \" + this.outputShape[o - 1] + \";\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          \";\n    }\n    this.userCode = \"\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        \" + t + \"\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        \" + a + \"\\n\\n        setOutput(result);\\n      }\\n    \";\n}, Ai = function() {\n    function t(t) {\n        this.variableNames = [\n            \"A\"\n        ], this.outputShape = t, this.userCode = \"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        float value = getAAtOutCoords();\\n        if (isnan(value)) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, minVal, maxVal));\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t, e) {\n        var n = this;\n        return function(r, o) {\n            null == n.minLoc && (n.minLoc = r.getUniformLocationNoThrow(o, \"minVal\"), n.maxLoc = r.getUniformLocationNoThrow(o, \"maxVal\")), r.gl.uniform1f(n.minLoc, t), r.gl.uniform1f(n.maxLoc, e);\n        };\n    }, t;\n}(), Ti = function() {\n    function t(t) {\n        this.variableNames = [\n            \"A\"\n        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.userCode = \"\\n      uniform float minVal;\\n      uniform float maxVal;\\n\\n      void main() {\\n        vec4 value = getAAtOutCoords();\\n\\n        if (any(isnan(value))) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t, e) {\n        var n = this;\n        return function(r, o) {\n            null == n.minLoc && (n.minLoc = r.getUniformLocationNoThrow(o, \"minVal\"), n.maxLoc = r.getUniformLocationNoThrow(o, \"maxVal\")), r.gl.uniform1f(n.minLoc, t), r.gl.uniform1f(n.maxLoc, e);\n        };\n    }, t;\n}(), Di = function(t) {\n    this.variableNames = [\n        \"real\",\n        \"imag\"\n    ], this.outputShape = t, this.userCode = \"\\n      void main() {\\n        float re = abs(getRealAtOutCoords());\\n        float im = abs(getImagAtOutCoords());\\n        float mx = max(re, im);\\n\\n        // sadly the length function in glsl is not underflow-safe\\n        // (at least not on Intel GPUs). So the safe solution is\\n        // to ensure underflow-safety in all cases.\\n        setOutput(\\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\\n        );\\n      }\\n    \";\n}, Ni = function(t) {\n    this.outputShape = [], this.outputShape = Sn(t, 1), this.variableNames = t.map(function(t, e) {\n        return \"T\" + e;\n    });\n    var e = new Array(t.length - 1);\n    e[0] = t[0][1];\n    for(var n = 1; n < e.length; n++)e[n] = e[n - 1] + t[n][1];\n    var r = [\n        \"if (yC < \" + e[0] + \") setOutput(getT0(yR, yC));\"\n    ];\n    for(n = 1; n < e.length; n++){\n        var o = e[n - 1];\n        r.push(\"else if (yC < \" + e[n] + \") setOutput(getT\" + n + \"(yR, yC-\" + o + \"));\");\n    }\n    var a = e.length, i = e[e.length - 1];\n    r.push(\"else setOutput(getT\" + a + \"(yR, yC-\" + i + \"));\"), this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        \" + r.join(\"\\n        \") + \"\\n      }\\n    \";\n}, Fi = function(t, e) {\n    this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [], this.outputShape = Sn(t, e);\n    var n = this.outputShape, r = n.length, o = ui(r), a = Xa(\"coords\", r), i = [\n        \"x\",\n        \"y\",\n        \"z\",\n        \"w\",\n        \"u\",\n        \"v\"\n    ].slice(0, r);\n    this.variableNames = t.map(function(t, e) {\n        return \"T\" + e;\n    });\n    var s = new Array(t.length - 1);\n    s[0] = t[0][e];\n    for(var u = 1; u < s.length; u++)s[u] = s[u - 1] + t[u][e];\n    var c = i[e], l = i.slice(-2), h = i.join(), f = \"if (\" + c + \" < \" + s[0] + \") {\\n        return getChannel(\\n            getT0(\" + h + \"), vec2(\" + l.join() + \"));\\n        }\";\n    for(u = 1; u < s.length; u++){\n        var d = s[u - 1];\n        f += \"\\n        if (\" + c + \" < \" + s[u] + \"  && \" + c + \" >= \" + s[u - 1] + \") {\\n          return getChannel(\\n            getT\" + u + \"(\" + _i(i, c, d) + \"),\\n            vec2(\" + _i(l, c, d) + \"));\\n        }\";\n    }\n    var p = s.length, v = s[s.length - 1];\n    f += \"\\n        return getChannel(\\n          getT\" + p + \"(\" + _i(i, c, v) + \"),\\n          vec2(\" + _i(l, c, v) + \"));\", this.userCode = \"\\n      float getValue(\" + i.map(function(t) {\n        return \"int \" + t;\n    }) + \") {\\n        \" + f + \"\\n      }\\n\\n      void main() {\\n        \" + o + \" coords = getOutputCoords();\\n        vec4 result = vec4(getValue(\" + a + \"), 0., 0., 0.);\\n\\n        \" + a[r - 1] + \" = \" + a[r - 1] + \" + 1;\\n        if (\" + a[r - 1] + \" < \" + n[r - 1] + \") {\\n          result.g = getValue(\" + a + \");\\n        }\\n\\n        \" + a[r - 2] + \" = \" + a[r - 2] + \" + 1;\\n        if (\" + a[r - 2] + \" < \" + n[r - 2] + \") {\\n          result.a = getValue(\" + a + \");\\n        }\\n\\n        \" + a[r - 1] + \" = \" + a[r - 1] + \" - 1;\\n        if (\" + a[r - 2] + \" < \" + n[r - 2] + \" &&\\n            \" + a[r - 1] + \" < \" + n[r - 1] + \") {\\n          result.b = getValue(\" + a + \");\\n        }\\n        setOutput(result);\\n      }\\n    \";\n};\nfunction _i(t, e, n) {\n    var r = t.indexOf(e);\n    return t.map(function(t, e) {\n        return e === r ? t + \" - \" + n : t;\n    }).join();\n}\nvar Oi = function(t) {\n    this.variableNames = [\n        \"x\",\n        \"dy\"\n    ], this.outputShape = t.filterShape;\n    var e = t.strideHeight, n = t.strideWidth, r = t.padInfo.top, o = t.padInfo.left, a = \"channelsLast\" === t.dataFormat;\n    this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \" + t.batchSize + \"; b++) {\\n          for (int yR = 0; yR < \" + t.outHeight + \"; yR++) {\\n            int xR = wR + yR * \" + e + \" - \" + r + \";\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \" + t.outWidth + \"; yC++) {\\n              int xC = wC + yC * \" + n + \" - \" + o + \";\\n\\n              if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                continue;\\n              }\\n\\n              if (\" + a + \") {\\n                float dyValue = getDy(b, yR, yC, d2);\\n                float xValue = getX(b, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              } else {\\n                float dyValue = getDy(b, d2, yR, yC);\\n                float xValue = getX(b, d1, xR, xC);\\n                dotProd += (xValue * dyValue);\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Mi = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"W\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterHeight, n = t.filterWidth, r = t.strideHeight, o = t.strideWidth, a = \"channelsLast\" === t.dataFormat, i = e - 1 - t.padInfo.top, s = n - 1 - t.padInfo.left, u = a ? 1 : 2, c = a ? 2 : 3, l = a ? 3 : 1;\n    this.userCode = \"\\n      const ivec2 pads = ivec2(\" + i + \", \" + s + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[\" + l + \"];\\n\\n        ivec2 dyCorner = ivec2(coords[\" + u + \"], coords[\" + c + \"]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + e + \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \" + r + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \" + e + \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \" + n + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + o + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \" + n + \" - 1 - wC;\\n\\n            for (int d2 = 0; d2 < \" + t.outChannels + \"; d2++) {\\n\\n              if (\" + a + \") {\\n                float xValue = getDy(batch, idyR, idyC, d2);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              } else {\\n                float xValue = getDy(batch, d2, idyR, idyC);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Bi = function(t) {\n    this.variableNames = [\n        \"x\",\n        \"dy\"\n    ], this.outputShape = t.filterShape;\n    var e = t.strideDepth, n = t.strideHeight, r = t.strideWidth, o = t.padInfo.front, a = t.padInfo.top, i = t.padInfo.left;\n    this.userCode = \"\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int wF = coords.x;\\n        int wR = coords.y;\\n        int wC = coords.z;\\n        int d1 = coords.w;\\n        int d2 = coords.u;\\n\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < \" + t.batchSize + \"; b++) {\\n          for (int yF = 0; yF < \" + t.outDepth + \"; yF++) {\\n            int xF = wF + yF * \" + e + \" - \" + o + \";\\n\\n            if (xF < 0 || xF >= \" + t.inDepth + \") {\\n              continue;\\n            }\\n\\n            for (int yR = 0; yR < \" + t.outHeight + \"; yR++) {\\n              int xR = wR + yR * \" + n + \" - \" + a + \";\\n\\n              if (xR < 0 || xR >= \" + t.inHeight + \") {\\n                continue;\\n              }\\n\\n              for (int yC = 0; yC < \" + t.outWidth + \"; yC++) {\\n                int xC = wC + yC * \" + r + \" - \" + i + \";\\n\\n                if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                  continue;\\n                }\\n\\n                float dyValue = getDy(b, yF, yR, yC, d2);\\n                float xValue = getX(b, xF, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Pi = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"W\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterDepth, n = t.filterHeight, r = t.filterWidth, o = t.strideDepth, a = t.strideHeight, i = t.strideWidth, s = e - 1 - t.padInfo.front, u = n - 1 - t.padInfo.top, c = r - 1 - t.padInfo.left;\n    this.userCode = \"\\n      const ivec3 pads = ivec3(\" + s + \", \" + u + \", \" + c + \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.u;\\n\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyFCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \" + e + \"; wF++) {\\n          float dyF = float(dyFCorner + wF) / \" + o + \".0;\\n\\n          if (dyF < 0.0 || dyF >= \" + t.outDepth + \".0 || fract(dyF) > 0.0) {\\n            continue;\\n          }\\n          int idyF = int(dyF);\\n\\n          int wFPerm = \" + e + \" - 1 - wF;\\n\\n          for (int wR = 0; wR < \" + n + \"; wR++) {\\n            float dyR = float(dyRCorner + wR) / \" + a + \".0;\\n\\n            if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 ||\\n              fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            int wRPerm = \" + n + \" - 1 - wR;\\n\\n            for (int wC = 0; wC < \" + r + \"; wC++) {\\n              float dyC = float(dyCCorner + wC) / \" + i + \".0;\\n\\n              if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              int wCPerm = \" + r + \" - 1 - wC;\\n\\n              for (int d2 = 0; d2 < \" + t.outChannels + \"; d2++) {\\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Li = function(t) {\n    this.variableNames = [\n        \"x\",\n        \"dy\"\n    ], this.outputShape = t.filterShape;\n    var e = t.strideHeight, n = t.strideWidth, r = t.padInfo.top, o = t.padInfo.left, a = t.outChannels / t.inChannels;\n    this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * \" + a + \" + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < \" + t.batchSize + \"; b++) {\\n          for (int yR = 0; yR < \" + t.outHeight + \"; yR++) {\\n            int xR = wR + yR * \" + e + \" - \" + r + \";\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < \" + t.outWidth + \"; yC++) {\\n              int xC = wC + yC * \" + n + \" - \" + o + \";\\n\\n              if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Wi = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"W\"\n    ], this.outputShape = t.inShape;\n    var e = t.filterHeight, n = t.filterWidth, r = t.strideHeight, o = t.strideWidth, a = e - 1 - t.padInfo.top, i = n - 1 - t.padInfo.left, s = t.outChannels / t.inChannels;\n    this.userCode = \"\\n      const ivec2 pads = ivec2(\" + a + \", \" + i + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < \" + e + \"; wR++) {\\n          float dyR = float(dyRCorner + wR) / \" + r + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = \" + e + \" - 1 - wR;\\n\\n          for (int wC = 0; wC < \" + n + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + o + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = \" + n + \" - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < \" + s + \"; dm++) {\\n              int d2 = d1 * \" + s + \" + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Ui = function(t, e, n, r) {\n    void 0 === e && (e = !1), void 0 === n && (n = null), void 0 === r && (r = !1), this.variableNames = [\n        \"x\",\n        \"W\"\n    ], this.outputShape = t.outShape;\n    var o = t.padInfo.top, a = t.padInfo.left, i = t.strideHeight, s = t.strideWidth, u = t.dilationHeight, c = t.dilationWidth, l = t.filterHeight, h = t.filterWidth, f = 4 * Math.floor(t.inChannels / 4), d = t.inChannels % 4, p = \"channelsLast\" === t.dataFormat, v = p ? 1 : 2, g = p ? 2 : 3, m = p ? 3 : 1, y = \"\", x = \"\";\n    n && (y = r ? \"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \" + n + \"\\n        }\" : \"\\n          float activation(float x) {\\n            \" + n + \"\\n          }\\n        \", x = \"result = activation(result);\");\n    var b = e ? \"result += getBiasAtOutCoords();\" : \"\";\n    e && this.variableNames.push(\"bias\"), r && this.variableNames.push(\"preluActivationWeights\"), this.userCode = \"\\n      \" + y + \"\\n\\n      const ivec2 strides = ivec2(\" + i + \", \" + s + \");\\n      const ivec2 pads = ivec2(\" + o + \", \" + a + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[\" + m + \"];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[\" + v + \"], coords[\" + g + \"]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + l + \"; wR++) {\\n          int xR = xRCorner + wR * \" + u + \";\\n\\n          if (xR < 0 || xR >= \" + t.inHeight + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + h + \"; wC++) {\\n            int xC = xCCorner + wC * \" + c + \";\\n\\n            if (xC < 0 || xC >= \" + t.inWidth + \") {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < \" + f + \"; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (\" + p + \") {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (\" + (1 === d) + \") {\\n\\n              if (\" + p + \") {\\n                dotProd +=\\n                    getX(batch, xR, xC, \" + f + \") *\\n                    getW(wR, wC, \" + f + \", d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, \" + f + \", xR, xC) *\\n                    getW(wR, wC, \" + f + \", d2);\\n              }\\n\\n            } else if (\" + (2 === d) + \") {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, \" + f + \", d2),\\n                getW(wR, wC, \" + f + \" + 1, d2)\\n              );\\n\\n              if (\" + p + \") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, \" + f + \"),\\n                  getX(batch, xR, xC, \" + f + \" + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, \" + f + \", xR, xC),\\n                  getX(batch, \" + f + \" + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (\" + (3 === d) + \") {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, \" + f + \", d2),\\n                getW(wR, wC, \" + f + \" + 1, d2),\\n                getW(wR, wC, \" + f + \" + 2, d2)\\n              );\\n\\n              if (\" + p + \") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, \" + f + \"),\\n                  getX(batch, xR, xC, \" + f + \" + 1),\\n                  getX(batch, xR, xC, \" + f + \" + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, \" + f + \", xR, xC),\\n                  getX(batch, \" + f + \" + 1, xR, xC),\\n                  getX(batch, \" + f + \" + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \" + b + \"\\n        \" + x + \"\\n        setOutput(result);\\n      }\\n    \";\n}, Vi = function(t) {\n    this.variableNames = [\n        \"x\",\n        \"W\"\n    ], this.outputShape = t.outShape;\n    var e = t.padInfo.front, n = t.padInfo.top, r = t.padInfo.left, o = t.strideDepth, a = t.strideHeight, i = t.strideWidth, s = t.dilationDepth, u = t.dilationHeight, c = t.dilationWidth, l = t.filterDepth, h = t.filterHeight, f = t.filterWidth, d = 4 * Math.floor(t.inChannels / 4), p = t.inChannels % 4;\n    this.userCode = \"\\n      const ivec3 strides = ivec3(\" + o + \", \" + a + \", \" + i + \");\\n      const ivec3 pads = ivec3(\" + e + \", \" + n + \", \" + r + \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < \" + l + \"; wF++) {\\n          int xF = xFCorner + wF * \" + s + \";\\n\\n          if (xF < 0 || xF >= \" + t.inDepth + \") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \" + h + \"; wR++) {\\n            int xR = xRCorner + wR * \" + u + \";\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \" + f + \"; wC++) {\\n              int xC = xCCorner + wC * \" + c + \";\\n\\n              if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < \" + d + \"; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (\" + (1 === p) + \") {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, \" + d + \") *\\n                  getW(wF, wR, wC, \" + d + \", d2);\\n              } else if (\" + (2 === p) + \") {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, \" + d + \"),\\n                  getX(batch, xF, xR, xC, \" + d + \" + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, \" + d + \", d2),\\n                  getW(wF, wR, wC, \" + d + \" + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (\" + (3 === p) + \") {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, \" + d + \"),\\n                  getX(batch, xF, xR, xC, \" + d + \" + 1),\\n                  getX(batch, xF, xR, xC, \" + d + \" + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, \" + d + \", d2),\\n                  getW(wF, wR, wC, \" + d + \" + 1, d2),\\n                  getW(wF, wR, wC, \" + d + \" + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, zi = function(t, e, n, r) {\n    void 0 === e && (e = !1), void 0 === n && (n = null), void 0 === r && (r = !1), this.variableNames = [\n        \"x\",\n        \"W\"\n    ], this.outputShape = t.outShape;\n    var o = t.inHeight, a = t.inWidth, i = t.padInfo.top, s = t.padInfo.left, u = t.strideHeight, c = t.strideWidth, l = t.dilationHeight, h = t.dilationWidth, f = t.filterHeight, d = t.filterWidth, p = t.outChannels / t.inChannels, v = \"\", g = \"\";\n    n && (v = r ? \"float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          \" + n + \"\\n        }\" : \"\\n          float activation(float x) {\\n            \" + n + \"\\n          }\\n        \", g = \"result = activation(result);\");\n    var m = e ? \"result += getBiasAtOutCoords();\" : \"\";\n    e && this.variableNames.push(\"bias\"), r && this.variableNames.push(\"preluActivationWeights\"), this.userCode = \"\\n      \" + v + \"\\n\\n      const ivec2 strides = ivec2(\" + u + \", \" + c + \");\\n      const ivec2 pads = ivec2(\" + i + \", \" + s + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / \" + p + \";\\n        int q = d2 - d1 * \" + p + \";\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < \" + f + \"; wR++) {\\n          int xR = xRCorner + wR * \" + l + \";\\n\\n          if (xR < 0 || xR >= \" + o + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + d + \"; wC++) {\\n            int xC = xCCorner + wC * \" + h + \";\\n\\n            if (xC < 0 || xC >= \" + a + \") {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        \" + m + \"\\n        \" + g + \"\\n        setOutput(result);\\n      }\\n    \";\n}, Gi = function(t, e, n, r) {\n    void 0 === e && (e = !1), void 0 === n && (n = null), void 0 === r && (r = !1), this.variableNames = [\n        \"x\",\n        \"W\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t.outShape;\n    for(var o = t.inHeight, a = t.inWidth, i = t.padInfo.top, s = t.padInfo.left, u = t.strideHeight, c = t.strideWidth, l = t.dilationHeight, h = t.dilationWidth, f = t.filterHeight, d = t.filterWidth, p = d, v = \"int xR; int xC; int xCOffset;\", g = 0; g < f; g++)for(var m = 0; m < d; m++)v += \"\\n          vec4 xTexelR\" + g + \"C\" + 2 * m + \" = vec4(0.);\\n          vec4 wR\" + g + \"C\" + m + \" = vec4(0.);\\n          vec4 xR\" + g + \"C\" + m + \" = vec4(0.);\";\n    for(g = 0; g < f; g++)for(var y = 0; y < p; y++){\n        if (v += \"\\n          xR = xRCorner + \" + g * l + \";\\n          xC = xCCorner + \" + (m = 2 * y) * h + \";\\n        \", 1 === c) {\n            if (m < d && (v += s % 2 == 1 ? \"\\n                xCOffset = xC + 1;\\n                if(xR >= 0 && xR < \" + o + \" && xCOffset >= 0 && xCOffset < \" + a + \") {\\n                  xTexelR\" + g + \"C\" + m + \" = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \" + a + \") {\\n                    xTexelR\" + g + \"C\" + m + \".zw = vec2(0.);\\n                  }\\n                } else {\\n                  xTexelR\" + g + \"C\" + m + \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + 1 - 2;\\n                if(xR >= 0 && xR < \" + o + \" && xCOffset >= 0 && xCOffset < \" + a + \") {\\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if(xCOffset + 1 >= \" + a + \") {\\n                    previous.zw = vec2(0.);\\n                  }\\n\\n                  xR\" + g + \"C\" + m + \" = vec4(previous.zw, xTexelR\" + g + \"C\" + m + \".xy);\\n                } else {\\n                  xR\" + g + \"C\" + m + \" = vec4(0, 0, xTexelR\" + g + \"C\" + m + \".xy);\\n                }\\n              \" : \"\\n                if(xR >= 0 && xR < \" + o + \" && xC >= 0 && xC < \" + a + \") {\\n                  xTexelR\" + g + \"C\" + m + \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\" + g + \"C\" + m + \" = vec4(0.);\\n                }\\n\\n                xR\" + g + \"C\" + m + \" = xTexelR\" + g + \"C\" + m + \";\\n              \", m + 1 < d)) {\n                var x = s % 2 == 0 ? b(h) : h;\n                h % 2 == 0 && s % 2 == 1 || h % 2 != 0 && s % 2 != 1 ? (v += \"\\n                  xCOffset = xC + \" + s % 2 + \" + \" + x + \";\\n\\n                  if(xR >= 0 && xR < \" + o + \" &&\\n                    xCOffset >= 0 && xCOffset < \" + a + \") {\\n                    xTexelR\" + g + \"C\" + (m + 2) + \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n                \", h > 1 && (v += \"\\n                    xCOffset -= 2;\\n                    if(xR >= 0 && xR < \" + o + \" &&\\n                      xCOffset >= 0 && xCOffset < \" + a + \") {\\n                      xTexelR\" + g + \"C\" + m + \" = getX(batch, xR, xCOffset, d1);\\n                    } else {\\n                      xTexelR\" + g + \"C\" + m + \" = vec4(0.);\\n                    }\\n                  \"), v += \"\\n                  xR\" + g + \"C\" + (m + 1) + \" = vec4(\\n                    xTexelR\" + g + \"C\" + m + \".zw, xTexelR\" + g + \"C\" + (m + 2) + \".xy);\\n                \") : v += \"\\n                  xCOffset = xC + \" + x + \";\\n\\n                  if(xR >= 0 && xR < \" + o + \" &&\\n                    xCOffset >= 0 && xCOffset < \" + a + \") {\\n                    xTexelR\" + g + \"C\" + (m + 2) + \" = getX(batch, xR, xCOffset, d1);\\n                  }\\n\\n                  xR\" + g + \"C\" + (m + 1) + \" = xTexelR\" + g + \"C\" + (m + 2) + \";\\n                \";\n            }\n        } else m < d && (v += \"\\n              if(xR >= 0 && xR < \" + o + \") {\\n            \", s % 2 == 1 ? (v += \"\\n                xCOffset = xC + 1 - \" + c + \";\\n                if(xCOffset >= 0 && xCOffset < \" + a + \") {\\n                  xTexelR\" + g + \"C\" + m + \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\" + g + \"C\" + m + \" = vec4(0.);\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < \" + a + \") {\\n                  xTexelR\" + g + \"C\" + (m + 2) + \" = getX(batch, xR, xC + 1, d1);\\n                } else {\\n                  xTexelR\" + g + \"C\" + (m + 2) + \" = vec4(0.);\\n                }\\n\\n                xR\" + g + \"C\" + m + \" = vec4(\\n                  xTexelR\" + g + \"C\" + m + \".zw, xTexelR\" + g + \"C\" + (m + 2) + \".zw);\\n              \", m + 1 < d && (v += \"\\n                  vec4 final = vec4(0.);\\n                  xCOffset = xC + 1 + \" + c + \";\\n                  if(xCOffset >= 0 && xCOffset < \" + a + \") {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xR\" + g + \"C\" + (m + 1) + \" = vec4(xTexelR\" + g + \"C\" + (m + 2) + \".xy, final.xy);\\n                \")) : (v += \"\\n                if(xC >= 0 && xC < \" + a + \") {\\n                  xTexelR\" + g + \"C\" + m + \" = getX(batch, xR, xC, d1);\\n                } else {\\n                  xTexelR\" + g + \"C\" + m + \" = vec4(0.);\\n                }\\n\\n                xCOffset = xC + \" + c + \";\\n                if(xCOffset >= 0 && xCOffset < \" + a + \") {\\n                  xTexelR\" + g + \"C\" + (m + 2) + \" = getX(batch, xR, xCOffset, d1);\\n                } else {\\n                  xTexelR\" + g + \"C\" + (m + 2) + \" = vec4(0.);\\n                }\\n\\n                xR\" + g + \"C\" + m + \" = vec4(\\n                  xTexelR\" + g + \"C\" + m + \".xy, xTexelR\" + g + \"C\" + (m + 2) + \".xy);\\n              \", m + 1 < d && (v += \"\\n                  xR\" + g + \"C\" + (m + 1) + \" = vec4(\\n                    xTexelR\" + g + \"C\" + m + \".zw, xTexelR\" + g + \"C\" + (m + 2) + \".zw);\\n                \")), v += \"}\");\n        m < d && (v += \"\\n            vec4 wTexelR\" + g + \"C\" + m + \" = getW(\" + g + \", \" + m + \", d1, q);\\n            wR\" + g + \"C\" + m + \" = vec4(wTexelR\" + g + \"C\" + m + \".xz, wTexelR\" + g + \"C\" + m + \".xz);\\n          \", m + 1 < d && (v += \"\\n              vec4 wTexelR\" + g + \"C\" + (m + 1) + \" = getW(\" + g + \", \" + (m + 1) + \", d1, q);\\n              wR\" + g + \"C\" + (m + 1) + \" =\\n                vec4(wTexelR\" + g + \"C\" + (m + 1) + \".xz, wTexelR\" + g + \"C\" + (m + 1) + \".xz);\"));\n    }\n    for(g = 0; g < f; g++)for(m = 0; m < d; m++)v += \"dotProd += xR\" + g + \"C\" + m + \" * wR\" + g + \"C\" + m + \";\";\n    var w = \"\", C = \"\";\n    n && (w = r ? \"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \" + n + \"\\n        }\" : \"vec4 activation(vec4 x) {\\n          \" + n + \"\\n        }\", C = \"result = activation(result);\");\n    var E = e ? \"result += getBiasAtOutCoords();\" : \"\";\n    e && this.variableNames.push(\"bias\"), r && this.variableNames.push(\"preluActivationWeights\"), this.userCode = \"\\n      \" + w + \"\\n\\n      const ivec2 strides = ivec2(\" + u + \", \" + c + \");\\n      const ivec2 pads = ivec2(\" + i + \", \" + s + \");\\n\\n      void main() {\\n\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2;\\n        int q = 0;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        vec4 dotProd = vec4(0.);\\n\\n        \" + v + \"\\n\\n        vec4 result = dotProd;\\n        \" + E + \"\\n        \" + C + \"\\n        setOutput(result);\\n      }\\n    \";\n}, Hi = function(t, e, n, r, o) {\n    this.variableNames = [\n        \"Image\",\n        \"Boxes\",\n        \"BoxInd\"\n    ], this.outputShape = [];\n    var a = t[0], i = t[1], s = t[2], u = t[3], c = e[0], l = n[0], h = n[1];\n    this.outputShape = [\n        c,\n        l,\n        h,\n        u\n    ];\n    var f = \"bilinear\" === r ? 1 : 0, d = [\n        i - 1 + \".0\",\n        s - 1 + \".0\"\n    ], p = d[0], v = d[1], g = l > 1 ? [\n        \"\" + (i - 1) / (l - 1),\n        \"(y2-y1) * height_ratio\",\n        \"y1*\" + p + \" + float(y)*(height_scale)\"\n    ] : [\n        \"0.0\",\n        \"0.0\",\n        \"0.5 * (y1+y2) * \" + p\n    ], m = g[0], y = g[1], x = g[2], b = h > 1 ? [\n        \"\" + (s - 1) / (h - 1),\n        \"(x2-x1) * width_ratio\",\n        \"x1*\" + v + \" + float(x)*(width_scale)\"\n    ] : [\n        \"0.0\",\n        \"0.0\",\n        \"0.5 * (x1+x2) * \" + v\n    ], w = b[0], C = b[1], E = b[2];\n    this.userCode = \"\\n      const float height_ratio = float(\" + m + \");\\n      const float width_ratio = float(\" + w + \");\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int y = coords[1];\\n        int x = coords[2];\\n        int d = coords[3];\\n\\n        // get box vals\\n        float y1 = getBoxes(b,0);\\n        float x1 = getBoxes(b,1);\\n        float y2 = getBoxes(b,2);\\n        float x2 = getBoxes(b,3);\\n\\n        // get image in batch index\\n        int bInd = round(getBoxInd(b));\\n        if(bInd < 0 || bInd >= \" + a + \") {\\n          return;\\n        }\\n\\n        float height_scale = \" + y + \";\\n        float width_scale = \" + C + \";\\n\\n        float in_y = \" + x + \";\\n        if( in_y < 0.0 || in_y > \" + p + \" ) {\\n          setOutput(float(\" + o + \"));\\n          return;\\n        }\\n        float in_x = \" + E + \";\\n        if( in_x < 0.0 || in_x > \" + v + \" ) {\\n          setOutput(float(\" + o + \"));\\n          return;\\n        }\\n\\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\\n        if(\" + f + \" == 1) {\\n          // Compute the four integer indices.\\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\\n\\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\\n\\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\\n\\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\\n          float newValue = top + (bottom - top) * fracCR.y;\\n          setOutput(newValue);\\n        } else {\\n          // Compute the coordinators of nearest neighbor point.\\n          ivec2 sourceNearestCR = ivec2(floor(\\n            sourceFracIndexCR + vec2(0.5,0.5)));\\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\\n          setOutput(newValue);\\n        }\\n      }\\n    \";\n}, qi = function(t, e, n) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = t;\n    var r = t.length, o = t[t.length - 1], a = n ? \"<\" : \">\";\n    this.userCode = \"\\n      int getIndex(int i) {\\n        \" + (n ? \"return \" + o + \" -i - 1;\" : \"return i;\") + \"\\n      }\\n\\n      void main() {\\n        \" + ui(r) + \" coords = getOutputCoords();\\n        int end = \" + Ki(r, \"coords\") + \";\\n        float val = 0.0;\\n        for (int i = \" + o + \" - 1; i >= 0; i -= 1) {\\n          int idx = getIndex(i);\\n          if (idx \" + a + \" end) {\\n            continue;\\n          }\\n          if (idx == end && \" + e + \") {\\n            continue;\\n          }\\n          \" + Ki(r, \"coords\") + \" = idx;\\n          val += getX(\" + function(t, e) {\n        if (1 === t) return \"\" + e;\n        if (2 === t) return e + \".x, \" + e + \".y\";\n        if (3 === t) return e + \".x, \" + e + \".y, \" + e + \".z\";\n        if (4 === t) return e + \".x, \" + e + \".y, \" + e + \".z, \" + e + \".w\";\n        throw Error(\"Cumulative sum for rank \" + t + \" is not yet supported\");\n    }(r, \"coords\") + \");\\n        }\\n        setOutput(val);\\n      }\\n    \";\n};\nfunction Ki(t, e) {\n    if (1 === t) return \"\" + e;\n    if (2 === t) return e + \".y\";\n    if (3 === t) return e + \".z\";\n    if (4 === t) return e + \".w\";\n    throw Error(\"Cumulative sum for rank \" + t + \" is not yet supported\");\n}\nvar ji = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !1, this.packedOutput = !0, this.outPackingScheme = Vt.DENSE;\n    var e = Yt(t), n = Ya();\n    this.outputShape = t, this.userCode = \"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \" + $a([\n        \"r\",\n        \"c\",\n        \"d\"\n    ], t) + \"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\" + e[0] + \", \" + e[1] + \"));\\n        int index = 4 * (resTexRC.x * \" + e[1] + \" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getA(rc.x, rc.y, rc.z);\\n        }\\n\\n        \" + n.output + \" = result;\\n      }\\n    \";\n}, Xi = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outPackingScheme = Vt.DENSE;\n    var e = Yt(t), n = Ya();\n    this.outputShape = t, this.userCode = \"\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        \" + $a([\n        \"r\",\n        \"c\",\n        \"d\"\n    ], t) + \"\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n          vec2(\" + e[0] + \", \" + e[1] + \"));\\n        int index = 4 * (resTexRC.x * \" + e[1] + \" + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\\n        }\\n\\n        \" + n.output + \" = result;\\n      }\\n    \";\n}, Yi = function() {\n    function t(t, e, n) {\n        this.variableNames = [\n            \"x\"\n        ], this.outputShape = [], this.outputShape = t, this.blockSize = e, this.dataFormat = n, this.userCode = \"\\n    void main() {\\n      ivec4 coords = getOutputCoords();\\n      int b = coords[0];\\n      int h = \" + this.getHeightCoordString() + \";\\n      int w = \" + this.getWidthCoordString() + \";\\n      int d = \" + this.getDepthCoordString() + \";\\n\\n      int in_h = h / \" + e + \";\\n      int offset_h = imod(h, \" + e + \");\\n      int in_w = w / \" + e + \";\\n      int offset_w = imod(w, \" + e + \");\\n      int offset_d = (offset_h * \" + e + \" + offset_w) *\\n        \" + this.getOutputDepthSize() + \";\\n      int in_d = d + offset_d;\\n\\n      float result = \" + this.getInputSamplingString() + \";\\n      setOutput(result);\\n    }\\n  \";\n    }\n    return t.prototype.getHeightCoordString = function() {\n        return \"NHWC\" === this.dataFormat ? \"coords[1]\" : \"coords[2]\";\n    }, t.prototype.getWidthCoordString = function() {\n        return \"NHWC\" === this.dataFormat ? \"coords[2]\" : \"coords[3]\";\n    }, t.prototype.getDepthCoordString = function() {\n        return \"NHWC\" === this.dataFormat ? \"coords[3]\" : \"coords[1]\";\n    }, t.prototype.getOutputDepthSize = function() {\n        return \"NHWC\" === this.dataFormat ? this.outputShape[3] : this.outputShape[1];\n    }, t.prototype.getInputSamplingString = function() {\n        return \"NHWC\" === this.dataFormat ? \"getX(b, in_h, in_w, in_d)\" : \"getX(b, in_d, in_h, in_w)\";\n    }, t;\n}(), $i = function(t) {\n    this.variableNames = [\n        \"X\"\n    ], this.outputShape = [\n        t,\n        t\n    ], this.userCode = \"\\n      void main() {\\n          ivec2 coords = getOutputCoords();\\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\\n          setOutput(val);\\n      }\\n    \";\n}, Qi = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.outTexUsage = zt.DOWNLOAD;\n    var e = Ya();\n    this.outputShape = t, this.userCode = \"\\n      \" + Ja + \"\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        \" + e.output + \" = encode_float(x);\\n      }\\n    \";\n}, Ji = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !1, this.outTexUsage = zt.DOWNLOAD;\n    var e = Ya();\n    this.outputShape = t, this.userCode = \"\\n      \" + Ja + \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\\n        \" + e.output + \" = encode_float(x);\\n      }\\n    \";\n}, Zi = function(t, e, n) {\n    void 0 === n && (n = !1), this.variableNames = [\n        \"A\"\n    ];\n    var r = Ya(), o = e[0], a = e[1];\n    this.outputShape = t;\n    var i = \"result\";\n    n && (i = \"floor(result * 255. + 0.5)\"), this.userCode = \"\\n      \" + Qa(t) + \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n        \\n        int r = flatIndex / \" + a + \";\\n        int c = imod(flatIndex, \" + a + \");\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(\" + a + \".0, \" + o + \".0);\\n        vec4 values = \" + r.texture2D + \"(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        \" + r.output + \" = vec4(\" + i + \", 0., 0., 0.);\\n      }\\n    \";\n}, ts = function(t, e, n) {\n    void 0 === n && (n = !1), this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !1, this.packedOutput = !0;\n    var r = Ya(), o = e[0], a = e[1];\n    this.outputShape = t;\n    var i = \"\", s = \"result\";\n    n && (s = \"floor(result * 255. + 0.5)\");\n    for(var u = 0; u <= 1; u++)for(var c = 0; c <= 1; c++){\n        var l = 2 * u + c;\n        i += \"\\n          localCoords = coords;\\n          if(localCoords[2] + \" + c + \" < \" + t[2] + \") {\\n            localCoords[2] += \" + c + \";\\n            if(localCoords[1] + \" + u + \" < \" + t[1] + \") {\\n              localCoords[1] += \" + u + \";\\n\\n              flatIndex = getFlatIndex(localCoords);\\n              offset = imod(flatIndex, 4);\\n\\n              flatIndex = idiv(flatIndex, 4, 1.);\\n\\n              r = flatIndex / \" + a + \";\\n              c = imod(flatIndex, \" + a + \");\\n              uv = (vec2(c, r) + halfCR) / vec2(\" + a + \".0, \" + o + \".0);\\n              values = \" + r.texture2D + \"(A, uv);\\n\\n              if(offset == 0) {\\n                result[\" + l + \"] = values[0];\\n              } else if(offset == 1) {\\n                result[\" + l + \"] = values[1];\\n              } else if(offset == 2) {\\n                result[\" + l + \"] = values[2];\\n              } else {\\n                result[\" + l + \"] = values[3];\\n              }\\n            }\\n          }\\n        \";\n    }\n    this.userCode = \"\\n      \" + Qa(t) + \"\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n        int flatIndex, r, c, offset;\\n        ivec3 localCoords;\\n        vec2 uv;\\n        vec4 values;\\n\\n        \" + i + \"\\n\\n        \" + r.output + \" = \" + s + \";\\n      }\\n    \";\n}, es = \"return real * expR - imag * expI;\", ns = \"return real * expI + imag * expR;\", rs = function(t, e, n) {\n    this.variableNames = [\n        \"real\",\n        \"imag\"\n    ];\n    var r = e[1];\n    this.outputShape = e;\n    var o = n ? \"2.0 * \" + Math.PI : \"-2.0 * \" + Math.PI, a = n ? r + \".0\" : \"1.0\";\n    this.userCode = \"\\n      const float exponentMultiplier = \" + o + \";\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        \" + t + \"\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(\" + r + \");\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < \" + r + \"; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / \" + a + \";\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    \";\n}, os = function() {\n    function t(t, e) {\n        this.outputShape = [], this.variableNames = [\n            \"x\"\n        ], this.outputShape = t, this.userCode = \"\\n      uniform float value;\\n      void main() {\\n        // Input can be obtained from uniform value.\\n        setOutput(value);\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t) {\n        var e = this;\n        return function(n, r) {\n            null == e.valueLoc && (e.valueLoc = n.getUniformLocationNoThrow(r, \"value\")), n.gl.uniform1f(e.valueLoc, t);\n        };\n    }, t;\n}(), as = function(t, e, n) {\n    this.variableNames = [\n        \"A\",\n        \"indices\"\n    ];\n    var r = t.slice();\n    r[n] = e, this.outputShape = r, this.rank = r.length;\n    var o = ui(this.rank), a = function(t, e) {\n        var n = t.length;\n        if (n > 4) throw Error(\"Gather for rank \" + n + \" is not yet supported\");\n        if (1 === n) return \"int(getIndices(resRC))\";\n        for(var r = [\n            \"resRC.x\",\n            \"resRC.y\",\n            \"resRC.z\",\n            \"resRC.w\"\n        ], o = [], a = 0; a < t.length; a++)a === e ? o.push(\"int(getIndices(\" + r[a] + \"))\") : o.push(\"\" + r[a]);\n        return o.join();\n    }(t, n);\n    this.userCode = \"\\n      void main() {\\n        \" + o + \" resRC = getOutputCoords();\\n        setOutput(getA(\" + a + \"));\\n      }\\n    \";\n};\nvar is = function(t, e, n) {\n    this.sliceDim = t, this.strides = e, this.variableNames = [\n        \"x\",\n        \"indices\"\n    ], this.outputShape = n;\n    var r = ui(e.length), o = ui(n.length), a = this.sliceDim > 1 ? \"strides[j]\" : \"strides\";\n    this.userCode = \"\\n        \" + r + \" strides = \" + r + \"(\" + this.strides + \");\\n         void main() {\\n          \" + o + \" coords = getOutputCoords();\\n          int flattenIndex = 0;\\n          for (int j = 0; j < \" + this.sliceDim + \"; j++) {\\n            int index = round(getIndices(coords[0], j));\\n            flattenIndex += index * \" + a + \";\\n          }\\n          setOutput(getX(flattenIndex, coords[1]));\\n        }\\n      \";\n};\nfunction ss(t, e) {\n    var n = Ya();\n    return oe(t, e, n.version + \"\\n    precision highp float;\\n    \" + n.attribute + \" vec3 clipSpacePos;\\n    \" + n.attribute + \" vec2 uv;\\n    \" + n.varyingVs + \" vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }\");\n}\nfunction us(t, e) {\n    return fe(t, e, new Float32Array([\n        -1,\n        1,\n        0,\n        0,\n        1,\n        -1,\n        -1,\n        0,\n        0,\n        0,\n        1,\n        1,\n        0,\n        1,\n        1,\n        1,\n        -1,\n        0,\n        1,\n        0\n    ]));\n}\nfunction cs(t, e) {\n    return de(t, e, new Uint16Array([\n        0,\n        1,\n        2,\n        2,\n        1,\n        3\n    ]));\n}\nfunction ls(t, e, n, r, o, a, i) {\n    ve(n, r);\n    var s = pe(t, e), u = t.TEXTURE_2D;\n    return Jt(t, e, function() {\n        return t.bindTexture(u, s);\n    }), Jt(t, e, function() {\n        return t.texParameteri(u, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE);\n    }), Jt(t, e, function() {\n        return t.texParameteri(u, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE);\n    }), Jt(t, e, function() {\n        return t.texParameteri(u, t.TEXTURE_MIN_FILTER, t.NEAREST);\n    }), Jt(t, e, function() {\n        return t.texParameteri(u, t.TEXTURE_MAG_FILTER, t.NEAREST);\n    }), Jt(t, e, function() {\n        return t.texImage2D(u, 0, o, n, r, 0, a, i, null);\n    }), Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, null);\n    }), s;\n}\nfunction hs(t, e, n, r, o) {\n    var a = Xt(n, r);\n    return ls(t, e, a[0], a[1], o.internalFormatFloat, o.textureFormatFloat, t.FLOAT);\n}\nfunction fs(t, e, n, r, o) {\n    var a = Xt(n, r);\n    return ls(t, e, a[0], a[1], o.internalFormatHalfFloat, o.textureFormatFloat, o.textureTypeHalfFloat);\n}\nfunction ds(t, e, n, r, o) {\n    var a = Xt(n, r);\n    return ls(t, e, a[0], a[1], t.RGBA, t.RGBA, t.UNSIGNED_BYTE);\n}\nfunction ps(t, e, n, r, o) {\n    var a = $t(n, r);\n    return ls(t, e, a[0], a[1], o.internalFormatPackedFloat, t.RGBA, t.FLOAT);\n}\nfunction vs(t, e, n, r, o) {\n    var a = $t(n, r);\n    return ls(t, e, a[0], a[1], o.internalFormatPackedHalfFloat, t.RGBA, o.textureTypeHalfFloat);\n}\nfunction gs(t, e, n, r) {\n    return Jt(t, e, function() {\n        return t.bindBuffer(t.ARRAY_BUFFER, r);\n    }), me(t, e, n, \"clipSpacePos\", r, 3, 20, 0) && me(t, e, n, \"uv\", r, 2, 20, 12);\n}\nfunction ms(t, e, n, r, o, a, i) {\n    var s, u, c;\n    Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, n);\n    }), a instanceof Uint8Array ? (s = new Uint8Array(r * o * 4), u = t.UNSIGNED_BYTE, c = t.RGBA) : (s = new Float32Array(r * o * 4), u = t.FLOAT, c = i.internalFormatPackedFloat), s.set(a), Jt(t, e, function() {\n        return t.texImage2D(t.TEXTURE_2D, 0, c, r, o, 0, t.RGBA, u, s);\n    }), Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, null);\n    });\n}\nfunction ys(t, e, n, r) {\n    Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, n);\n    }), r.data instanceof Uint8Array ? Jt(t, e, function() {\n        return t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, r.width, r.height, 0, t.RGBA, t.UNSIGNED_BYTE, r.data);\n    }) : Jt(t, e, function() {\n        return t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, t.RGBA, t.UNSIGNED_BYTE, r);\n    }), Jt(t, e, function() {\n        return t.bindTexture(t.TEXTURE_2D, null);\n    });\n}\nfunction xs(t, e, n, r, o) {\n    var a = t.createBuffer();\n    Jt(t, e, function() {\n        return t.bindBuffer(t.PIXEL_PACK_BUFFER, a);\n    });\n    var i = 16 * n * r;\n    return Jt(t, e, function() {\n        return t.bufferData(t.PIXEL_PACK_BUFFER, i, t.STREAM_READ);\n    }), Jt(t, e, function() {\n        return t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, 0);\n    }), Jt(t, e, function() {\n        return t.bindBuffer(t.PIXEL_PACK_BUFFER, null);\n    }), a;\n}\nfunction bs(t, e, n) {\n    var r = t, o = new Float32Array(n);\n    return r.bindBuffer(r.PIXEL_PACK_BUFFER, e), r.getBufferSubData(r.PIXEL_PACK_BUFFER, 0, o), r.bindBuffer(r.PIXEL_PACK_BUFFER, null), o;\n}\nfunction ws(t, e, n, r, o) {\n    var a = Xt(n, r), i = a[0], s = a[1], u = new Uint8Array(n * r * 4);\n    return Jt(t, e, function() {\n        return t.readPixels(0, 0, i, s, o.downloadTextureFormat, t.UNSIGNED_BYTE, u);\n    }), new Float32Array(u.buffer);\n}\nfunction Cs(t, e, n, r, o, a, i, s) {\n    var u = t, c = new Float32Array(function(t, e) {\n        var n = $t(t, e);\n        return n[0] * n[1] * 4;\n    }(a, i));\n    return u.bindBuffer(u.PIXEL_PACK_BUFFER, e), u.getBufferSubData(u.PIXEL_PACK_BUFFER, 0, c), u.bindBuffer(u.PIXEL_PACK_BUFFER, null), c;\n}\nfunction Es(t, e, n, r) {\n    var o = new Float32Array(n * r * 4);\n    return Jt(t, e, function() {\n        return t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, o);\n    }), o;\n}\nvar Rs = Object.freeze({\n    createVertexShader: ss,\n    createVertexBuffer: us,\n    createIndexBuffer: cs,\n    createFloat32MatrixTexture: hs,\n    createFloat16MatrixTexture: fs,\n    createUnsignedBytesMatrixTexture: ds,\n    createPackedMatrixTexture: ps,\n    createFloat16PackedMatrixTexture: vs,\n    bindVertexProgramAttributeStreams: gs,\n    uploadDenseMatrixToTexture: ms,\n    uploadPixelDataToTexture: ys,\n    createBufferFromOutputTexture: xs,\n    downloadFloat32MatrixFromBuffer: bs,\n    downloadByteEncodedFloatMatrixFromOutputTexture: ws,\n    downloadPackedMatrixFromBuffer: Cs,\n    downloadMatrixFromPackedOutputTexture: Es\n}), Is = function() {\n    function t(t) {\n        this.outputTexture = null, this.program = null, this.disposed = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [];\n        var e = i().getNumber(\"WEBGL_VERSION\");\n        null != t ? (this.gl = t, Kt(e, t)) : this.gl = jt(e);\n        var n = \"WEBGL_color_buffer_float\";\n        if (1 === i().getNumber(\"WEBGL_VERSION\")) {\n            if (this.textureFloatExtension = re(this.gl, this.debug, \"OES_texture_float\"), Pe(this.gl, \"OES_texture_half_float\")) this.textureHalfFloatExtension = re(this.gl, this.debug, \"OES_texture_half_float\");\n            else if (i().get(\"WEBGL_FORCE_F16_TEXTURES\")) throw new Error(\"GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");\n            if (this.colorBufferFloatExtension = this.gl.getExtension(n), Pe(this.gl, \"EXT_color_buffer_half_float\")) this.colorBufferHalfFloatExtension = re(this.gl, this.debug, \"EXT_color_buffer_half_float\");\n            else if (i().get(\"WEBGL_FORCE_F16_TEXTURES\")) throw new Error(\"GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");\n        } else if (n = \"EXT_color_buffer_float\", Pe(this.gl, n)) this.colorBufferFloatExtension = this.gl.getExtension(n);\n        else {\n            if (!Pe(this.gl, \"EXT_color_buffer_half_float\")) throw new Error(\"GL context does not support color renderable floats\");\n            this.colorBufferHalfFloatExtension = this.gl.getExtension(\"EXT_color_buffer_half_float\");\n        }\n        this.vertexBuffer = us(this.gl, this.debug), this.indexBuffer = cs(this.gl, this.debug), this.framebuffer = ge(this.gl, this.debug), this.textureConfig = Qt(this.gl, this.textureHalfFloatExtension);\n    }\n    return Object.defineProperty(t.prototype, \"debug\", {\n        get: function() {\n            return i().getBool(\"DEBUG\");\n        },\n        enumerable: !0,\n        configurable: !0\n    }), t.prototype.dispose = function() {\n        var t = this;\n        if (!this.disposed) {\n            null != this.program && console.warn(\"Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.\"), null != this.outputTexture && console.warn(\"Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.\");\n            var e = this.gl;\n            Jt(e, this.debug, function() {\n                return e.finish();\n            }), Jt(e, this.debug, function() {\n                return e.bindFramebuffer(e.FRAMEBUFFER, null);\n            }), Jt(e, this.debug, function() {\n                return e.deleteFramebuffer(t.framebuffer);\n            }), Jt(e, this.debug, function() {\n                return e.bindBuffer(e.ARRAY_BUFFER, null);\n            }), Jt(e, this.debug, function() {\n                return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null);\n            }), Jt(e, this.debug, function() {\n                return e.deleteBuffer(t.indexBuffer);\n            }), this.disposed = !0;\n        }\n    }, t.prototype.createFloat32MatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), hs(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.createFloat16MatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), fs(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.createUnsignedBytesMatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), ds(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.uploadPixelDataToTexture = function(t, e) {\n        this.throwIfDisposed(), ys(this.gl, this.debug, t, e);\n    }, t.prototype.uploadDenseMatrixToTexture = function(t, e, n, r) {\n        this.throwIfDisposed(), ms(this.gl, this.debug, t, e, n, r, this.textureConfig);\n    }, t.prototype.createFloat16PackedMatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), vs(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.createPackedMatrixTexture = function(t, e) {\n        return this.throwIfDisposed(), ps(this.gl, this.debug, t, e, this.textureConfig);\n    }, t.prototype.deleteMatrixTexture = function(t) {\n        var e = this;\n        this.throwIfDisposed(), this.outputTexture === t && (Ee(this.gl, this.debug, this.framebuffer), this.outputTexture = null), Jt(this.gl, this.debug, function() {\n            return e.gl.deleteTexture(t);\n        });\n    }, t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function(t, e, n) {\n        var r = this;\n        return this.downloadMatrixDriver(t, function() {\n            return ws(r.gl, r.debug, e, n, r.textureConfig);\n        });\n    }, t.prototype.downloadPackedMatrixFromBuffer = function(t, e, n, r, o, a) {\n        return Cs(this.gl, t, 0, 0, 0, o, a, this.textureConfig);\n    }, t.prototype.downloadFloat32MatrixFromBuffer = function(t, e) {\n        return bs(this.gl, t, e);\n    }, t.prototype.createBufferFromTexture = function(t, e, n) {\n        this.bindTextureToFrameBuffer(t);\n        var r = xs(this.gl, this.debug, e, n, this.textureConfig);\n        return this.unbindTextureToFrameBuffer(), r;\n    }, t.prototype.createAndWaitForFence = function() {\n        var t = this.createFence(this.gl);\n        return this.pollFence(t);\n    }, t.prototype.createFence = function(t) {\n        var e, n, r = this;\n        if (i().getBool(\"WEBGL_FENCE_API_ENABLED\")) {\n            var o = t, a = o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            t.flush(), n = function() {\n                var t = o.clientWaitSync(a, 0, 0);\n                return t === o.ALREADY_SIGNALED || t === o.CONDITION_SATISFIED;\n            }, e = a;\n        } else i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") > 0 ? (e = this.beginQuery(), this.endQuery(), n = function() {\n            return r.isQueryAvailable(e, i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"));\n        }) : n = function() {\n            return !0;\n        };\n        return {\n            query: e,\n            isFencePassed: n\n        };\n    }, t.prototype.downloadMatrixFromPackedTexture = function(t, e, n) {\n        var r = this;\n        return this.downloadMatrixDriver(t, function() {\n            return Es(r.gl, r.debug, e, n);\n        });\n    }, t.prototype.createProgram = function(t) {\n        this.throwIfDisposed();\n        var e = this.gl, n = ae(e, this.debug, t), r = ss(e, this.debug), o = ce(e, this.debug);\n        return Jt(e, this.debug, function() {\n            return e.attachShader(o, r);\n        }), Jt(e, this.debug, function() {\n            return e.attachShader(o, n);\n        }), le(e, this.debug, o), this.debug && he(e, this.debug, o), this.vertexAttrsAreBound || (this.setProgram(o), this.vertexAttrsAreBound = gs(e, this.debug, this.program, this.vertexBuffer)), o;\n    }, t.prototype.deleteProgram = function(t) {\n        var e = this;\n        this.throwIfDisposed(), t === this.program && (this.program = null), null != t && Jt(this.gl, this.debug, function() {\n            return e.gl.deleteProgram(t);\n        });\n    }, t.prototype.setProgram = function(t) {\n        var e = this;\n        this.throwIfDisposed(), this.program = t, null != this.program && this.debug && he(this.gl, this.debug, this.program), Jt(this.gl, this.debug, function() {\n            return e.gl.useProgram(t);\n        });\n    }, t.prototype.getUniformLocation = function(t, e, n) {\n        return void 0 === n && (n = !0), this.throwIfDisposed(), n ? xe(this.gl, this.debug, t, e) : be(this.gl, t, e);\n    }, t.prototype.getAttributeLocation = function(t, e) {\n        var n = this;\n        return this.throwIfDisposed(), Jt(this.gl, this.debug, function() {\n            return n.gl.getAttribLocation(t, e);\n        });\n    }, t.prototype.getUniformLocationNoThrow = function(t, e) {\n        return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);\n    }, t.prototype.setInputMatrixTexture = function(t, e, n) {\n        this.throwIfDisposed(), this.throwIfNoProgram(), we(this.gl, this.debug, this.program, t, e, n);\n    }, t.prototype.setOutputMatrixTexture = function(t, e, n) {\n        this.setOutputMatrixTextureDriver(t, n, e);\n    }, t.prototype.setOutputPackedMatrixTexture = function(t, e, n) {\n        this.throwIfDisposed();\n        var r = $t(e, n), o = r[0], a = r[1];\n        this.setOutputMatrixTextureDriver(t, o, a);\n    }, t.prototype.setOutputMatrixWriteRegion = function(t, e, n, r) {\n        this.setOutputMatrixWriteRegionDriver(n, t, r, e);\n    }, t.prototype.setOutputPackedMatrixWriteRegion = function(t, e, n, r) {\n        throw new Error(\"setOutputPackedMatrixWriteRegion not implemented.\");\n    }, t.prototype.debugValidate = function() {\n        null != this.program && he(this.gl, this.debug, this.program), Re(this.gl);\n    }, t.prototype.executeProgram = function() {\n        this.throwIfDisposed(), this.throwIfNoProgram();\n        var t = this.gl;\n        this.debug && this.debugValidate(), Jt(t, this.debug, function() {\n            return t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0);\n        });\n    }, t.prototype.blockUntilAllProgramsCompleted = function() {\n        var t = this;\n        this.throwIfDisposed(), Jt(this.gl, this.debug, function() {\n            return t.gl.finish();\n        });\n    }, t.prototype.getQueryTimerExtension = function() {\n        return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = re(this.gl, this.debug, 2 === i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\") ? \"EXT_disjoint_timer_query_webgl2\" : \"EXT_disjoint_timer_query\")), this.disjointQueryTimerExtension;\n    }, t.prototype.getQueryTimerExtensionWebGL2 = function() {\n        return this.getQueryTimerExtension();\n    }, t.prototype.getQueryTimerExtensionWebGL1 = function() {\n        return this.getQueryTimerExtension();\n    }, t.prototype.beginQuery = function() {\n        if (2 === i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")) {\n            var t = this.gl, e = this.getQueryTimerExtensionWebGL2(), n = t.createQuery();\n            return t.beginQuery(e.TIME_ELAPSED_EXT, n), n;\n        }\n        var r = this.getQueryTimerExtensionWebGL1(), o = r.createQueryEXT();\n        return r.beginQueryEXT(r.TIME_ELAPSED_EXT, o), o;\n    }, t.prototype.endQuery = function() {\n        if (2 !== i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")) {\n            var t = this.getQueryTimerExtensionWebGL1();\n            t.endQueryEXT(t.TIME_ELAPSED_EXT);\n        } else {\n            var e = this.gl, n = this.getQueryTimerExtensionWebGL2();\n            e.endQuery(n.TIME_ELAPSED_EXT);\n        }\n    }, t.prototype.waitForQueryAndGetTime = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e = this;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            F(function() {\n                                return e.disposed || e.isQueryAvailable(t, i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"));\n                            })\n                        ];\n                    case 1:\n                        return n.sent(), [\n                            2,\n                            this.getQueryTime(t, i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))\n                        ];\n                }\n            });\n        });\n    }, t.prototype.getQueryTime = function(t, e) {\n        if (0 === e) return null;\n        if (2 === e) {\n            var n = this.gl;\n            return n.getQueryParameter(t, n.QUERY_RESULT) / 1e6;\n        }\n        var r = this.getQueryTimerExtensionWebGL1();\n        return r.getQueryObjectEXT(t, r.QUERY_RESULT_EXT) / 1e6;\n    }, t.prototype.isQueryAvailable = function(t, e) {\n        if (0 === e) return !0;\n        if (2 === e) {\n            var n = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = n.getQueryParameter(t, n.QUERY_RESULT_AVAILABLE);\n            return null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;\n        }\n        o = (r = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t, r.QUERY_RESULT_AVAILABLE_EXT);\n        return null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;\n    }, t.prototype.pollFence = function(t) {\n        var e = this;\n        return new Promise(function(n) {\n            e.addItemToPoll(function() {\n                return t.isFencePassed();\n            }, function() {\n                return n();\n            });\n        });\n    }, t.prototype.pollItems = function() {\n        for(var t = function(t) {\n            for(var e = 0; e < t.length; ++e){\n                if (!t[e]()) break;\n            }\n            return e - 1;\n        }(this.itemsToPoll.map(function(t) {\n            return t.isDoneFn;\n        })), e = 0; e <= t; ++e){\n            (0, this.itemsToPoll[e].resolveFn)();\n        }\n        this.itemsToPoll = this.itemsToPoll.slice(t + 1);\n    }, t.prototype.addItemToPoll = function(t, e) {\n        var n = this;\n        this.itemsToPoll.push({\n            isDoneFn: t,\n            resolveFn: e\n        }), this.itemsToPoll.length > 1 || F(function() {\n            return n.pollItems(), 0 === n.itemsToPoll.length;\n        });\n    }, t.prototype.bindTextureToFrameBuffer = function(t) {\n        this.throwIfDisposed(), Ce(this.gl, this.debug, t, this.framebuffer), this.debug && Re(this.gl);\n    }, t.prototype.unbindTextureToFrameBuffer = function() {\n        null != this.outputTexture ? (Ce(this.gl, this.debug, this.outputTexture, this.framebuffer), this.debug && Re(this.gl)) : Ee(this.gl, this.debug, this.framebuffer);\n    }, t.prototype.downloadMatrixDriver = function(t, e) {\n        this.bindTextureToFrameBuffer(t);\n        var n = e();\n        return this.unbindTextureToFrameBuffer(), n;\n    }, t.prototype.setOutputMatrixTextureDriver = function(t, e, n) {\n        this.throwIfDisposed();\n        var r = this.gl;\n        Ce(r, this.debug, t, this.framebuffer), this.debug && Re(r), this.outputTexture = t, Jt(r, this.debug, function() {\n            return r.viewport(0, 0, e, n);\n        }), Jt(r, this.debug, function() {\n            return r.scissor(0, 0, e, n);\n        });\n    }, t.prototype.setOutputMatrixWriteRegionDriver = function(t, e, n, r) {\n        var o = this;\n        this.throwIfDisposed(), Jt(this.gl, this.debug, function() {\n            return o.gl.scissor(t, e, n, r);\n        });\n    }, t.prototype.throwIfDisposed = function() {\n        if (this.disposed) throw new Error(\"Attempted to use disposed GPGPUContext.\");\n    }, t.prototype.throwIfNoProgram = function() {\n        if (null == this.program) throw new Error(\"No GPU program is currently set.\");\n    }, t;\n}();\nfunction ks(t, e) {\n    if (t.length !== e.length) throw Error(\"Binary was compiled with \" + t.length + \" inputs, but was executed with \" + e.length + \" inputs\");\n    t.forEach(function(t, n) {\n        var r = t.logicalShape, o = e[n], a = o.shape;\n        if (!S(r, a)) throw Error(\"Binary was compiled with different shapes than the current args. Shapes \" + r + \" and \" + a + \" must match\");\n        if (!t.isUniform || !o.isUniform) {\n            var i = t.texShape, s = o.isUniform ? null : o.texData.texShape;\n            if (!S(i, s)) throw Error(\"Binary was compiled with different texture shapes than the current args. Shape \" + i + \" and \" + s + \" must match\");\n        }\n    });\n}\nvar Ss = function(t, e, n) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t;\n    for(var r = n.filterWidth, o = n.inChannels, a = n.strideWidth, i = n.strideHeight, s = n.padInfo, u = n.outWidth, c = n.dilationWidth, l = n.dilationHeight, h = n.dataFormat, f = s.left, d = s.top, p = o * r, v = Ya(), g = \"channelsLast\" === h, m = g ? 0 : 1, y = g ? 1 : 2, x = \"\", b = 0; b <= 1; b++)for(var w = 0; w <= 1; w++)x += \"\\n          blockIndex = rc.y + \" + w + \";\\n          pos = rc.x + \" + b + \";\\n\\n          if(blockIndex < \" + t[1] + \" && pos < \" + t[0] + \") {\\n            offsetY = int(blockIndex / (\" + u + \")) * \" + i + \" - \" + d + \";\\n            d0 = offsetY + \" + l + \" * (pos / \" + p + \");\\n\\n            if(d0 < \" + e[m] + \" && d0 >= 0) {\\n\\n              offsetX = int(mod(float(blockIndex), \" + u + \".) * \" + a + \". - \" + f + \".);\\n              d1 = offsetX + \" + c + \" * (int(mod(float(pos), \" + p + \".) / \" + o + \".));\\n\\n              if(d1 < \" + e[y] + \" && d1 >= 0) {\\n\\n                ch = int(mod(float(pos), \" + o + \".));\\n\\n                if (\" + g + \") {\\n                  innerDims = vec2(d1, ch);\\n                  result[\" + (2 * b + w) + \"] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[\" + (2 * b + w) + \"] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        \";\n    this.userCode = \"\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        \" + x + \"\\n\\n        \" + v.output + \" = result;\\n      }\\n    \";\n}, As = function(t, e, n, r, o) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = [];\n    var a, i = e, s = t[3] - 1;\n    this.outputShape = t;\n    var u = \"float(\" + n + \") + float(\" + r + \") * sum\";\n    a = .5 === o ? \"inversesqrt(\" + u + \")\" : 1 === o ? \"1.0/(\" + u + \")\" : \"exp(log(\" + u + \") * float(-\" + o + \"));\", this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -\" + i + \"; j <= \" + i + \"; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  \" + s + \") {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * \" + a + \";\\n        setOutput(val);\\n      }\\n    \";\n}, Ts = function(t, e, n, r, o) {\n    this.variableNames = [\n        \"inputImage\",\n        \"outputImage\",\n        \"dy\"\n    ], this.outputShape = [], this.outputShape = t, this.depth = t[3], this.depthRadius = e, this.bias = n, this.alpha = r, this.beta = o, this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float result = 0.0;\\n        for (int d = 0; d < \" + this.depth + \"; ++d) {\\n          int depthBegin = int(max(0.0, float(d - \" + e + \")));\\n          int depthEnd = int(min(float(\" + this.depth + \"),\\n              float(d + \" + e + \" + 1)));\\n\\n          const int MIN_DEPTH_BEGIN = 0;\\n          const int MAX_DEPTH_END = \" + this.depth + \";\\n\\n          float norm = 0.0;\\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd) {\\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n\\n          norm = float(\" + r + \") * norm + float(\" + n + \");\\n\\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd){\\n              float dyi = -2.0 * float(\" + r + \")\\n                * float(\" + o + \")\\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\\n                / norm;\\n              if (k == d) {\\n                dyi += pow(norm, -1.0 * \" + o + \");\\n              }\\n              if (k == coords[3]) {\\n                dyi *= getDy(b, r, c, d);\\n                result += dyi;\\n              }\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n      }\\n      setOutput(result);\\n      }\\n    \";\n}, Ds = function(t, e, n, r, o) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = [], this.packedInputs = !0, this.packedOutput = !0;\n    var a, i = e, s = t[3] - 1;\n    this.outputShape = t;\n    var u = \"float(\" + n + \") + float(\" + r + \") * sum\";\n    a = .5 === o ? \"inversesqrt(\" + u + \")\" : 1 === o ? \"1.0/(\" + u + \")\" : \"exp(log(\" + u + \") * float(-\" + o + \"));\", this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords.x;\\n        int r = coords.y;\\n        int c = coords.z;\\n        int d = coords.w;\\n\\n        bool hasNextCol = d < \" + this.outputShape[3] + \";\\n        bool hasNextRow = c < \" + this.outputShape[2] + \";\\n\\n        vec4 sum = vec4(0.);\\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\\n\\n        vec4 xAtOutputCoords = vec4(\\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\\n          hasNextCol ?\\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\\n          hasNextRow ?\\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\\n        );\\n\\n        int firstChannel = d - \" + i + \";\\n        vec2 cache = vec2(0.);\\n        if(firstChannel >= 0){\\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\\n            if(hasNextRow){\\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\\n            }\\n        }\\n\\n        ivec2 depth = ivec2(d, d + 1);\\n        for (int j = - \" + i + \"; j <= \" + i + \"; j++) {\\n          ivec2 idx = depth + j;\\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(\" + s + \"));\\n\\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\\n\\n          if(depthInRange || depthPlusOneInRange){\\n            vec4 z = vec4(0.);\\n            vec4 xFragAtCurrentDepth;\\n            z.xz = cache.xy;\\n            if(depthPlusOneInRange && hasNextCol){\\n              xFragAtCurrentDepth = idx.y != d ?\\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\\n              if(hasNextRow){\\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\\n              }\\n            }\\n            cache.xy = z.yw;\\n            sum += z * z;\\n          }\\n        }\\n        vec4 result = xAtOutputCoords * \" + a + \";\\n        setOutput(result);\\n      }\\n    \";\n}, Ns = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"maxPos\"\n    ], this.outputShape = t.inShape;\n    var e = t.strideHeight, n = t.strideWidth, r = t.dilationHeight, o = t.effectiveFilterHeight, a = t.effectiveFilterWidth, i = o - 1 - t.padInfo.top, s = a - 1 - t.padInfo.left, u = o * a - 1;\n    this.userCode = \"\\n      const ivec2 pads = ivec2(\" + i + \", \" + s + \");\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < \" + o + \";\\n          wR += \" + r + \") {\\n          float dyR = float(dyRCorner + wR) / \" + e + \".0;\\n\\n          if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < \" + a + \"; wC++) {\\n            float dyC = float(dyCCorner + wC) / \" + n + \".0;\\n\\n            if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = \" + u + \" - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * \" + a + \" + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, Fs = function(t) {\n    this.variableNames = [\n        \"dy\",\n        \"maxPos\"\n    ], this.outputShape = t.inShape;\n    var e = t.strideDepth, n = t.strideHeight, r = t.strideWidth, o = t.dilationDepth, a = t.dilationHeight, i = t.dilationWidth, s = t.effectiveFilterDepth, u = t.effectiveFilterHeight, c = t.effectiveFilterWidth, l = s - 1 - t.padInfo.front, h = u - 1 - t.padInfo.top, f = c - 1 - t.padInfo.left, d = s * u * c - 1;\n    this.userCode = \"\\n      const ivec3 pads = ivec3(\" + l + \", \" + h + \", \" + f + \");\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < \" + s + \";\\n           wD += \" + o + \") {\\n          float dyD = float(dyDCorner + wD) / \" + e + \".0;\\n\\n          if (dyD < 0.0 || dyD >= \" + t.outDepth + \".0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < \" + u + \";\\n              wR += \" + a + \") {\\n            float dyR = float(dyRCorner + wR) / \" + n + \".0;\\n\\n            if (dyR < 0.0 || dyR >= \" + t.outHeight + \".0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < \" + c + \";\\n                wC += \" + i + \") {\\n              float dyC = float(dyCCorner + wC) / \" + r + \".0;\\n\\n              if (dyC < 0.0 || dyC >= \" + t.outWidth + \".0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n              int maxPosValue = \" + d + \" -\\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\\n\\n              // Get the current value, check it against the value from the\\n              // position matrix.\\n              int curPosValue =\\n                  wD * \" + u + \" * \" + c + \" +\\n                  wR * \" + c + \" + wC;\\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n              dotProd += dyValue * mask;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    \";\n}, _s = function(t, e, n, r, o, a, i) {\n    void 0 === n && (n = !1), void 0 === r && (r = !1), void 0 === o && (o = !1), void 0 === a && (a = null), void 0 === i && (i = !1), this.variableNames = [\n        \"matrixA\",\n        \"matrixB\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e;\n    var s = n ? t[1] : t[2], u = Math.ceil(s / 2), c = n ? \"i * 2, rc.y\" : \"rc.y, i * 2\", l = r ? \"rc.z, i * 2\" : \"i * 2, rc.z\", h = n ? [\n        \"a.xxyy\",\n        \"a.zzww\"\n    ] : [\n        \"a.xxzz\",\n        \"a.yyww\"\n    ], f = r ? [\n        \"b.xzxz\",\n        \"b.ywyw\"\n    ] : [\n        \"b.xyxy\",\n        \"b.zwzw\"\n    ], d = \"\", p = \"\";\n    a && (d = i ? \"vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          \" + a + \"\\n        }\" : \"vec4 activation(vec4 x) {\\n          \" + a + \"\\n        }\", p = \"result = activation(result);\");\n    var v = o ? \"result += getBiasAtOutCoords();\" : \"\";\n    o && this.variableNames.push(\"bias\"), i && this.variableNames.push(\"preluActivationWeights\"), this.userCode = \"\\n      \" + d + \"\\n\\n      const float sharedDimension = \" + u + \".0;\\n\\n      vec4 dot2x2ARowBCol(ivec3 rc) {\\n        vec4 result = vec4(0);\\n        for (int i = 0; i < \" + u + \"; i++) {\\n          vec4 a = getMatrixA(rc.x, \" + c + \");\\n          vec4 b = getMatrixB(rc.x, \" + l + \");\\n\\n          // These swizzled products need to be separately added.\\n          // See: https://github.com/tensorflow/tfjs/issues/1735\\n          result += (\" + h[0] + \" * \" + f[0] + \");\\n          result += (\" + h[1] + \" * \" + f[1] + \");\\n        }\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n        vec4 result = dot2x2ARowBCol(rc);\\n\\n        \" + v + \"\\n\\n        \" + p + \"\\n\\n        setOutput(result);\\n      }\\n    \";\n}, Os = function() {\n    function t(t, e, n) {\n        this.variableNames = [\n            \"probs\"\n        ], this.outputShape = [\n            t,\n            n\n        ], this.userCode = \"\\n      uniform float seed;\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < \" + (e - 1) + \"; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(\" + (e - 1) + \"));\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t) {\n        var e = this;\n        return function(n, r) {\n            null == e.seedLoc && (e.seedLoc = n.getUniformLocation(r, \"seed\")), n.gl.uniform1f(e.seedLoc, t);\n        };\n    }, t;\n}(), Ms = function(t, e, n, r) {\n    this.variableNames = [\n        \"indices\"\n    ], this.outputShape = [\n        t,\n        e\n    ], this.userCode = \"\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int index = round(getIndices(coords.x));\\n        setOutput(mix(float(\" + r + \"), float(\" + n + \"),\\n                      float(index == coords.y)));\\n      }\\n    \";\n}, Bs = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !1, this.packedOutput = !0, this.outputShape = t;\n    var e = t.length;\n    if (0 === e) this.userCode = \"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";\n    else {\n        var n = Xa(\"rc\", e), r = ui(e), o = function(t, e, n) {\n            if (1 === t) return \"rc > \" + e[0];\n            for(var r = \"\", o = t - 2; o < t; o++)r += n[o] + \" >= \" + e[o], o < t - 1 && (r += \"||\");\n            return r;\n        }(e, t, n), a = function(t, e, n, r) {\n            if (1 === t) return \"\";\n            var o = r.slice(-2);\n            return \"\\n    int r = \" + o[0] + \";\\n    int c = \" + o[1] + \";\\n    int rp1 = r + 1;\\n    int cp1 = c + 1;\\n\\n    bool cEdge = cp1 >= \" + e + \";\\n    bool rEdge = rp1 >= \" + n + \";\\n  \";\n        }(e, t[t.length - 1], t[t.length - 2], n), i = function(t, e) {\n            var n = t.length, r = function(t, e) {\n                for(var n = [], r = 0; r <= 1; r++)for(var o = 0; o <= 1; o++){\n                    for(var a = (0 === r ? \"r\" : \"rp1\") + \", \" + (0 === o ? \"c\" : \"cp1\"), i = 2; i < t; i++)a = e[e.length - 1 - i] + \",\" + a;\n                    n.push(a);\n                }\n                return n;\n            }(n, e);\n            return 1 === n ? \"getA(rc),\\n            rc + 1 >= \" + t[0] + \" ? 0. : getA(rc + 1),\\n            0, 0\" : \"getA(\" + r[0] + \"),\\n          cEdge ? 0. : getA(\" + r[1] + \"),\\n          rEdge ? 0. : getA(\" + r[2] + \"),\\n          rEdge || cEdge ? 0. : getA(\" + r[3] + \")\";\n        }(t, n);\n        this.userCode = \"\\n        void main() {\\n          \" + r + \" rc = getOutputCoords();\\n\\n          if(\" + o + \") {\\n            setOutput(vec4(0));\\n          } else {\\n            \" + a + \"\\n\\n            setOutput(vec4(\" + i + \"));\\n          }\\n        }\\n      \";\n    }\n};\nvar Ps = function(t, e, n) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = e.map(function(e, n) {\n        return e[0] + t[n] + e[1];\n    });\n    var r = t.length, o = ui(r), a = e.map(function(t) {\n        return t[0];\n    }).join(\",\"), i = e.map(function(e, n) {\n        return e[0] + t[n];\n    }).join(\",\"), s = [\n        \"coords[0]\",\n        \"coords[1]\",\n        \"coords[2]\",\n        \"coords[3]\"\n    ].slice(0, r);\n    this.userCode = 1 !== r ? \"\\n      \" + o + \" start = \" + o + \"(\" + a + \");\\n      \" + o + \" end = \" + o + \"(\" + i + \");\\n\\n      void main() {\\n        \" + o + \" outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(float(\" + n + \"));\\n        } else {\\n          \" + o + \" coords = outC - start;\\n          setOutput(getX(\" + s + \"));\\n        }\\n      }\\n    \" : \"\\n        int start = \" + a + \";\\n        int end = \" + i + \";\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(float(\" + n + \"));\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      \";\n}, Ls = function(t, e, n) {\n    this.variableNames = [\n        \"x\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = e.map(function(e, n) {\n        return e[0] + t[n] + e[1];\n    });\n    for(var r = t.length, o = ui(r), a = e.map(function(t) {\n        return t[0];\n    }).join(\",\"), i = e.map(function(e, n) {\n        return e[0] + t[n];\n    }).join(\",\"), s = Xa(\"rc\", r), u = Xa(\"source\", r), c = s[r - 1] + \" < \" + this.outputShape[r - 1], l = 1 === r ? \"source\" : \"vec2(\" + u.slice(-2).join() + \")\", h = [\n        o + \" rc = outputLoc;\",\n        s[r - 1] + \" += 1;\\n       if(\" + c + \") {\\n      \",\n        1 === r ? \"\" : \"}\\n       rc = outputLoc;\\n       \" + s[r - 2] + \" += 1;\\n       if(\" + s[r - 2] + \" < \" + this.outputShape[r - 2] + \") {\",\n        1 === r ? \"\" : \"  \" + s[r - 1] + \" += 1;\\n         if(\" + c + \") {\"\n    ], f = 1 === r ? \"rc < start || rc >= end\" : \"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))\", d = \"\", p = 0, v = 1 === r ? 2 : 4; p < v; p++)d += \"\\n        \" + h[p] + \"\\n        if (\" + f + \") {\\n          result[\" + p + \"] = float(\" + n + \");\\n        } else {\\n          \" + o + \" source = rc - start;\\n          result[\" + p + \"] = getChannel(getX(\" + u.join() + \"), \" + l + \");\\n        }\\n      \";\n    d += 1 === r ? \"} \" : \"}}\", this.userCode = \"\\n      const \" + o + \" start = \" + o + \"(\" + a + \");\\n      const \" + o + \" end = \" + o + \"(\" + i + \");\\n\\n      void main() {\\n        \" + o + \" outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        \" + d + \"\\n        setOutput(result);\\n      }\\n    \";\n}, Ws = function(t, e, n, r, o) {\n    if (void 0 === r && (r = !1), void 0 === o && (o = !1), this.variableNames = [\n        \"x\"\n    ], \"avg\" === e && n) throw new Error(\"Cannot compute positions for average pool.\");\n    var a = t.filterWidth, i = t.strideHeight, s = t.strideWidth, u = t.dilationHeight, c = t.dilationWidth, l = t.effectiveFilterHeight, h = t.effectiveFilterWidth, f = t.padInfo.top, d = t.padInfo.left;\n    this.outputShape = t.outShape;\n    var p = \"avg\" === e, v = \"((batch  * \" + t.inHeight + \" + xR) * \" + t.inWidth + \" + xC) * \" + t.inChannels + \" + d\", g = \"(xR * \" + t.inWidth + \" + xC) * \" + t.inChannels + \" + d\", m = \"0.0\";\n    if (p || (m = \"-1.0 / 1e-20\"), n) this.userCode = \"\\n        const ivec2 strides = ivec2(\" + i + \", \" + s + \");\\n        const ivec2 pads = ivec2(\" + f + \", \" + d + \");\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < \" + l + \";\\n              wR += \" + u + \") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \" + h + \";\\n                wC += \" + c + \") {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value >= currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = \" + (r ? o ? v : g : \"wR * \" + h + \" + wC\") + \";\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";\n    else {\n        var y = e + \"(\" + e + \"(\" + e + \"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\n        \"avg\" === e && (y = \"avgValue / count\");\n        var x = 4 * Math.floor(a / 4), b = a % 4, w = \"\\n      if (\" + p + \") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";\n        this.userCode = \"\\n      const ivec2 strides = ivec2(\" + i + \", \" + s + \");\\n      const ivec2 pads = ivec2(\" + f + \", \" + d + \");\\n      const float initializationValue = \" + m + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= \" + t.inWidth + \") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\" + m + \");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wR = 0; wR < \" + l + \";\\n            wR += \" + u + \") {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= \" + t.inHeight + \") {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < \" + x + \"; wC += 4) {\\n            int xC = xCCorner + wC * \" + c + \";\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \" + c + \", d),\\n              getValue(batch, xR, xC + 2 * \" + c + \", d),\\n              getValue(batch, xR, xC + 3 * \" + c + \", d)\\n            );\\n\\n            \" + w + \"\\n          }\\n\\n          int xC = xCCorner + \" + x + \";\\n          if (\" + (1 === b) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \" + w + \"\\n          } else if (\" + (2 === b) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \" + c + \", d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            \" + w + \"\\n          } else if (\" + (3 === b) + \") {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + \" + c + \", d),\\n              getValue(batch, xR, xC + 2 * \" + c + \", d),\\n              initializationValue\\n            );\\n\\n            \" + w + \"\\n          }\\n        }\\n        setOutput(\" + y + \");\\n      }\\n    \";\n    }\n}, Us = function(t, e, n, r, o) {\n    if (void 0 === r && (r = !1), void 0 === o && (o = !1), this.variableNames = [\n        \"x\"\n    ], \"avg\" === e && n) throw new Error(\"Cannot compute positions for average pool.\");\n    var a = t.filterWidth, i = t.strideDepth, s = t.strideHeight, u = t.strideWidth, c = t.dilationDepth, l = t.dilationHeight, h = t.dilationWidth, f = t.effectiveFilterDepth, d = t.effectiveFilterHeight, p = t.effectiveFilterWidth, v = t.padInfo.front, g = t.padInfo.top, m = t.padInfo.left;\n    this.outputShape = t.outShape;\n    var y = \"avg\" === e, x = \"0.0\";\n    if (y || (x = \"-1.0 / 1e-20\"), n) this.userCode = \"\\n        const ivec3 strides =\\n            ivec3(\" + i + \", \" + s + \", \" + u + \");\\n        const ivec3 pads = ivec3(\" + v + \", \" + g + \", \" + m + \");\\n\\n        void main() {\\n          ivec5 coords = getOutputCoords();\\n          int batch = coords.x;\\n          int ch = coords.u;\\n\\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n          int xDCorner = xCorner.x;\\n          int xRCorner = xCorner.y;\\n          int xCCorner = xCorner.z;\\n\\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n\\n          for (int wD = 0; wD < \" + f + \";\\n              wD += \" + c + \") {\\n            int xD = xDCorner + wD;\\n\\n            if (xD < 0 || xD >= \" + t.inDepth + \") {\\n              continue;\\n            }\\n\\n            for (int wR = 0; wR < \" + d + \";\\n                wR += \" + l + \") {\\n              int xR = xRCorner + wR;\\n\\n              if (xR < 0 || xR >= \" + t.inHeight + \") {\\n                continue;\\n              }\\n\\n              for (int wC = 0; wC < \" + p + \";\\n                  wC += \" + h + \") {\\n                int xC = xCCorner + wC;\\n\\n                if (xC < 0 || xC >= \" + t.inWidth + \") {\\n                  continue;\\n                }\\n\\n                float value = getX(batch, xD, xR, xC, ch);\\n\\n                // If a min / max value has already been found, use it. If not,\\n                // use the current value.\\n                float currMinMaxValue = mix(\\n                    value, minMaxValue, minMaxValueFound);\\n                if (value >= currMinMaxValue) {\\n                  minMaxValue = value;\\n                  minMaxValueFound = 1.0;\\n                  minMaxPosition = \" + (r ? o ? \"(((batch * \" + t.inDepth + \" + xD) * \" + t.inHeight + \" + xR) * \" + t.inWidth + \" + xC) * \" + t.inChannels + \" + ch\" : \"((xD * \" + t.inHeight + \" + xR) * \" + t.inWidth + \" + xC) * \" + t.inChannels + \" + ch\" : \"wD * \" + d + \" * \" + p + \" +\\n                      wR * \" + p + \" + wC\") + \";\\n                }\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      \";\n    else {\n        var b = e + \"(\" + e + \"(\" + e + \"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\n        \"avg\" === e && (b = \"avgValue / count\");\n        var w = 4 * Math.floor(a / 4), C = a % 4, E = \"\\n      if (\" + y + \") {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    \";\n        this.userCode = \"\\n      const ivec3 strides =\\n        ivec3(\" + i + \", \" + s + \", \" + u + \");\\n      const ivec3 pads = ivec3(\" + v + \", \" + g + \", \" + m + \");\\n      const float initializationValue = \" + x + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\\n        if (xC < 0 || xC >= \" + t.inWidth + \") {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xD, xR, xC, ch);\\n      }\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xDCorner = xCorner.x;\\n        int xRCorner = xCorner.y;\\n        int xCCorner = xCorner.z;\\n\\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(\" + x + \");\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wD = 0; wD < \" + f + \";\\n            wD += \" + c + \") {\\n          int xD = xDCorner + wD;\\n\\n          if (xD < 0 || xD >= \" + t.inDepth + \") {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < \" + d + \";\\n            wR += \" + l + \") {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= \" + t.inHeight + \") {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < \" + w + \"; wC += 4) {\\n              int xC = xCCorner + wC * \" + h + \";\\n\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \" + h + \", ch),\\n                getValue(batch, xD, xR, xC + 2 * \" + h + \", ch),\\n                getValue(batch, xD, xR, xC + 3 * \" + h + \", ch)\\n              );\\n\\n              \" + E + \"\\n            }\\n\\n            int xC = xCCorner + \" + w + \";\\n            if (\" + (1 === C) + \") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                initializationValue,\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \" + E + \"\\n            } else if (\" + (2 === C) + \") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \" + h + \", ch),\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              \" + E + \"\\n            } else if (\" + (3 === C) + \") {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + \" + h + \", ch),\\n                getValue(batch, xD, xR, xC + 2 * \" + h + \", ch),\\n                initializationValue\\n              );\\n\\n              \" + E + \"\\n            }\\n          }\\n          setOutput(\" + b + \");\\n        }\\n      }\\n    \";\n    }\n}, Vs = function(t, e) {\n    this.variableNames = [\n        \"x\"\n    ];\n    var n = t.windowSize, r = t.batchSize, o = t.inSize, a = Math.ceil(o / n);\n    this.outputShape = [\n        r,\n        a\n    ];\n    var i = \"0.0\", s = \"\";\n    \"prod\" === e ? i = \"1.0\" : \"min\" === e ? (i = \"1.0 / 1e-20\", s = \"min\") : \"max\" === e && (i = \"-1.0 / 1e-20\", s = \"max\");\n    var u = e + \"(\" + e + \"(\" + e + \"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])\";\n    \"sum\" === e ? u = \"sumValue\" : \"prod\" === e ? u = \"prodValue\" : \"all\" === e ? u = \"allValue\" : \"any\" === e && (u = \"anyValue\");\n    var c = 4 * Math.floor(n / 4), l = n % 4, h = \"\\n      if (\" + (\"sum\" === e) + \") {\\n        sumValue += dot(values, ones);\\n      } else if (\" + (\"prod\" === e) + \") {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = \" + s + \"(values, minMaxValue);\\n      }\\n    \", f = \"vec4\";\n    \"all\" === e ? (i = \"1.0\", h = \"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \", f = \"bvec4\") : \"any\" === e && (i = \"0.0\", h = \"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \", f = \"bvec4\");\n    var d = \"\";\n    o % n > 0 && (d = \"\\n        if (inIdx < 0 || inIdx >= \" + o + \") {\\n          return initializationValue;\\n        }\\n      \"), this.userCode = \"\\n      const float initializationValue = \" + i + \";\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        \" + d + \"\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * \" + n + \";\\n\\n        vec4 minMaxValue = vec4(\" + i + \");\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < \" + c + \"; i += 4) {\\n          int inIdx = inOffset + i;\\n          \" + f + \" values = \" + f + \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          \" + h + \"\\n        }\\n\\n        int inIdx = inOffset + \" + c + \";\\n        if (\" + (1 === l) + \") {\\n          \" + f + \" values = \" + f + \"(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \" + h + \"\\n        } else if (\" + (2 === l) + \") {\\n          \" + f + \" values = \" + f + \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          \" + h + \"\\n        } else if (\" + (3 === l) + \") {\\n          \" + f + \" values = \" + f + \"(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          \" + h + \"\\n        }\\n        setOutput(\" + u + \");\\n      }\\n    \";\n}, zs = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t;\n    for(var n = \"\", r = 0; r < 4; r++){\n        var o = \"thisRC = rc;\";\n        r % 2 == 1 && (o += \"thisRC.z += 1;\"), r > 1 && (o += \"thisRC.y += 1;\"), n += \"\\n        \" + o + \"\\n        \" + (r > 0 ? \"if(thisRC.y < rows && thisRC.z < cols){\" : \"\") + \"\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[\" + r + \"] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        \" + (r > 0 ? \"}\" : \"\") + \"\\n      \";\n    }\n    this.userCode = \"\\n      \\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      \" + $a([\n        \"r\",\n        \"c\",\n        \"d\"\n    ], e) + \"\\n      return ivec3(r, c, d);\\n    }\\n  \\n      \" + Qa(t) + \"\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = \" + t[1] + \";\\n        int cols = \" + t[2] + \";\\n\\n        \" + n + \"\\n\\n        setOutput(result);\\n      }\\n    \";\n};\nvar Gs = function(t, e, n) {\n    this.variableNames = [\n        \"dy\"\n    ], this.outputShape = [], this.outputShape = e.shape;\n    var r = e.shape, o = r[1], a = r[2], i = t.shape, s = i[1], u = i[2], c = [\n        n && s > 1 ? o - 1 : o,\n        n && u > 1 ? a - 1 : a\n    ], l = [\n        n && s > 1 ? s - 1 : s,\n        n && u > 1 ? u - 1 : u\n    ], h = c[0] / l[0], f = c[1] / l[1], d = 1 / h, p = 1 / f, v = 2 * Math.ceil(d) + 2, g = 2 * Math.ceil(p) + 2;\n    this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\" + h + \");\\n        const float widthScale = float(\" + f + \");\\n\\n        const float invHeightScale = float(\" + d + \");\\n        const float invWidthScale = float(\" + p + \");\\n\\n        const int winHeight = int(\" + v + \");\\n        const int winWidth = int(\" + g + \");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(startRLerp - float(winHeight / 2));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(startCLerp - float(winWidth / 2));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \" + s + \") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \" + u + \") {\\n              continue;\\n            }\\n\\n            float dxR = float(dyR) * heightScale;\\n            int topDxRIndex = int(floor(dxR));\\n            int bottomDxRIndex = int(min(ceil(dxR), \" + (o - 1) + \".0));\\n            float dxRLerp = dxR - float(topDxRIndex);\\n            float inverseDxRLerp = 1.0 - dxRLerp;\\n\\n            float dxC = float(dyC) * widthScale;\\n            int leftDxCIndex = int(floor(dxC));\\n            int rightDxCIndex = int(min(ceil(dxC), \" + (a - 1) + \".0));\\n            float dxCLerp = dxC - float(leftDxCIndex);\\n            float inverseDxCLerp = 1.0 - dxCLerp;\\n\\n            if (r == topDxRIndex && c == leftDxCIndex) {\\n              // topLeft\\n              accumulator +=\\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == topDxRIndex && c == rightDxCIndex) {\\n              // topRight\\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\\n              // bottomLeft\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\\n              // bottomRight\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \";\n}, Hs = function(t, e, n, r) {\n    this.variableNames = [\n        \"A\"\n    ], this.outputShape = [];\n    var o = t[0], a = t[1], i = t[2], s = t[3];\n    this.outputShape = [\n        o,\n        e,\n        n,\n        s\n    ];\n    var u = [\n        r && e > 1 ? a - 1 : a,\n        r && n > 1 ? i - 1 : i\n    ], c = [\n        r && e > 1 ? e - 1 : e,\n        r && n > 1 ? n - 1 : n\n    ];\n    this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \" + u[0] / c[0] + \",\\n          \" + u[1] / c[1] + \");\\n      const vec2 inputShapeRC = vec2(\" + a + \".0, \" + i + \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    \";\n}, qs = function(t, e, n, r) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = [];\n    var o = t[0], a = t[1], i = t[2], s = t[3];\n    this.outputShape = [\n        o,\n        e,\n        n,\n        s\n    ];\n    var u = [\n        r && e > 1 ? a - 1 : a,\n        r && n > 1 ? i - 1 : i\n    ], c = [\n        r && e > 1 ? e - 1 : e,\n        r && n > 1 ? n - 1 : n\n    ];\n    this.userCode = \"\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          \" + u[0] / c[0] + \",\\n          \" + u[1] / c[1] + \",\\n          \" + u[1] / c[1] + \");\\n      const vec3 inputShapeRC = vec3(\" + a + \".0, \" + i + \".0,\\n                                     \" + i + \".0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < \" + (s - 1) + \";\\n        bool hasNextRow = coords.z < \" + (n - 1) + \";\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    \";\n}, Ks = function(t, e, n) {\n    this.variableNames = [\n        \"dy\"\n    ], this.outputShape = [], this.outputShape = e.shape;\n    var r = e.shape, o = r[1], a = r[2], i = t.shape, s = i[1], u = i[2], c = [\n        n && s > 1 ? o - 1 : o,\n        n && u > 1 ? a - 1 : a\n    ], l = [\n        n && s > 1 ? s - 1 : s,\n        n && u > 1 ? u - 1 : u\n    ], h = c[0] / l[0], f = c[1] / l[1], d = 1 / h, p = 1 / f, v = 2 * Math.ceil(d) + 2, g = 2 * Math.ceil(p) + 2;\n    this.userCode = \"\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(\" + h + \");\\n        const float widthScale = float(\" + f + \");\\n\\n        const float invHeightScale = float(\" + d + \");\\n        const float invWidthScale = float(\" + p + \");\\n\\n        const int winHeight = int(\" + v + \");\\n        const int winWidth = int(\" + g + \");\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= \" + s + \") {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= \" + u + \") {\\n              continue;\\n            }\\n\\n            float sourceFracRow =\\n              float(\" + c[0] + \") *\\n                (float(dyR) / float(\" + l[0] + \"));\\n\\n            float sourceFracCol =\\n                float(\" + c[1] + \") *\\n                  (float(dyC) / float(\" + l[1] + \"));\\n\\n            int sourceNearestRow = int(min(\\n                float(int(\" + o + \") - 1),\\n                \" + n + \" ? float(round(sourceFracRow)) :\\n                                  float(floor(sourceFracRow))));\\n\\n            int sourceNearestCol = int(min(\\n                float(int(\" + a + \") - 1),\\n                \" + n + \" ? float(round(sourceFracCol)) :\\n                                  float(floor(sourceFracCol))));\\n\\n            if (r == sourceNearestRow && c == sourceNearestCol) {\\n              accumulator += getDy(b, dyR, dyC, d);\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    \";\n}, js = function(t, e, n, r) {\n    this.variableNames = [\n        \"A\"\n    ], this.outputShape = [];\n    var o = t[0], a = t[1], i = t[2], s = t[3];\n    this.outputShape = [\n        o,\n        e,\n        n,\n        s\n    ];\n    var u = [\n        r && e > 1 ? a - 1 : a,\n        r && n > 1 ? i - 1 : i\n    ], c = [\n        r && e > 1 ? e - 1 : e,\n        r && n > 1 ? n - 1 : n\n    ], l = r ? \"0.5\" : \"0.0\";\n    this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \" + u[0] / c[0] + \",\\n          \" + u[1] / c[1] + \");\\n      const vec2 inputShapeRC = vec2(\" + a + \".0, \" + i + \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + \" + l + \")));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \";\n}, Xs = function(t, e) {\n    this.variableNames = [\n        \"x\"\n    ];\n    var n = t.length;\n    if (n > 4) throw new Error(\"WebGL backend: Reverse of rank-\" + n + \" tensor is not yet supported\");\n    if (this.outputShape = t, 1 !== n) {\n        var r = t.map(function(n, r) {\n            return function(n) {\n                return -1 !== e.indexOf(n) && 1 !== t[n] ? t[n] + \" - coords[\" + n + \"] - 1\" : \"coords[\" + n + \"]\";\n            }(r);\n        }).join(\",\"), o = ui(n);\n        this.userCode = \"\\n      void main() {\\n        \" + o + \" coords = getOutputCoords();\\n        setOutput(getX(\" + r + \"));\\n      }\\n    \";\n    } else this.userCode = \"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\" + t[0] + \" - coord - 1));\\n        }\\n      \";\n}, Ys = function(t, e) {\n    this.variableNames = [\n        \"x\"\n    ], this.packedInputs = !0, this.packedOutput = !0;\n    var n = t.length;\n    if (n > 4) throw new Error(\"WebGL backend: Reverse of rank-\" + n + \" tensor is not yet supported\");\n    this.outputShape = t;\n    var r = Xa(\"rc\", n), o = r[n - 1] + \" + 1 < \" + this.outputShape[n - 1], a = r[n - 2] + \" + 1 < \" + this.outputShape[n - 2], i = ui(n);\n    function s(n) {\n        var r = t.map(function(r, o) {\n            return function(n, r) {\n                return -1 !== e.indexOf(n) && 1 !== t[n] ? t[n] + \" - \" + r[n] + \" - 1\" : \"\" + r[n];\n            }(o, n);\n        });\n        return \"getChannel(getX(\" + r.join(\",\") + \"), vec2(\" + r.slice(-2).join(\",\") + \"))\";\n    }\n    this.userCode = 1 === n ? \"\\n        void main(){\\n          int rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = getChannel(getX(\" + t[0] + \" - rc - 1),\\n            \" + t[0] + \" - rc - 1);\\n          if(\" + o + \"){\\n              result.g = getChannel(getX(\" + t[0] + \" - (rc  + 1) - 1),\\n                \" + t[0] + \" - (rc  + 1) - 1);\\n          }\\n          setOutput(result);\\n        }\\n      \" : \"\\n        void main() {\\n          \" + i + \" rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = \" + function(t) {\n        return s(t);\n    }(r.slice()) + \";\\n          if(\" + o + \"){\\n            result.g = \" + function(t) {\n        return t[n - 1] = \"(\" + t[n - 1] + \" + 1)\", s(t);\n    }(r.slice()) + \";\\n          }\\n          if(\" + a + \") {\\n            result.b = \" + function(t) {\n        return t[n - 2] = \"(\" + t[n - 2] + \" + 1)\", s(t);\n    }(r.slice()) + \";\\n            if(\" + o + \") {\\n              result.a = \" + function(t) {\n        return t[n - 1] = \"(\" + t[n - 1] + \" + 1)\", t[n - 2] = \"(\" + t[n - 2] + \" + 1)\", s(t);\n    }(r.slice()) + \";\\n            }\\n          }\\n          setOutput(result);\\n        }\\n    \";\n}, $s = function(t, e, n, r, o, a, i) {\n    void 0 === i && (i = !0), this.variableNames = [\n        \"updates\",\n        \"indices\",\n        \"defaultValue\"\n    ], this.outputShape = a;\n    var s = ui(o.length), u = ui(a.length), c = \"\";\n    1 === n ? c = \"i\" : 2 === n && (c = \"i, j\");\n    var l = \"getIndices(\" + c + \")\", h = \"\";\n    1 === r ? h = \"i\" : 2 === r && (h = \"i, coords[1]\");\n    var f = \"getUpdates(\" + h + \")\", d = e > 1 ? \"strides[j]\" : \"strides\";\n    this.userCode = \"\\n        \" + s + \" strides = \" + s + \"(\" + o + \");\\n\\n        void main() {\\n          \" + u + \" coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < \" + t + \"; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < \" + e + \"; j++) {\\n              int index = round(\" + l + \");\\n              flattenedIndex += index * \" + d + \";\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += \" + f + \";\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      \";\n}, Qs = function(t, e) {\n    this.variableNames = [\n        \"x\",\n        \"segmentIds\"\n    ];\n    var n = t.windowSize, r = t.batchSize, o = t.inSize, a = t.numSegments, i = a * Math.ceil(o / n);\n    this.outputShape = [\n        r,\n        i\n    ];\n    var s = 4 * Math.floor(n / 4), u = n % 4, c = \"\\n        sumValue += dot(values, segFilter);\\n    \", l = \"\";\n    o % n > 0 && (l = \"\\n        if (inIdx < 0 || inIdx >= \" + o + \") {\\n          return initializationValue;\\n        }\\n      \");\n    var h = \"\";\n    o % n > 0 && (h = \"\\n        if (inIdx < 0 || inIdx >= \" + o + \") {\\n          return -1.0;\\n        }\\n      \"), this.userCode = \"\\n      const float initializationValue = 0.0;\\n\\n      float getValue(int batch, int inIdx) {\\n        \" + l + \"\\n        return getX(batch, inIdx);\\n      }\\n\\n      float getSegmentIdAtIndex(int inIdx) {\\n        \" + h + \"\\n        return getSegmentIds(inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = int(floor(float(outIdx) / float(\\n          \" + a + \")) * float(\" + n + \"));\\n        int currentSeg = int(mod(float(outIdx), float(\" + a + \")));\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < \" + s + \"; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\\n          );\\n\\n          \" + c + \"\\n        }\\n\\n        int inIdx = inOffset + \" + s + \";\\n        if (\" + (1 === u) + \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            0,\\n            0,\\n            0\\n          );\\n\\n          \" + c + \"\\n        } else if (\" + (2 === u) + \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n              0,\\n              0\\n          );\\n\\n          \" + c + \"\\n        } else if (\" + (3 === u) + \") {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            0\\n          );\\n\\n          \" + c + \"\\n        }\\n        setOutput(sumValue);\\n      }\\n    \";\n}, Js = function(t, e, n) {\n    var r, o;\n    if (this.variableNames = [\n        \"c\",\n        \"a\",\n        \"b\"\n    ], this.outputShape = e, n > 4) throw Error(\"Where for rank \" + n + \" is not yet supported\");\n    if (1 === n) o = \"resRC\", r = \"resRC\";\n    else {\n        for(var a = [\n            \"resRC.x\",\n            \"resRC.y\",\n            \"resRC.z\",\n            \"resRC.w\"\n        ], i = [], s = [], u = 0; u < e.length; u++)s.push(\"\" + a[u]), u < t && i.push(\"\" + a[u]);\n        r = i.join(), o = s.join();\n    }\n    var c = ui(n);\n    this.userCode = \"\\n      void main() {\\n        \" + c + \" resRC = getOutputCoords();\\n        float cVal = getC(\" + r + \");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\" + o + \"));\\n        } else {\\n          setOutput(getB(\" + o + \"));\\n        }\\n      }\\n    \";\n}, Zs = function() {\n    function t(t) {\n        this.variableNames = [\n            \"source\"\n        ], this.outputShape = t, this.rank = t.length;\n        var e, n = ui(this.rank), r = \"uniform int start[\" + this.rank + \"];\", o = function(t) {\n            if (1 === t) return \"sourceLoc\";\n            if (t <= 6) return tu.slice(0, t).map(function(t) {\n                return \"sourceLoc.\" + t;\n            }).join(\",\");\n            throw Error(\"Slicing for rank \" + t + \" is not yet supported\");\n        }(this.rank);\n        e = \"\\n        \" + n + \" sourceLoc;\\n        \" + n + \" coords = getOutputCoords();\\n        \" + t.map(function(t, e) {\n            return \"sourceLoc.\" + tu[e] + \" = start[\" + e + \"] + coords.\" + tu[e] + \";\";\n        }).join(\"\\n\") + \"\\n      \", this.userCode = \"\\n      \" + r + \"\\n      void main() {\\n        \" + e + \"\\n        setOutput(getSource(\" + o + \"));\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t) {\n        var e = this;\n        if (t.length !== this.rank) throw Error(\"The rank (\" + this.rank + \") of the program must match the length of start (\" + t.length + \")\");\n        return function(n, r) {\n            null == e.startLoc && (e.startLoc = n.getUniformLocationNoThrow(r, \"start\"), null == e.startLoc) || n.gl.uniform1iv(e.startLoc, t);\n        };\n    }, t;\n}(), tu = [\n    \"x\",\n    \"y\",\n    \"z\",\n    \"w\",\n    \"u\",\n    \"v\"\n];\nvar eu = function() {\n    function t(t) {\n        this.variableNames = [\n            \"source\"\n        ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.rank = t.length;\n        var e = ui(this.rank), n = Xa(\"coords\", this.rank), r = Xa(\"sourceLoc\", this.rank), o = 1 === this.rank ? \"sourceLoc\" : \"vec2(\" + r.slice(-2).join() + \")\", a = \"getChannel(getSource(\" + r.join() + \"), \" + o + \")\", i = \"\\n      result.x = \" + a + \";\\n      if (++\" + n[this.rank - 1] + \" < \" + t[this.rank - 1] + \") {\\n        ++\" + r[this.rank - 1] + \";\\n        result.y = \" + a + \";\\n        --\" + r[this.rank - 1] + \";\\n      }\\n    \", s = 1 === this.rank ? \"\" : \"\\n      --\" + n[this.rank - 1] + \";\\n      if (++\" + n[this.rank - 2] + \" < \" + t[this.rank - 2] + \") {\\n        ++\" + r[this.rank - 2] + \";\\n        result.z = \" + a + \";\\n        if (++\" + n[this.rank - 1] + \" < \" + t[this.rank - 1] + \") {\\n          ++\" + r[this.rank - 1] + \";\\n          result.w = \" + a + \";\\n        }\\n      }\\n    \", u = this.rank <= 4 ? \"sourceLoc = coords +\\n            \" + e + \"(\" + t.map(function(t, e) {\n            return \"start[\" + e + \"]\";\n        }).join() + \");\" : t.map(function(t, e) {\n            return r[e] + \" = \" + n[e] + \" + start[\" + e + \"];\";\n        }).join(\"\\n\");\n        this.userCode = \"\\n      uniform int start[\" + this.rank + \"];\\n      void main() {\\n        \" + e + \" coords = getOutputCoords();\\n        \" + e + \" sourceLoc;\\n        \" + u + \"\\n        vec4 result = vec4(0.);\\n        \" + i + \"\\n        \" + s + \"\\n        setOutput(result);\\n      }\\n    \";\n    }\n    return t.prototype.getCustomSetupFunc = function(t) {\n        var e = this;\n        if (t.length !== this.rank) throw Error(\"The rank (\" + this.rank + \") of the program must match the length of start (\" + t.length + \")\");\n        return function(n, r) {\n            null == e.startLoc && (e.startLoc = n.getUniformLocationNoThrow(r, \"start\"), null == e.startLoc) || n.gl.uniform1iv(e.startLoc, t);\n        };\n    }, t;\n}(), nu = function(t, e, n) {\n    this.variableNames = [\n        \"x\"\n    ], this.outputShape = n;\n    var r = n.length, o = ui(n.length), a = ui(n.length), i = \"\";\n    if (1 === r) i = \"coords * strides + begin\";\n    else {\n        var s = 0;\n        i = n.map(function(t, e) {\n            return s++, 1 === n.length ? \"coords * strides[\" + e + \"] + begin[\" + e + \"]\" : \"coords[\" + (s - 1) + \"] * strides[\" + e + \"] + begin[\" + e + \"]\";\n        }).join(\",\");\n    }\n    this.userCode = \"\\n      \" + o + \" begin = \" + o + \"(\" + t + \");\\n      \" + o + \" strides = \" + o + \"(\" + e + \");\\n\\n      void main() {\\n        \" + a + \" coords = getOutputCoords();\\n        setOutput(getX(\" + i + \"));\\n      }\\n    \";\n}, ru = function() {\n    function t(t) {\n        this.gpgpu = t, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {}, this.logEnabled = !1, this.usedTextures = {};\n    }\n    return t.prototype.acquireTexture = function(t, e, n) {\n        var r, o = ou(e, n), a = au(t, o, n);\n        if (a in this.freeTextures || (this.freeTextures[a] = []), a in this.usedTextures || (this.usedTextures[a] = []), this.freeTextures[a].length > 0) {\n            this.numFreeTextures--, this.numUsedTextures++, this.log();\n            var i = this.freeTextures[a].shift();\n            return this.usedTextures[a].push(i), i;\n        }\n        return this.numUsedTextures++, this.log(), o === Gt.PACKED_2X2_FLOAT32 ? r = this.gpgpu.createPackedMatrixTexture(t[0], t[1]) : o === Gt.PACKED_2X2_FLOAT16 ? r = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]) : o === Gt.UNPACKED_FLOAT32 ? r = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]) : o === Gt.UNPACKED_FLOAT16 ? r = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]) : o === Gt.PACKED_4X1_UNSIGNED_BYTE && (r = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])), this.usedTextures[a].push(r), r;\n    }, t.prototype.releaseTexture = function(t, e, n, r) {\n        if (null != this.freeTextures) {\n            var o = au(e, ou(n, r), r);\n            o in this.freeTextures || (this.freeTextures[o] = []), this.freeTextures[o].push(t), this.numFreeTextures++, this.numUsedTextures--;\n            var a = this.usedTextures[o], i = a.indexOf(t);\n            if (i < 0) throw new Error(\"Cannot release a texture that was never provided by this texture manager\");\n            a.splice(i, 1), this.log();\n        }\n    }, t.prototype.log = function() {\n        if (this.logEnabled) {\n            var t = this.numFreeTextures + this.numUsedTextures;\n            console.log(\"Free/Used\", this.numFreeTextures + \" / \" + this.numUsedTextures, \"(\" + t + \")\");\n        }\n    }, t.prototype.getNumUsedTextures = function() {\n        return this.numUsedTextures;\n    }, t.prototype.getNumFreeTextures = function() {\n        return this.numFreeTextures;\n    }, t.prototype.dispose = function() {\n        var t = this;\n        if (null != this.freeTextures) {\n            for(var e in this.freeTextures)this.freeTextures[e].forEach(function(e) {\n                t.gpgpu.deleteMatrixTexture(e);\n            });\n            for(var e in this.usedTextures)this.usedTextures[e].forEach(function(e) {\n                t.gpgpu.deleteMatrixTexture(e);\n            });\n            this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0;\n        }\n    }, t;\n}();\nfunction ou(t, e) {\n    if (t === zt.UPLOAD) return Gt.PACKED_2X2_FLOAT32;\n    if (t === zt.RENDER || null == t) return function(t) {\n        return i().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\") ? t ? Gt.PACKED_2X2_FLOAT32 : Gt.UNPACKED_FLOAT32 : t ? Gt.PACKED_2X2_FLOAT16 : Gt.UNPACKED_FLOAT16;\n    }(e);\n    if (t === zt.DOWNLOAD || t === zt.PIXELS) return Gt.PACKED_4X1_UNSIGNED_BYTE;\n    throw new Error(\"Unknown logical texture type \" + t);\n}\nfunction au(t, e, n) {\n    return t[0] + \"_\" + t[1] + \"_\" + e + \"_\" + n;\n}\nvar iu = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ];\n    for(var n = new Array(t.length), r = 0; r < n.length; r++)n[r] = t[r] * e[r];\n    this.outputShape = n, this.rank = n.length;\n    var o = ui(this.rank), a = function(t) {\n        var e = t.length;\n        if (e > 5) throw Error(\"Tile for rank \" + e + \" is not yet supported\");\n        if (1 === e) return \"imod(resRC, \" + t[0] + \")\";\n        for(var n = [\n            \"resRC.x\",\n            \"resRC.y\",\n            \"resRC.z\",\n            \"resRC.w\",\n            \"resRC.u\"\n        ], r = [], o = 0; o < t.length; o++)r.push(\"imod(\" + n[o] + \", \" + t[o] + \")\");\n        return r.join();\n    }(t);\n    this.userCode = \"\\n      void main() {\\n        \" + o + \" resRC = getOutputCoords();\\n        setOutput(getA(\" + a + \"));\\n      }\\n    \";\n};\nvar su = 1.7580993408473768, uu = 1.0507009873554805, cu = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ], this.outputShape = t, this.userCode = \"\\n      float unaryOperation(float x) {\\n        \" + e + \"\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \";\n}, lu = \"if (isnan(x)) return x;\", hu = \"return x;\", fu = \"return abs(x);\", du = lu + \"\\n  return (x < 0.0) ? 0.0 : x;\\n\", pu = lu + \"\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\", vu = \"return (x >= 0.0) ? x : (exp(x) - 1.0);\", gu = \"\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = \" + su + \";\\n  float scale = \" + uu + \";\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n\";\nvar mu = \"return -x;\", yu = \"return ceil(x);\", xu = \"return floor(x);\", bu = \"return exp(x);\", wu = \"return exp(x) - 1.0;\", Cu = lu + \"\\n  return sin(x);\\n\", Eu = lu + \"\\n  return cos(x);\\n\", Ru = lu + \"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return asin(x);\\n\", Iu = lu + \"\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return acos(x);\\n\", ku = lu + \"\\n  return atan(x);\\n\", Su = lu + \"return log(x + sqrt(x * x + 1.0));\", Au = lu + \"\\n  if (x < 1.0) return NAN;\\n  return log(x + sqrt(x * x - 1.0));\", Tu = lu + \"\\n  if ((x < -1.0) || (x > 1.0)) return NAN;\\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;\", Du = \"return x;\", Nu = \"return x;\", Fu = \"\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\", _u = \"\\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\", Ou = \"\\n  vec4 result;\\n\\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\\n\\n  return result;\\n\", Mu = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0, this.outputShape = t, this.userCode = \"\\n      vec4 unaryOperation(vec4 x) {\\n        \" + e + \"\\n      }\\n\\n      void main() {\\n        vec4 x = getAAtOutCoords();\\n        vec4 y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    \";\n}, Bu = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !1, this.outputShape = t;\n    var e = t.length, n = Xa(\"rc\", e), r = ui(e), o = function(t, e) {\n        if (1 === t) return \"rc\";\n        for(var n = \"\", r = 0; r < t; r++)n += e[r], r < t - 1 && (n += \",\");\n        return n;\n    }(e, n), a = n.slice(-2), i = e <= 1 ? \"rc\" : \"vec2(\" + a.join(\",\") + \")\";\n    this.userCode = \"\\n      void main() {\\n        \" + r + \" rc = getOutputCoords();\\n        vec4 packedInput = getA(\" + o + \");\\n\\n        setOutput(getChannel(packedInput, \" + i + \"));\\n      }\\n    \";\n}, Pu = {};\nfunction Lu(t, e) {\n    if (void 0 === e && (e = !1), \"linear\" === t) return e ? Nu : hu;\n    if (\"relu\" === t) return e ? Fu : du;\n    if (\"elu\" === t) return e ? Ou : vu;\n    if (\"relu6\" === t) return e ? _u : pu;\n    if (\"prelu\" === t) return e ? ki : Ei;\n    throw new Error(\"Activation \" + t + \" has not been implemented for the WebGL backend.\");\n}\nvar Wu = 600;\nvar Uu = function(t) {\n    function o(e) {\n        var n, r = t.call(this) || this;\n        if (r.pendingRead = new WeakMap, r.pendingDisposal = new WeakSet, r.dataRefCount = new WeakMap, r.numBytesInGPU = 0, r.uploadWaitMs = 0, r.downloadWaitMs = 0, r.warnedAboutMemory = !1, r.pendingDeletes = 0, r.disposed = !1, !i().getBool(\"HAS_WEBGL\")) throw new Error(\"WebGL is not supported on this device\");\n        if (null == e) {\n            var o = jt(i().getNumber(\"WEBGL_VERSION\"));\n            r.binaryCache = (n = i().getNumber(\"WEBGL_VERSION\")) in Pu ? Pu[n] : (Pu[n] = {}, Pu[n]), r.gpgpu = new Is(o), r.canvas = o.canvas, r.gpgpuCreatedLocally = !0;\n        } else r.gpgpu = e, r.binaryCache = {}, r.gpgpuCreatedLocally = !1, r.canvas = e.gl.canvas;\n        return r.textureManager = new ru(r.gpgpu), r.numMBBeforeWarning = null == i().global.screen ? 1024 : i().global.screen.height * i().global.screen.width * window.devicePixelRatio * Wu / 1024 / 1024, r.texData = new ca(r, Lt), r;\n    }\n    return e(o, t), o.prototype.numDataIds = function() {\n        return this.texData.numDataIds() + (this.cpuBackend ? this.cpuBackend.numDataIds() : 0) - this.pendingDeletes;\n    }, o.prototype.write = function(t, e, n) {\n        if (i().getBool(\"DEBUG\") && this.checkNumericalProblems(t), \"complex64\" === n && null != t) throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");\n        var r = {};\n        return this.texData.set(r, {\n            shape: e,\n            dtype: n,\n            values: t,\n            usage: zt.UPLOAD\n        }), r;\n    }, o.prototype.move = function(t, e, n, r) {\n        if (i().getBool(\"DEBUG\") && this.checkNumericalProblems(e), \"complex64\" === r) throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");\n        this.texData.set(t, {\n            shape: n,\n            dtype: r,\n            values: e,\n            usage: zt.UPLOAD\n        });\n    }, o.prototype.readSync = function(t) {\n        var e = this.texData.get(t), n = e.values, r = e.dtype, o = e.complexTensors, a = e.slice, i = e.shape, s = e.isPacked;\n        if (null != a) {\n            var u = void 0;\n            u = s ? new Mu(i, Du) : new cu(i, Du);\n            var c = this.runWebGLProgram(u, [\n                {\n                    dataId: t,\n                    shape: i,\n                    dtype: r\n                }\n            ], r), l = this.readSync(c.dataId);\n            return this.disposeData(c.dataId), l;\n        }\n        if (null != n) return this.convertAndCacheOnCPU(t);\n        if (\"string\" === r) return n;\n        var h, f, d = null != this.activeTimers;\n        (d && (h = et()), \"complex64\" === r) ? f = Aa(o.real.dataSync(), o.imag.dataSync()) : f = this.getValuesFromTexture(t);\n        return d && (this.downloadWaitMs += et() - h), this.convertAndCacheOnCPU(t, f);\n    }, o.prototype.read = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a, s, u, c, l, h, f, d, p, v, g, m, y, x, b, w, C, E, R;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (this.pendingRead.has(t)) return e = this.pendingRead.get(t), [\n                            2,\n                            new Promise(function(t) {\n                                return e.push(t);\n                            })\n                        ];\n                        if (n = this.texData.get(t), o = n.values, a = n.shape, s = n.slice, u = n.dtype, c = n.complexTensors, l = n.isPacked, null != s) return h = void 0, h = l ? new Mu(a, Du) : new cu(a, Du), f = this.runWebGLProgram(h, [\n                            {\n                                dataId: t,\n                                shape: a,\n                                dtype: u\n                            }\n                        ], u), d = this.read(f.dataId), this.disposeData(f.dataId), [\n                            2,\n                            d\n                        ];\n                        if (null != o) return [\n                            2,\n                            this.convertAndCacheOnCPU(t)\n                        ];\n                        if (!i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\") && 2 === i().getNumber(\"WEBGL_VERSION\")) throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.\");\n                        return p = null, \"complex64\" !== u && i().get(\"WEBGL_BUFFER_SUPPORTED\") && (v = this.decode(t), g = this.texData.get(v.dataId), p = (R = this.gpgpu).createBufferFromTexture.apply(R, [\n                            g.texture\n                        ].concat(Yt(a)))), this.pendingRead.set(t, []), \"complex64\" === u ? [\n                            3,\n                            2\n                        ] : [\n                            4,\n                            this.gpgpu.createAndWaitForFence()\n                        ];\n                    case 1:\n                        r.sent(), r.label = 2;\n                    case 2:\n                        return \"complex64\" !== u ? [\n                            3,\n                            4\n                        ] : [\n                            4,\n                            Promise.all([\n                                c.real.data(),\n                                c.imag.data()\n                            ])\n                        ];\n                    case 3:\n                        return y = r.sent(), x = y[0], b = y[1], m = Aa(x, b), [\n                            3,\n                            5\n                        ];\n                    case 4:\n                        null == p ? m = this.getValuesFromTexture(t) : (w = k(a), m = this.gpgpu.downloadFloat32MatrixFromBuffer(p, w)), r.label = 5;\n                    case 5:\n                        return null != v && this.disposeData(v.dataId), C = this.convertAndCacheOnCPU(t, m), E = this.pendingRead.get(t), this.pendingRead.delete(t), E.forEach(function(t) {\n                            return t(C);\n                        }), this.pendingDisposal.has(t) && (this.pendingDisposal.delete(t), this.disposeData(t), this.pendingDeletes--), [\n                            2,\n                            C\n                        ];\n                }\n            });\n        });\n    }, o.prototype.checkNumericalProblems = function(t) {\n        if (null != t) for(var e = 0; e < t.length; e++){\n            var n = t[e];\n            if (!ee(n)) {\n                if (i().getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\")) throw Error(\"The value \" + n + \" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'\");\n                throw Error(\"The value \" + n + \" cannot be represented on this device.\");\n            }\n        }\n    }, o.prototype.getValuesFromTexture = function(t) {\n        var e, n = this.texData.get(t), r = n.shape, o = n.dtype, a = n.isPacked, s = k(r);\n        if (i().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")) {\n            var u = this.decode(t), c = this.texData.get(u.dataId), l = (e = this.gpgpu).downloadMatrixFromPackedTexture.apply(e, [\n                c.texture\n            ].concat(Yt(r))).subarray(0, s);\n            return this.disposeData(u.dataId), l;\n        }\n        var h = i().getBool(\"WEBGL_PACK\") && !0 === a, f = h ? De(r) : r, d = h ? new Ji(f) : new Qi(f), p = this.runWebGLProgram(d, [\n            {\n                shape: f,\n                dtype: o,\n                dataId: t\n            }\n        ], \"float32\"), v = this.texData.get(p.dataId), g = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v.texture, v.texShape[0], v.texShape[1]).subarray(0, s);\n        return this.disposeData(p.dataId), g;\n    }, o.prototype.time = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a, s, u, c;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return e = this.activeTimers, n = [], o = !1, null == this.programTimersStack ? (this.programTimersStack = n, o = !0) : this.activeTimers.push(n), this.activeTimers = n, t(), a = I(this.activeTimers.map(function(t) {\n                            return t.query;\n                        })).filter(function(t) {\n                            return null != t;\n                        }), s = I(this.activeTimers.map(function(t) {\n                            return t.name;\n                        })).filter(function(t) {\n                            return null != t;\n                        }), this.activeTimers = e, o && (this.programTimersStack = null), u = {\n                            uploadWaitMs: this.uploadWaitMs,\n                            downloadWaitMs: this.downloadWaitMs,\n                            kernelMs: null,\n                            wallMs: null\n                        }, i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0 ? [\n                            4,\n                            Promise.all(a)\n                        ] : [\n                            3,\n                            2\n                        ];\n                    case 1:\n                        return c = r.sent(), u.kernelMs = w(c), u.getExtraProfileInfo = function() {\n                            return c.map(function(t, e) {\n                                return {\n                                    name: s[e],\n                                    ms: t\n                                };\n                            }).map(function(t) {\n                                return t.name + \": \" + t.ms;\n                            }).join(\", \");\n                        }, [\n                            3,\n                            3\n                        ];\n                    case 2:\n                        u.kernelMs = {\n                            error: \"WebGL query timers are not supported in this environment.\"\n                        }, r.label = 3;\n                    case 3:\n                        return this.uploadWaitMs = 0, this.downloadWaitMs = 0, [\n                            2,\n                            u\n                        ];\n                }\n            });\n        });\n    }, o.prototype.memory = function() {\n        return {\n            unreliable: !1,\n            numBytesInGPU: this.numBytesInGPU\n        };\n    }, o.prototype.startTimer = function() {\n        return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0 ? this.gpgpu.beginQuery() : {\n            startMs: et(),\n            endMs: null\n        };\n    }, o.prototype.endTimer = function(t) {\n        return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0 ? (this.gpgpu.endQuery(), t) : (t.endMs = et(), t);\n    }, o.prototype.getQueryTime = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                return i().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\") > 0 ? [\n                    2,\n                    this.gpgpu.waitForQueryAndGetTime(t)\n                ] : [\n                    2,\n                    (e = t).endMs - e.startMs\n                ];\n            });\n        });\n    }, o.prototype.disposeData = function(t) {\n        if (!this.pendingDisposal.has(t)) {\n            if (this.pendingRead.has(t)) return this.pendingDisposal.add(t), void this.pendingDeletes++;\n            if (this.texData.has(t)) {\n                this.releaseGPUData(t);\n                var e = this.texData.get(t).complexTensors;\n                null != e && (e.real.dispose(), e.imag.dispose()), this.texData.delete(t);\n            }\n        }\n    }, o.prototype.releaseGPUData = function(t) {\n        var e = this.texData.get(t), n = e.texture, r = e.dtype, o = e.texShape, a = e.usage, i = e.isPacked, s = e.slice, u = s && s.origDataId || t, c = this.dataRefCount.get(u);\n        c > 1 ? this.dataRefCount.set(u, c - 1) : (this.dataRefCount.delete(u), null != n && (this.numBytesInGPU -= this.computeBytes(o, r), this.textureManager.releaseTexture(n, o, a, i)));\n        var l = this.texData.get(t);\n        l.texture = null, l.texShape = null, l.isPacked = !1, l.slice = null;\n    }, o.prototype.getTexture = function(t) {\n        return this.uploadToGPU(t), this.texData.get(t).texture;\n    }, o.prototype.getDataInfo = function(t) {\n        return this.texData.get(t);\n    }, o.prototype.getCPUBackend = function() {\n        return i().getBool(\"WEBGL_CPU_FORWARD\") ? (null == this.cpuBackend && (this.cpuBackend = Lt.findBackend(\"cpu\")), this.cpuBackend) : null;\n    }, o.prototype.shouldExecuteOnCPU = function(t, e) {\n        var n = this;\n        return void 0 === e && (e = 128), null != this.getCPUBackend() && t.every(function(t) {\n            return null == n.texData.get(t.dataId).texture && k(t.shape) < e;\n        });\n    }, o.prototype.getGPGPUContext = function() {\n        return this.gpgpu;\n    }, o.prototype.complex = function(t, e) {\n        var n = this.makeOutput(t.shape, \"complex64\");\n        return this.texData.get(n.dataId).complexTensors = {\n            real: Lt.keep(t.clone()),\n            imag: Lt.keep(e.clone())\n        }, n;\n    }, o.prototype.real = function(t) {\n        return this.texData.get(t.dataId).complexTensors.real.clone();\n    }, o.prototype.imag = function(t) {\n        return this.texData.get(t.dataId).complexTensors.imag.clone();\n    }, o.prototype.slice = function(t, e, n) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.slice(t, e, n);\n        if (0 === k(n)) return Fn([], n, t.dtype);\n        var r = this.texData.get(t.dataId).isPacked, o = $o(t.shape, e, n);\n        if (r || !o) {\n            var a = i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new eu(n) : new Zs(n), s = a.getCustomSetupFunc(e);\n            return this.compileAndRun(a, [\n                t\n            ], null, s);\n        }\n        return this.uploadToGPU(t.dataId), this.shallowSlice(t, e, n);\n    }, o.prototype.shallowSlice = function(t, e, n) {\n        var r = this.texData.get(t.dataId), o = this.makeOutput(n, t.dtype), a = this.texData.get(o.dataId);\n        Object.assign(a, r), a.shape = n, a.dtype = t.dtype;\n        var i = Qo(e, t.strides);\n        r.slice && (i += r.slice.flatOffset), a.slice = {\n            flatOffset: i,\n            origDataId: r.slice && r.slice.origDataId || t.dataId\n        };\n        var s = this.dataRefCount.get(a.slice.origDataId) || 1;\n        return this.dataRefCount.set(a.slice.origDataId, s + 1), o;\n    }, o.prototype.stridedSlice = function(t, e, n, r) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.stridedSlice(t, e, n, r);\n        var o = jo(e, n, r);\n        if (o.some(function(t) {\n            return 0 === t;\n        })) return Fn([], o);\n        var a = new nu(e, r, o);\n        return this.compileAndRun(a, [\n            t\n        ]);\n    }, o.prototype.reverse = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new Ys(t.shape, e) : new Xs(t.shape, e);\n        return this.compileAndRun(n, [\n            t\n        ]);\n    }, o.prototype.concat = function(t, e) {\n        if (\"complex64\" === t[0].dtype) {\n            var n = t.map(function(t) {\n                return Dn(t);\n            }), r = t.map(function(t) {\n                return Nn(t);\n            });\n            return Tn(this.concat(n, e), this.concat(r, e));\n        }\n        if (this.shouldExecuteOnCPU(t)) return this.cpuBackend.concat(t, e);\n        if (1 === t.length) return t[0];\n        if (t.length > i().getNumber(\"WEBGL_MAX_TEXTURES_IN_SHADER\")) {\n            var o = Math.floor(t.length / 2), a = this.concat(t.slice(0, o), e), s = this.concat(t.slice(o), e);\n            return this.concat([\n                a,\n                s\n            ], e);\n        }\n        if (i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") && t[0].rank > 1) {\n            var u = new Fi(t.map(function(t) {\n                return t.shape;\n            }), e);\n            return this.compileAndRun(u, t);\n        }\n        var c = Sn(t.map(function(t) {\n            return t.shape;\n        }), e), l = t.map(function(t) {\n            return t.as2D(-1, k(t.shape.slice(e)));\n        }), h = new Ni(l.map(function(t) {\n            return t.shape;\n        }));\n        return this.compileAndRun(h, l).reshape(c);\n    }, o.prototype.neg = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.neg(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, mu, t.dtype);\n        var e = new cu(t.shape, mu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.batchMatMul = function(t, e, n, r) {\n        var o = n ? t.shape[2] : t.shape[1], a = r ? e.shape[1] : e.shape[2], i = n ? t.shape[1] : t.shape[2], s = t.shape[0];\n        if ((1 === o || 1 === a) && i > 1e3) {\n            n && (t = ua(t, [\n                0,\n                2,\n                1\n            ])), r && (e = ua(e, [\n                0,\n                2,\n                1\n            ]));\n            var u = 1 === a ? t : t.as3D(s, i, 1), c = 1 === a ? 2 : 1, l = 1 === a ? e.as3D(s, 1, i) : e;\n            return this.multiply(u, l).sum(c, !0);\n        }\n        var h = Tt(t.dtype, e.dtype), f = new _s(t.shape, [\n            s,\n            o,\n            a\n        ], n, r);\n        return this.compileAndRun(f, [\n            t,\n            e\n        ], h);\n    }, o.prototype.fusedBatchMatMul = function(t) {\n        var e = t.a, n = t.b, r = t.transposeA, o = t.transposeB, a = t.bias, i = t.activation, s = t.preluActivationWeights, u = r ? e.shape[2] : e.shape[1], c = o ? n.shape[1] : n.shape[2], l = e.shape[0], h = Tt(e.dtype, n.dtype), f = null != a, d = null != s, p = i ? Lu(i, !0) : null, v = new _s(e.shape, [\n            l,\n            u,\n            c\n        ], r, o, f, p, d), g = [\n            e,\n            n\n        ];\n        return a && g.push(a), s && g.push(s), this.compileAndRun(v, g, h);\n    }, o.prototype.multiply = function(t, e) {\n        if (\"complex64\" === t.dtype) {\n            var n = this.texData.get(t.dataId), r = this.texData.get(e.dataId), o = new yi(gi, t.shape, e.shape), a = new yi(mi, t.shape, e.shape), s = [\n                this.makeComplexComponentTensorInfo(t, n.complexTensors.real),\n                this.makeComplexComponentTensorInfo(t, n.complexTensors.imag),\n                this.makeComplexComponentTensorInfo(e, r.complexTensors.real),\n                this.makeComplexComponentTensorInfo(e, r.complexTensors.imag)\n            ], u = this.compileAndRun(o, s), c = this.compileAndRun(a, s), l = this.complex(u, c);\n            return u.dispose(), c.dispose(), l;\n        }\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.multiply(t, e);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, wi, t.dtype);\n        var h = new Ri(wi, t.shape, e.shape);\n        return this.compileAndRun(h, [\n            t,\n            e\n        ], t.dtype);\n    }, o.prototype.batchNormalization = function(t, e, n, r, o, a) {\n        var s = [\n            t,\n            e,\n            n\n        ], u = null;\n        null != a && (u = a.shape, s.push(a));\n        var c = null;\n        if (null != o && (c = o.shape, s.push(o)), i().getBool(\"WEBGL_PACK_NORMALIZATION\")) {\n            var l = new vi(t.shape, e.shape, n.shape, u, c, r);\n            return this.compileAndRun(l, s);\n        }\n        var h = new pi(t.shape, e.shape, n.shape, u, c, r);\n        return this.compileAndRun(h, s);\n    }, o.prototype.localResponseNormalization4D = function(t, e, n, r, o) {\n        var a = i().getBool(\"WEBGL_PACK_NORMALIZATION\") ? new Ds(t.shape, e, n, r, o) : new As(t.shape, e, n, r, o);\n        return this.compileAndRun(a, [\n            t\n        ]);\n    }, o.prototype.LRNGrad = function(t, e, n, r, o, a, i) {\n        var s = new Ts(e.shape, r, o, a, i);\n        return this.compileAndRun(s, [\n            e,\n            n,\n            t\n        ]);\n    }, o.prototype.tile = function(t, e) {\n        if (\"string\" === t.dtype) {\n            var n = this.readSync(t.dataId).map(function(t) {\n                return ot(t);\n            });\n            return Va(er(t.shape, t.dtype, n), e);\n        }\n        var r = new iu(t.shape, e);\n        return this.compileAndRun(r, [\n            t\n        ]);\n    }, o.prototype.pad = function(t, e, n) {\n        var r = i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new Ls(t.shape, e, n) : new Ps(t.shape, e, n);\n        return this.compileAndRun(r, [\n            t\n        ]);\n    }, o.prototype.gather = function(t, e, n) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.gather(t, e, n);\n        var r = new as(t.shape, e.size, n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.batchToSpaceND = function(t, e, n) {\n        C(t.rank <= 4, function() {\n            return \"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet\";\n        });\n        var r = e.reduce(function(t, e) {\n            return t * e;\n        }), o = pr(t.shape, e, r), a = vr(o.length, e.length), i = gr(t.shape, e, r), s = mr(n, e.length), u = yr(i, n, e.length);\n        return ua(t.reshape(o), a).reshape(i).slice(s, u);\n    }, o.prototype.spaceToBatchND = function(t, e, n) {\n        C(t.rank <= 4, function() {\n            return \"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet\";\n        });\n        var r = e.reduce(function(t, e) {\n            return t * e;\n        }), o = [\n            [\n                0,\n                0\n            ]\n        ];\n        o.push.apply(o, n);\n        for(var a = 1 + e.length; a < t.shape.length; ++a)o.push([\n            0,\n            0\n        ]);\n        var i = t.pad(o), s = pr(i.shape, e, r, !1), u = vr(s.length, e.length, !1), c = gr(i.shape, e, r, !1);\n        return ua(i.reshape(s), u).reshape(c);\n    }, o.prototype.reduce = function(t, e, n) {\n        var r = t.shape[0], o = t.shape[1], a = Uo(o), i = new Vs({\n            windowSize: a,\n            inSize: o,\n            batchSize: r\n        }, e), s = this.compileAndRun(i, [\n            t\n        ], n);\n        return 1 === s.shape[1] ? s : this.reduce(s, e, n);\n    }, o.prototype.argReduce = function(t, e, n) {\n        void 0 === n && (n = null);\n        var r = t.shape[0], o = t.shape[1];\n        null != n && (r = n.shape[0], o = n.shape[1]);\n        var a = Uo(o), i = new Ka({\n            windowSize: a,\n            inSize: o,\n            batchSize: r\n        }, e, null == n), s = [\n            t\n        ];\n        null != n && s.push(n);\n        var u = this.compileAndRun(i, s, \"int32\");\n        return 1 === u.shape[1] ? u : this.argReduce(t, e, u);\n    }, o.prototype.argReducePacked = function(t, e, n) {\n        void 0 === n && (n = null);\n        var r = null != n ? n.shape : t.shape, o = Uo(r[r.length - 1]), a = new hi(r, o, e, null == n), i = null == n ? [\n            t\n        ] : [\n            t,\n            n\n        ], s = this.compileAndRun(a, i, \"int32\");\n        return s.rank === t.rank ? this.argReducePacked(t, e, s) : s;\n    }, o.prototype.sum = function(t, e) {\n        Cn(\"sum\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o), i = Dt(t.dtype);\n        return this.reduce(a, \"sum\", i).reshape(r);\n    }, o.prototype.prod = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.prod(t, e);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o), i = Dt(t.dtype);\n        return this.reduce(a, \"prod\", i).reshape(r);\n    }, o.prototype.unsortedSegmentSum = function(t, e, n) {\n        var r = 0, o = En([\n            r\n        ], t.rank), a = t;\n        null != o && (a = ua(t, o), r = In(1, t.rank)[0]);\n        var i = function(t, e, n) {\n            for(var r = [], o = t.length, a = 0; a < o; a++)a !== e ? r.push(t[a]) : r.push(n);\n            return r;\n        }(a.shape, r, n), s = k([\n            a.shape[r]\n        ]), u = a.as2D(-1, s), c = Dt(t.dtype), l = this.segOpCompute(u, \"unsortedSegmentSum\", e, c, n).reshape(i);\n        return null != o && (l = ua(l, Rn(o))), l;\n    }, o.prototype.segOpCompute = function(t, e, n, r, o) {\n        var a = t.shape[0], i = t.shape[1], s = function(t, e) {\n            var n, r = !1;\n            for(t <= Wo ? (n = t, r = !0) : n = Y(t, Math.floor(Math.sqrt(t))); !r;)n > e || n === t ? r = !0 : n = Y(t, n + 1);\n            return n;\n        }(i, o), u = new Qs({\n            windowSize: s,\n            inSize: i,\n            batchSize: a,\n            numSegments: o\n        }, e), c = this.compileAndRun(u, [\n            t,\n            n\n        ], r);\n        return c.shape[1] === o ? c : (n = Kn(0, o).tile([\n            i / s\n        ]), this.segOpCompute(c, e, n, r, o));\n    }, o.prototype.argMinMaxReduce = function(t, e, n) {\n        var r = [\n            e\n        ];\n        if (Cn(\"arg\" + n.charAt(0).toUpperCase() + n.slice(1), r, t.rank), !i().getBool(\"WEBGL_PACK_REDUCE\") || t.rank <= 2) {\n            var o = bn(t.shape, r), a = o[0], s = k(o[1]), u = t.as2D(-1, s);\n            return this.argReduce(u, n).reshape(a);\n        }\n        return this.argReducePacked(t, n);\n    }, o.prototype.argMin = function(t, e) {\n        return this.argMinMaxReduce(t, e, \"min\");\n    }, o.prototype.argMax = function(t, e) {\n        return this.argMinMaxReduce(t, e, \"max\");\n    }, o.prototype.cumsum = function(t, e, n, r) {\n        if (e !== t.rank - 1) throw new Error(\"WebGL cumsum shader expects an inner-most axis=\" + (t.rank - 1) + \" but got axis=\" + e);\n        var o = new qi(t.shape, n, r);\n        return this.compileAndRun(o, [\n            t\n        ]);\n    }, o.prototype.equal = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(equal(a, b));\\n\", \"bool\");\n        var n = new Ri(\"return float(a == b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.notEqual = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(notEqual(a, b));\\n\", \"bool\");\n        var n = new Ri(\"return float(a != b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.less = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.less(t, e);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(lessThan(a, b));\\n\", \"bool\");\n        var n = new Ri(\"return float(a < b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.lessEqual = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(lessThanEqual(a, b));\\n\", \"bool\");\n        var n = new Ri(\"return float(a <= b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.greater = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.greater(t, e);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(greaterThan(a, b));\\n\", \"bool\");\n        var n = new Ri(\"return float(a > b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.greaterEqual = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(greaterThanEqual(a, b));\\n\", \"bool\");\n        var n = new Ri(\"return float(a >= b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.logicalNot = function(t) {\n        var e = new cu(t.shape, \"return float(!(x >= 1.0));\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.logicalAnd = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return vec4(\\n    vec4(greaterThanEqual(a, vec4(1.0))) *\\n    vec4(greaterThanEqual(b, vec4(1.0))));\\n\", \"bool\");\n        var n = new Ri(\"return float(a >= 1.0 && b >= 1.0);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.logicalOr = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  return min(\\n    vec4(greaterThanEqual(a, vec4(1.0))) +\\n    vec4(greaterThanEqual(b, vec4(1.0))),\\n    vec4(1.0));\\n\", \"bool\");\n        var n = new Ri(\"return float(a >= 1.0 || b >= 1.0);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"bool\");\n    }, o.prototype.select = function(t, e, n) {\n        var r = new Js(t.rank, e.shape, e.rank);\n        return this.compileAndRun(r, [\n            t,\n            e,\n            n\n        ], Tt(e.dtype, n.dtype));\n    }, o.prototype.where = function(t) {\n        dn(\"tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead\");\n        var e = t.dataSync();\n        return Ga(t.shape, e);\n    }, o.prototype.topk = function(t, e, n) {\n        return za(t.dataSync(), t.shape, t.dtype, e);\n    }, o.prototype.min = function(t, e) {\n        Cn(\"min\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o);\n        return this.reduce(a, \"min\", a.dtype).reshape(r);\n    }, o.prototype.minimum = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.minimum(t, e);\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new Si(\"\\n  vec4 result = vec4(min(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return min(a, b);\\n\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.mod = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new Si(\"\\n  vec4 result = mod(a, b);\\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ri(\"if (b == 0.0) return NAN;\\n  return mod(a, b);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.max = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.max(t, e);\n        Cn(\"max\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o);\n        return this.reduce(a, \"max\", a.dtype).reshape(r);\n    }, o.prototype.maximum = function(t, e) {\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.maximum(t, e);\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new Si(\"\\n  vec4 result = vec4(max(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return max(a, b);\\n\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.all = function(t, e) {\n        Cn(\"all\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o);\n        return this.reduce(a, \"all\", a.dtype).reshape(r);\n    }, o.prototype.any = function(t, e) {\n        Cn(\"any\", e, t.rank);\n        var n = bn(t.shape, e), r = n[0], o = k(n[1]), a = t.as2D(-1, o);\n        return this.reduce(a, \"any\", a.dtype).reshape(r);\n    }, o.prototype.floorDiv = function(t, e) {\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, \"\\n  ivec4 ia = round(a);\\n  ivec4 ib = round(b);\\n  bvec4 cond = notEqual(ib, ivec4(0));\\n  ivec4 result = ivec4(0);\\n  vec4 s = sign(a) * sign(b);\\n\\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n  if (cond[0]) {\\n    result[0] = idiv(ia[0], ib[0], s[0]);\\n  }\\n  if (cond[1]) {\\n    result[1] = idiv(ia[1], ib[1], s[1]);\\n  }\\n  if (cond[2]) {\\n    result[2] = idiv(ia[2], ib[2], s[2]);\\n  }\\n  if (cond[3]) {\\n    result[3] = idiv(ia[3], ib[3], s[3]);\\n  }\\n  return vec4(result);\\n\", \"int32\");\n        var n = new Ri(\"\\n  float s = sign(a) * sign(b);\\n  int ia = round(a);\\n  int ib = round(b);\\n  if (ib != 0) {\\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n    return float(idiv(ia, ib, s));\\n  } else {\\n    return NAN;\\n  }\\n\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], \"int32\");\n    }, o.prototype.add = function(t, e) {\n        if (\"complex64\" === t.dtype && \"complex64\" === e.dtype) return this.complexSeparableBinaryOp(t, e, xi);\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.add(t, e);\n        var n = Tt(t.dtype, e.dtype);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, xi, n);\n        var r = new Ri(xi, t.shape, e.shape);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ], n);\n    }, o.prototype.packedUnaryOp = function(t, e, n) {\n        var r = new Mu(t.shape, e);\n        return this.compileAndRun(r, [\n            t\n        ], n);\n    }, o.prototype.packedBinaryOp = function(t, e, n, r, o) {\n        void 0 === o && (o = !1);\n        var a = new Si(n, t.shape, e.shape, o);\n        return this.compileAndRun(a, [\n            t,\n            e\n        ], r);\n    }, o.prototype.complexSeparableBinaryOp = function(t, e, n) {\n        var r = this, o = this.texData.get(t.dataId), a = this.texData.get(e.dataId), i = [\n            [\n                o.complexTensors.real,\n                a.complexTensors.real\n            ],\n            [\n                o.complexTensors.imag,\n                a.complexTensors.imag\n            ]\n        ].map(function(o) {\n            var a = o[0], i = o[1], s = r.makeComplexComponentTensorInfo(t, a), u = r.makeComplexComponentTensorInfo(e, i), c = new Ri(n, t.shape, e.shape);\n            return r.compileAndRun(c, [\n                s,\n                u\n            ], Tt(a.dtype, i.dtype));\n        }), s = i[0], u = i[1], c = this.complex(s, u);\n        return s.dispose(), u.dispose(), c;\n    }, o.prototype.makeComplexComponentTensorInfo = function(t, e) {\n        return {\n            dataId: e.dataId,\n            dtype: e.dtype,\n            shape: t.shape\n        };\n    }, o.prototype.addN = function(t) {\n        if (1 === t.length) return t[0];\n        if (t.length > i().get(\"WEBGL_MAX_TEXTURES_IN_SHADER\")) {\n            var e = Math.floor(t.length / 2), n = this.addN(t.slice(0, e)), r = this.addN(t.slice(e));\n            return this.addN([\n                n,\n                r\n            ]);\n        }\n        var o = t.map(function(t) {\n            return t.dtype;\n        }).reduce(function(t, e) {\n            return Tt(t, e);\n        }), a = t.map(function(t) {\n            return t.shape;\n        }), s = i().getBool(\"WEBGL_PACK\") ? new qa(t[0].shape, a) : new Ha(t[0].shape, a);\n        return this.compileAndRun(s, t, o);\n    }, o.prototype.subtract = function(t, e) {\n        if (\"complex64\" === t.dtype && \"complex64\" === e.dtype) return this.complexSeparableBinaryOp(t, e, bi);\n        if (this.shouldExecuteOnCPU([\n            t,\n            e\n        ])) return this.cpuBackend.subtract(t, e);\n        var n = Tt(t.dtype, e.dtype);\n        if (i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")) return this.packedBinaryOp(t, e, bi, t.dtype);\n        var r = new Ri(bi, t.shape, e.shape);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ], n);\n    }, o.prototype.pow = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new Si(\"\\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\\n  vec4 result = multiplier * pow(abs(a), b);\\n\\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\\n  bvec4 isExpZero = equal(b, vec4(0.0));\\n  result.r = isExpZero.r ? 1.0 : result.r;\\n  result.g = isExpZero.g ? 1.0 : result.g;\\n  result.b = isExpZero.b ? 1.0 : result.b;\\n  result.a = isExpZero.a ? 1.0 : result.a;\\n\\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ri(\"\\nif(a < 0.0 && floor(b) < b){\\n  return NAN;\\n}\\nif (b == 0.0) {\\n  return 1.0;\\n}\\nreturn (round(mod(b, 2.0)) != 1) ?\\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\\n\", t.shape, e.shape), r = Tt(t.dtype, e.dtype);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ], r);\n    }, o.prototype.ceil = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.ceil(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, yu, t.dtype);\n        var e = new cu(t.shape, yu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.floor = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.floor(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, xu, t.dtype);\n        var e = new cu(t.shape, xu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.sign = function(t) {\n        var e = new cu(t.shape, \"\\n  if (isnan(x)) { return 0.0; }\\n  return sign(x);\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.isNaN = function(t) {\n        var e = new cu(t.shape, \"return float(isnan(x));\");\n        return this.compileAndRun(e, [\n            t\n        ], \"bool\");\n    }, o.prototype.isInf = function(t) {\n        var e = new cu(t.shape, \"return float(isinf(x));\");\n        return this.compileAndRun(e, [\n            t\n        ], \"bool\");\n    }, o.prototype.isFinite = function(t) {\n        var e = new cu(t.shape, \"return float(!isnan(x) && !isinf(x));\");\n        return this.compileAndRun(e, [\n            t\n        ], \"bool\");\n    }, o.prototype.round = function(t) {\n        var e = new cu(t.shape, \"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.exp = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.exp(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, bu, t.dtype);\n        var e = new cu(t.shape, bu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.expm1 = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.expm1(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, wu, t.dtype);\n        var e = new cu(t.shape, wu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.softmax = function(t, e) {\n        var n = O([\n            e\n        ], t.shape), r = this.max(t, n), o = wn(r.shape, n), a = this.subtract(t, r.reshape(o)), i = this.exp(a), s = this.sum(i, n).reshape(o);\n        return Bo(i, s);\n    }, o.prototype.log = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.log(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, \"\\n  vec4 result = log(x);\\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\\n\\n  return result;\\n\", t.dtype);\n        var e = new cu(t.shape, \"if (x < 0.0) return NAN;\\n  return log(x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.log1p = function(t) {\n        var e = new cu(t.shape, \"return log(1.0 + x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.sqrt = function(t) {\n        var e = new cu(t.shape, \"return sqrt(x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.rsqrt = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.rsqrt(t);\n        var e = new cu(t.shape, \"return inversesqrt(x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.reciprocal = function(t) {\n        var e = new cu(t.shape, \"return 1.0 / x;\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.relu = function(t) {\n        var e;\n        return e = i().getBool(\"WEBGL_PACK\") ? new Mu(t.shape, Fu) : new cu(t.shape, du), this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.relu6 = function(t) {\n        var e;\n        return e = i().getBool(\"WEBGL_PACK\") ? new Mu(t.shape, _u) : new cu(t.shape, pu), this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.prelu = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new Si(ki, t.shape, e.shape) : new Ri(Ei, t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.elu = function(t) {\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, Ou, t.dtype);\n        var e = new cu(t.shape, vu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.eluDer = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new Si(\"\\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\\n\", t.shape, e.shape) : new Ri(\"return (b >= 1.0) ? a : a * (b + 1.0);\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.selu = function(t) {\n        var e = new cu(t.shape, gu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.int = function(t) {\n        var e = new cu(t.shape, \"return float(int(x));\");\n        return this.compileAndRun(e, [\n            t\n        ], \"int32\");\n    }, o.prototype.clip = function(t, e, n) {\n        var r, o = (r = i().getBool(\"WEBGL_PACK_CLIP\") ? new Ti(t.shape) : new Ai(t.shape)).getCustomSetupFunc(e, n);\n        return this.compileAndRun(r, [\n            t\n        ], null, o);\n    }, o.prototype.abs = function(t) {\n        if (this.shouldExecuteOnCPU([\n            t\n        ])) return this.cpuBackend.abs(t);\n        if (i().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")) return this.packedUnaryOp(t, fu, t.dtype);\n        var e = new cu(t.shape, fu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.complexAbs = function(t) {\n        var e = this.texData.get(t.dataId), n = new Di(t.shape), r = [\n            this.makeComplexComponentTensorInfo(t, e.complexTensors.real),\n            this.makeComplexComponentTensorInfo(t, e.complexTensors.imag)\n        ];\n        return this.compileAndRun(n, r);\n    }, o.prototype.sigmoid = function(t) {\n        var e = new cu(t.shape, \"return 1.0 / (1.0 + exp(-1.0 * x));\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.softplus = function(t) {\n        var e = new cu(t.shape, \"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.sin = function(t) {\n        var e = new cu(t.shape, Cu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.cos = function(t) {\n        var e = new cu(t.shape, Eu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.tan = function(t) {\n        var e = new cu(t.shape, \"return tan(x);\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.asin = function(t) {\n        var e = new cu(t.shape, Ru);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.acos = function(t) {\n        var e = new cu(t.shape, Iu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.atan = function(t) {\n        var e = new cu(t.shape, ku);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.atan2 = function(t, e) {\n        var n = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new Si(\"\\n  vec4 result = atan(a, b);\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\", t.shape, e.shape) : new Ri(\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return atan(a, b);\\n\", t.shape, e.shape);\n        return this.compileAndRun(n, [\n            t,\n            e\n        ]);\n    }, o.prototype.sinh = function(t) {\n        var e = new cu(t.shape, \"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.cosh = function(t) {\n        var e = new cu(t.shape, \"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.tanh = function(t) {\n        var e = new cu(t.shape, \"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\");\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.asinh = function(t) {\n        var e = new cu(t.shape, Su);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.acosh = function(t) {\n        var e = new cu(t.shape, Au);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.atanh = function(t) {\n        var e = new cu(t.shape, Tu);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.erf = function(t) {\n        var e = new cu(t.shape, '\\n  // Error function is calculated approximately with elementary function.\\n  // See \"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\\n  float p = 0.3275911;\\n  float a1 = 0.254829592;\\n  float a2 = -0.284496736;\\n  float a3 = 1.421413741;\\n  float a4 = -1.453152027;\\n  float a5 = 1.061405429;\\n\\n  float sign = sign(x);\\n  x = abs(x);\\n  float t = 1.0 / (1.0 + p * x);\\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\\n');\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.step = function(t, e) {\n        var n = new cu(t.shape, function(t) {\n            return void 0 === t && (t = 0), lu + \"\\n    return x > 0.0 ? 1.0 : float(\" + t + \");\\n  \";\n        }(e));\n        return this.compileAndRun(n, [\n            t\n        ]);\n    }, o.prototype.conv2dByMatMul = function(t, e, n, r, o, a) {\n        var s = t.shape, u = this.texData.get(t.dataId), c = n.inChannels, l = s[0] * s[1] * s[2], h = n.outChannels, f = \"channelsLast\" === n.dataFormat, d = (1 === l || 1 === h) && c > 1e3, p = s[2] % 2 != 0 && !!u.isPacked;\n        if (d || !i().getBool(\"WEBGL_LAZILY_UNPACK\") || !i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") || !p) {\n            var v = f ? s[0] * s[1] * s[2] : s[0] * s[2] * s[3], g = this.reshape(t, [\n                1,\n                v,\n                n.inChannels\n            ]), m = this.reshape(e, [\n                1,\n                n.inChannels,\n                n.outChannels\n            ]);\n            return this.reshape(this.fusedBatchMatMul({\n                a: g,\n                b: m,\n                transposeA: !1,\n                transposeB: !1,\n                bias: r,\n                activation: o,\n                preluActivationWeights: a\n            }), n.outShape);\n        }\n        var y = f ? s[0] * s[1] * (s[2] + 1) : s[0] * s[2] * (s[3] + 1), x = {\n            dataId: t.dataId,\n            shape: [\n                1,\n                y,\n                n.inChannels\n            ],\n            dtype: t.dtype\n        }, b = u.shape;\n        u.shape = u.shape.slice(), u.shape[u.shape.length - 2]++, C(_e(u.shape, x.shape), function() {\n            return \"packed reshape \" + u.shape + \" to \" + x.shape + \" isn't free\";\n        });\n        var w = this.reshape(e, [\n            1,\n            n.inChannels,\n            n.outChannels\n        ]), E = this.fusedBatchMatMul({\n            a: x,\n            b: w,\n            transposeA: !1,\n            transposeB: !1,\n            bias: r,\n            activation: o,\n            preluActivationWeights: a\n        }), R = this.texData.get(E.dataId);\n        return C(R.isPacked, function() {\n            return \"batchMatMul result is expected to be packed\";\n        }), u.shape = b, R.shape = n.outShape, Lt.makeTensorFromDataId(E.dataId, n.outShape, E.dtype);\n    }, o.prototype.conv2dWithIm2Row = function(t, e, n, r, o, a) {\n        var i = n.filterWidth, s = n.filterHeight, u = n.inChannels, c = n.outWidth, l = n.outHeight, h = \"channelsLast\" === n.dataFormat, f = i * s * u, d = l * c, p = [\n            f,\n            d\n        ], v = t.squeeze([\n            0\n        ]), g = e.reshape([\n            1,\n            f,\n            -1\n        ]), m = new Ss(p, v.shape, n), y = this.compileAndRun(m, [\n            v\n        ]).reshape([\n            1,\n            p[0],\n            p[1]\n        ]), x = null != r, b = null != a, w = o ? Lu(o, !0) : null, C = new _s(y.shape, [\n            1,\n            d,\n            n.outChannels\n        ], !0, !1, x, w, b), E = [\n            y,\n            g\n        ];\n        r && E.push(r), b && E.push(a);\n        var R = this.compileAndRun(C, E);\n        return h ? R.reshape([\n            1,\n            l,\n            c,\n            n.outChannels\n        ]) : R.reshape([\n            1,\n            n.outChannels,\n            l,\n            c\n        ]);\n    }, o.prototype.fusedConv2d = function(t) {\n        var e = t.input, n = t.filter, r = t.convInfo, o = t.bias, a = t.activation, s = t.preluActivationWeights;\n        if (1 === r.filterHeight && 1 === r.filterWidth && 1 === r.dilationHeight && 1 === r.dilationWidth && 1 === r.strideHeight && 1 === r.strideWidth && (\"SAME\" === r.padInfo.type || \"VALID\" === r.padInfo.type)) return this.conv2dByMatMul(e, n, r, o, a, s);\n        if (i().getBool(\"WEBGL_CONV_IM2COL\") && 1 === e.shape[0]) return this.conv2dWithIm2Row(e, n, r, o, a, s);\n        var u = null != o, c = null != s, l = a ? Lu(a, !1) : null, h = new Ui(r, u, l, c), f = [\n            e,\n            n\n        ];\n        return o && f.push(o), s && f.push(s), this.compileAndRun(h, f);\n    }, o.prototype.conv2d = function(t, e, n) {\n        if (1 === n.filterHeight && 1 === n.filterWidth && 1 === n.dilationHeight && 1 === n.dilationWidth && 1 === n.strideHeight && 1 === n.strideWidth && (\"SAME\" === n.padInfo.type || \"VALID\" === n.padInfo.type)) return this.conv2dByMatMul(t, e, n);\n        if (i().getBool(\"WEBGL_CONV_IM2COL\") && 1 === t.shape[0]) return this.conv2dWithIm2Row(t, e, n);\n        var r = new Ui(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv2dDerInput = function(t, e, n) {\n        var r = new Mi(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv2dDerFilter = function(t, e, n) {\n        var r = new Oi(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.fusedDepthwiseConv2D = function(t) {\n        var e, n = t.input, r = t.filter, o = t.convInfo, a = t.bias, s = t.activation, u = t.preluActivationWeights, c = i().getBool(\"WEBGL_PACK_DEPTHWISECONV\") && o.strideWidth <= 2 && o.outChannels / o.inChannels == 1, l = s ? Lu(s, c) : null, h = [\n            n,\n            r\n        ], f = null != a, d = null != u;\n        return f && h.push(a), d && h.push(u), c ? (e = new Gi(o, f, l, d), this.compileAndRun(e, h)) : (e = new zi(o, f, l, d), this.compileAndRun(e, h));\n    }, o.prototype.depthwiseConv2D = function(t, e, n) {\n        var r;\n        return i().getBool(\"WEBGL_PACK_DEPTHWISECONV\") && n.strideWidth <= 2 && n.outChannels / n.inChannels == 1 ? (r = new Gi(n), this.compileAndRun(r, [\n            t,\n            e\n        ])) : (r = new zi(n), this.compileAndRun(r, [\n            t,\n            e\n        ]));\n    }, o.prototype.depthwiseConv2DDerInput = function(t, e, n) {\n        var r = new Wi(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.depthwiseConv2DDerFilter = function(t, e, n) {\n        var r = new Li(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv3d = function(t, e, n) {\n        var r = new Vi(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv3dDerInput = function(t, e, n) {\n        var r = new Pi(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.conv3dDerFilter = function(t, e, n) {\n        var r = new Bi(n);\n        return this.compileAndRun(r, [\n            t,\n            e\n        ]);\n    }, o.prototype.maxPool = function(t, e) {\n        var n = new Ws(e, \"max\", !1);\n        return this.compileAndRun(n, [\n            t\n        ]);\n    }, o.prototype.avgPool = function(t, e) {\n        var n = new Ws(e, \"avg\", !1);\n        return this.compileAndRun(n, [\n            t\n        ], \"float32\");\n    }, o.prototype.maxPoolBackprop = function(t, e, n, r) {\n        var o = new Ws(r, \"max\", !0), a = this.compileAndRun(o, [\n            e\n        ]), i = new Ns(r), s = this.compileAndRun(i, [\n            t,\n            a\n        ], e.dtype);\n        return a.dispose(), s;\n    }, o.prototype.avgPoolBackprop = function(t, e, n) {\n        var r = new fi(n);\n        return this.compileAndRun(r, [\n            t\n        ], e.dtype);\n    }, o.prototype.cast = function(t, e) {\n        return Ra(t, e, this);\n    }, o.prototype.unstack = function(t, e) {\n        for(var n = t.shape[e], r = new Array(t.rank - 1), o = 0, a = 0; a < t.rank; a++)a !== e && (r[o++] = t.shape[a]);\n        var i = new Array(t.rank).fill(0), s = t.shape.slice();\n        s[e] = 1;\n        var u = new Array(n);\n        for(a = 0; a < u.length; a++)i[e] = a, u[a] = this.slice(t, i, s).reshape(r);\n        return u;\n    }, o.prototype.avgPool3d = function(t, e) {\n        var n = new Us(e, \"avg\", !1);\n        return this.compileAndRun(n, [\n            t\n        ], \"float32\");\n    }, o.prototype.avgPool3dBackprop = function(t, e, n) {\n        var r = new di(n);\n        return this.compileAndRun(r, [\n            t\n        ], e.dtype);\n    }, o.prototype.maxPool3d = function(t, e) {\n        var n = new Us(e, \"max\", !1);\n        return this.compileAndRun(n, [\n            t\n        ], \"float32\");\n    }, o.prototype.maxPool3dBackprop = function(t, e, n, r) {\n        var o = new Us(r, \"max\", !0), a = this.compileAndRun(o, [\n            e\n        ]), i = new Fs(r), s = this.compileAndRun(i, [\n            t,\n            a\n        ], e.dtype);\n        return a.dispose(), s;\n    }, o.prototype.reshape = function(t, e) {\n        var n = this.texData.get(t.dataId);\n        if (n.isPacked && !_e(t.shape, e) && (null === n.texture || !_e(n.shape, e))) {\n            var r = this.packedReshape(t, e);\n            return Lt.makeTensorFromDataId(r.dataId, r.shape, r.dtype);\n        }\n        return Ia(t, e);\n    }, o.prototype.resizeBilinear = function(t, e, n, r) {\n        var o = i().getBool(\"WEBGL_PACK_IMAGE_OPERATIONS\") ? new qs(t.shape, e, n, r) : new Hs(t.shape, e, n, r);\n        return this.compileAndRun(o, [\n            t\n        ], \"float32\");\n    }, o.prototype.resizeBilinearBackprop = function(t, e, n) {\n        var r = new Gs(t, e, n);\n        return this.compileAndRun(r, [\n            t\n        ]);\n    }, o.prototype.resizeNearestNeighbor = function(t, e, n, r) {\n        var o = new js(t.shape, e, n, r);\n        return this.compileAndRun(o, [\n            t\n        ]);\n    }, o.prototype.resizeNearestNeighborBackprop = function(t, e, n) {\n        var r = new Ks(t, e, n);\n        return this.compileAndRun(r, [\n            t\n        ]);\n    }, o.prototype.multinomial = function(t, e, n, r) {\n        var o = e ? t : ia(t), a = o.shape[0], i = o.shape[1], s = new Os(a, i, n), u = s.getCustomSetupFunc(r);\n        return this.compileAndRun(s, [\n            o\n        ], \"int32\", u);\n    }, o.prototype.oneHot = function(t, e, n, r) {\n        var o = new Ms(t.size, e, n, r);\n        return this.compileAndRun(o, [\n            t\n        ]);\n    }, o.prototype.diag = function(t) {\n        var e = new $i(t.size);\n        return this.compileAndRun(e, [\n            t\n        ]);\n    }, o.prototype.nonMaxSuppression = function(t, e, n, r, o) {\n        return dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\"), Oa(t.dataSync(), e.dataSync(), n, r, o);\n    }, o.prototype.cropAndResize = function(t, e, n, r, o, a) {\n        var i = new Hi(t.shape, e.shape, r, o, a);\n        return this.compileAndRun(i, [\n            t,\n            e,\n            n\n        ], \"float32\");\n    }, o.prototype.depthToSpace = function(t, e, n) {\n        C(e > 1, function() {\n            return \"blockSize should be > 1 for depthToSpace, but was: \" + e;\n        });\n        var r = t.shape[0], o = \"NHWC\" === n ? t.shape[1] : t.shape[2], a = \"NHWC\" === n ? t.shape[2] : t.shape[3], i = \"NHWC\" === n ? t.shape[3] : t.shape[1], s = o * e, u = a * e, c = i / (e * e), l = new Yi(\"NHWC\" === n ? [\n            r,\n            s,\n            u,\n            c\n        ] : [\n            r,\n            c,\n            s,\n            u\n        ], e, n);\n        return this.compileAndRun(l, [\n            t\n        ]);\n    }, o.prototype.split = function(t, e, n) {\n        return Ua(t, e, n);\n    }, o.prototype.scatterND = function(t, e, n) {\n        var r = Go(0, t, n), o = r.sliceRank, a = r.numUpdates, i = r.sliceSize, s = r.strides, u = r.outputSize, c = [\n            u / i,\n            i\n        ], l = t.reshape([\n            a,\n            o\n        ]), h = e.reshape([\n            a,\n            i\n        ]);\n        if (0 === u) return Ia(Fn([]), n);\n        var f = On(0), d = new $s(a, o, l.rank, h.rank, s, c);\n        return this.compileAndRun(d, [\n            h,\n            l,\n            f\n        ]).reshape(n);\n    }, o.prototype.sparseToDense = function(t, e, n, r) {\n        var o = Go(0, t, n), a = o.sliceRank, i = o.numUpdates, s = o.strides, u = o.outputSize, c = new $s(i, a, t.rank, e.rank, s, [\n            u,\n            1\n        ], !1);\n        return this.compileAndRun(c, [\n            e,\n            t,\n            r\n        ]).reshape(n);\n    }, o.prototype.fft = function(t) {\n        return this.fftImpl(t, !1);\n    }, o.prototype.ifft = function(t) {\n        return this.fftImpl(t, !0);\n    }, o.prototype.fftImpl = function(t, e) {\n        var n = this.texData.get(t.dataId), r = new rs(es, t.shape, e), o = new rs(ns, t.shape, e), a = [\n            this.makeComplexComponentTensorInfo(t, n.complexTensors.real),\n            this.makeComplexComponentTensorInfo(t, n.complexTensors.imag)\n        ], i = this.compileAndRun(r, a), s = this.compileAndRun(o, a), u = this.complex(i, s).as2D(t.shape[0], t.shape[1]);\n        return i.dispose(), s.dispose(), u;\n    }, o.prototype.gatherND = function(t, e) {\n        var n = e.shape, r = n[n.length - 1], o = Po(t, e), a = o[0], i = o[1], s = o[2], u = o[3], c = e.reshape([\n            i,\n            r\n        ]), l = t.reshape([\n            t.size / s,\n            s\n        ]), h = new is(r, u, [\n            i,\n            s\n        ]);\n        return this.compileAndRun(h, [\n            l,\n            c\n        ]).reshape(a);\n    }, o.prototype.fill = function(t, e, n) {\n        if (\"string\" === (n = n || j(e))) {\n            var r = P(n, k(t));\n            return r.fill(e), Lt.makeTensor(r, t, n, this);\n        }\n        var o = new os(t, e), a = o.getCustomSetupFunc(e);\n        return this.compileAndRun(o, [], n, a);\n    }, o.prototype.onesLike = function(t) {\n        if (\"string\" === t.dtype) throw new Error(\"onesLike is not supported under string dtype\");\n        return this.fill(t.shape, 1, t.dtype);\n    }, o.prototype.zerosLike = function(t) {\n        return this.fill(t.shape, \"string\" === t.dtype ? \"\" : 0, t.dtype);\n    }, o.prototype.linspace = function(t, e, n) {\n        return ka(t, e, n);\n    }, o.prototype.makeTensorInfo = function(t, e) {\n        var n = this.write(null, t, e);\n        return this.texData.get(n).usage = null, {\n            dataId: n,\n            shape: t,\n            dtype: e\n        };\n    }, o.prototype.makeOutput = function(t, e) {\n        var n = this.makeTensorInfo(t, e).dataId;\n        return Lt.makeTensorFromDataId(n, t, e, this);\n    }, o.prototype.unpackTensor = function(t) {\n        var e = new Bu(t.shape);\n        return this.runWebGLProgram(e, [\n            t\n        ], t.dtype);\n    }, o.prototype.packTensor = function(t) {\n        var e = new Bs(t.shape);\n        return this.runWebGLProgram(e, [\n            t\n        ], t.dtype, null, !0);\n    }, o.prototype.packedReshape = function(t, e) {\n        var n = [\n            Ae(t.shape)\n        ].concat(Te(t.shape)), r = {\n            dtype: t.dtype,\n            shape: n,\n            dataId: t.dataId\n        }, o = [\n            Ae(e)\n        ].concat(Te(e)), a = new zs(o, n), i = this.runWebGLProgram(a, [\n            r\n        ], t.dtype, null, !0);\n        return {\n            dataId: i.dataId,\n            shape: e,\n            dtype: i.dtype\n        };\n    }, o.prototype.decode = function(t) {\n        var e, n = this.texData.get(t), r = n.isPacked, o = n.shape, a = n.dtype, i = De(o);\n        e = r ? new Xi(i) : new ji(i);\n        return {\n            dtype: a,\n            shape: o,\n            dataId: this.runWebGLProgram(e, [\n                {\n                    shape: i,\n                    dtype: a,\n                    dataId: t\n                }\n            ], a, null, !0).dataId\n        };\n    }, o.prototype.runWebGLProgram = function(t, e, n, r, o) {\n        var a = this;\n        void 0 === o && (o = !1);\n        var s = this.makeTensorInfo(t.outputShape, n), u = this.texData.get(s.dataId);\n        if (t.packedOutput && (u.isPacked = !0), t.outPackingScheme === Vt.DENSE) {\n            var c = Yt(t.outputShape);\n            u.texShape = c.map(function(t) {\n                return 2 * t;\n            });\n        }\n        if (null != t.outTexUsage && (u.usage = t.outTexUsage), 0 === k(s.shape)) return u.values = B(s.dtype, 0), s;\n        var l = [], h = e.map(function(e) {\n            if (\"complex64\" === e.dtype) throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.\");\n            var n = a.texData.get(e.dataId);\n            if (null == n.texture) {\n                if (!t.packedInputs && k(e.shape) <= i().getNumber(\"WEBGL_SIZE_UPLOAD_UNIFORM\")) return {\n                    shape: e.shape,\n                    texData: null,\n                    isUniform: !0,\n                    uniformValues: n.values\n                };\n                t.packedInputs && (n.isPacked = !0, n.shape = e.shape);\n            } else if (!!n.isPacked != !!t.packedInputs) e = n.isPacked ? a.unpackTensor(e) : a.packTensor(e), l.push(e), n = a.texData.get(e.dataId);\n            else if (n.isPacked && !_e(n.shape, e.shape)) {\n                var r = e, o = e.shape;\n                e.shape = n.shape, e = a.packedReshape(e, o), l.push(e), n = a.texData.get(e.dataId), r.shape = o;\n            }\n            return a.uploadToGPU(e.dataId), {\n                shape: e.shape,\n                texData: n,\n                isUniform: !1\n            };\n        });\n        this.uploadToGPU(s.dataId);\n        var f, d = {\n            shape: s.shape,\n            texData: u,\n            isUniform: !1\n        }, p = function(t, e, n) {\n            var r = \"\";\n            e.concat(n).forEach(function(t) {\n                var e = null != t.texData && null != t.texData.slice && t.texData.slice.flatOffset > 0, n = t.isUniform ? \"uniform\" : t.texData.texShape;\n                r += t.shape + \"_\" + n + \"_\" + e;\n            });\n            var o = t.userCode, a = t.constructor.name;\n            return a += \"_\" + r + \"_\" + o;\n        }(t, h, d), v = this.getAndSaveBinary(p, function() {\n            return function(t, e, n, r) {\n                var o = e.userCode, a = n.map(function(t, n) {\n                    var r = {\n                        logicalShape: t.shape,\n                        texShape: t.isUniform ? null : t.texData.texShape,\n                        isUniform: t.isUniform,\n                        isPacked: !t.isUniform && t.texData.isPacked,\n                        flatOffset: null\n                    };\n                    return null != t.texData && null != t.texData.slice && t.texData.slice.flatOffset > 0 && (r.flatOffset = t.texData.slice.flatOffset), {\n                        name: e.variableNames[n],\n                        shapeInfo: r\n                    };\n                }), s = a.map(function(t) {\n                    return t.shapeInfo;\n                }), u = {\n                    logicalShape: r.shape,\n                    texShape: r.texData.texShape,\n                    isUniform: !1,\n                    isPacked: r.texData.isPacked,\n                    flatOffset: null\n                }, c = Za(a, u, o, e.packedInputs), l = t.createProgram(c), h = null, f = t.getUniformLocation(l, \"NAN\", !1);\n                1 === i().getNumber(\"WEBGL_VERSION\") && (h = t.getUniformLocation(l, \"INFINITY\", !1));\n                for(var d = {}, p = 0; p < e.variableNames.length; p++){\n                    var v = e.variableNames[p];\n                    d[v] = t.getUniformLocation(l, v, !1), d[\"offset\" + v] = t.getUniformLocation(l, \"offset\" + v, !1);\n                }\n                return {\n                    program: e,\n                    source: c,\n                    webGLProgram: l,\n                    uniformLocations: d,\n                    inShapeInfos: s,\n                    outShapeInfo: u,\n                    infLoc: h,\n                    nanLoc: f\n                };\n            }(a.gpgpu, t, h, d);\n        }), g = null != this.activeTimers;\n        if (g && (f = this.startTimer()), function(t, e, n, r, o) {\n            ks(e.inShapeInfos, n), ks([\n                e.outShapeInfo\n            ], [\n                r\n            ]);\n            var a = r.texData.texture, s = r.texData.texShape;\n            r.texData.isPacked ? t.setOutputPackedMatrixTexture(a, s[0], s[1]) : t.setOutputMatrixTexture(a, s[0], s[1]), t.setProgram(e.webGLProgram), 1 === i().getNumber(\"WEBGL_VERSION\") && null !== e.infLoc && t.gl.uniform1f(e.infLoc, 1 / 0), null !== e.nanLoc && t.gl.uniform1f(e.nanLoc, NaN), n.forEach(function(n, r) {\n                var o = e.program.variableNames[r], a = e.uniformLocations[o], i = e.uniformLocations[\"offset\" + o];\n                if (null != a) if (n.isUniform) if (k(n.shape) < 2) t.gl.uniform1f(a, n.uniformValues[0]);\n                else {\n                    var s = n.uniformValues;\n                    s instanceof Float32Array || (s = new Float32Array(s)), t.gl.uniform1fv(a, s);\n                }\n                else null != n.texData.slice && null != i && t.gl.uniform1i(i, n.texData.slice.flatOffset), t.setInputMatrixTexture(n.texData.texture, a, r);\n            }), null != o && o(t, e.webGLProgram), t.executeProgram();\n        }(this.gpgpu, v, h, d, r), l.forEach(function(t) {\n            return a.disposeData(t.dataId);\n        }), g && (f = this.endTimer(f), this.activeTimers.push({\n            name: t.constructor.name,\n            query: this.getQueryTime(f)\n        })), !i().getBool(\"WEBGL_LAZILY_UNPACK\") && u.isPacked && !1 === o) {\n            var m = this.unpackTensor(s);\n            return this.disposeData(s.dataId), m;\n        }\n        return s;\n    }, o.prototype.compileAndRun = function(t, e, n, r, o) {\n        void 0 === o && (o = !1), n = n || e[0].dtype;\n        var a = this.runWebGLProgram(t, e, n, r, o);\n        return Lt.makeTensorFromDataId(a.dataId, a.shape, a.dtype);\n    }, o.prototype.getAndSaveBinary = function(t, e) {\n        return t in this.binaryCache || (this.binaryCache[t] = e()), this.binaryCache[t];\n    }, o.prototype.getTextureManager = function() {\n        return this.textureManager;\n    }, o.prototype.dispose = function() {\n        var t = this;\n        if (!this.disposed) {\n            if (!i().getBool(\"IS_TEST\")) Object.keys(this.binaryCache).forEach(function(e) {\n                t.gpgpu.deleteProgram(t.binaryCache[e].webGLProgram), delete t.binaryCache[e];\n            });\n            this.textureManager.dispose(), null != this.canvas && \"undefined\" != typeof HTMLCanvasElement && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = !0;\n        }\n    }, o.prototype.floatPrecision = function() {\n        var t = this;\n        return null == this.floatPrecisionValue && (this.floatPrecisionValue = Ze(function() {\n            if (!i().get(\"WEBGL_RENDER_FLOAT32_ENABLED\")) {\n                var e = i().getBool(\"DEBUG\");\n                i().set(\"DEBUG\", !1);\n                var n = t.abs(On(1e-8)).dataSync()[0];\n                if (i().set(\"DEBUG\", e), n > 0) return 32;\n            }\n            return 16;\n        })), this.floatPrecisionValue;\n    }, o.prototype.epsilon = function() {\n        return 32 === this.floatPrecision() ? 1e-7 : 1e-4;\n    }, o.prototype.uploadToGPU = function(t) {\n        var e, n = this.texData.get(t), r = n.shape, o = n.dtype, a = n.values, i = n.texture, s = n.usage, u = n.isPacked;\n        if (null == i) {\n            var c, l = null != this.activeTimers;\n            l && (c = et());\n            var h = n.texShape;\n            if (null == h && (h = Ne(r, u), n.texShape = h), null != a) {\n                var f = De(r), d = void 0, p = h[1], v = h[0], g = a instanceof Uint8Array;\n                u ? (p = (e = $t(h[0], h[1]))[0], v = e[1], d = new ts(f, [\n                    v,\n                    p\n                ], g)) : d = new Zi(f, [\n                    v,\n                    p\n                ], g);\n                var m = this.makeTensorInfo([\n                    v,\n                    p\n                ], o);\n                this.texData.get(m.dataId).usage = g ? zt.PIXELS : zt.UPLOAD, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(m.dataId), p, v, a);\n                var y = this.runWebGLProgram(d, [\n                    m\n                ], o, null, !0), x = this.texData.get(y.dataId);\n                n.texture = x.texture, n.texShape = x.texShape, n.isPacked = x.isPacked, n.usage = x.usage, this.disposeData(m.dataId), this.texData.delete(y.dataId), n.values = null, l && (this.uploadWaitMs += et() - c);\n            } else {\n                var b = this.acquireTexture(h, s, o, u);\n                n.texture = b;\n            }\n        }\n    }, o.prototype.convertAndCacheOnCPU = function(t, e) {\n        var n = this.texData.get(t), r = n.dtype;\n        return this.releaseGPUData(t), null != e && (n.values = function(t, e) {\n            if (\"float32\" === e || \"complex64\" === e) return t;\n            if (\"int32\" === e || \"bool\" === e) {\n                for(var n = \"int32\" === e ? new Int32Array(t.length) : new Uint8Array(t.length), r = 0; r < n.length; ++r)n[r] = Math.round(t[r]);\n                return n;\n            }\n            throw new Error(\"Unknown dtype \" + e);\n        }(e, r)), n.values;\n    }, o.prototype.acquireTexture = function(t, e, n, r) {\n        if (this.numBytesInGPU += this.computeBytes(t, n), !this.warnedAboutMemory && this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024) {\n            var o = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n            this.warnedAboutMemory = !0, console.warn(\"High memory usage in GPU: \" + o + \" MB, most likely due to a memory leak\");\n        }\n        return this.textureManager.acquireTexture(t, e, r);\n    }, o.prototype.computeBytes = function(t, e) {\n        return t[0] * t[1] * z(e);\n    }, o;\n}(la);\nWt() && Lt.registerBackend(\"webgl\", function() {\n    return new Uu;\n}, 2);\n\"undefined\" != typeof globalThis ? globalThis :  false ? 0 : \"undefined\" != typeof global ? global : \"undefined\" != typeof self && self;\nfunction Vu(t, e) {\n    return t(e = {\n        exports: {}\n    }, e.exports), e.exports;\n}\nvar zu = Vu(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e, n = this, r = (e = 4022871197, function(t) {\n                t = t.toString();\n                for(var n = 0; n < t.length; n++){\n                    var r = .02519603282416938 * (e += t.charCodeAt(n));\n                    r -= e = r >>> 0, e = (r *= e) >>> 0, e += 4294967296 * (r -= e);\n                }\n                return 2.3283064365386963e-10 * (e >>> 0);\n            });\n            n.next = function() {\n                var t = 2091639 * n.s0 + 2.3283064365386963e-10 * n.c;\n                return n.s0 = n.s1, n.s1 = n.s2, n.s2 = t - (n.c = 0 | t);\n            }, n.c = 1, n.s0 = r(\" \"), n.s1 = r(\" \"), n.s2 = r(\" \"), n.s0 -= r(t), n.s0 < 0 && (n.s0 += 1), n.s1 -= r(t), n.s1 < 0 && (n.s1 += 1), n.s2 -= r(t), n.s2 < 0 && (n.s2 += 1), r = null;\n        }\n        function o(t, e) {\n            return e.c = t.c, e.s0 = t.s0, e.s1 = t.s1, e.s2 = t.s2, e;\n        }\n        function a(t, e) {\n            var n = new r(t), a = e && e.state, i = n.next;\n            return i.int32 = function() {\n                return 4294967296 * n.next() | 0;\n            }, i.double = function() {\n                return i() + 11102230246251565e-32 * (2097152 * i() | 0);\n            }, i.quick = i, a && (\"object\" == typeof a && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.alea = a;\n    }(0, t, !1);\n}), Gu = Vu(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this, n = \"\";\n            e.x = 0, e.y = 0, e.z = 0, e.w = 0, e.next = function() {\n                var t = e.x ^ e.x << 11;\n                return e.x = e.y, e.y = e.z, e.z = e.w, e.w ^= e.w >>> 19 ^ t ^ t >>> 8;\n            }, t === (0 | t) ? e.x = t : n += t;\n            for(var r = 0; r < n.length + 64; r++)e.x ^= 0 | n.charCodeAt(r), e.next();\n        }\n        function o(t, e) {\n            return e.x = t.x, e.y = t.y, e.z = t.z, e.w = t.w, e;\n        }\n        function a(t, e) {\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (\"object\" == typeof a && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.xor128 = a;\n    }(0, t, !1);\n}), Hu = Vu(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this, n = \"\";\n            e.next = function() {\n                var t = e.x ^ e.x >>> 2;\n                return e.x = e.y, e.y = e.z, e.z = e.w, e.w = e.v, (e.d = e.d + 362437 | 0) + (e.v = e.v ^ e.v << 4 ^ t ^ t << 1) | 0;\n            }, e.x = 0, e.y = 0, e.z = 0, e.w = 0, e.v = 0, t === (0 | t) ? e.x = t : n += t;\n            for(var r = 0; r < n.length + 64; r++)e.x ^= 0 | n.charCodeAt(r), r == n.length && (e.d = e.x << 10 ^ e.x >>> 4), e.next();\n        }\n        function o(t, e) {\n            return e.x = t.x, e.y = t.y, e.z = t.z, e.w = t.w, e.v = t.v, e.d = t.d, e;\n        }\n        function a(t, e) {\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (\"object\" == typeof a && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.xorwow = a;\n    }(0, t, !1);\n}), qu = Vu(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this;\n            e.next = function() {\n                var t, n, r = e.x, o = e.i;\n                return t = r[o], n = (t ^= t >>> 7) ^ t << 24, n ^= (t = r[o + 1 & 7]) ^ t >>> 10, n ^= (t = r[o + 3 & 7]) ^ t >>> 3, n ^= (t = r[o + 4 & 7]) ^ t << 7, t = r[o + 7 & 7], n ^= (t ^= t << 13) ^ t << 9, r[o] = n, e.i = o + 1 & 7, n;\n            }, function(t, e) {\n                var n, r = [];\n                if (e === (0 | e)) r[0] = e;\n                else for(e = \"\" + e, n = 0; n < e.length; ++n)r[7 & n] = r[7 & n] << 15 ^ e.charCodeAt(n) + r[n + 1 & 7] << 13;\n                for(; r.length < 8;)r.push(0);\n                for(n = 0; n < 8 && 0 === r[n]; ++n);\n                for(8 == n ? r[7] = -1 : r[n], t.x = r, t.i = 0, n = 256; n > 0; --n)t.next();\n            }(e, t);\n        }\n        function o(t, e) {\n            return e.x = t.x.slice(), e.i = t.i, e;\n        }\n        function a(t, e) {\n            null == t && (t = +new Date);\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (a.x && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.xorshift7 = a;\n    }(0, t, !1);\n}), Ku = Vu(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this;\n            e.next = function() {\n                var t, n, r = e.w, o = e.X, a = e.i;\n                return e.w = r = r + 1640531527 | 0, n = o[a + 34 & 127], t = o[a = a + 1 & 127], n ^= n << 13, t ^= t << 17, n ^= n >>> 15, t ^= t >>> 12, n = o[a] = n ^ t, e.i = a, n + (r ^ r >>> 16) | 0;\n            }, function(t, e) {\n                var n, r, o, a, i, s = [], u = 128;\n                for(e === (0 | e) ? (r = e, e = null) : (e += \"\\x00\", r = 0, u = Math.max(u, e.length)), o = 0, a = -32; a < u; ++a)e && (r ^= e.charCodeAt((a + 32) % e.length)), 0 === a && (i = r), r ^= r << 10, r ^= r >>> 15, r ^= r << 4, r ^= r >>> 13, a >= 0 && (i = i + 1640531527 | 0, o = 0 == (n = s[127 & a] ^= r + i) ? o + 1 : 0);\n                for(o >= 128 && (s[127 & (e && e.length || 0)] = -1), o = 127, a = 512; a > 0; --a)r = s[o + 34 & 127], n = s[o = o + 1 & 127], r ^= r << 13, n ^= n << 17, r ^= r >>> 15, n ^= n >>> 12, s[o] = r ^ n;\n                t.w = i, t.X = s, t.i = o;\n            }(e, t);\n        }\n        function o(t, e) {\n            return e.i = t.i, e.w = t.w, e.X = t.X.slice(), e;\n        }\n        function a(t, e) {\n            null == t && (t = +new Date);\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (a.X && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.xor4096 = a;\n    }(0, t, !1);\n}), ju = Vu(function(t) {\n    !function(t, e, n) {\n        function r(t) {\n            var e = this, n = \"\";\n            e.next = function() {\n                var t = e.b, n = e.c, r = e.d, o = e.a;\n                return t = t << 25 ^ t >>> 7 ^ n, n = n - r | 0, r = r << 24 ^ r >>> 8 ^ o, o = o - t | 0, e.b = t = t << 20 ^ t >>> 12 ^ n, e.c = n = n - r | 0, e.d = r << 16 ^ n >>> 16 ^ o, e.a = o - t | 0;\n            }, e.a = 0, e.b = 0, e.c = -1640531527, e.d = 1367130551, t === Math.floor(t) ? (e.a = t / 4294967296 | 0, e.b = 0 | t) : n += t;\n            for(var r = 0; r < n.length + 20; r++)e.b ^= 0 | n.charCodeAt(r), e.next();\n        }\n        function o(t, e) {\n            return e.a = t.a, e.b = t.b, e.c = t.c, e.d = t.d, e;\n        }\n        function a(t, e) {\n            var n = new r(t), a = e && e.state, i = function() {\n                return (n.next() >>> 0) / 4294967296;\n            };\n            return i.double = function() {\n                do {\n                    var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);\n                }while (0 === t);\n                return t;\n            }, i.int32 = n.next, i.quick = i, a && (\"object\" == typeof a && o(a, n), i.state = function() {\n                return o(n, {});\n            }), i;\n        }\n        e && e.exports ? e.exports = a : n && n.amd ? n(function() {\n            return a;\n        }) : this.tychei = a;\n    }(0, t, !1);\n}), Xu = Vu(function(t) {\n    !function(e, n) {\n        var r, o = this, a = 256, i = 6, s = \"random\", u = n.pow(a, i), c = n.pow(2, 52), l = 2 * c, h = a - 1;\n        function f(t, h, f) {\n            var m = [], y = v(function t(e, n) {\n                var r, o = [], a = typeof e;\n                if (n && \"object\" == a) for(r in e)try {\n                    o.push(t(e[r], n - 1));\n                } catch (t) {}\n                return o.length ? o : \"string\" == a ? e : e + \"\\x00\";\n            }((h = 1 == h ? {\n                entropy: !0\n            } : h || {}).entropy ? [\n                t,\n                g(e)\n            ] : null == t ? function() {\n                try {\n                    var t;\n                    return r && (t = r.randomBytes) ? t = t(a) : (t = new Uint8Array(a), (o.crypto || o.msCrypto).getRandomValues(t)), g(t);\n                } catch (t) {\n                    var n = o.navigator, i = n && n.plugins;\n                    return [\n                        +new Date,\n                        o,\n                        i,\n                        o.screen,\n                        g(e)\n                    ];\n                }\n            }() : t, 3), m), x = new d(m), b = function() {\n                for(var t = x.g(i), e = u, n = 0; t < c;)t = (t + n) * a, e *= a, n = x.g(1);\n                for(; t >= l;)t /= 2, e /= 2, n >>>= 1;\n                return (t + n) / e;\n            };\n            return b.int32 = function() {\n                return 0 | x.g(4);\n            }, b.quick = function() {\n                return x.g(4) / 4294967296;\n            }, b.double = b, v(g(x.S), e), (h.pass || f || function(t, e, r, o) {\n                return o && (o.S && p(o, x), t.state = function() {\n                    return p(x, {});\n                }), r ? (n[s] = t, e) : t;\n            })(b, y, \"global\" in h ? h.global : this == n, h.state);\n        }\n        function d(t) {\n            var e, n = t.length, r = this, o = 0, i = r.i = r.j = 0, s = r.S = [];\n            for(n || (t = [\n                n++\n            ]); o < a;)s[o] = o++;\n            for(o = 0; o < a; o++)s[o] = s[i = h & i + t[o % n] + (e = s[o])], s[i] = e;\n            (r.g = function(t) {\n                for(var e, n = 0, o = r.i, i = r.j, s = r.S; t--;)e = s[o = h & o + 1], n = n * a + s[h & (s[o] = s[i = h & i + e]) + (s[i] = e)];\n                return r.i = o, r.j = i, n;\n            })(a);\n        }\n        function p(t, e) {\n            return e.i = t.i, e.j = t.j, e.S = t.S.slice(), e;\n        }\n        function v(t, e) {\n            for(var n, r = t + \"\", o = 0; o < r.length;)e[h & o] = h & (n ^= 19 * e[h & o]) + r.charCodeAt(o++);\n            return g(e);\n        }\n        function g(t) {\n            return String.fromCharCode.apply(0, t);\n        }\n        if (n[\"seed\" + s] = f, v(n.random(), e), t.exports) {\n            t.exports = f;\n            try {\n                r = __webpack_require__(/*! crypto */ \"crypto\");\n            } catch (t) {}\n        }\n    }([], Math);\n});\nXu.alea = zu, Xu.xor128 = Gu, Xu.xorwow = Hu, Xu.xorshift7 = qu, Xu.xor4096 = Ku, Xu.tychei = ju;\nvar Yu = Xu.alea;\nvar $u = An({\n    addN_: function(t) {\n        C(Array.isArray(t), function() {\n            return \"The argument passed to tf.addN() must be a list of tensors\";\n        }), C(t.length >= 1, function() {\n            return \"Must pass at least one tensor to tf.addN(), but got \" + t.length;\n        });\n        var e = t.map(function(t, e) {\n            return gn(t, \"tensors\" + e, \"addN\");\n        }), n = e[0];\n        e.forEach(function(t) {\n            if (t.dtype !== n.dtype) throw new Error(\"All tensors passed to tf.addN() must have the same dtype\");\n        }), e.forEach(function(t) {\n            if (!S(t.shape, n.shape)) throw new Error(\"All tensors passed to tf.addN() must have the same shape\");\n        });\n        var r = e;\n        return Lt.runKernelFunc(function(t, n) {\n            return t.addN(e);\n        }, r, null, \"AddN\");\n    }\n});\nfunction Qu() {\n    Xe(\"tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon\");\n}\nfunction Ju(t) {\n    return 0 === t.rank || 1 === t.rank ? t.as4D(1, 1, 1, t.size) : 2 === t.rank ? t.as4D(1, 1, t.shape[0], t.shape[1]) : 3 === t.rank ? t.as4D(1, t.shape[0], t.shape[1], t.shape[2]) : t;\n}\nfunction Zu(t, e, n, r, o, a) {\n    null == a && (a = .001);\n    var i, s, u = gn(t, \"x\", \"batchNorm\"), c = gn(e, \"mean\", \"batchNorm\"), l = gn(n, \"variance\", \"batchNorm\");\n    null != o && (i = gn(o, \"scale\", \"batchNorm\")), null != r && (s = gn(r, \"offset\", \"batchNorm\")), C(c.rank === l.rank, function() {\n        return \"Batch normalization gradient requires mean and variance to have equal ranks.\";\n    }), C(null == s || c.rank === s.rank, function() {\n        return \"Batch normalization gradient requires mean and offset to have equal ranks.\";\n    }), C(null == i || c.rank === i.rank, function() {\n        return \"Batch normalization gradient requires mean and scale to have equal ranks.\";\n    });\n    var h = {\n        x: u,\n        scale: i,\n        offset: s,\n        mean: c,\n        variance: l\n    }, f = {\n        varianceEpsilon: a\n    };\n    return Lt.runKernelFunc(function(t, e) {\n        var n = Ju(u), r = t.batchNormalization(n, tc(c), tc(l), a, tc(i), tc(s));\n        return e([\n            u,\n            c,\n            l,\n            i\n        ]), r;\n    }, h, null, \"FusedBatchNorm\", f).reshape(u.shape);\n}\nfunction tc(t) {\n    return null == t ? null : 0 === t.rank ? t.as1D() : 1 === t.rank ? t : 2 === t.rank ? t.as4D(1, 1, t.shape[0], t.shape[1]) : 3 === t.rank ? t.as4D(1, t.shape[0], t.shape[1], t.shape[2]) : t;\n}\nvar ec = An({\n    batchNormalization_: function(t, e, n, r, o, a) {\n        return void 0 === r && (r = .001), Qu(), Zu(t, e, n, a, o, r);\n    }\n}), nc = An({\n    batchNorm_: Zu\n});\nfunction rc(t, e, n, r, o, a) {\n    var i, s, u = gn(t, \"x\", \"batchNorm\"), c = gn(e, \"mean\", \"batchNorm\"), l = gn(n, \"variance\", \"batchNorm\");\n    return null != o && (i = gn(o, \"scale\", \"batchNorm\")), null != r && (s = gn(r, \"offset\", \"batchNorm\")), C(2 === u.rank, function() {\n        return \"Error in batchNorm3D: x must be rank 3 but got rank \" + u.rank + \".\";\n    }), C(2 === c.rank || 1 === c.rank, function() {\n        return \"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank \" + c.rank + \".\";\n    }), C(2 === l.rank || 1 === l.rank, function() {\n        return \"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank \" + l.rank + \".\";\n    }), null != i && C(2 === i.rank || 1 === i.rank, function() {\n        return \"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank \" + i.rank + \".\";\n    }), null != s && C(2 === s.rank || 1 === s.rank, function() {\n        return \"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank \" + s.rank + \".\";\n    }), nc(u, c, l, s, i, a);\n}\nvar oc = An({\n    batchNormalization2d_: function(t, e, n, r, o, a) {\n        return void 0 === r && (r = .001), Qu(), rc(t, e, n, a, o, r);\n    }\n}), ac = An({\n    batchNorm2d_: rc\n});\nfunction ic(t, e, n, r, o, a) {\n    var i, s, u = gn(t, \"x\", \"batchNorm\"), c = gn(e, \"mean\", \"batchNorm\"), l = gn(n, \"variance\", \"batchNorm\");\n    return null != o && (i = gn(o, \"scale\", \"batchNorm\")), null != r && (s = gn(r, \"offset\", \"batchNorm\")), C(3 === u.rank, function() {\n        return \"Error in batchNorm3D: x must be rank 3 but got rank \" + u.rank + \".\";\n    }), C(3 === c.rank || 1 === c.rank, function() {\n        return \"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank \" + c.rank + \".\";\n    }), C(3 === l.rank || 1 === l.rank, function() {\n        return \"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank \" + l.rank + \".\";\n    }), null != i && C(3 === i.rank || 1 === i.rank, function() {\n        return \"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank \" + i.rank + \".\";\n    }), null != s && C(3 === s.rank || 1 === s.rank, function() {\n        return \"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank \" + s.rank + \".\";\n    }), nc(u, c, l, s, i, a);\n}\nvar sc = An({\n    batchNormalization3d_: function(t, e, n, r, o, a) {\n        return void 0 === r && (r = .001), Qu(), ic(t, e, n, a, o, r);\n    }\n}), uc = An({\n    batchNorm3d_: ic\n});\nfunction cc(t, e, n, r, o, a) {\n    var i, s, u = gn(t, \"x\", \"batchNorm\"), c = gn(e, \"mean\", \"batchNorm\"), l = gn(n, \"variance\", \"batchNorm\");\n    return null != o && (i = gn(o, \"scale\", \"batchNorm\")), null != r && (s = gn(r, \"offset\", \"batchNorm\")), C(4 === u.rank, function() {\n        return \"Error in batchNorm4D: x must be rank 4 but got rank \" + u.rank + \".\";\n    }), C(4 === c.rank || 1 === c.rank, function() {\n        return \"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank \" + c.rank + \".\";\n    }), C(4 === l.rank || 1 === l.rank, function() {\n        return \"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank \" + l.rank + \".\";\n    }), null != i && C(4 === i.rank || 1 === i.rank, function() {\n        return \"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank \" + i.rank + \".\";\n    }), null != s && C(4 === s.rank || 1 === s.rank, function() {\n        return \"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank \" + s.rank + \".\";\n    }), nc(u, c, l, s, i, a);\n}\nvar lc = An({\n    batchNormalization4d_: function(t, e, n, r, o, a) {\n        return void 0 === r && (r = .001), Qu(), cc(t, e, n, a, o, r);\n    }\n}), hc = An({\n    batchNorm4d_: cc\n});\nvar fc = An({\n    broadcastTo_: function(t, e) {\n        var n = gn(t, \"broadcastTo\", \"x\"), r = n.shape;\n        if (e.some(function(t) {\n            return !(t > 0) || t % 1 != 0;\n        })) throw new Error(\"broadcastTo(): Invalid broadcast shape [\" + e + \"].\");\n        if (e.length < n.rank) throw new Error(\"broadcastTo(): shape.length=\" + e.length + \" < input.rank=\" + n.rank + \".\");\n        if (e.length > n.rank) {\n            for(var o = n.shape.slice(); o.length < e.length;)o.unshift(1);\n            n = n.reshape(o);\n        }\n        for(var a = n.shape, i = Array.from(e), s = e.length - 1; s >= 0; s--)if (a[s] === e[s]) i[s] = 1;\n        else if (1 !== n.shape[s]) throw new Error(\"broadcastTo(): [\" + r + \"] cannot be broadcast to [\" + e + \"].\");\n        var u = i.map(function(t, e) {\n            return t > 1 ? e : -1;\n        }).filter(function(t) {\n            return t >= 0;\n        });\n        if (0 === u.length) return n.clone();\n        var c = {\n            x: n\n        }, l = {\n            shape: e,\n            inputShape: a\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.tile(n, i);\n        }, c, function(t) {\n            return {\n                x: function() {\n                    return t.sum(u, !0);\n                }\n            };\n        }, Sr, l);\n    }\n});\nvar dc = An({\n    clone_: function(t) {\n        var e = gn(t, \"x\", \"clone\", null);\n        return Lt.runKernelFunc(function() {\n            return Lt.makeTensorFromDataId(e.dataId, e.shape, e.dtype);\n        }, {\n            x: e\n        }, null, Tr);\n    }\n});\nvar pc = An({\n    logicalAnd_: function(t, e) {\n        var n = gn(t, \"a\", \"logicalAnd\", \"bool\"), r = gn(e, \"b\", \"logicalAnd\", \"bool\");\n        return Pr(n.shape, r.shape), Lt.runKernelFunc(function(t) {\n            return t.logicalAnd(n, r);\n        }, {\n            a: n,\n            b: r\n        }, null, \"LogicalAnd\");\n    }\n}), vc = An({\n    logicalNot_: function(t) {\n        var e = gn(t, \"x\", \"logicalNot\", \"bool\");\n        return Lt.runKernelFunc(function(t) {\n            return t.logicalNot(e);\n        }, {\n            $x: e\n        });\n    }\n}), gc = An({\n    logicalOr_: function(t, e) {\n        var n = gn(t, \"a\", \"logicalOr\", \"bool\"), r = gn(e, \"b\", \"logicalOr\", \"bool\");\n        return Pr(n.shape, r.shape), Lt.runKernelFunc(function(t) {\n            return t.logicalOr(n, r);\n        }, {\n            $a: n,\n            $b: r\n        });\n    }\n}), mc = An({\n    logicalXor_: function(t, e) {\n        var n = gn(t, \"a\", \"logicalXor\", \"bool\"), r = gn(e, \"b\", \"logicalXor\", \"bool\");\n        return Pr(n.shape, r.shape), gc(t, e).logicalAnd(pc(t, e).logicalNot());\n    }\n}), yc = An({\n    where_: function(t, e, n) {\n        var r = gn(e, \"a\", \"where\"), o = gn(n, \"b\", \"where\"), a = gn(t, \"condition\", \"where\", \"bool\");\n        return E(r.shape, o.shape, \"Error in where: \"), 1 === a.rank ? C(a.shape[0] === r.shape[0], function() {\n            return \"The first dimension of `a` must match the size of `condition`.\";\n        }) : E(a.shape, o.shape, \"Error in where: \"), Lt.runKernelFunc(function(t, e) {\n            var n = t.select(a, r, o);\n            return e([\n                a\n            ]), n;\n        }, {\n            $condition: a,\n            $a: r,\n            $b: o\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $condition: function() {\n                    return Xn(n).toFloat();\n                },\n                $a: function() {\n                    return t.mul(n.cast(t.dtype));\n                },\n                $b: function() {\n                    return t.mul(n.logicalNot().cast(t.dtype));\n                }\n            };\n        });\n    }\n}), xc = function(t) {\n    return n(this, void 0, void 0, function() {\n        var e, n, o;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return [\n                        4,\n                        (e = gn(t, \"condition\", \"whereAsync\", \"bool\")).data()\n                    ];\n                case 1:\n                    return n = r.sent(), o = Ga(e.shape, n), t !== e && e.dispose(), [\n                        2,\n                        o\n                    ];\n            }\n        });\n    });\n};\nvar bc = An({\n    divNoNan_: function(t, e) {\n        var n, r = gn(t, \"a\", \"div\"), o = gn(e, \"b\", \"div\");\n        r = (n = Nt(r, o))[0], o = n[1];\n        var a = Bo(r, o), i = Xn(a), s = o.equal(i);\n        return yc(s, i, a);\n    }\n});\nvar wc = An({\n    tile_: function(t, e) {\n        var n = gn(t, \"x\", \"tile\", null);\n        C(n.rank === e.length, function() {\n            return \"Error in transpose: rank of input \" + n.rank + \" must match length of reps \" + e + \".\";\n        });\n        var r = [\n            n\n        ], o = {\n            x: n\n        }, a = {\n            reps: e\n        };\n        return Lt.runKernelFunc(function(t, r) {\n            var o = t.tile(n, e);\n            return r([\n                n\n            ]), o;\n        }, o, null, Dr, a, r);\n    }\n});\nvar Cc = An({\n    eye_: function(t, e, n, r) {\n        void 0 === r && (r = \"float32\"), null == e && (e = t);\n        for(var o = er([\n            t,\n            e\n        ], r), a = t <= e ? t : e, i = 0; i < a; ++i)o.set(1, i, i);\n        var s = o.toTensor().as2D(t, e);\n        if (null == n) return s;\n        if (1 === n.length) return wc(sr(s, 0), [\n            n[0],\n            1,\n            1\n        ]);\n        if (2 === n.length) return wc(sr(sr(s, 0), 0), [\n            n[0],\n            n[1],\n            1,\n            1\n        ]);\n        if (3 === n.length) return wc(sr(sr(sr(s, 0), 0), 0), [\n            n[0],\n            n[1],\n            n[2],\n            1,\n            1\n        ]);\n        throw new Error(\"eye() currently supports only 1D and 2D batchShapes, but received \" + n.length + \"D.\");\n    }\n});\nvar Ec = An({\n    multinomial_: function(t, e, n, r) {\n        void 0 === r && (r = !1);\n        var o = gn(t, \"logits\", \"multinomial\"), a = o.size, i = o.rank;\n        if (a < 2) throw new Error(\"Error in multinomial: you need at least 2 outcomes, but got \" + a + \".\");\n        if (i > 2) throw new Error(\"Rank of probabilities must be 1 or 2, but is \" + i);\n        n = n || Math.random();\n        var s = 1 === i ? o.as2D(1, -1) : o, u = Lt.runKernelFunc(function(t) {\n            return t.multinomial(s, r, e, n);\n        }, {\n            logits2D: s\n        });\n        return 1 === i ? u.as1D() : u;\n    }\n});\nvar Rc = An({\n    oneHot_: function(t, e, n, r) {\n        if (void 0 === n && (n = 1), void 0 === r && (r = 0), e < 2) throw new Error(\"Error in oneHot: depth must be >=2, but it is \" + e);\n        var o = gn(t, \"indices\", \"oneHot\", \"int32\"), a = o.shape.concat([\n            e\n        ]), i = {\n            indices: o = o.flatten()\n        }, s = {\n            depth: e,\n            onValue: n,\n            offValue: r\n        };\n        return Lt.runKernelFunc(function(t, a) {\n            return a([\n                o\n            ]), t.oneHot(o, e, n, r);\n        }, i, null, Ar, s).reshape(a);\n    }\n});\nvar Ic = An({\n    pad_: function(t, e, n) {\n        void 0 === n && (n = 0);\n        var r = gn(t, \"x\", \"pad\");\n        if (0 === r.rank) throw new Error(\"pad(scalar) is not defined. Pass non-scalar to pad\");\n        var o = {\n            paddings: e,\n            constantValue: n\n        }, a = {\n            x: r\n        };\n        return Lt.runKernelFunc(function(t, o) {\n            return o([\n                r\n            ]), t.pad(r, e, n);\n        }, a, null, Nr, o);\n    }\n});\nvar kc = An({\n    pad1d_: function(t, e, n) {\n        return void 0 === n && (n = 0), C(2 === e.length, function() {\n            return \"Invalid number of paddings. Must be length of 2.\";\n        }), Ic(t, [\n            e\n        ], n);\n    }\n});\nvar Sc = An({\n    pad2d_: function(t, e, n) {\n        return void 0 === n && (n = 0), C(2 === e.length && 2 === e[0].length && 2 === e[1].length, function() {\n            return \"Invalid number of paddings. Must be length of 2 each.\";\n        }), Ic(t, e, n);\n    }\n});\nvar Ac = An({\n    pad3d_: function(t, e, n) {\n        return void 0 === n && (n = 0), C(3 === e.length && 2 === e[0].length && 2 === e[1].length && 2 === e[2].length, function() {\n            return \"Invalid number of paddings. Must be length of 2 each.\";\n        }), Ic(t, e, n);\n    }\n});\nvar Tc = An({\n    pad4d_: function(t, e, n) {\n        return void 0 === n && (n = 0), C(4 === e.length && 2 === e[0].length && 2 === e[1].length && 2 === e[2].length && 2 === e[3].length, function() {\n            return \"Invalid number of paddings. Must be length of 2 each.\";\n        }), Ic(t, e, n);\n    }\n});\nvar Dc = An({\n    rand_: function(t, e, n) {\n        var r = k(t), o = null;\n        if (null == n || \"float32\" === n) o = new Float32Array(r);\n        else if (\"int32\" === n) o = new Int32Array(r);\n        else {\n            if (\"bool\" !== n) throw new Error(\"Unknown data type \" + n);\n            o = new Uint8Array(r);\n        }\n        for(var a = 0; a < r; a++)o[a] = e();\n        return Lt.makeTensor(o, t, n);\n    }\n}), Nc = .001, Fc = .1;\nfunction _c() {\n    return 32 === Lt.backend.floatPrecision() ? Nc : Fc;\n}\nfunction Oc(t, e, n) {\n    var r = !0;\n    if ((V(t) || V(e)) && (r = !1), V(t) && V(e) && (r = !0), r) {\n        var o = t.constructor.name, a = e.constructor.name;\n        if (o !== a) throw new Error(\"Arrays are of different type. Actual: \" + o + \". Expected: \" + a);\n    }\n    if (Array.isArray(t) && Array.isArray(e)) {\n        var i = pn(t), s = pn(e);\n        if (!S(i, s)) throw new Error(\"Arrays have different shapes. Actual: [\" + i + \"]. Expected: [\" + s + \"]\");\n    }\n    var u = V(t) ? t : I(t), c = V(e) ? e : I(e);\n    if (u.length !== c.length) throw new Error(\"Arrays have different lengths actual: \" + u.length + \" vs expected: \" + c.length + \".\\nActual:   \" + u + \".\\nExpected: \" + c + \".\");\n    for(var l = 0; l < c.length; ++l){\n        var h = u[l], f = c[l];\n        if (!n(h, f)) throw new Error(\"Arrays differ: actual[\" + l + \"] = \" + h + \", expected[\" + l + \"] = \" + f + \".\\nActual:   \" + u + \".\\nExpected: \" + c + \".\");\n    }\n}\nfunction Mc(t, e, n) {\n    return !isFinite(t) && !isFinite(e) || !(isNaN(t) || isNaN(e) || Math.abs(t - e) > n);\n}\nvar Bc = Object.freeze({\n    TEST_EPSILON_FLOAT16: Fc,\n    expectArraysClose: function(t, e, n) {\n        return null == n && (n = _c()), Oc(t, e, function(t, e) {\n            return Mc(t, e, n);\n        });\n    },\n    testEpsilon: _c,\n    expectPromiseToFail: function(t, e) {\n        t().then(function() {\n            return e.fail();\n        }, function() {\n            return e();\n        });\n    },\n    expectArraysEqual: function(t, e) {\n        var n = \"string\" == typeof e || \"number\" == typeof e || \"boolean\" == typeof e ? [\n            e\n        ] : e;\n        return H(t) || H(t[0]) || H(e) || H(e[0]) ? Oc(t, n, function(t, e) {\n            return t == e;\n        }) : Oc(t, e, function(t, e) {\n            return Mc(t, e, 0);\n        });\n    },\n    expectNumbersClose: function(t, e, n) {\n        if (null == n && (n = _c()), !Mc(t, e, n)) throw new Error(\"Numbers differ: actual === \" + t + \", expected === \" + e);\n    },\n    expectValuesInRange: function(t, e, n) {\n        for(var r = 0; r < t.length; r++)if (t[r] < e || t[r] > n) throw new Error(\"Value out of range:\" + t[r] + \" low: \" + e + \", high: \" + n);\n    },\n    expectArrayBuffersEqual: function(t, e) {\n        expect(new Float32Array(t)).toEqual(new Float32Array(e));\n    }\n}), Pc = function() {\n    function t(t, e, n, r, o) {\n        this.mean = t, this.stdDev = e, this.dtype = n, this.nextVal = NaN, this.truncated = r, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);\n        var a = o || Math.random();\n        this.random = Yu(a.toString());\n    }\n    return t.prototype.nextValue = function() {\n        if (!isNaN(this.nextVal)) {\n            var t = this.nextVal;\n            return this.nextVal = NaN, t;\n        }\n        for(var e, n, r = !1; !r;){\n            var o = void 0, a = void 0, i = void 0;\n            do {\n                i = (o = 2 * this.random() - 1) * o + (a = 2 * this.random() - 1) * a;\n            }while (i >= 1 || 0 === i);\n            var s = Math.sqrt(-2 * Math.log(i) / i);\n            e = this.mean + this.stdDev * o * s, n = this.mean + this.stdDev * a * s, this.truncated && !this.isValidTruncated(e) || (r = !0);\n        }\n        return this.truncated && !this.isValidTruncated(n) || (this.nextVal = this.convertValue(n)), this.convertValue(e);\n    }, t.prototype.convertValue = function(t) {\n        return null == this.dtype || \"float32\" === this.dtype ? t : Math.round(t);\n    }, t.prototype.isValidTruncated = function(t) {\n        return t <= this.upper && t >= this.lower;\n    }, t;\n}(), Lc = function() {\n    function t(t, e, n, r) {\n        this.alpha = t, this.beta = 1 / e, this.dtype = n;\n        var o = r || Math.random();\n        this.randu = Yu(o.toString()), this.randn = new Pc(0, 1, n, !1, this.randu()), this.d = t < 1 ? t + 2 / 3 : t - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);\n    }\n    return t.prototype.nextValue = function() {\n        for(var t, e, n, r, o, a;;){\n            do {\n                r = this.randn.nextValue(), a = 1 + this.c * r;\n            }while (a <= 0);\n            if (a *= a * a, e = 1 - .331 * (t = r * r) * t, n = .5 * t + this.d * (1 - a + Math.log(a)), (o = this.randu()) < e || Math.log(o) < n) break;\n        }\n        return a = 1 / this.beta * this.d * a, this.alpha < 1 && (a *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a);\n    }, t.prototype.convertValue = function(t) {\n        return \"float32\" === this.dtype ? t : Math.round(t);\n    }, t;\n}(), Wc = function() {\n    function t(t, e, n, r) {\n        var o = this;\n        if (void 0 === t && (t = 0), void 0 === e && (e = 1), this.canReturnFloat = function() {\n            return null == o.dtype || \"float32\" === o.dtype;\n        }, this.min = t, this.range = e - t, this.dtype = n, null == r && (r = Math.random()), \"number\" == typeof r && (r = r.toString()), !this.canReturnFloat() && this.range <= 1) throw new Error(\"The difference between \" + t + \" - \" + e + \" <= 1 and dtype is not float\");\n        this.random = Yu(r);\n    }\n    return t.prototype.convertValue = function(t) {\n        return this.canReturnFloat() ? t : Math.round(t);\n    }, t.prototype.nextValue = function() {\n        return this.convertValue(this.min + this.range * this.random());\n    }, t;\n}();\nvar Uc = An({\n    randomGamma_: function(t, e, n, r, o) {\n        if (void 0 === n && (n = 1), void 0 === r && (r = \"float32\"), null == n && (n = 1), null == r && (r = \"float32\"), \"float32\" !== r && \"int32\" !== r) throw new Error(\"Unsupported data type \" + r);\n        for(var a = new Lc(e, n, r, o), i = er(t, r), s = 0; s < i.values.length; s++)i.values[s] = a.nextValue();\n        return i.toTensor();\n    }\n});\nvar Vc = An({\n    randomNormal_: function(t, e, n, r, o) {\n        if (void 0 === e && (e = 0), void 0 === n && (n = 1), null != r && \"bool\" === r) throw new Error(\"Unsupported data type \" + r);\n        for(var a = new Pc(e, n, r, !1, o), i = er(t, r), s = 0; s < i.values.length; s++)i.values[s] = a.nextValue();\n        return i.toTensor();\n    }\n});\nvar zc = An({\n    randomUniform_: function(t, e, n, r, o) {\n        void 0 === e && (e = 0), void 0 === n && (n = 1), void 0 === r && (r = \"float32\");\n        for(var a = er(t, r), i = new Wc(e, n, null, o), s = 0; s < a.values.length; s++)a.values[s] = i.nextValue();\n        return a.toTensor();\n    }\n});\nvar Gc = An({\n    square_: function(t) {\n        var e = gn(t, \"x\", \"square\"), n = [\n            e\n        ];\n        return Lt.runKernelFunc(function(t, n) {\n            return n([\n                e\n            ]), t.square(e);\n        }, {\n            x: e\n        }, null, \"Square\", {}, n, []);\n    }\n});\nvar Hc = An({\n    squaredDifference_: function(t, e) {\n        var n, r = gn(t, \"a\", \"squaredDifference\"), o = gn(e, \"b\", \"squaredDifference\");\n        n = Nt(r, o), r = n[0], o = n[1], Pr(r.shape, o.shape);\n        var a = {\n            a: r,\n            b: o\n        }, i = [\n            r,\n            o\n        ];\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.squaredDifference(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, a, function(t, e) {\n            var n = e[0], r = e[1], o = On(2);\n            return {\n                a: function() {\n                    return t.mul(n.sub(r).mul(o));\n                },\n                b: function() {\n                    return t.mul(r.sub(n).mul(o));\n                }\n            };\n        }, Er, {}, i, []);\n    }\n});\nvar qc = An({\n    truncatedNormal_: function(t, e, n, r, o) {\n        if (void 0 === e && (e = 0), void 0 === n && (n = 1), null != r && \"bool\" === r) throw new Error(\"Unsupported data type $ { dtype }\");\n        for(var a = new Pc(e, n, r, !0, o), i = er(t, r), s = 0; s < i.values.length; s++)i.values[s] = a.nextValue();\n        return i.toTensor();\n    }\n});\nvar Kc = An({\n    equal_: function(t, e) {\n        var n, r = gn(t, \"a\", \"equal\"), o = gn(e, \"b\", \"equal\");\n        return n = Nt(r, o), r = n[0], o = n[1], Pr(r.shape, o.shape), Lt.runKernelFunc(function(t) {\n            return t.equal(r, o);\n        }, {\n            $a: r,\n            $b: o\n        });\n    }\n}), jc = An({\n    equalStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"equalStrict\"), r = gn(e, \"b\", \"equalStrict\");\n        return E(n.shape, r.shape, \"Error in equalStrict: \"), n.equal(r);\n    }\n}), Xc = An({\n    greater_: function(t, e) {\n        var n, r = gn(t, \"a\", \"greater\"), o = gn(e, \"b\", \"greater\");\n        return n = Nt(r, o), r = n[0], o = n[1], Pr(r.shape, o.shape), Lt.runKernelFunc(function(t) {\n            return t.greater(r, o);\n        }, {\n            a: r,\n            b: o\n        }, null, \"Greater\");\n    }\n}), Yc = An({\n    greaterEqual_: function(t, e) {\n        var n, r = gn(t, \"a\", \"greaterEqual\"), o = gn(e, \"b\", \"greaterEqual\");\n        return n = Nt(r, o), r = n[0], o = n[1], Pr(r.shape, o.shape), Lt.runKernelFunc(function(t, e) {\n            var n = t.greaterEqual(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, function(t, e) {\n            var n = e[0], r = e[1];\n            return {\n                a: function() {\n                    return Xn(n);\n                },\n                b: function() {\n                    return Xn(r);\n                }\n            };\n        }, \"GreaterEqual\");\n    }\n}), $c = An({\n    greaterEqualStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"greaterEqualStrict\"), r = gn(e, \"b\", \"greaterEqualStrict\");\n        return E(n.shape, r.shape, \"Error in greaterEqualStrict: \"), n.greaterEqual(r);\n    }\n}), Qc = An({\n    greaterStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"greaterStrict\"), r = gn(e, \"b\", \"greaterStrict\");\n        return E(n.shape, r.shape, \"Error in greaterStrict: \"), n.greater(r);\n    }\n}), Jc = An({\n    less_: function(t, e) {\n        var n, r = gn(t, \"a\", \"less\"), o = gn(e, \"b\", \"less\");\n        return n = Nt(r, o), r = n[0], o = n[1], Pr(r.shape, o.shape), Lt.runKernelFunc(function(t) {\n            return t.less(r, o);\n        }, {\n            a: r,\n            b: o\n        }, null, \"Less\");\n    }\n}), Zc = An({\n    lessEqual_: function(t, e) {\n        var n, r = gn(t, \"a\", \"lessEqual\"), o = gn(e, \"b\", \"lessEqual\");\n        return n = Nt(r, o), r = n[0], o = n[1], Pr(r.shape, o.shape), Lt.runKernelFunc(function(t, e) {\n            var n = t.lessEqual(r, o);\n            return e([\n                r,\n                o\n            ]), n;\n        }, {\n            a: r,\n            b: o\n        }, null, \"LessEqual\");\n    }\n}), tl = An({\n    lessEqualStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"lessEqualStrict\"), r = gn(e, \"b\", \"lessEqualStrict\");\n        return E(n.shape, r.shape, \"Error in lessEqualStrict: \"), n.lessEqual(r);\n    }\n}), el = An({\n    lessStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"lessStrict\"), r = gn(e, \"b\", \"lessStrict\");\n        return E(n.shape, r.shape, \"Error in lessStrict: \"), n.less(r);\n    }\n}), nl = An({\n    notEqual_: function(t, e) {\n        var n, r = gn(t, \"a\", \"notEqual\"), o = gn(e, \"b\", \"notEqual\");\n        return n = Nt(r, o), r = n[0], o = n[1], Pr(r.shape, o.shape), Lt.runKernelFunc(function(t) {\n            return t.notEqual(r, o);\n        }, {\n            a: r,\n            b: o\n        }, null, \"NotEqual\");\n    }\n}), rl = An({\n    notEqualStrict_: function(t, e) {\n        var n = gn(t, \"a\", \"notEqualStrict\"), r = gn(e, \"b\", \"notEqualStrict\");\n        return E(n.shape, r.shape, \"Error in notEqualStrict: \"), n.notEqual(r);\n    }\n});\nfunction ol(t, e) {\n    for(var n = [], r = t; r < e; ++r)n.push(r);\n    return n;\n}\nfunction al(t) {\n    for(var e = [], n = 0; n < t.length; ++n)for(var r = 0; r < t[n].length; ++r)e.push(t[n][r]);\n    return e;\n}\nvar il = An({\n    gather_: function(t, e, n) {\n        void 0 === n && (n = 0);\n        var r = gn(t, \"x\", \"gather\"), o = gn(e, \"indices\", \"gather\", \"int32\");\n        n = O(n, r.shape)[0];\n        var a = function(t, e, n) {\n            for(var r = t.shape[n], o = [], a = 1, i = 1, s = 0; s < n; s++)o.push(t.shape[s]), a *= t.shape[s];\n            for(s = 0; s < e.rank; s++)o.push(e.shape[s]);\n            for(s = n + 1; s < t.rank; s++)o.push(t.shape[s]), i *= t.shape[s];\n            return {\n                batchSize: a,\n                sliceSize: i,\n                dimSize: r,\n                outputShape: o\n            };\n        }(r, o, n);\n        return Lt.runKernelFunc(function(t, e) {\n            var a = t.gather(r, o.flatten(), n);\n            return e([\n                o\n            ]), a;\n        }, {\n            x: r,\n            indices: o\n        }, function(t, e) {\n            var o = e[0];\n            return {\n                x: function() {\n                    var e = r.shape, a = o.size, i = e.slice(0, n), s = i.length, u = e.slice(n, e.length).slice(1), c = u.length, l = ol(0, s), h = ol(s + 1, s + 1 + c), f = al([\n                        i,\n                        [\n                            a\n                        ],\n                        u\n                    ]), d = t.reshape(f), p = o.reshape([\n                        a\n                    ]), v = al([\n                        [\n                            s\n                        ],\n                        l,\n                        h\n                    ]), g = d.transpose(v), m = sl(g, p, r.shape[n]), y = Rn(v);\n                    return m = m.transpose(y);\n                },\n                indices: function() {\n                    return o;\n                }\n            };\n        }, \"Gather\", {\n            axis: n\n        }).reshape(a.outputShape);\n    }\n}), sl = An({\n    unsortedSegmentSum_: function(t, e, n) {\n        var r = gn(t, \"x\", \"unsortedSegmentSum\"), o = gn(e, \"segmentIds\", \"unsortedSegmentSum\", \"int32\");\n        return C(A(n), function() {\n            return \"numSegments must be of dtype int\";\n        }), Lt.runKernelFunc(function(t, e) {\n            var a = t.unsortedSegmentSum(r, o, n);\n            return e([\n                o\n            ]), a;\n        }, {\n            $x: r\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return function(t, e) {\n                        for(var n = Eo(e, Xn(e)), r = il(t, n), o = Yc(e, On(0, \"int32\")), a = r.rank - o.rank, i = 0; i < a; ++i)o = sr(o, i + 1);\n                        o = pc(o, zn(r.shape, \"bool\"));\n                        var s = Xn(r);\n                        return yc(o, r, s);\n                    }(t, n);\n                }\n            };\n        });\n    }\n});\nvar ul = function(t, e, o) {\n    return n(this, void 0, void 0, function() {\n        var n, a, i, s, u, c, l, h, f, d, p, v, g;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    for(n = gn(t, \"tensor\", \"boolMask\"), a = gn(e, \"mask\", \"boolMask\", \"bool\"), i = null == o ? 0 : o, s = a.rank, u = n.shape, C(s > 0, function() {\n                        return \"mask cannot be scalar\";\n                    }), E(u.slice(i, i + s), a.shape, \"mask's shape must match the first K dimensions of tensor's shape,\"), c = 1, l = i; l < i + s; l++)c *= u[l];\n                    return h = u.slice(0, i).concat([\n                        c\n                    ], u.slice(i + s)), f = n.reshape(h), d = a.reshape([\n                        -1\n                    ]), [\n                        4,\n                        xc(d)\n                    ];\n                case 1:\n                    return p = r.sent(), v = p.squeeze([\n                        1\n                    ]), g = il(f, v, i), t !== n && n.dispose(), e !== a && a.dispose(), v.dispose(), f.dispose(), d.dispose(), p.dispose(), [\n                        2,\n                        g\n                    ];\n            }\n        });\n    });\n};\nfunction cl(t, e, n, r, o, a, i) {\n    void 0 === a && (a = \"NHWC\"), C(t.length === e.rank, function() {\n        return \"Length of inShape (\" + t.length + \") and rank of dy (\" + e.rank + \") must match\";\n    });\n    var s = t, u = e, c = !1;\n    3 === e.rank && (c = !0, u = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]), s = [\n        1,\n        t[0],\n        t[1],\n        t[2]\n    ]), C(4 === s.length, function() {\n        return \"Error in conv2dDerInput: inShape must be length 4, but got length \" + s.length + \".\";\n    }), C(4 === u.rank, function() {\n        return \"Error in conv2dDerInput: dy must be rank 4, but got rank \" + u.rank;\n    }), C(4 === n.rank, function() {\n        return \"Error in conv2dDerInput: filter must be rank 4, but got rank \" + n.rank;\n    });\n    var l = \"NHWC\" === a ? s[3] : s[1], h = \"NHWC\" === a ? u.shape[3] : u.shape[1];\n    C(l === n.shape[2], function() {\n        return \"Error in conv2dDerInput: depth of input (\" + l + \") must match input depth for filter \" + n.shape[2] + \".\";\n    }), C(h === n.shape[3], function() {\n        return \"Error in conv2dDerInput: depth of output (\" + h + \") must match output depth for filter \" + n.shape[3] + \".\";\n    }), null != i && C(A(o), function() {\n        return \"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + o + \".\";\n    });\n    var f = Ea(a), d = pa(s, n.shape, r, 1, o, i, !1, f), p = Lt.runKernelFunc(function(t, e) {\n        var r = t.conv2dDerInput(u, n, d);\n        return e([\n            n,\n            u\n        ]), r;\n    }, {\n        dy4D: u,\n        filter: n\n    }, function(t, e) {\n        var n = e[0], s = e[1];\n        return {\n            dy4D: function() {\n                return dl(t, n, r, o, a, 1, i);\n            },\n            filter: function() {\n                return vl(t, s, n.shape, r, o, a, i);\n            }\n        };\n    });\n    return c ? p.as3D(p.shape[1], p.shape[2], p.shape[3]) : p;\n}\nfunction ll(t) {\n    var e = function(t) {\n        return \"number\" == typeof t ? [\n            t,\n            t,\n            t\n        ] : 2 === t.length ? [\n            t[0],\n            t[1],\n            1\n        ] : t;\n    }(t), n = e[0], r = e[1], o = e[2];\n    return 1 === n && 1 === r && 1 === o;\n}\nfunction hl(t, e, n, r, o) {\n    C(t.length === e.rank, function() {\n        return \"Length of inShape (\" + t.length + \") and rank of dy (\" + e.rank + \") must match\";\n    });\n    var a = t, i = e, s = !1;\n    4 === e.rank && (s = !0, i = e.as5D(1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]), a = [\n        1,\n        t[0],\n        t[1],\n        t[2],\n        t[3]\n    ]);\n    var u = a[4], c = i.shape[4];\n    C(5 === a.length, function() {\n        return \"Error in conv3dDerInput: inShape must be length 5, but got length \" + a.length + \".\";\n    }), C(5 === i.rank, function() {\n        return \"Error in conv3dDerInput: dy must be rank 5, but got rank \" + i.rank;\n    }), C(5 === n.rank, function() {\n        return \"Error in conv3dDerInput: filter must be rank 5, but got rank \" + n.rank;\n    }), C(u === n.shape[3], function() {\n        return \"Error in conv3dDerInput: depth of input (\" + u + \") must match input depth for filter \" + n.shape[3] + \".\";\n    }), C(c === n.shape[4], function() {\n        return \"Error in conv3dDerInput: depth of output (\" + c + \") must match output depth for filter \" + n.shape[4] + \".\";\n    });\n    var l = va(a, n.shape, r, 1, o), h = Lt.runKernelFunc(function(t) {\n        return t.conv3dDerInput(i, n, l);\n    }, {\n        dy5D: i\n    });\n    return s ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h;\n}\nvar fl = An({\n    conv1d_: function(t, e, n, r, o, a, i) {\n        void 0 === o && (o = \"NWC\"), void 0 === a && (a = 1);\n        var s = gn(t, \"x\", \"conv1d\"), u = gn(e, \"filter\", \"conv1d\"), c = s, l = !1;\n        2 === s.rank && (l = !0, c = s.as3D(1, s.shape[0], s.shape[1])), C(3 === c.rank, function() {\n            return \"Error in conv1d: input must be rank 3, but got rank \" + c.rank + \".\";\n        }), C(3 === u.rank, function() {\n            return \"Error in conv1d: filter must be rank 3, but got rank \" + u.rank + \".\";\n        }), null != i && C(A(r), function() {\n            return \"Error in conv1d: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + r + \".\";\n        }), C(c.shape[2] === u.shape[1], function() {\n            return \"Error in conv1d: depth of input (\" + c.shape[2] + \") must match input depth for filter \" + u.shape[1] + \".\";\n        }), C(Ca(n, a), function() {\n            return \"Error in conv1D: Either stride or dilation must be 1. Got stride \" + n + \" and dilation '\" + a + \"'\";\n        }), C(\"NWC\" === o, function() {\n            return \"Error in conv1d: got dataFormat of \" + o + \" but only NWC is currently supported.\";\n        });\n        var h = u.as4D(1, u.shape[0], u.shape[1], u.shape[2]), f = c.as4D(c.shape[0], 1, c.shape[1], c.shape[2]), d = dl(f, h, [\n            1,\n            n\n        ], r, \"NHWC\", [\n            1,\n            a\n        ], i);\n        return l ? d.as2D(d.shape[2], d.shape[3]) : d.as3D(d.shape[0], d.shape[2], d.shape[3]);\n    }\n}), dl = An({\n    conv2d_: function(t, e, n, r, o, a, i) {\n        void 0 === o && (o = \"NHWC\"), void 0 === a && (a = [\n            1,\n            1\n        ]);\n        var s = gn(t, \"x\", \"conv2d\"), u = gn(e, \"filter\", \"conv2d\"), c = s, l = !1;\n        3 === s.rank && (l = !0, c = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), C(4 === c.rank, function() {\n            return \"Error in conv2d: input must be rank 4, but got rank \" + c.rank + \".\";\n        }), C(4 === u.rank, function() {\n            return \"Error in conv2d: filter must be rank 4, but got rank \" + u.rank + \".\";\n        }), null != i && C(A(r), function() {\n            return \"Error in conv2d: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + r + \".\";\n        });\n        var h = \"NHWC\" === o ? c.shape[3] : c.shape[1];\n        C(h === u.shape[2], function() {\n            return \"Error in conv2d: depth of input (\" + h + \") must match input depth for filter \" + u.shape[2] + \".\";\n        }), C(Ca(n, a), function() {\n            return \"Error in conv2D: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + a + \"'\";\n        });\n        var f = Ea(o), d = pa(c.shape, u.shape, n, a, r, i, !1, f), p = [\n            u,\n            c\n        ], v = Lt.runKernelFunc(function(t, e) {\n            var n = t.conv2d(c, u, d);\n            return e([\n                u,\n                c\n            ]), n;\n        }, {\n            x: c,\n            filter: u\n        }, function(t, e) {\n            var i = e, s = i[0], u = i[1];\n            return C(wa(a), function() {\n                return \"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\" + a + \"'\";\n            }), {\n                x: function() {\n                    return gl(u.shape, t, s, n, r, o);\n                },\n                filter: function() {\n                    return vl(u, t, s.shape, n, r, o);\n                }\n            };\n        }, \"Conv2D\", d, p);\n        return l ? v.as3D(v.shape[1], v.shape[2], v.shape[3]) : v;\n    }\n}), pl = An({\n    conv3d_: function(t, e, n, r, o, a) {\n        void 0 === o && (o = \"NDHWC\"), void 0 === a && (a = [\n            1,\n            1,\n            1\n        ]);\n        var i = gn(t, \"x\", \"conv3d\"), s = gn(e, \"filter\", \"conv3d\"), u = i, c = !1;\n        4 === i.rank && (c = !0, u = i.as5D(1, i.shape[0], i.shape[1], i.shape[2], i.shape[3])), C(5 === u.rank, function() {\n            return \"Error in conv3d: input must be rank 5, but got rank \" + u.rank + \".\";\n        }), C(5 === s.rank, function() {\n            return \"Error in conv3d: filter must be rank 5, but got rank \" + s.rank + \".\";\n        }), C(u.shape[4] === s.shape[3], function() {\n            return \"Error in conv3d: depth of input (\" + u.shape[4] + \") must match input depth for filter \" + s.shape[3] + \".\";\n        }), C(function(t, e) {\n            return ll(t) || ll(e);\n        }(n, a), function() {\n            return \"Error in conv3D: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + a + \"'\";\n        }), C(\"NDHWC\" === o, function() {\n            return \"Error in conv3d: got dataFormat of \" + o + \" but only NDHWC is currently supported.\";\n        });\n        var l = va(u.shape, s.shape, n, a, r), h = Lt.runKernelFunc(function(t, e) {\n            var n = t.conv3d(u, s, l);\n            return e([\n                u,\n                s\n            ]), n;\n        }, {\n            x: u,\n            $filter: s\n        }, function(t, e) {\n            C(ll(a), function() {\n                return \"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\" + a + \"'\";\n            });\n            var o = e[0], i = e[1];\n            return {\n                x: function() {\n                    return hl(o.shape, t, i, n, r);\n                },\n                $filter: function() {\n                    return function(t, e, n, r, o) {\n                        var a = t;\n                        4 === t.rank && (a = t.as5D(1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]));\n                        var i = e;\n                        4 === i.rank && (i = e.as5D(1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]));\n                        C(5 === a.rank, function() {\n                            return \"Error in conv3dDerFilter: input must be rank 5, but got shape \" + a.shape + \".\";\n                        }), C(5 === i.rank, function() {\n                            return \"Error in conv3dDerFilter: dy must be rank 5, but got shape \" + i.shape + \".\";\n                        }), C(5 === n.length, function() {\n                            return \"Error in conv3dDerFilter: filterShape must be length 5, but got \" + n + \".\";\n                        }), C(a.shape[4] === n[3], function() {\n                            return \"Error in conv3dDerFilter: depth of input \" + a.shape[4] + \") must match input depth in filter (\" + n[3] + \".\";\n                        }), C(i.shape[4] === n[4], function() {\n                            return \"Error in conv3dDerFilter: depth of dy (\" + i.shape[4] + \") must match output depth for filter (\" + n[4] + \").\";\n                        });\n                        var s = va(a.shape, n, r, 1, o);\n                        return Lt.runKernelFunc(function(t) {\n                            return t.conv3dDerFilter(a, i, s);\n                        }, {\n                            x5D: a,\n                            dy5D: i\n                        });\n                    }(o, t, i.shape, n, r);\n                }\n            };\n        });\n        return c ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h;\n    }\n}), vl = An({\n    conv2dDerFilter_: function(t, e, n, r, o, a, i) {\n        void 0 === a && (a = \"NHWC\");\n        var s = t;\n        3 === t.rank && (s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));\n        var u = e;\n        3 === u.rank && (u = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])), C(4 === s.rank, function() {\n            return \"Error in conv2dDerFilter: input must be rank 4, but got shape \" + s.shape + \".\";\n        }), C(4 === u.rank, function() {\n            return \"Error in conv2dDerFilter: dy must be rank 4, but got shape \" + u.shape + \".\";\n        }), C(4 === n.length, function() {\n            return \"Error in conv2dDerFilter: filterShape must be length 4, but got \" + n + \".\";\n        });\n        var c = \"NHWC\" === a ? s.shape[3] : s.shape[1], l = \"NHWC\" === a ? u.shape[3] : u.shape[1];\n        C(c === n[2], function() {\n            return \"Error in conv2dDerFilter: depth of input \" + c + \") must match input depth in filter (\" + n[2] + \".\";\n        }), C(l === n[3], function() {\n            return \"Error in conv2dDerFilter: depth of dy (\" + l + \") must match output depth for filter (\" + n[3] + \").\";\n        }), null != i && C(A(o), function() {\n            return \"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + o + \".\";\n        });\n        var h = Ea(a), f = pa(s.shape, n, r, 1, o, i, !1, h);\n        return Lt.runKernelFunc(function(t) {\n            return t.conv2dDerFilter(s, u, f);\n        }, {\n            x4D: s,\n            dy4D: u\n        });\n    }\n}), gl = An({\n    conv2dDerInput_: cl\n}), ml = An({\n    depthwiseConv2d_: function(t, e, n, r, o, a, i) {\n        void 0 === o && (o = \"NHWC\"), void 0 === a && (a = [\n            1,\n            1\n        ]);\n        var s = gn(t, \"x\", \"depthwiseConv2d\"), u = gn(e, \"filter\", \"depthwiseConv2d\"), c = s, l = !1;\n        3 === s.rank && (l = !0, c = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), C(4 === c.rank, function() {\n            return \"Error in depthwiseConv2d: input must be rank 4, but got rank \" + c.rank + \".\";\n        }), C(4 === u.rank, function() {\n            return \"Error in depthwiseConv2d: filter must be rank 4, but got rank \" + u.rank + \".\";\n        }), C(c.shape[3] === u.shape[2], function() {\n            return \"Error in depthwiseConv2d: number of input channels (\" + c.shape[3] + \") must match the inChannels dimension in filter \" + u.shape[2] + \".\";\n        }), null == a && (a = [\n            1,\n            1\n        ]), C(Ca(n, a), function() {\n            return \"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + a + \"'\";\n        }), null != i && C(A(r), function() {\n            return \"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + r + \".\";\n        });\n        var h = pa(c.shape, u.shape, n, a, r, i, !0), f = [\n            c,\n            u\n        ], d = Lt.runKernelFunc(function(t, e) {\n            var n = t.depthwiseConv2D(c, u, h);\n            return e([\n                c,\n                u\n            ]), n;\n        }, {\n            x: c,\n            filter: u\n        }, function(t, e) {\n            C(wa(a), function() {\n                return \"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\" + a + \"'\";\n            });\n            var n = e[0], r = e[1];\n            return {\n                x: function() {\n                    return yl(n.shape, t, r, h);\n                },\n                filter: function() {\n                    return xl(n, t, r.shape, h);\n                }\n            };\n        }, \"DepthwiseConv2dNative\", h, f);\n        return l ? d.as3D(d.shape[1], d.shape[2], d.shape[3]) : d;\n    }\n}), yl = An({\n    depthwiseConv2dDerInput_: function(t, e, n, r) {\n        var o = e, a = !1;\n        3 === e.rank && (a = !0, o = e.as4D(1, e.shape[0], e.shape[1], e.shape[2]));\n        var i = Lt.runKernelFunc(function(t) {\n            return t.depthwiseConv2DDerInput(o, n, r);\n        }, {\n            dy4D: o\n        });\n        return a ? i.as3D(i.shape[1], i.shape[2], i.shape[3]) : i;\n    }\n}), xl = An({\n    depthwiseConv2dDerFilter_: function(t, e, n, r) {\n        var o = t;\n        3 === t.rank && (o = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));\n        var a = e;\n        return 3 === a.rank && (a = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])), Lt.runKernelFunc(function(t) {\n            return t.depthwiseConv2DDerFilter(o, a, r);\n        }, {\n            x4D: o,\n            dy4D: a\n        });\n    }\n}), bl = An({\n    separableConv2d_: function(t, e, n, r, o, a, i) {\n        void 0 === a && (a = [\n            1,\n            1\n        ]), void 0 === i && (i = \"NHWC\");\n        var s = gn(t, \"x\", \"separableConv2d\"), u = gn(e, \"depthwiseFilter\", \"separableConv2d\"), c = gn(n, \"pointwiseFilter\", \"separableConv2d\"), l = s, h = !1;\n        if (3 === s.rank && (h = !0, l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), \"NCHW\" === i) throw new Error(\"separableConv2d currently does not support dataFormat NCHW; only NHWC is supported\");\n        C(4 === l.rank, function() {\n            return \"Error in separableConv2d: input must be rank 4, but got rank \" + l.rank + \".\";\n        }), C(4 === u.rank, function() {\n            return \"Error in separableConv2d: depthwise filter must be rank 4, but got rank \" + u.rank + \".\";\n        }), C(4 === c.rank, function() {\n            return \"Error in separableConv2d: pointwise filter must be rank 4, but got rank \" + u.rank + \".\";\n        }), C(1 === c.shape[0], function() {\n            return \"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got \" + c.shape[0] + \".\";\n        }), C(1 === c.shape[1], function() {\n            return \"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got \" + c.shape[1] + \".\";\n        });\n        var f = u.shape[2], d = u.shape[3];\n        C(c.shape[2] === f * d, function() {\n            return \"Error in separableConv2d: the third dimension of pointwise filter must be \" + f * d + \", but got \" + c.shape[2] + \".\";\n        });\n        var p = ml(l, u, r, o, i, a), v = dl(p, c, 1, \"valid\", i);\n        return h ? v.as3D(v.shape[1], v.shape[2], v.shape[3]) : v;\n    }\n}), wl = An({\n    conv2dTranspose_: function(t, e, n, r, o, a) {\n        return cl(n, gn(t, \"x\", \"conv2dTranspose\"), gn(e, \"filter\", \"conv2dTranspose\"), r, o, \"NHWC\", a);\n    }\n}), Cl = An({\n    conv3dTranspose_: function(t, e, n, r, o) {\n        return hl(n, gn(t, \"x\", \"conv3dTranspose\"), gn(e, \"filter\", \"conv3dTranspose\"), r, o);\n    }\n});\nvar El = An({\n    matMul_: function(t, e, n, r) {\n        var o;\n        void 0 === n && (n = !1), void 0 === r && (r = !1);\n        var a = gn(t, \"a\", \"matMul\"), i = gn(e, \"b\", \"matMul\");\n        o = Nt(a, i), a = o[0], i = o[1];\n        var s = n ? a.shape[a.rank - 2] : a.shape[a.rank - 1], u = r ? i.shape[i.rank - 1] : i.shape[i.rank - 2], c = n ? a.shape[a.rank - 1] : a.shape[a.rank - 2], l = r ? i.shape[i.rank - 2] : i.shape[i.rank - 1], h = a.shape.slice(0, -2), f = i.shape.slice(0, -2), d = k(h), p = k(f);\n        C(a.rank >= 2 && i.rank >= 2 && a.rank === i.rank, function() {\n            return \"Error in matMul: inputs must have the same rank of at least 2, got ranks \" + a.rank + \" and \" + i.rank + \".\";\n        }), C(S(h, f), function() {\n            return \"Error in matMul: outer dimensions (\" + h + \") and (\" + f + \") of Tensors with shapes \" + a.shape + \" and \" + i.shape + \" must match.\";\n        }), C(s === u, function() {\n            return \"Error in matMul: inner shapes (\" + s + \") and (\" + u + \") of Tensors with shapes \" + a.shape + \" and \" + i.shape + \" and transposeA=\" + n + \" and transposeB=\" + r + \" must match.\";\n        });\n        var v = a.shape.slice(0, -2).concat([\n            c,\n            l\n        ]), g = n ? a.as3D(d, s, c) : a.as3D(d, c, s), m = r ? i.as3D(p, l, u) : i.as3D(p, u, l), y = {\n            transposeA: n,\n            transposeB: r\n        };\n        return Lt.runKernelFunc(function(t, e) {\n            var o = t.batchMatMul(g, m, n, r);\n            return e([\n                g,\n                m\n            ]), o;\n        }, {\n            a: g,\n            b: m\n        }, function(t, e) {\n            var o = e, a = o[0], i = o[1];\n            return n || r ? !n && r ? {\n                a: function() {\n                    return t.matMul(i, !1, !1);\n                },\n                b: function() {\n                    return t.matMul(a, !0, !1);\n                }\n            } : n && !r ? {\n                a: function() {\n                    return i.matMul(t, !1, !0);\n                },\n                b: function() {\n                    return a.matMul(t, !1, !1);\n                }\n            } : {\n                a: function() {\n                    return i.matMul(t, !0, !0);\n                },\n                b: function() {\n                    return t.matMul(a, !0, !0);\n                }\n            } : {\n                a: function() {\n                    return t.matMul(i, !1, !0);\n                },\n                b: function() {\n                    return a.matMul(t, !0, !1);\n                }\n            };\n        }, \"BatchMatMul\", y).reshape(v);\n    }\n}), Rl = An({\n    dot_: function(t, e) {\n        var n = gn(t, \"t1\", \"dot\"), r = gn(e, \"t2\", \"dot\");\n        C(!(1 !== n.rank && 2 !== n.rank || 1 !== r.rank && 2 !== r.rank), function() {\n            return \"Error in dot: inputs must all be rank 1 or 2, but got ranks \" + n.rank + \" and \" + r.rank + \".\";\n        });\n        var o = 1 === n.rank ? n.size : n.shape[1], a = 1 === r.rank ? r.size : r.shape[0];\n        return C(o === a, function() {\n            return \"Error in dot: inner dimensions of inputs must match, but got \" + o + \" and \" + a + \".\";\n        }), 1 === n.rank && 1 === r.rank ? n.as2D(1, -1).matMul(r.as2D(-1, 1)).asScalar() : 1 === n.rank && 2 === r.rank ? n.as2D(1, -1).matMul(r.as2D(r.shape[0], r.shape[1])).as1D() : 2 === n.rank && 1 === r.rank ? n.matMul(r.as2D(-1, 1)).as1D() : n.matMul(r.as2D(r.shape[0], r.shape[1]));\n    }\n}), Il = An({\n    outerProduct_: function(t, e) {\n        var n = gn(t, \"v1\", \"outerProduct\"), r = gn(e, \"v2\", \"outerProduct\");\n        return C(1 === n.rank && 1 === r.rank, function() {\n            return \"Error in outerProduct: inputs must be rank 1, but got ranks \" + n.rank + \" and \" + r.rank + \".\";\n        }), n.as2D(-1, 1).matMul(r.as2D(1, -1));\n    }\n});\nvar kl = An({\n    reverse_: function(t, e) {\n        var n = gn(t, \"x\", \"reverse\");\n        if (0 === n.rank) return n.clone();\n        var r = O(e, n.shape);\n        return Lt.runKernelFunc(function(t) {\n            return t.reverse(n, r);\n        }, {\n            $x: n\n        }, function(t) {\n            return {\n                $x: function() {\n                    return t.reverse(r);\n                }\n            };\n        }).reshapeAs(n);\n    }\n}), Sl = An({\n    reverse1d_: function(t) {\n        var e = gn(t, \"x\", \"reverse\");\n        return C(1 === e.rank, function() {\n            return \"Error in reverse1D: x must be rank 1 but got rank \" + e.rank + \".\";\n        }), kl(e, 0);\n    }\n}), Al = An({\n    reverse2d_: function(t, e) {\n        var n = gn(t, \"x\", \"reverse\");\n        return C(2 === n.rank, function() {\n            return \"Error in reverse2D: x must be rank 2 but got rank \" + n.rank + \".\";\n        }), kl(n, e);\n    }\n}), Tl = An({\n    reverse3d_: function(t, e) {\n        var n = gn(t, \"x\", \"reverse\");\n        return C(3 === n.rank, function() {\n            return \"Error in reverse3D: x must be rank 3 but got rank \" + n.rank + \".\";\n        }), kl(n, e);\n    }\n}), Dl = An({\n    reverse4d_: function(t, e) {\n        var n = gn(t, \"x\", \"reverse\");\n        return C(4 === n.rank, function() {\n            return \"Error in reverse4D: x must be rank 4 but got rank \" + n.rank + \".\";\n        }), kl(n, e);\n    }\n});\nfunction Nl(t, e, n, r, o, a) {\n    var i = gn(t, \"x\", \"maxPool\"), s = i, u = !1;\n    3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), null == r && (r = [\n        1,\n        1\n    ]), C(4 === s.rank, function() {\n        return \"Error in maxPool: input must be rank 4 but got rank \" + s.rank + \".\";\n    }), C(Ca(n, r), function() {\n        return \"Error in maxPool: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + r + \"'\";\n    }), null != a && C(A(o), function() {\n        return \"Error in maxPool: pad must be an integer when using, dimRoundingMode \" + a + \" but got pad \" + o + \".\";\n    });\n    var c = fa(s.shape, e, n, r, o, a);\n    if (1 === c.filterWidth && 1 === c.filterHeight && S(c.inShape, c.outShape)) return i.clone();\n    var l = [\n        s\n    ], h = Lt.runKernelFunc(function(t, e) {\n        var n = t.maxPool(s, c);\n        return e([\n            s,\n            n\n        ]), n;\n    }, {\n        x: s\n    }, function(t, a) {\n        var i = a[0], s = a[1];\n        return {\n            x: function() {\n                return function(t, e, n, r, o, a, i, s) {\n                    var u = gn(t, \"dy\", \"maxPoolBackprop\"), c = gn(e, \"input\", \"maxPoolBackprop\"), l = gn(n, \"output\", \"maxPoolBackprop\");\n                    C(c.rank === u.rank, function() {\n                        return \"Rank of input (\" + c.rank + \") does not match rank of dy (\" + u.rank + \")\";\n                    }), null == a && (a = [\n                        1,\n                        1\n                    ]);\n                    C(Ca(o, a), function() {\n                        return \"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides \" + o + \" and dilations '\" + a + \"'\";\n                    }), C(4 === u.rank, function() {\n                        return \"Error in maxPoolBackprop: dy must be rank 4 but got rank \" + u.rank + \".\";\n                    }), C(4 === c.rank, function() {\n                        return \"Error in maxPoolBackprop: input must be rank 4 but got rank \" + c.rank + \".\";\n                    }), null != s && C(A(i), function() {\n                        return \"Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode \" + s + \" but got pad \" + i + \".\";\n                    });\n                    var h = fa(c.shape, r, o, a, i, s);\n                    return Lt.runKernelFunc(function(t) {\n                        return t.maxPoolBackprop(u, c, l, h);\n                    }, {\n                        $dy: u,\n                        $input: c\n                    });\n                }(t, i, s, e, n, r, o);\n            }\n        };\n    }, \"MaxPool\", c, l);\n    return u ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;\n}\nfunction Fl(t, e, n, r, o, a) {\n    var i = gn(t, \"x\", \"avgPool\", \"float32\");\n    null == r && (r = [\n        1,\n        1\n    ]), C(Ca(n, r), function() {\n        return \"Error in avgPool: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + r + \"'\";\n    });\n    var s = i, u = !1;\n    3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), C(4 === s.rank, function() {\n        return \"Error in avgPool: x must be rank 4 but got rank \" + s.rank + \".\";\n    }), null != a && C(A(o), function() {\n        return \"Error in avgPool: pad must be an integer when using, dimRoundingMode \" + a + \" but got pad \" + o + \".\";\n    });\n    var c = fa(s.shape, e, n, r, o, a);\n    if (1 === c.filterWidth && 1 === c.filterHeight && S(c.inShape, c.outShape)) return i.clone();\n    var l = Lt.runKernelFunc(function(t) {\n        return t.avgPool(s, c);\n    }, {\n        x: s\n    }, function(t) {\n        return {\n            x: function() {\n                return function(t, e, n, r, o, a) {\n                    var i = gn(t, \"dy\", \"avgPoolBackprop\"), s = gn(e, \"input\", \"avgPoolBackprop\");\n                    C(s.rank === i.rank, function() {\n                        return \"Rank of input (\" + s.rank + \") does not match rank of dy (\" + i.rank + \")\";\n                    }), null == o && (o = [\n                        1,\n                        1\n                    ]);\n                    C(Ca(r, o), function() {\n                        return \"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides \" + r + \" and dilations '\" + o + \"'\";\n                    });\n                    var u = s, c = i, l = !1;\n                    3 === s.rank && (l = !0, u = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]), c = i.as4D(1, i.shape[0], i.shape[1], i.shape[2]));\n                    C(4 === c.rank, function() {\n                        return \"Error in avgPoolBackprop: dy must be rank 4 but got rank \" + c.rank + \".\";\n                    }), C(4 === u.rank, function() {\n                        return \"Error in avgPoolBackprop: input must be rank 4 but got rank \" + u.rank + \".\";\n                    });\n                    var h = fa(u.shape, n, r, o, a), f = Lt.runKernelFunc(function(t) {\n                        return t.avgPoolBackprop(c, u, h);\n                    }, {\n                        dy4D: c,\n                        input4D: u\n                    });\n                    if (l) return f.as3D(f.shape[1], f.shape[2], f.shape[3]);\n                    return f;\n                }(t, s, e, n, r, o);\n            }\n        };\n    }, \"AvgPool\", c);\n    return l = l.cast(i.dtype), u ? l.as3D(l.shape[1], l.shape[2], l.shape[3]) : l;\n}\nvar _l = An({\n    maxPool_: function(t, e, n, r, o) {\n        return Nl(t, e, n, 1, r, o);\n    }\n}), Ol = An({\n    avgPool_: function(t, e, n, r, o) {\n        return Fl(t, e, n, 1, r, o);\n    }\n}), Ml = An({\n    pool_: function(t, e, n, r, o, a) {\n        null == o && (o = [\n            1,\n            1\n        ]), null == a && (a = 1), 0 === r && (r = \"valid\");\n        var i = gn(t, \"x\", \"maxPool\"), s = i, u = !1;\n        3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), C(Ca(a, o), function() {\n            return \"Error in pool: Either strides or dilations must be 1. Got strides \" + a + \" and dilations '\" + o + \"'\";\n        });\n        var c, l = fa(s.shape, e, a, o, r), h = [\n            l.dilationHeight,\n            l.dilationWidth\n        ];\n        c = \"same\" === r ? function(t, e) {\n            var n = t.map(function(t, n) {\n                return t + (t - 1) * (e[n] - 1);\n            }).map(function(t) {\n                return t - 1;\n            }), r = n.map(function(t) {\n                return Math.floor(t / 2);\n            }), o = n.map(function(t, e) {\n                return t - r[e];\n            });\n            return n.map(function(t, e) {\n                return [\n                    r[e],\n                    o[e]\n                ];\n            });\n        }([\n            l.filterHeight,\n            l.filterWidth\n        ], h) : [\n            [\n                0,\n                0\n            ],\n            [\n                0,\n                0\n            ]\n        ];\n        var f = 1 === h[0] && 1 === h[1], d = function(t, e, n) {\n            var r = n.map(function(t) {\n                return t[0];\n            }), o = n.map(function(t) {\n                return t[1];\n            }), a = t.concat(r, o), i = e.map(function(t, e) {\n                return (t - a[e] % t) % t;\n            }), s = o.map(function(t, e) {\n                return t + i[e];\n            }), u = e.map(function(t, e) {\n                return [\n                    r[e],\n                    s[e]\n                ];\n            }), c = e.map(function(t, e) {\n                return [\n                    0,\n                    i[e]\n                ];\n            });\n            return [\n                u,\n                c\n            ];\n        }([\n            l.inHeight,\n            l.inWidth\n        ], h, c), p = d[0], v = d[1], g = f ? r : \"valid\", m = f ? s : cr(s, h, p), y = (\"avg\" === n ? function() {\n            return Fl(m, e, a, 1, g);\n        } : function() {\n            return Nl(m, e, a, 1, g);\n        })(), x = f ? y : rr(y, h, v);\n        return u ? x.as3D(x.shape[1], x.shape[2], x.shape[3]) : x;\n    }\n}), Bl = An({\n    maxPool3d_: function(t, e, n, r, o, a, i) {\n        void 0 === a && (a = \"NDHWC\");\n        var s = gn(t, \"x\", \"maxPool3d\"), u = s, c = !1;\n        4 === s.rank && (c = !0, u = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3])), null == i && (i = [\n            1,\n            1,\n            1\n        ]), C(5 === u.rank, function() {\n            return \"Error in maxPool3d: x must be rank 5 but got rank \" + u.rank + \".\";\n        }), C(\"NDHWC\" === a, function() {\n            return \"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of \" + a;\n        }), C(Ca(n, i), function() {\n            return \"Error in maxPool3d: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + i + \"'\";\n        }), null != o && C(A(r), function() {\n            return \"Error in maxPool3d: pad must be an integer when using, dimRoundingMode \" + o + \" but got pad \" + r + \".\";\n        });\n        var l = da(u.shape, e, n, i, r, o, a), h = Lt.runKernelFunc(function(t, e) {\n            var n = t.maxPool3d(u, l);\n            return e([\n                u,\n                n\n            ]), n;\n        }, {\n            x: u\n        }, function(t, a) {\n            var s = a[0], u = a[1];\n            return {\n                x: function() {\n                    return function(t, e, n, r, o, a, i, s) {\n                        var u = gn(t, \"dy\", \"maxPool3dBackprop\"), c = gn(e, \"input\", \"maxPool3dBackprop\"), l = gn(n, \"output\", \"maxPool3dBackprop\"), h = u, f = c, d = l, p = !1;\n                        4 === c.rank && (p = !0, h = u.as5D(1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]), f = c.as5D(1, c.shape[0], c.shape[1], c.shape[2], c.shape[3]), d = l.as5D(1, l.shape[0], l.shape[1], l.shape[2], l.shape[3]));\n                        C(5 === h.rank, function() {\n                            return \"Error in maxPool3dBackprop: dy must be rank 5 but got rank \" + h.rank + \".\";\n                        }), C(5 === f.rank, function() {\n                            return \"Error in maxPool3dBackprop: input must be rank 5 but got rank \" + f.rank + \".\";\n                        }), C(5 === d.rank, function() {\n                            return \"Error in maxPool3dBackprop: output must be rank 5 but got rank \" + d.rank + \".\";\n                        }), null == a && (a = [\n                            1,\n                            1,\n                            1\n                        ]);\n                        C(Ca(o, a), function() {\n                            return \"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides \" + o + \" and dilations '\" + a + \"'\";\n                        }), null != s && C(A(i), function() {\n                            return \"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \" + s + \" but got pad \" + i + \".\";\n                        });\n                        var v = da(f.shape, r, o, a, i, s), g = Lt.runKernelFunc(function(t) {\n                            return t.maxPool3dBackprop(h, f, d, v);\n                        }, {\n                            dy5D: h,\n                            input5D: f\n                        });\n                        if (p) return g.as4D(g.shape[1], g.shape[2], g.shape[3], g.shape[4]);\n                        return g;\n                    }(t, s, u, e, n, i, r, o);\n                }\n            };\n        });\n        return c ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h;\n    }\n}), Pl = An({\n    avgPool3d_: function(t, e, n, r, o, a, i) {\n        void 0 === a && (a = \"NDHWC\");\n        var s = gn(t, \"x\", \"avgPool3d\", \"float32\"), u = s, c = !1;\n        4 === s.rank && (c = !0, u = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3])), null == i && (i = [\n            1,\n            1,\n            1\n        ]), C(5 === u.rank, function() {\n            return \"Error in avgPool3d: x must be rank 5 but got rank \" + u.rank + \".\";\n        }), C(\"NDHWC\" === a, function() {\n            return \"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of \" + a;\n        }), C(Ca(n, i), function() {\n            return \"Error in avgPool3d: Either strides or dilations must be 1. Got strides \" + n + \" and dilations '\" + i + \"'\";\n        }), null != o && C(A(r), function() {\n            return \"Error in avgPool3d: pad must be an integer when using, dimRoundingMode \" + o + \" but got pad \" + r + \".\";\n        });\n        var l = da(u.shape, e, n, i, r, o, a), h = Lt.runKernelFunc(function(t) {\n            return t.avgPool3d(u, l);\n        }, {\n            x: u\n        }, function(t) {\n            return {\n                x: function() {\n                    return function(t, e, n, r, o, a, i) {\n                        var s = gn(t, \"dy\", \"avgPool3dBackprop\"), u = gn(e, \"input\", \"avgPool3dBackprop\"), c = s, l = u, h = !1;\n                        4 === u.rank && (h = !0, c = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3]), l = u.as5D(1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]));\n                        C(5 === c.rank, function() {\n                            return \"Error in avgPool3dBackprop: dy must be rank 5 but got rank \" + c.rank + \".\";\n                        }), C(5 === l.rank, function() {\n                            return \"Error in avgPool3dBackprop: input must be rank 5 but got rank \" + l.rank + \".\";\n                        }), null == o && (o = [\n                            1,\n                            1,\n                            1\n                        ]);\n                        C(Ca(r, o), function() {\n                            return \"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides \" + r + \" and dilations '\" + o + \"'\";\n                        }), null != i && C(A(a), function() {\n                            return \"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode \" + i + \" but got pad \" + a + \".\";\n                        });\n                        var f = da(l.shape, n, r, o, a, i), d = Lt.runKernelFunc(function(t) {\n                            return t.avgPool3dBackprop(c, l, f);\n                        }, {\n                            dy5D: c,\n                            input5D: l\n                        });\n                        if (h) return d.as4D(d.shape[1], d.shape[2], d.shape[3], d.shape[4]);\n                        return d;\n                    }(t, u, e, n, i, r, o);\n                }\n            };\n        });\n        return h = h.cast(u.dtype), c ? h.as4D(h.shape[1], h.shape[2], h.shape[3], h.shape[4]) : h;\n    }\n}), Ll = An({\n    maxPoolWithArgmax_: function(t, e, n, r, o) {\n        void 0 === o && (o = !1);\n        var a = gn(t, \"x\", \"maxPoolWithArgmax\"), i = {\n            filterSize: e,\n            strides: n,\n            pad: r,\n            includeBatchInIndex: o\n        }, s = Lt.runKernel(\"MaxPoolWithArgmax\", {\n            x: a\n        }, i);\n        return {\n            result: s[0],\n            indexes: s[1]\n        };\n    }\n});\nvar Wl = An({\n    slice_: function(t, e, n) {\n        var r, o, a = gn(t, \"x\", \"slice\");\n        if (0 === a.rank) throw new Error(\"Slicing scalar is not possible\");\n        (r = \"number\" == typeof e ? [\n            e\n        ].concat(new Array(a.rank - 1).fill(0)) : e.length < a.rank ? e.concat(new Array(a.rank - e.length).fill(0)) : e.slice()).forEach(function(t) {\n            C(-1 !== t, function() {\n                return \"slice() does not support negative begin indexing.\";\n            });\n        }), o = (o = null == n ? new Array(a.rank).fill(-1) : \"number\" == typeof n ? [\n            n\n        ].concat(new Array(a.rank - 1).fill(-1)) : n.length < a.rank ? n.concat(new Array(a.rank - n.length).fill(-1)) : n).map(function(t, e) {\n            return t >= 0 ? t : (C(-1 === t, function() {\n                return \"Negative size values should be exactly -1 but got \" + t + \" for the slice() size at index \" + e + \".\";\n            }), a.shape[e] - r[e]);\n        }), qo(a, r, o);\n        var i = a.shape, s = {\n            begin: r,\n            size: o\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.slice(a, r, o);\n        }, {\n            x: a\n        }, function(t) {\n            for(var e = [], n = 0; n < t.rank; n++)e.push([\n                r[n],\n                i[n] - r[n] - o[n]\n            ]);\n            return {\n                x: function() {\n                    return Ic(t, e);\n                }\n            };\n        }, \"Slice\", s);\n    }\n}), Ul = An({\n    slice1d_: function(t, e, n) {\n        var r = gn(t, \"x\", \"slice1d\");\n        return C(1 === r.rank, function() {\n            return \"slice1d expects a rank-1 tensor, but got a rank-\" + r.rank + \" tensor\";\n        }), Wl(r, [\n            e\n        ], [\n            n\n        ]);\n    }\n}), Vl = An({\n    slice2d_: function(t, e, n) {\n        var r = gn(t, \"x\", \"slice2d\");\n        return C(2 === r.rank, function() {\n            return \"slice2d expects a rank-2 tensor, but got a rank-\" + r.rank + \" tensor\";\n        }), Wl(r, e, n);\n    }\n}), zl = An({\n    slice3d_: function(t, e, n) {\n        var r = gn(t, \"x\", \"slice3d\");\n        return C(3 === r.rank, function() {\n            return \"slice3d expects a rank-3 tensor, but got a rank-\" + r.rank + \" tensor\";\n        }), Wl(r, e, n);\n    }\n}), Gl = An({\n    slice4d_: function(t, e, n) {\n        var r = gn(t, \"x\", \"slice4d\");\n        return C(4 === r.rank, function() {\n            return \"slice4d expects a rank-4 tensor, but got a rank-\" + r.rank + \" tensor\";\n        }), Wl(r, e, n);\n    }\n});\nfunction Hl(t, e, n, r, o) {\n    return e.rank < n.rank && (e = e.reshape(wn(e.shape, r))), t.rank < n.rank && (t = t.reshape(wn(t.shape, r))), {\n        x: function() {\n            var r = t.mul(n.equal(e).cast(t.dtype));\n            return null == o ? r : r.transpose(o);\n        }\n    };\n}\nvar ql = An({\n    all_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = gn(t, \"x\", \"all\", \"bool\"), o = O(e, r.shape), a = o, i = En(a, r.rank);\n        null != i && (r = r.transpose(i), a = In(a.length, r.rank));\n        var s = Lt.runKernelFunc(function(t) {\n            return t.all(r, a);\n        }, {\n            $x: r\n        });\n        if (n) {\n            var u = wn(s.shape, o);\n            return s.reshape(u);\n        }\n        return s;\n    }\n}), Kl = An({\n    any_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = gn(t, \"x\", \"any\", \"bool\"), o = O(e, r.shape), a = o, i = En(a, r.rank);\n        null != i && (r = r.transpose(i), a = In(a.length, r.rank));\n        var s = Lt.runKernelFunc(function(t) {\n            return t.any(r, a);\n        }, {\n            $x: r\n        });\n        if (n) {\n            var u = wn(s.shape, o);\n            return s.reshape(u);\n        }\n        return s;\n    }\n}), jl = An({\n    argMax_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = gn(t, \"x\", \"argMax\");\n        null == e && (e = 0);\n        var r = O(e, n.shape), o = En(r, n.rank);\n        null != o && (n = n.transpose(o), r = In(r.length, n.rank));\n        var a = {\n            axis: r[0]\n        }, i = [\n            n\n        ];\n        return Lt.runKernelFunc(function(t, e) {\n            var o = t.argMax(n, r[0]);\n            return e([\n                n\n            ]), o;\n        }, {\n            x: n\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return Xn(n);\n                }\n            };\n        }, \"ArgMax\", a, i);\n    }\n}), Xl = An({\n    argMin_: function(t, e) {\n        void 0 === e && (e = 0);\n        var n = gn(t, \"x\", \"argMin\");\n        null == e && (e = 0);\n        var r = O(e, n.shape), o = En(r, n.rank);\n        return null != o && (n = n.transpose(o), r = In(r.length, n.rank)), Lt.runKernelFunc(function(t, e) {\n            var o = t.argMin(n, r[0]);\n            return e([\n                n\n            ]), o;\n        }, {\n            $x: n\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return Xn(n);\n                }\n            };\n        });\n    }\n}), Yl = An({\n    logSumExp_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = gn(t, \"x\", \"logSumExp\"), o = O(e, r.shape), a = r.max(o, !0), i = r.sub(a).exp().sum(o).log(), s = a.reshape(i.shape).add(i);\n        if (n) {\n            var u = wn(s.shape, o);\n            return s.reshape(u);\n        }\n        return s;\n    }\n}), $l = An({\n    max_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = gn(t, \"x\", \"max\"), o = r, a = O(e, r.shape), i = a, s = En(i, r.rank);\n        null != s && (r = r.transpose(s), i = In(i.length, r.rank));\n        var u = [\n            r\n        ], c = Lt.runKernelFunc(function(t, e) {\n            var n = t.max(r, i);\n            return e([\n                o,\n                n\n            ]), n;\n        }, {\n            x: r\n        }, function(t, e) {\n            return Hl(t, e[1], e[0], a, s);\n        }, \"Max\", {\n            axes: i\n        }, u, [\n            !0\n        ]);\n        if (n) {\n            var l = wn(c.shape, a);\n            c = c.reshape(l);\n        }\n        return c;\n    }\n}), Ql = An({\n    mean_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = gn(t, \"x\", \"mean\"), o = O(e, r.shape), a = k(bn(r.shape, o)[1]);\n        return oa(function(t) {\n            var r = On(a);\n            return {\n                value: (r.dtype === t.dtype ? t : t.cast(r.dtype)).div(r).sum(e, n),\n                gradFunc: function(e) {\n                    var n = t.shape.slice();\n                    return o.forEach(function(t) {\n                        n[t] = 1;\n                    }), e.reshape(n).mul(zn(t.shape, \"float32\")).div(a);\n                }\n            };\n        })(r);\n    }\n}), Jl = An({\n    min_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = gn(t, \"x\", \"min\"), o = r, a = O(e, r.shape), i = a, s = En(i, r.rank);\n        null != s && (r = r.transpose(s), i = In(i.length, r.rank));\n        var u = [\n            r\n        ], c = Lt.runKernelFunc(function(t, e) {\n            var n = t.min(r, i);\n            return e([\n                o,\n                n\n            ]), n;\n        }, {\n            x: r\n        }, function(t, e) {\n            return Hl(t, e[1], e[0], a, s);\n        }, \"Min\", {\n            axes: i\n        }, u, [\n            !0\n        ]);\n        if (n) {\n            var l = wn(c.shape, a);\n            c = c.reshape(l);\n        }\n        return c;\n    }\n}), Zl = An({\n    moments_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = O(e, (t = gn(t, \"x\", \"moments\")).shape), o = t.mean(r, n), a = o.shape;\n        n || (a = wn(o.shape, r));\n        var i = t.toFloat().sub(o.reshape(a)).square();\n        return {\n            mean: o,\n            variance: i.mean(r, n)\n        };\n    }\n}), th = An({\n    sum_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = gn(t, \"x\", \"sum\");\n        \"bool\" === r.dtype && (r = r.toInt());\n        var o = O(e, r.shape);\n        return oa(function(t) {\n            var e = En(o, t.rank), r = o, a = t;\n            null != e && (a = t.transpose(e), r = In(r.length, t.rank));\n            var i = function(e) {\n                var n = t.shape.slice();\n                return o.forEach(function(t) {\n                    n[t] = 1;\n                }), e.reshape(n).mul(zn(t.shape, \"float32\"));\n            }, s = {\n                axes: r\n            }, u = Lt.runKernelFunc(function(t) {\n                return t.sum(a, r);\n            }, {\n                x: a\n            }, function(t) {\n                return {\n                    x: function() {\n                        return i(t);\n                    }\n                };\n            }, \"Sum\", s);\n            if (n) {\n                var c = wn(u.shape, o);\n                u = u.reshape(c);\n            }\n            return {\n                value: u,\n                gradFunc: i\n            };\n        })(r);\n    }\n}), eh = An({\n    prod_: function(t, e, n) {\n        void 0 === e && (e = null), void 0 === n && (n = !1);\n        var r = gn(t, \"x\", \"prod\");\n        \"bool\" === r.dtype && (r = r.toInt());\n        var o = O(e, r.shape), a = En(o, r.rank), i = o, s = r;\n        null != a && (s = r.transpose(a), i = In(i.length, r.rank));\n        var u = Lt.runKernelFunc(function(t) {\n            return t.prod(s, i);\n        }, {\n            permutedX: s\n        });\n        if (n) {\n            var c = wn(u.shape, o);\n            u = u.reshape(c);\n        }\n        return u;\n    }\n});\nvar nh = An({\n    elu_: function(t) {\n        var e = gn(t, \"x\", \"elu\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.elu(e);\n            return n([\n                r\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    return Lt.runKernelFunc(function(e) {\n                        return e.eluDer(t, n);\n                    }, {\n                        dy: t,\n                        y: n\n                    });\n                }\n            };\n        });\n    }\n}), rh = An({\n    leakyRelu_: function(t, e) {\n        void 0 === e && (e = .2);\n        var n = gn(t, \"x\", \"leakyRelu\");\n        return Eo(On(e).mul(n), n);\n    }\n}), oh = An({\n    prelu_: function(t, e) {\n        var n = gn(t, \"x\", \"prelu\"), r = gn(e, \"alpha\", \"prelu\");\n        return Lt.runKernelFunc(function(t, e) {\n            var o = t.prelu(n, r);\n            return e([\n                n,\n                r\n            ]), o;\n        }, {\n            x: n,\n            alpha: r\n        }, function(t, e) {\n            var n = e[0], r = e[1], o = n.greater(0);\n            return {\n                x: function() {\n                    return yc(o, t, t.mul(r));\n                },\n                alpha: function() {\n                    var e = yc(o, Xn(t), t.mul(n)), a = Br(r.shape, t.shape);\n                    return a.length > 0 && (e = e.sum(a)), e.reshape(r.shape);\n                }\n            };\n        }, \"Prelu\");\n    }\n}), ah = An({\n    relu_: function(t) {\n        var e = gn(t, \"x\", \"relu\");\n        return \"bool\" === e.dtype ? e.toInt() : Lt.runKernelFunc(function(t, n) {\n            var r = t.relu(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.mulStrict(n.step().toFloat());\n                }\n            };\n        }, \"Relu\");\n    }\n}), ih = An({\n    relu6_: function(t) {\n        var e = gn(t, \"x\", \"relu6\");\n        return \"bool\" === e.dtype ? e.toInt() : Lt.runKernelFunc(function(t, n) {\n            var r = t.relu6(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            x: e\n        }, function(t, e) {\n            var n = e[0], r = n.lessEqual(6).mul(n.step());\n            return {\n                x: function() {\n                    return t.mulStrict(r.toFloat());\n                }\n            };\n        }, \"Relu6\");\n    }\n}), sh = An({\n    selu_: function(t) {\n        var e = gn(t, \"x\", \"selu\");\n        return Lt.runKernelFunc(function(t, n) {\n            var r = t.selu(e);\n            return n([\n                e\n            ]), r;\n        }, {\n            $x: e\n        }, function(t, e) {\n            var n = e[0];\n            return {\n                $x: function() {\n                    var e = n.greater(On(0)), r = On(su), o = On(uu), a = t.mul(o), i = t.mul(r).mul(n.toFloat().exp());\n                    return yc(e, a, i);\n                }\n            };\n        });\n    }\n});\nvar uh = An({\n    localResponseNormalization_: function(t, e, n, r, o) {\n        void 0 === e && (e = 5), void 0 === n && (n = 1), void 0 === r && (r = 1), void 0 === o && (o = .5);\n        var a = gn(t, \"x\", \"localResponseNormalization\");\n        C(4 === a.rank || 3 === a.rank, function() {\n            return \"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \" + a.rank + \".\";\n        }), C(A(e), function() {\n            return \"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius \" + e + \".\";\n        });\n        var i = a, s = !1;\n        3 === a.rank && (s = !0, i = a.as4D(1, a.shape[0], a.shape[1], a.shape[2]));\n        var u = Lt.runKernelFunc(function(t, a) {\n            var s = t.localResponseNormalization4D(i, e, n, r, o);\n            return a([\n                i,\n                s\n            ]), s;\n        }, {\n            x4D: i\n        }, function(t, a) {\n            var i = a[0], s = a[1];\n            return {\n                x4D: function() {\n                    return Lt.runKernelFunc(function(a) {\n                        return a.LRNGrad(t, i, s, e, n, r, o);\n                    }, {});\n                }\n            };\n        });\n        return s ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;\n    }\n});\nvar ch = An({\n    norm_: function(t, e, n, r) {\n        void 0 === e && (e = \"euclidean\"), void 0 === n && (n = null), void 0 === r && (r = !1);\n        var o = function t(e, n, r) {\n            void 0 === r && (r = null);\n            if (0 === e.rank) return e.abs();\n            if (1 !== e.rank && null === r) return t(e.reshape([\n                -1\n            ]), n, r);\n            if (1 === e.rank || \"number\" == typeof r || Array.isArray(r) && 1 === r.length) {\n                if (1 === n) return e.abs().sum(r);\n                if (n === 1 / 0) return e.abs().max(r);\n                if (n === -1 / 0) return e.abs().min(r);\n                if (\"euclidean\" === n || 2 === n) return e.abs().pow(On(2, \"int32\")).sum(r).sqrt();\n                throw new Error(\"Error in norm: invalid ord value: \" + n);\n            }\n            if (Array.isArray(r) && 2 === r.length) {\n                if (1 === n) return e.abs().sum(r[0]).max(r[1] - 1);\n                if (n === 1 / 0) return e.abs().sum(r[1]).max(r[0]);\n                if (n === -1 / 0) return e.abs().sum(r[1]).min(r[0]);\n                if (\"fro\" === n || \"euclidean\" === n) return e.square().sum(r).sqrt();\n                throw new Error(\"Error in norm: invalid ord value: \" + n);\n            }\n            throw new Error(\"Error in norm: invalid axis: \" + r);\n        }(t = gn(t, \"x\", \"norm\"), e, n), a = o.shape;\n        if (r) {\n            var i = O(n, t.shape);\n            a = wn(o.shape, i);\n        }\n        return o.reshape(a);\n    }\n});\nvar lh = An({\n    basicLSTMCell_: function(t, e, n, r, o, a) {\n        var i = gn(t, \"forgetBias\", \"basicLSTMCell\"), s = gn(e, \"lstmKernel\", \"basicLSTMCell\"), u = gn(n, \"lstmBias\", \"basicLSTMCell\"), c = gn(r, \"data\", \"basicLSTMCell\"), l = gn(o, \"c\", \"basicLSTMCell\"), h = gn(a, \"h\", \"basicLSTMCell\"), f = c.concat(h, 1).matMul(s).add(u), d = f.shape[0], p = f.shape[1] / 4, v = [\n            d,\n            p\n        ], g = f.slice([\n            0,\n            0\n        ], v), m = f.slice([\n            0,\n            p\n        ], v), y = f.slice([\n            0,\n            2 * p\n        ], v), x = f.slice([\n            0,\n            3 * p\n        ], v), b = g.sigmoid().mulStrict(m.tanh()).addStrict(l.mulStrict(i.add(y).sigmoid())), w = b.tanh().mulStrict(x.sigmoid());\n        return [\n            b,\n            w\n        ];\n    }\n}), hh = An({\n    multiRNNCell_: function(t, e, n, r) {\n        for(var o = gn(e, \"data\", \"multiRNNCell\"), a = mn(n, \"c\", \"multiRNNCell\"), i = mn(r, \"h\", \"multiRNNCell\"), s = o, u = [], c = 0; c < t.length; c++){\n            var l = t[c](s, a[c], i[c]);\n            u.push(l[0]), u.push(l[1]), s = l[1];\n        }\n        var h = [], f = [];\n        for(c = 0; c < u.length; c += 2)h.push(u[c]), f.push(u[c + 1]);\n        return [\n            h,\n            f\n        ];\n    }\n});\nvar fh = An({\n    movingAverage_: function(t, e, n, r, o) {\n        void 0 === o && (o = !0);\n        var a = gn(t, \"v\", \"movingAverage\"), i = gn(e, \"x\", \"movingAverage\"), s = gn(n, \"decay\", \"movingAverage\");\n        Ft(a, i), C(S(a.shape, i.shape), function() {\n            return \"Shape mismatch in v and x\";\n        });\n        var u = On(1), c = u.sub(s), l = i.sub(a).mul(c);\n        if (o) {\n            C(null != r, function() {\n                return \"When using zeroDebias: true, step is required.\";\n            });\n            var h = gn(r, \"step\", \"movingAverage\");\n            l = l.div(u.sub(No(s, h)));\n        }\n        return a.add(l);\n    }\n});\nvar dh = An({\n    stridedSlice_: function(t, e, n, r, o, a, i, s, u) {\n        if (void 0 === o && (o = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), void 0 === u && (u = 0), null == r && (r = new Array(e.length)), 0 !== i) throw new Error(\"ellipsis mask is not yet supported\");\n        var c = gn(t, \"x\", \"stridedSlice\"), l = Ko(s), h = c.shape.slice();\n        l.forEach(function(t) {\n            e[t] = 0, n[t] = 1, h.splice(t, 0, 1);\n        }), c = c.reshape(h);\n        for(var f = 0; f < c.rank; f++)e[f] = Xo(o, e, r, c.shape, f), n[f] = Yo(a, n, r, c.shape, f), r[f] = r[f] || 1;\n        var d = Ko(u);\n        d.forEach(function(t) {\n            n[t] = e[t] + 1, r[t] = 1;\n        });\n        var p = jo(e, n, r), v = p.filter(function(t, e) {\n            return -1 === d.indexOf(e);\n        });\n        return r.every(function(t) {\n            return 1 === t;\n        }) ? Wl(c, e, p).reshape(v) : Lt.runKernelFunc(function(t) {\n            return t.stridedSlice(c, e, n, r);\n        }, {\n            $x: c\n        }).reshape(v);\n    }\n});\nvar ph = An({\n    topk_: function(t, e, n) {\n        void 0 === e && (e = 1), void 0 === n && (n = !0);\n        var r = gn(t, \"x\", \"topk\");\n        if (0 === r.rank) throw new Error(\"topk() expects the input to be of rank 1 or higher\");\n        var o = r.shape[r.shape.length - 1];\n        if (e > o) throw new Error(\"'k' passed to topk() must be <= the last dimension (\" + o + \") but got \" + e);\n        var a = Lt.runKernelFunc(function(t) {\n            return t.topk(r, e, n);\n        }, {\n            $x: r\n        });\n        return {\n            values: a[0],\n            indices: a[1]\n        };\n    }\n});\nvar vh = An({\n    scatterND_: function(t, e, n) {\n        var r = gn(t, \"indices\", \"scatterND\", \"int32\"), o = gn(e, \"updates\", \"scatterND\");\n        return zo(o, r, n), Lt.runKernelFunc(function(t) {\n            return t.scatterND(r, o, n);\n        }, {\n            indices: r,\n            updates: o\n        }, null, \"ScatterNd\", {\n            shape: n\n        });\n    }\n});\nvar gh = An({\n    fft_: function(t) {\n        C(\"complex64\" === t.dtype, function() {\n            return \"The dtype for tf.spectral.fft() must be complex64 but got \" + t.dtype + \".\";\n        });\n        var e = t.shape[t.shape.length - 1], n = t.size / e, r = t.as2D(n, e);\n        return Lt.runKernelFunc(function(t) {\n            return t.fft(r);\n        }, {\n            input: t\n        }).reshape(t.shape);\n    }\n}), mh = An({\n    ifft_: function(t) {\n        C(\"complex64\" === t.dtype, function() {\n            return \"The dtype for tf.spectral.ifft() must be complex64 but got \" + t.dtype + \".\";\n        });\n        var e = t.shape[t.shape.length - 1], n = t.size / e, r = t.as2D(n, e);\n        return Lt.runKernelFunc(function(t) {\n            return t.ifft(r);\n        }, {\n            input: t\n        }).reshape(t.shape);\n    }\n}), yh = An({\n    rfft_: function(t, e) {\n        C(\"float32\" === t.dtype, function() {\n            return \"The dtype for rfft() must be real value but got \" + t.dtype;\n        });\n        var n, r = t.shape[t.shape.length - 1], o = t.size / r;\n        if (null != e && e < r) {\n            var a = t.shape.map(function(t) {\n                return 0;\n            }), i = t.shape.map(function(t) {\n                return t;\n            });\n            i[t.shape.length - 1] = e, n = t.slice(a, i), r = e;\n        } else if (null != e && e > r) {\n            var s = t.shape.map(function(t) {\n                return t;\n            });\n            s[t.shape.length - 1] = e - r, n = t.concat(Gn(s), t.shape.length - 1), r = e;\n        } else n = t;\n        var u = n.zerosLike(), c = Tn(n, u).as2D(o, r), l = gh(c), h = Math.floor(r / 2) + 1, f = Dn(l), d = Nn(l), p = f.split([\n            h,\n            r - h\n        ], f.shape.length - 1), v = d.split([\n            h,\n            r - h\n        ], d.shape.length - 1), g = n.shape.slice();\n        return g[n.shape.length - 1] = h, Tn(p[0], v[0]).reshape(g);\n    }\n}), xh = An({\n    irfft_: function(t) {\n        var e = t.shape[t.shape.length - 1], n = t.size / e;\n        if (e <= 2) {\n            var r = t.as2D(n, e), o = mh(r);\n            return Dn(o);\n        }\n        var a = [\n            n,\n            2 * (e - 1)\n        ], i = Dn(t).as2D(n, e), s = Nn(t).as2D(n, e), u = i.slice([\n            0,\n            1\n        ], [\n            n,\n            e - 2\n        ]).reverse(1), c = s.slice([\n            0,\n            1\n        ], [\n            n,\n            e - 2\n        ]).reverse(1).mul(On(-1)), l = i.concat(u, 1), h = s.concat(c, 1);\n        return r = Tn(l, h).as2D(a[0], a[1]), o = mh(r), Dn(o);\n    }\n}), bh = Object.freeze({\n    fft: gh,\n    ifft: mh,\n    rfft: yh,\n    irfft: xh\n});\nvar wh = An({\n    sparseToDense_: function(t, e, n, r) {\n        void 0 === r && (r = 0);\n        var o = gn(t, \"sparseIndices\", \"sparseToDense\", \"int32\"), a = gn(e, \"sparseValues\", \"sparseToDense\"), i = gn(r, \"defaultValue\", \"sparseToDense\", a.dtype);\n        return function(t, e, n, r) {\n            if (\"int32\" !== t.dtype) throw new Error(\"tf.sparseToDense() expects the indices to be int32 type, but the dtype was \" + t.dtype + \".\");\n            if (t.rank > 2) throw new Error(\"sparseIndices should be a scalar, vector, or matrix, but got shape \" + t.shape + \".\");\n            var o = t.rank > 0 ? t.shape[0] : 1, a = t.rank > 1 ? t.shape[1] : 1;\n            if (n.length !== a) throw new Error(\"outputShape has incorrect number of elements:, \" + n.length + \", should be: \" + a + \".\");\n            var i = e.size;\n            if (0 !== e.rank && (1 !== e.rank || i !== o)) throw new Error(\"sparseValues has incorrect shape \" + e.shape + \", should be [] or [\" + o + \"]\");\n            if (e.dtype !== r.dtype) throw new Error(\"sparseValues.dtype must match defaultValues.dtype\");\n        }(o, a, n, i), Lt.runKernelFunc(function(t) {\n            return t.sparseToDense(o, a, n, i);\n        }, {\n            $sparseIndices: o,\n            $sparseValues: a,\n            $defaultValue: i\n        });\n    }\n});\nvar Ch = An({\n    gatherND_: function(t, e) {\n        var n = gn(e, \"indices\", \"gatherND\", \"int32\"), r = gn(t, \"x\", \"gatherND\");\n        return Lt.runKernelFunc(function(t) {\n            return t.gatherND(r, n);\n        }, {\n            x: r,\n            indices: n\n        }, null, \"GatherNd\");\n    }\n});\nvar Eh = An({\n    diag_: function(t) {\n        var e = gn(t, \"x\", \"diag\").flatten(), n = t.shape.concat(t.shape);\n        return Lt.runKernelFunc(function(t) {\n            return t.diag(e);\n        }, {\n            $x: e\n        }).reshape(n);\n    }\n});\nvar Rh = An({\n    dropout_: function(t, e, n, r) {\n        var o = gn(t, \"x\", \"dropout\");\n        if (C(\"float32\" === o.dtype, function() {\n            return \"x has to be a floating point tensor since it's going to be scaled, but got a \" + o.dtype + \" tensor instead.\";\n        }), C(e >= 0 && e < 1, function() {\n            return \"rate must be a float in the range [0, 1), but got \" + e + \".\";\n        }), 0 === e) return t instanceof wt ? o.clone() : o;\n        var a = function(t, e) {\n            if (null == e) return t.shape.slice();\n            if (S(t.shape, e)) return e;\n            if (t.shape.length === e.length) {\n                for(var n = [], r = 0; r < t.shape.length; r++)null == e[r] && null != t.shape[r] ? n.push(t.shape[r]) : n.push(e[r]);\n                return n;\n            }\n            return e;\n        }(o, n), i = 1 - e, s = zc(a, 0, 1, \"float32\", r).add(i).floor().div(i);\n        return o.mul(s);\n    }\n});\nfunction Ih(t, e, n) {\n    for(var r = 1 - t % 2, o = new Float32Array(t), a = 0; a < t; ++a){\n        var i = 2 * Math.PI * a / (t + r - 1);\n        o[a] = e - n * Math.cos(i);\n    }\n    return Mn(o, \"float32\");\n}\nvar kh = An({\n    hannWindow_: function(t) {\n        return Ih(t, .5, .5);\n    }\n}), Sh = An({\n    hammingWindow_: function(t) {\n        return Ih(t, .54, .46);\n    }\n}), Ah = An({\n    frame_: function(t, e, n, r, o) {\n        void 0 === r && (r = !1), void 0 === o && (o = 0);\n        for(var a = 0, i = []; a + e <= t.size;)i.push(Wl(t, a, e)), a += n;\n        if (r) for(; a < t.size;){\n            var s = a + e - t.size, u = Yn([\n                Wl(t, a, e - s),\n                Hn([\n                    s\n                ], o)\n            ]);\n            i.push(u), a += n;\n        }\n        return 0 === i.length ? Bn([], [\n            0,\n            e\n        ]) : Yn(i).as2D(i.length, e);\n    }\n}), Th = An({\n    stft_: function(t, e, n, r, o) {\n        var a;\n        void 0 === o && (o = kh), null == r && (a = e, r = Math.floor(Math.pow(2, Math.ceil(Math.log(a) / Math.log(2)))));\n        for(var i = Ah(t, e, n), s = To(i, o(e)), u = [], c = 0; c < i.shape[0]; c++)u.push(yh(s.slice([\n            c,\n            0\n        ], [\n            1,\n            e\n        ]), r));\n        return Yn(u);\n    }\n}), Dh = Object.freeze({\n    hannWindow: kh,\n    hammingWindow: Sh,\n    frame: Ah,\n    stft: Th\n});\nvar Nh, Fh = function(t, e, o) {\n    return void 0 === o && (o = 1), n(this, void 0, void 0, function() {\n        var n, a, i, s, u, c, l, h, f, d, p, v, g, m;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return n = gn(t, \"predictions\", \"inTopK\"), a = gn(e, \"targets\", \"inTopK\"), C(n.rank > 1, function() {\n                        return \"inTopK() expects the predictions to be of rank 2 or higher, but got \" + n.rank;\n                    }), C(n.rank - 1 === a.rank, function() {\n                        return \"predictions rank should be 1 larger than targets rank, but got predictions rank \" + n.rank + \" and targets rank \" + a.rank;\n                    }), E(n.shape.slice(0, n.shape.length - 1), a.shape, \"predictions's shape should be align with the targets' shape, except the last dimension.\"), i = n.shape[n.shape.length - 1], C(o > 0 && o <= i, function() {\n                        return \"'k' passed to inTopK() must be > 0 && <= the predictions last dimension (\" + i + \"), but got \" + o;\n                    }), [\n                        4,\n                        n.data()\n                    ];\n                case 1:\n                    return s = r.sent(), [\n                        4,\n                        a.data()\n                    ];\n                case 2:\n                    for(u = r.sent(), c = [\n                        s.length / i,\n                        i\n                    ], h = c[1], f = B(\"bool\", l = c[0]), d = 0; d < l; d++){\n                        for(p = d * h, v = s.subarray(p, p + h), g = [], m = 0; m < v.length; m++)g.push({\n                            value: v[m],\n                            index: m\n                        });\n                        for(g.sort(function(t, e) {\n                            return e.value - t.value;\n                        }), f[d] = 0, m = 0; m < o; m++)if (g[m].index === u[d]) {\n                            f[d] = 1;\n                            break;\n                        }\n                    }\n                    return t !== n && n.dispose(), e !== a && a.dispose(), [\n                        2,\n                        Fn(f, a.shape, \"bool\")\n                    ];\n            }\n        });\n    });\n};\n!function(t) {\n    t[t.NONE = 0] = \"NONE\", t[t.MEAN = 1] = \"MEAN\", t[t.SUM = 2] = \"SUM\", t[t.SUM_BY_NONZERO_WEIGHTS = 3] = \"SUM_BY_NONZERO_WEIGHTS\";\n}(Nh || (Nh = {}));\nvar _h = An({\n    absoluteDifference_: function(t, e, n, r) {\n        void 0 === r && (r = Nh.SUM_BY_NONZERO_WEIGHTS);\n        var o = gn(t, \"labels\", \"absoluteDifference\"), a = gn(e, \"predictions\", \"absoluteDifference\"), i = null;\n        null != n && (i = gn(n, \"weights\", \"absoluteDifference\")), E(o.shape, a.shape, \"Error in absoluteDifference: \");\n        var s = o.sub(a).abs();\n        return Oh(s, i, r);\n    }\n}), Oh = An({\n    computeWeightedLoss_: function(t, e, n) {\n        void 0 === n && (n = Nh.SUM_BY_NONZERO_WEIGHTS);\n        var r = gn(t, \"losses\", \"computeWeightedLoss\"), o = null;\n        null != e && (o = gn(e, \"weights\", \"computeWeightedLoss\"));\n        var a = null == o ? r : r.mul(o);\n        if (n === Nh.NONE) return a;\n        if (n === Nh.SUM) return a.sum();\n        if (n === Nh.MEAN) {\n            if (null == o) return a.mean();\n            var i = r.size / o.size, s = a.sum().div(o.sum());\n            return i > 1 ? s.div(On(i)) : s;\n        }\n        if (n === Nh.SUM_BY_NONZERO_WEIGHTS) {\n            if (null == o) return a.sum().div(On(r.size));\n            var u = o.mul(zn(r.shape)).notEqual(On(0)).sum().toFloat();\n            return a.sum().div(u);\n        }\n        throw Error(\"Unknown reduction: \" + n);\n    }\n}), Mh = An({\n    cosineDistance_: function(t, e, n, r, o) {\n        void 0 === o && (o = Nh.SUM_BY_NONZERO_WEIGHTS);\n        var a = gn(t, \"labels\", \"cosineDistance\"), i = gn(e, \"predictions\", \"cosineDistance\"), s = null;\n        null != r && (s = gn(r, \"weights\", \"cosineDistance\")), E(a.shape, i.shape, \"Error in cosineDistance: \");\n        var u = On(1).sub(a.mul(i).sum(n, !0));\n        return Oh(u, s, o);\n    }\n}), Bh = An({\n    hingeLoss_: function(t, e, n, r) {\n        void 0 === r && (r = Nh.SUM_BY_NONZERO_WEIGHTS);\n        var o = gn(t, \"labels\", \"hingeLoss\"), a = gn(e, \"predictions\", \"hingeLoss\"), i = null;\n        null != n && (i = gn(n, \"weights\", \"hingeLoss\")), E(o.shape, a.shape, \"Error in hingeLoss: \");\n        var s = On(1);\n        o = On(2).mul(o).sub(s);\n        var u = s.sub(o.mul(a)).relu();\n        return Oh(u, i, r);\n    }\n}), Ph = An({\n    huberLoss_: function(t, e, n, r, o) {\n        void 0 === r && (r = 1), void 0 === o && (o = Nh.SUM_BY_NONZERO_WEIGHTS);\n        var a = gn(t, \"labels\", \"huberLoss\"), i = gn(e, \"predictions\", \"huberLoss\"), s = null;\n        null != n && (s = gn(n, \"weights\", \"huberLoss\")), E(a.shape, i.shape, \"Error in huberLoss: \");\n        var u = On(r), c = i.sub(a).abs(), l = Io(c, u), h = c.sub(l), f = On(.5).mul(l.square()).add(u.mul(h));\n        return Oh(f, s, o);\n    }\n}), Lh = An({\n    logLoss_: function(t, e, n, r, o) {\n        void 0 === r && (r = 1e-7), void 0 === o && (o = Nh.SUM_BY_NONZERO_WEIGHTS);\n        var a = gn(t, \"labels\", \"logLoss\"), i = gn(e, \"predictions\", \"logLoss\"), s = null;\n        null != n && (s = gn(n, \"weights\", \"logLoss\")), E(a.shape, i.shape, \"Error in logLoss: \");\n        var u = On(1), c = On(r), l = a.mul(i.add(c).log()).neg().sub(u.sub(a).mul(u.sub(i).add(c).log()));\n        return Oh(l, s, o);\n    }\n}), Wh = An({\n    meanSquaredError_: function(t, e, n, r) {\n        void 0 === r && (r = Nh.SUM_BY_NONZERO_WEIGHTS);\n        var o = gn(t, \"labels\", \"meanSquaredError\"), a = gn(e, \"predictions\", \"meanSquaredError\"), i = null;\n        null != n && (i = gn(n, \"weights\", \"meanSquaredError\")), E(o.shape, a.shape, \"Error in meanSquaredError: \");\n        var s = o.squaredDifference(a);\n        return Oh(s, i, r);\n    }\n}), Uh = An({\n    sigmoidCrossEntropy_: function(t, e, n, r, o) {\n        void 0 === r && (r = 0), void 0 === o && (o = Nh.SUM_BY_NONZERO_WEIGHTS);\n        var a = gn(t, \"multiClassLabels\", \"sigmoidCrossEntropy\"), i = gn(e, \"logits\", \"sigmoidCrossEntropy\"), s = null;\n        if (null != n && (s = gn(n, \"weights\", \"sigmoidCrossEntropy\")), E(a.shape, i.shape, \"Error in sigmoidCrossEntropy: \"), r > 0) {\n            var u = On(r), c = On(1), l = On(.5);\n            a = a.mul(c.sub(u)).add(l.mul(u));\n        }\n        var h = function(t, e) {\n            var n = gn(t, \"labels\", \"sigmoidCrossEntropyWithLogits\"), r = gn(e, \"logits\", \"sigmoidCrossEntropyWithLogits\");\n            E(n.shape, r.shape, \"Error in sigmoidCrossEntropyWithLogits: \");\n            var o = r.relu(), a = r.mul(n), i = r.abs().neg().exp().log1p();\n            return o.sub(a).add(i);\n        }(a, i);\n        return Oh(h, s, o);\n    }\n}), Vh = An({\n    softmaxCrossEntropy_: function(t, e, n, r, o) {\n        void 0 === r && (r = 0), void 0 === o && (o = Nh.SUM_BY_NONZERO_WEIGHTS);\n        var a = gn(t, \"onehotLabels\", \"softmaxCrossEntropy\"), i = gn(e, \"logits\", \"softmaxCrossEntropy\"), s = null;\n        if (null != n && (s = gn(n, \"weights\", \"softmaxCrossEntropy\")), E(a.shape, i.shape, \"Error in softmaxCrossEntropy: \"), r > 0) {\n            var u = On(r), c = On(1), l = On(a.shape[1]);\n            a = a.mul(c.sub(u)).add(u.div(l));\n        }\n        var h = function(t, e, n) {\n            if (void 0 === n && (n = -1), -1 === n && (n = e.rank - 1), n !== e.rank - 1) throw Error(\"Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank \" + e.rank + \" and dim was \" + n);\n            return oa(function(t, e, r) {\n                var o = e.logSumExp([\n                    n\n                ], !0), a = e.toFloat().sub(o);\n                r([\n                    t,\n                    a\n                ]);\n                return {\n                    value: a.mul(t).neg().sum([\n                        n\n                    ]),\n                    gradFunc: function(t, e) {\n                        var r = e[0], o = e[1], a = wn(t.shape, [\n                            n\n                        ]);\n                        return [\n                            t.reshape(a).mul(r.toFloat().sub(o.exp())),\n                            t.reshape(a).mul(o.exp().sub(r.toFloat()))\n                        ];\n                    }\n                };\n            })(t, e);\n        }(a, i);\n        return Oh(h, s, o);\n    }\n}), zh = Object.freeze({\n    get Reduction () {\n        return Nh;\n    },\n    absoluteDifference: _h,\n    computeWeightedLoss: Oh,\n    cosineDistance: Mh,\n    hingeLoss: Bh,\n    huberLoss: Ph,\n    logLoss: Lh,\n    meanSquaredError: Wh,\n    sigmoidCrossEntropy: Uh,\n    softmaxCrossEntropy: Vh\n});\nfunction Gh(t, e) {\n    return void 0 === e && (e = !1), Lt.tidy(function() {\n        if (2 !== t.shape.length) throw new Error(\"qr2d() requires a 2D Tensor, but got a \" + t.shape.length + \"D Tensor.\");\n        for(var n = t.shape[0], r = t.shape[1], o = Cc(n), a = t.clone(), i = Bn([\n            [\n                1\n            ]\n        ], [\n            1,\n            1\n        ]), s = i.clone(), u = n >= r ? r : n, c = function(t) {\n            var e, u = a, c = s, l = o;\n            e = Lt.tidy(function() {\n                var e = a.slice([\n                    t,\n                    t\n                ], [\n                    n - t,\n                    1\n                ]), u = e.norm(), c = a.slice([\n                    t,\n                    t\n                ], [\n                    1,\n                    1\n                ]), l = Bn([\n                    [\n                        -1\n                    ]\n                ]).where(c.greater(0), Bn([\n                    [\n                        1\n                    ]\n                ])), h = c.sub(l.mul(u)), f = e.div(h);\n                s = 1 === f.shape[0] ? i.clone() : i.concat(f.slice([\n                    1,\n                    0\n                ], [\n                    f.shape[0] - 1,\n                    f.shape[1]\n                ]), 0);\n                var d = l.matMul(h).div(u).neg(), p = a.slice([\n                    t,\n                    0\n                ], [\n                    n - t,\n                    r\n                ]), v = d.mul(s), g = s.transpose();\n                if (0 === t) a = p.sub(v.matMul(g.matMul(p)));\n                else {\n                    var m = p.sub(v.matMul(g.matMul(p)));\n                    a = a.slice([\n                        0,\n                        0\n                    ], [\n                        t,\n                        r\n                    ]).concat(m, 0);\n                }\n                var y = v.transpose(), x = o.slice([\n                    0,\n                    t\n                ], [\n                    n,\n                    o.shape[1] - t\n                ]);\n                if (0 === t) o = x.sub(x.matMul(s).matMul(y));\n                else {\n                    var b = x.sub(x.matMul(s).matMul(y));\n                    o = o.slice([\n                        0,\n                        0\n                    ], [\n                        n,\n                        t\n                    ]).concat(b, 1);\n                }\n                return [\n                    s,\n                    a,\n                    o\n                ];\n            }), s = e[0], a = e[1], o = e[2], tn([\n                u,\n                c,\n                l\n            ]);\n        }, l = 0; l < u; ++l)c(l);\n        return !e && n > r && (o = o.slice([\n            0,\n            0\n        ], [\n            n,\n            r\n        ]), a = a.slice([\n            0,\n            0\n        ], [\n            r,\n            r\n        ])), [\n            o,\n            a\n        ];\n    });\n}\nvar Hh = An({\n    bandPart_: function(t, e, n) {\n        if (e % 1 != 0) throw new Error(\"bandPart(): numLower must be an integer, got \" + e + \".\");\n        if (n % 1 != 0) throw new Error(\"bandPart(): numUpper must be an integer, got \" + n + \".\");\n        var r = gn(t, \"a\", \"bandPart\");\n        if (r.rank < 2) throw new Error(\"bandPart(): Rank must be at least 2, got \" + r.rank + \".\");\n        var o = r.shape, a = r.shape.slice(-2), i = a[0], s = a[1];\n        if (!(e <= i)) throw new Error(\"bandPart(): numLower (\" + e + \") must not be greater than the number of rows (\" + i + \").\");\n        if (!(n <= s)) throw new Error(\"bandPart(): numUpper (\" + n + \") must not be greater than the number of columns (\" + s + \").\");\n        e < 0 && (e = i), n < 0 && (n = s);\n        var u = Kn(0, i, 1, \"int32\").reshape([\n            -1,\n            1\n        ]), c = Kn(0, s, 1, \"int32\"), l = Oo(u, c), h = pc(l.lessEqual(On(+e, \"int32\")), l.greaterEqual(On(-n, \"int32\"))), f = Gn([\n            i,\n            s\n        ], r.dtype);\n        return hr(fr(r.reshape([\n            -1,\n            i,\n            s\n        ])).map(function(t) {\n            return yc(h, t, f);\n        })).reshape(o);\n    }\n}), qh = An({\n    gramSchmidt_: function(t) {\n        var e;\n        if (Array.isArray(t)) {\n            e = !1, C(null != t && t.length > 0, function() {\n                return \"Gram-Schmidt process: input must not be null, undefined, or empty\";\n            });\n            for(var n = t[0].shape[0], r = function(e) {\n                C(t[e].shape[0] === n, function() {\n                    return \"Gram-Schmidt: Non-unique lengths found in the input vectors: (\" + t[e].shape[0] + \" vs. \" + n + \")\";\n                });\n            }, o = 1; o < t.length; ++o)r(o);\n        } else e = !0, t = tr(t, t.shape[0], 0).map(function(t) {\n            return lr(t, [\n                0\n            ]);\n        });\n        C(t.length <= t[0].shape[0], function() {\n            return \"Gram-Schmidt: Number of vectors (\" + t.length + \") exceeds number of dimensions (\" + t[0].shape[0] + \").\";\n        });\n        var a = [], i = t, s = function(t) {\n            a.push(Lt.tidy(function() {\n                var e = i[t];\n                if (t > 0) for(var n = 0; n < t; ++n){\n                    var r = th(a[n].mulStrict(e)).mul(a[n]);\n                    e = e.sub(r);\n                }\n                return e.div(ch(e, \"euclidean\"));\n            }));\n        };\n        for(o = 0; o < t.length; ++o)s(o);\n        return e ? hr(a, 0) : a;\n    }\n}), Kh = An({\n    qr_: function(t, e) {\n        if (void 0 === e && (e = !1), t.rank < 2) throw new Error(\"qr() requires input tensor to have a rank >= 2, but got rank \" + t.rank);\n        if (2 === t.rank) return Gh(t, e);\n        var n = t.shape.slice(0, t.shape.length - 2).reduce(function(t, e) {\n            return t * e;\n        }), r = fr(t.reshape([\n            n,\n            t.shape[t.shape.length - 2],\n            t.shape[t.shape.length - 1]\n        ]), 0), o = [], a = [];\n        return r.forEach(function(t) {\n            var n = Gh(t, e), r = n[0], i = n[1];\n            o.push(r), a.push(i);\n        }), [\n            hr(o, 0).reshape(t.shape),\n            hr(a, 0).reshape(t.shape)\n        ];\n    }\n}), jh = Object.freeze({\n    bandPart: Hh,\n    gramSchmidt: qh,\n    qr: Kh\n});\nfunction Xh(t, e, n, r, o, a) {\n    null == r && (r = .5), null == o && (o = Number.NEGATIVE_INFINITY), null == a && (a = 0);\n    var i = t.shape[0];\n    return n = Math.min(n, i), C(0 <= r && r <= 1, function() {\n        return \"iouThreshold must be in [0, 1], but was '\" + r + \"'\";\n    }), C(2 === t.rank, function() {\n        return \"boxes must be a 2D tensor, but was of rank '\" + t.rank + \"'\";\n    }), C(4 === t.shape[1], function() {\n        return \"boxes must have 4 columns, but 2nd dimension was \" + t.shape[1];\n    }), C(1 === e.rank, function() {\n        return \"scores must be a 1D tensor\";\n    }), C(e.shape[0] === i, function() {\n        return \"scores has incompatible shape with boxes. Expected \" + i + \", but was \" + e.shape[0];\n    }), C(0 <= a && a <= 1, function() {\n        return \"softNmsSigma must be in [0, 1], but was '\" + a + \"'\";\n    }), {\n        maxOutputSize: n,\n        iouThreshold: r,\n        scoreThreshold: o,\n        softNmsSigma: a\n    };\n}\nvar Yh = An({\n    resizeBilinear_: function(t, e, n) {\n        void 0 === n && (n = !1);\n        var r = gn(t, \"images\", \"resizeBilinear\");\n        C(3 === r.rank || 4 === r.rank, function() {\n            return \"Error in resizeBilinear: x must be rank 3 or 4, but got rank \" + r.rank + \".\";\n        }), C(2 === e.length, function() {\n            return \"Error in resizeBilinear: new shape must 2D, but got shape \" + e + \".\";\n        });\n        var o = r, a = !1;\n        3 === r.rank && (a = !0, o = r.as4D(1, r.shape[0], r.shape[1], r.shape[2]));\n        var i = e[0], s = e[1], u = Lt.runKernelFunc(function(t, e) {\n            return e([\n                o\n            ]), t.resizeBilinear(o, i, s, n);\n        }, {\n            x: o\n        }, function(t, e) {\n            return {\n                x: function() {\n                    return Lt.runKernelFunc(function(r) {\n                        return r.resizeBilinearBackprop(t, e[0], n);\n                    }, {});\n                }\n            };\n        }, \"ResizeBilinear\", {\n            alignCorners: n,\n            newHeight: i,\n            newWidth: s\n        });\n        return a ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;\n    }\n}), $h = An({\n    resizeNearestNeighbor_: function(t, e, n) {\n        void 0 === n && (n = !1);\n        var r = gn(t, \"images\", \"resizeNearestNeighbor\");\n        C(3 === r.rank || 4 === r.rank, function() {\n            return \"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank \" + r.rank + \".\";\n        }), C(2 === e.length, function() {\n            return \"Error in resizeNearestNeighbor: new shape must 2D, but got shape \" + e + \".\";\n        }), C(\"float32\" === r.dtype || \"int32\" === r.dtype, function() {\n            return \"`images` must have `int32` or `float32` as dtype\";\n        });\n        var o = r, a = !1;\n        3 === r.rank && (a = !0, o = r.as4D(1, r.shape[0], r.shape[1], r.shape[2]));\n        var i = e[0], s = e[1], u = Lt.runKernelFunc(function(t, e) {\n            return e([\n                o\n            ]), t.resizeNearestNeighbor(o, i, s, n);\n        }, {\n            batchImages: o\n        }, function(t, e) {\n            return {\n                batchImages: function() {\n                    return Lt.runKernelFunc(function(r) {\n                        return r.resizeNearestNeighborBackprop(t, e[0], n);\n                    }, {});\n                }\n            };\n        });\n        return a ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;\n    }\n}), Qh = An({\n    nonMaxSuppression_: function(t, e, n, r, o) {\n        void 0 === r && (r = .5), void 0 === o && (o = Number.NEGATIVE_INFINITY);\n        var a = gn(t, \"boxes\", \"nonMaxSuppression\"), i = gn(e, \"scores\", \"nonMaxSuppression\"), s = Xh(a, i, n, r, o);\n        n = s.maxOutputSize, r = s.iouThreshold, o = s.scoreThreshold;\n        var u = {\n            maxOutputSize: n,\n            iouThreshold: r,\n            scoreThreshold: o\n        };\n        return Lt.runKernelFunc(function(t) {\n            return t.nonMaxSuppression(a, i, n, r, o);\n        }, {\n            boxes: a,\n            scores: i\n        }, null, \"NonMaxSuppressionV3\", u);\n    }\n}), Jh = function(t, e, o, a, i) {\n    return void 0 === a && (a = .5), void 0 === i && (i = Number.NEGATIVE_INFINITY), n(this, void 0, void 0, function() {\n        var n, s, u, c, l, h, f;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return n = gn(t, \"boxes\", \"nonMaxSuppressionAsync\"), s = gn(e, \"scores\", \"nonMaxSuppressionAsync\"), u = Xh(n, s, o, a, i), o = u.maxOutputSize, a = u.iouThreshold, i = u.scoreThreshold, [\n                        4,\n                        Promise.all([\n                            n.data(),\n                            s.data()\n                        ])\n                    ];\n                case 1:\n                    return c = r.sent(), l = c[0], h = c[1], f = Oa(l, h, o, a, i), n !== t && n.dispose(), s !== e && s.dispose(), [\n                        2,\n                        f\n                    ];\n            }\n        });\n    });\n}, Zh = An({\n    nonMaxSuppressionWithScore_: function(t, e, n, r, o, a) {\n        void 0 === r && (r = .5), void 0 === o && (o = Number.NEGATIVE_INFINITY), void 0 === a && (a = 0);\n        var i = gn(t, \"boxes\", \"nonMaxSuppression\"), s = gn(e, \"scores\", \"nonMaxSuppression\"), u = Xh(i, s, n, r, o, a), c = {\n            maxOutputSize: n = u.maxOutputSize,\n            iouThreshold: r = u.iouThreshold,\n            scoreThreshold: o = u.scoreThreshold,\n            softNmsSigma: a = u.softNmsSigma\n        }, l = Lt.runKernel(\"NonMaxSuppressionV5\", {\n            boxes: i,\n            scores: s\n        }, c);\n        return {\n            selectedIndices: l[0],\n            selectedScores: l[1]\n        };\n    }\n}), tf = function(t, e, o, a, i, s) {\n    return void 0 === a && (a = .5), void 0 === i && (i = Number.NEGATIVE_INFINITY), void 0 === s && (s = 0), n(this, void 0, void 0, function() {\n        var n, u, c, l, h, f, d;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return n = gn(t, \"boxes\", \"nonMaxSuppressionAsync\"), u = gn(e, \"scores\", \"nonMaxSuppressionAsync\"), c = Xh(n, u, o, a, i, s), o = c.maxOutputSize, a = c.iouThreshold, i = c.scoreThreshold, s = c.softNmsSigma, [\n                        4,\n                        Promise.all([\n                            n.data(),\n                            u.data()\n                        ])\n                    ];\n                case 1:\n                    return l = r.sent(), h = l[0], f = l[1], d = Ma(h, f, o, a, i, s), n !== t && n.dispose(), u !== e && u.dispose(), [\n                        2,\n                        d\n                    ];\n            }\n        });\n    });\n}, ef = An({\n    cropAndResize_: function(t, e, n, r, o, a) {\n        var i = gn(t, \"image\", \"cropAndResize\"), s = gn(e, \"boxes\", \"cropAndResize\", \"float32\"), u = gn(n, \"boxInd\", \"cropAndResize\", \"int32\");\n        o = o || \"bilinear\", a = a || 0;\n        var c = s.shape[0];\n        return C(4 === i.rank, function() {\n            return \"Error in cropAndResize: image must be rank 4,but got rank \" + i.rank + \".\";\n        }), C(2 === s.rank && 4 === s.shape[1], function() {\n            return \"Error in cropAndResize: boxes must be have size [\" + c + \",4] but had shape \" + s.shape + \".\";\n        }), C(1 === u.rank && u.shape[0] === c, function() {\n            return \"Error in cropAndResize: boxInd must be have size [\" + c + \"] but had shape \" + s.shape + \".\";\n        }), C(2 === r.length, function() {\n            return \"Error in cropAndResize: cropSize must be of length 2, but got length \" + r.length + \".\";\n        }), C(r[0] >= 1 && r[1] >= 1, function() {\n            return \"cropSize must be atleast [1,1], but was \" + r;\n        }), C(\"bilinear\" === o || \"nearest\" === o, function() {\n            return \"method must be bilinear or nearest, but was \" + o;\n        }), Lt.runKernelFunc(function(t, e) {\n            return t.cropAndResize(i, s, u, r, o, a);\n        }, {\n            images: i,\n            boxes: s,\n            boxInd: u\n        }, null, \"CropAndResize\", {\n            method: o,\n            extrapolationValue: a,\n            cropSize: r\n        });\n    }\n}), nf = Object.freeze({\n    resizeBilinear: Yh,\n    resizeNearestNeighbor: $h,\n    nonMaxSuppression: Qh,\n    nonMaxSuppressionAsync: Jh,\n    nonMaxSuppressionWithScore: Zh,\n    nonMaxSuppressionWithScoreAsync: tf,\n    cropAndResize: ef\n}), rf = function(t, e) {\n    return !(t > 0) || \"linear\" === e;\n}, of = function(t, e, n) {\n    if (null == n || \"linear\" === n) return t;\n    if (\"relu\" === n) return t.mul(e.step());\n    throw new Error(\"Gradient for activation \" + n + \" has not been implemented yet.\");\n}, af = function(t, e) {\n    var n = e, r = Br(t.shape, e.shape);\n    return r.length > 0 && (n = n.sum(r)), n.reshape(t.shape);\n}, sf = function(t, e, n) {\n    if (\"linear\" === e) return t;\n    if (\"relu\" === e) return ah(t);\n    if (\"elu\" === e) return nh(t);\n    if (\"relu6\" === e) return ih(t);\n    if (\"prelu\" === e) return oh(t, n);\n    throw new Error(\"Unknown fused activation \" + e + \".\");\n};\nvar uf = An({\n    fusedMatMul_: function(t) {\n        var e, n = t.a, r = t.b, o = t.transposeA, a = void 0 !== o && o, i = t.transposeB, s = void 0 !== i && i, u = t.bias, c = t.activation, l = void 0 === c ? \"linear\" : c, h = t.preluActivationWeights;\n        if (!1 === rf(Lt.state.gradientDepth, l)) {\n            var f = El(n, r, a, s);\n            return null != u && (f = Or(f, u)), sf(f, l, h);\n        }\n        var d = gn(n, \"a\", \"fused matMul\"), p = gn(r, \"b\", \"fused matMul\");\n        e = Nt(d, p), d = e[0], p = e[1];\n        var v = a ? d.shape[d.rank - 2] : d.shape[d.rank - 1], g = s ? p.shape[p.rank - 1] : p.shape[p.rank - 2], m = a ? d.shape[d.rank - 1] : d.shape[d.rank - 2], y = s ? p.shape[p.rank - 2] : p.shape[p.rank - 1], x = d.shape.slice(0, -2), b = p.shape.slice(0, -2), w = k(x), E = k(b);\n        C(d.rank >= 2 && p.rank >= 2 && d.rank === p.rank, function() {\n            return \"Error in fused matMul: inputs must have the same rank of at least 2, got ranks \" + d.rank + \" and \" + p.rank + \".\";\n        }), C(S(x, b), function() {\n            return \"Error in fused matMul: outer dimensions (\" + x + \") and (\" + b + \") of Tensors with shapes \" + d.shape + \" and \" + p.shape + \" must match.\";\n        }), C(v === g, function() {\n            return \"Error in fused matMul: inner shapes (\" + v + \") and (\" + g + \") of Tensors with shapes \" + d.shape + \" and \" + p.shape + \" and transposeA=\" + a + \" and transposeB=\" + s + \" must match.\";\n        });\n        var R, I, A = d.shape.slice(0, -2).concat([\n            m,\n            y\n        ]), T = a ? d.as3D(w, v, m) : d.as3D(w, m, v), D = s ? p.as3D(E, y, g) : p.as3D(E, g, y);\n        null != u && Pr(A, (R = Nt(R = gn(u, \"bias\", \"fused matMul\"), d)[0]).shape), null != h && (I = gn(h, \"prelu weights\", \"fused matMul\"));\n        var N = {\n            a: T,\n            b: D\n        };\n        null != u && (N.bias = R), null != h && (N.preluActivationWeights = I);\n        var F = [\n            T,\n            D\n        ];\n        return Lt.runKernelFunc(function(t, e) {\n            var n = t.fusedBatchMatMul({\n                a: T,\n                b: D,\n                transposeA: a,\n                transposeB: s,\n                bias: R,\n                activation: l,\n                preluActivationWeights: I\n            });\n            return e([\n                T,\n                D,\n                n\n            ]), n;\n        }, N, function(t, e) {\n            var n = e[0], r = e[1], o = e[2], i = of(t, o, l), c = {};\n            return null != u && (c = {\n                bias: function() {\n                    return af(R, i);\n                }\n            }), a || s ? !a && s ? Object.assign({\n                a: function() {\n                    return i.matMul(r, !1, !1);\n                },\n                b: function() {\n                    return i.matMul(n, !0, !1);\n                }\n            }, c) : a && !s ? Object.assign({\n                a: function() {\n                    return r.matMul(i, !1, !0);\n                },\n                b: function() {\n                    return n.matMul(i, !1, !1);\n                }\n            }, c) : Object.assign({\n                a: function() {\n                    return r.matMul(i, !0, !0);\n                },\n                b: function() {\n                    return i.matMul(n, !0, !0);\n                }\n            }, c) : Object.assign({\n                a: function() {\n                    return i.matMul(r, !1, !0);\n                },\n                b: function() {\n                    return n.matMul(i, !0, !1);\n                }\n            }, c);\n        }, \"_FusedMatMul\", {\n            transposeA: a,\n            transposeB: s,\n            activation: l\n        }, F, [\n            !0\n        ]).reshape(A);\n    }\n}), cf = An({\n    fusedConv2d_: function(t) {\n        var e = t.x, n = t.filter, r = t.strides, o = t.pad, a = t.dataFormat, i = void 0 === a ? \"NHWC\" : a, s = t.dilations, u = void 0 === s ? [\n            1,\n            1\n        ] : s, c = t.dimRoundingMode, l = t.bias, h = t.activation, f = void 0 === h ? \"linear\" : h, d = t.preluActivationWeights;\n        if (f = f || \"linear\", !1 === rf(Lt.state.gradientDepth, f)) {\n            var p = dl(e, n, r, o, i, u, c);\n            return null != l && (p = Or(p, l)), sf(p, f, d);\n        }\n        var v = gn(e, \"x\", \"conv2d\"), g = gn(n, \"filter\", \"conv2d\"), m = v, y = !1;\n        3 === v.rank && (y = !0, m = v.as4D(1, v.shape[0], v.shape[1], v.shape[2])), C(4 === m.rank, function() {\n            return \"Error in fused conv2d: input must be rank 4, but got rank \" + m.rank + \".\";\n        }), C(4 === g.rank, function() {\n            return \"Error in fused conv2d: filter must be rank 4, but got rank \" + g.rank + \".\";\n        }), null != c && C(A(o), function() {\n            return \"Error in fused conv2d: pad must be an integer when using, dimRoundingMode \" + c + \" but got pad \" + o + \".\";\n        }), C(m.shape[3] === g.shape[2], function() {\n            return \"Error in conv2d: depth of input (\" + m.shape[3] + \") must match input depth for filter \" + g.shape[2] + \".\";\n        }), C(Ca(r, u), function() {\n            return \"Error in conv2D: Either strides or dilations must be 1. Got strides \" + r + \" and dilations '\" + u + \"'\";\n        }), C(\"NHWC\" === i, function() {\n            return \"Error in conv2d: got dataFormat of \" + i + \" but only NHWC is currently supported.\";\n        });\n        var x, b, w = pa(m.shape, g.shape, r, u, o, c);\n        null != l && (x = Nt(x = gn(l, \"bias\", \"fused conv2d\"), v)[0], Pr(w.outShape, x.shape)), null != d && (b = gn(d, \"prelu weights\", \"fused conv2d\"));\n        var E = {\n            x: m,\n            filter: g\n        };\n        null != l && (E.bias = x), null != d && (E.preluActivationWeights = b);\n        var R = [\n            g,\n            m\n        ], I = Lt.runKernelFunc(function(t, e) {\n            var n = t.fusedConv2d({\n                input: m,\n                filter: g,\n                convInfo: w,\n                bias: x,\n                activation: f,\n                preluActivationWeights: b\n            });\n            return e([\n                g,\n                m,\n                n\n            ]), n;\n        }, E, function(t, e) {\n            var n = e, a = n[0], i = n[1], s = n[2], c = of(t, s, f);\n            C(wa(u), function() {\n                return \"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '\" + u + \"'\";\n            });\n            var h = {};\n            return null != l && (h = {\n                bias: function() {\n                    return af(x, c);\n                }\n            }), Object.assign({\n                x: function() {\n                    return gl(i.shape, c, a, r, o);\n                },\n                filter: function() {\n                    return vl(i, c, a.shape, r, o);\n                }\n            }, h);\n        }, \"FusedConv2D\", {\n            convInfo: w,\n            activation: f\n        }, R, [\n            !0\n        ]);\n        return y ? I.as3D(I.shape[1], I.shape[2], I.shape[3]) : I;\n    }\n}), lf = An({\n    fusedDepthwiseConv2d_: function(t) {\n        var e = t.x, n = t.filter, r = t.strides, o = t.pad, a = t.dataFormat, i = void 0 === a ? \"NHWC\" : a, s = t.dilations, u = void 0 === s ? [\n            1,\n            1\n        ] : s, c = t.dimRoundingMode, l = t.bias, h = t.activation, f = void 0 === h ? \"linear\" : h, d = t.preluActivationWeights;\n        if (!1 === rf(Lt.state.gradientDepth, f)) {\n            var p = ml(e, n, r, o, i, u, c);\n            return null != l && (p = Or(p, l)), sf(p, f, d);\n        }\n        var v = gn(e, \"x\", \"depthwiseConv2d\"), g = gn(n, \"filter\", \"depthwiseConv2d\"), m = v, y = !1;\n        3 === v.rank && (y = !0, m = v.as4D(1, v.shape[0], v.shape[1], v.shape[2])), C(4 === m.rank, function() {\n            return \"Error in fused depthwiseConv2d: input must be rank 4, but got rank \" + m.rank + \".\";\n        }), C(4 === g.rank, function() {\n            return \"Error in fused depthwiseConv2d: filter must be rank 4, but got rank \" + g.rank + \".\";\n        }), C(m.shape[3] === g.shape[2], function() {\n            return \"Error in fused depthwiseConv2d: number of input channels (\" + m.shape[3] + \") must match the inChannels dimension in filter \" + g.shape[2] + \".\";\n        }), null == u && (u = [\n            1,\n            1\n        ]), C(Ca(r, u), function() {\n            return \"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides \" + r + \" and dilations '\" + u + \"'\";\n        }), null != c && C(A(o), function() {\n            return \"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode \" + c + \" but got pad \" + o + \".\";\n        });\n        var x, b, w = pa(m.shape, g.shape, r, u, o, c, !0);\n        null != l && (x = Nt(x = gn(l, \"bias\", \"fused conv2d\"), v)[0], Pr(w.outShape, x.shape)), null != d && (b = gn(d, \"prelu weights\", \"fused depthwiseConv2d\"));\n        var E = {\n            x: m,\n            filter: g\n        };\n        null != l && (E.bias = x), null != d && (E.preluActivationWeights = b);\n        var R = [\n            g,\n            m\n        ], I = Lt.runKernelFunc(function(t, e) {\n            var n = t.fusedDepthwiseConv2D({\n                input: m,\n                filter: g,\n                convInfo: w,\n                bias: x,\n                activation: f,\n                preluActivationWeights: b\n            });\n            return e([\n                g,\n                m,\n                n\n            ]), n;\n        }, E, function(t, e) {\n            C(wa(u), function() {\n                return \"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '\" + u + \"'\";\n            });\n            var n = e[0], r = e[1], o = e[2], a = of(t, o, f), i = {};\n            return null != l && (i = {\n                bias: function() {\n                    return af(x, a);\n                }\n            }), Object.assign({\n                x: function() {\n                    return yl(r.shape, a, n, w);\n                },\n                filter: function() {\n                    return xl(r, a, n.shape, w);\n                }\n            }, i);\n        }, \"FusedDepthwiseConv2D\", {\n            convInfo: w,\n            activation: f\n        }, R, [\n            !0\n        ]);\n        return y ? I.as3D(I.shape[1], I.shape[2], I.shape[3]) : I;\n    }\n}), hf = Object.freeze({\n    matMul: uf,\n    conv2d: cf,\n    depthwiseConv2d: lf\n}), ff = Object.freeze({\n    image: nf,\n    linalg: jh,\n    losses: zh,\n    spectral: bh,\n    fused: hf,\n    signal: Dh,\n    add: Or,\n    addN: $u,\n    batchNorm: nc,\n    batchNormalization: ec,\n    batchNorm2d: ac,\n    batchNormalization2d: oc,\n    batchNorm3d: uc,\n    batchNormalization3d: sc,\n    batchNorm4d: hc,\n    batchNormalization4d: lc,\n    broadcastTo: fc,\n    clone: dc,\n    div: Bo,\n    divNoNan: bc,\n    eye: Cc,\n    multinomial: Ec,\n    oneHot: Rc,\n    pad: Ic,\n    pad1d: kc,\n    pad2d: Sc,\n    pad3d: Ac,\n    pad4d: Tc,\n    rand: Dc,\n    randomGamma: Uc,\n    randomNormal: Vc,\n    randomUniform: zc,\n    square: Gc,\n    squaredDifference: Hc,\n    tile: wc,\n    truncatedNormal: qc,\n    conv1d: fl,\n    conv2d: dl,\n    conv3d: pl,\n    depthwiseConv2d: ml,\n    separableConv2d: bl,\n    conv2dTranspose: wl,\n    conv3dTranspose: Cl,\n    op: An,\n    booleanMaskAsync: ul,\n    complex: Tn,\n    real: Dn,\n    imag: Nn,\n    concat: Yn,\n    concat1d: $n,\n    concat2d: Qn,\n    concat3d: Jn,\n    concat4d: Zn,\n    split: tr,\n    matMul: El,\n    dot: Rl,\n    outerProduct: Il,\n    reverse: kl,\n    reverse1d: Sl,\n    reverse2d: Al,\n    reverse3d: Tl,\n    reverse4d: Dl,\n    maxPool: _l,\n    avgPool: Ol,\n    pool: Ml,\n    maxPool3d: Bl,\n    avgPool3d: Pl,\n    maxPoolWithArgmax: Ll,\n    slice: Wl,\n    slice1d: Ul,\n    slice2d: Vl,\n    slice3d: zl,\n    slice4d: Gl,\n    abs: Lr,\n    acos: Wr,\n    acosh: Ur,\n    asin: Vr,\n    asinh: zr,\n    atan: Gr,\n    atanh: Hr,\n    ceil: qr,\n    clipByValue: Kr,\n    cos: jr,\n    cosh: Xr,\n    erf: Yr,\n    exp: $r,\n    expm1: Qr,\n    floor: Jr,\n    log: Zr,\n    log1p: to,\n    logSigmoid: eo,\n    neg: no,\n    reciprocal: ro,\n    round: oo,\n    rsqrt: ao,\n    sigmoid: io,\n    sign: so,\n    isNaN: uo,\n    isInf: co,\n    isFinite: lo,\n    sin: ho,\n    sinh: fo,\n    softplus: po,\n    sqrt: vo,\n    step: go,\n    tan: mo,\n    tanh: yo,\n    all: ql,\n    any: Kl,\n    argMax: jl,\n    argMin: Xl,\n    logSumExp: Yl,\n    max: $l,\n    mean: Ql,\n    min: Jl,\n    moments: Zl,\n    sum: th,\n    prod: eh,\n    equal: Kc,\n    equalStrict: jc,\n    greater: Xc,\n    greaterEqual: Yc,\n    greaterEqualStrict: $c,\n    greaterStrict: Qc,\n    less: Jc,\n    lessEqual: Zc,\n    lessEqualStrict: tl,\n    lessStrict: el,\n    notEqual: nl,\n    notEqualStrict: rl,\n    addStrict: xo,\n    atan2: bo,\n    divStrict: wo,\n    floorDiv: Co,\n    maximum: Eo,\n    maximumStrict: Ro,\n    minimum: Io,\n    minimumStrict: ko,\n    mod: So,\n    modStrict: Ao,\n    mul: To,\n    mulStrict: Do,\n    pow: No,\n    powStrict: Fo,\n    squaredDifferenceStrict: _o,\n    sub: Oo,\n    subStrict: Mo,\n    elu: nh,\n    leakyRelu: rh,\n    prelu: oh,\n    relu: ah,\n    relu6: ih,\n    selu: sh,\n    logicalAnd: pc,\n    logicalNot: vc,\n    logicalOr: gc,\n    logicalXor: mc,\n    where: yc,\n    whereAsync: xc,\n    buffer: er,\n    print: nr,\n    batchToSpaceND: rr,\n    cast: or,\n    cumsum: ar,\n    depthToSpace: ir,\n    expandDims: sr,\n    reshape: ur,\n    spaceToBatchND: cr,\n    squeeze: lr,\n    stack: hr,\n    unstack: fr,\n    setdiff1dAsync: dr,\n    fill: Hn,\n    linspace: qn,\n    ones: zn,\n    range: Kn,\n    scalar: On,\n    tensor: Fn,\n    tensor1d: Mn,\n    tensor2d: Bn,\n    tensor3d: Pn,\n    tensor4d: Ln,\n    tensor5d: Wn,\n    tensor6d: Un,\n    variable: Vn,\n    zeros: Gn,\n    onesLike: jn,\n    zerosLike: Xn,\n    transpose: ua,\n    softmax: ia,\n    logSoftmax: sa,\n    localResponseNormalization: uh,\n    norm: ch,\n    gather: il,\n    unsortedSegmentSum: sl,\n    basicLSTMCell: lh,\n    multiRNNCell: hh,\n    movingAverage: fh,\n    stridedSlice: dh,\n    topk: ph,\n    scatterND: vh,\n    fft: gh,\n    ifft: mh,\n    rfft: yh,\n    irfft: xh,\n    sparseToDense: wh,\n    gatherND: Ch,\n    diag: Eh,\n    dropout: Rh,\n    hannWindow: kh,\n    hammingWindow: Sh,\n    frame: Ah,\n    stft: Th,\n    inTopKAsync: Fh\n});\nfunction df(t, e) {\n    Array.isArray(t) || (t = [\n        t\n    ]), t.forEach(function(t) {\n        null != t && C(\"complex64\" !== t.dtype, function() {\n            return e + \" does not support complex64 tensors.\";\n        });\n    });\n}\nfunction pf(t, e, n, r, o, a) {\n    for(var i = o.strideHeight, s = o.strideWidth, u = o.dilationHeight, c = o.dilationWidth, l = o.effectiveFilterHeight, h = o.effectiveFilterWidth, f = o.padInfo.top, d = o.padInfo.left, p = \"max\" === a ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, v = er(o.outShape, n), g = v.values, m = o.outShape[1] * o.outShape[2] * o.outShape[3], y = o.outShape[2] * o.outShape[3], x = o.outShape[3], b = 0; b < o.batchSize; ++b)for(var w = b * m, C = b * r[0], E = 0; E < o.inChannels; ++E)for(var R = 0; R < o.outHeight; ++R)for(var I = R * i - f, k = Math.max(0, I), S = Math.min(o.inHeight, l + I), A = w + R * y, T = 0; T < o.outWidth; ++T){\n        for(var D = T * s - d, N = Math.max(0, D), F = Math.min(o.inWidth, h + D), _ = p, O = 0, M = 0, B = k; B < S; B += u){\n            for(var P = C + B * r[1], L = N; L < F; L += c){\n                var W = t[P + L * r[2] + E];\n                \"max\" === a && W > _ ? _ = W : \"avg\" === a && (O += W, M++);\n            }\n            if (isNaN(_)) break;\n        }\n        g[A + T * x + E] = \"avg\" === a ? O / M : _;\n    }\n    return v;\n}\nfunction vf(t, e, n, r, o, a) {\n    void 0 === o && (o = !1), void 0 === a && (a = !1);\n    for(var i = er(r.outShape, \"int32\"), s = r.strideHeight, u = r.strideWidth, c = r.dilationHeight, l = r.dilationWidth, h = r.effectiveFilterHeight, f = r.effectiveFilterWidth, d = r.padInfo.top, p = r.padInfo.left, v = er(e, n, t), g = 0; g < r.batchSize; ++g)for(var m = 0; m < r.inChannels; ++m)for(var y = 0; y < r.outHeight; ++y){\n        for(var x = y * s - d, b = x; b < 0;)b += c;\n        for(var w = Math.min(r.inHeight, h + x), C = 0; C < r.outWidth; ++C){\n            for(var E = C * u - p, R = E; R < 0;)R += l;\n            for(var I = Math.min(r.inWidth, f + E), k = Number.NEGATIVE_INFINITY, S = -1, A = b; A < w; A += c)for(var T = A - x, D = R; D < I; D += l){\n                var N = D - E, F = v.get(g, A, D, m);\n                F > k && (k = F, S = o ? a ? ((g * r.inHeight + A) * r.inWidth + D) * r.inChannels + m : (A * r.inWidth + D) * r.inChannels + m : T * f + N);\n            }\n            i.set(S, g, y, C, m);\n        }\n    }\n    return i;\n}\nfunction gf(t, e, n, r) {\n    if (\"linear\" === n) return t.linear(e);\n    if (\"relu\" === n) return t.relu(e);\n    if (\"elu\" === n) return t.elu(e);\n    if (\"relu6\" === n) return t.relu6(e);\n    if (\"prelu\" === n) return t.prelu(e, r);\n    throw new Error(\"Activation \" + n + \" has not been implemented for the CPU backend.\");\n}\nvar mf = function(t) {\n    function o() {\n        var e = t.call(this) || this;\n        return e.blockSize = 48, e.firstUse = !0, e.data = new ca(e, Lt), e;\n    }\n    return e(o, t), o.prototype.write = function(t, e, n) {\n        this.firstUse && (this.firstUse = !1, i().get(\"IS_NODE\") && dn(\"\\n============================\\nHi there \\uD83D\\uDC4B. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\\n============================\"));\n        var r = {};\n        return this.data.set(r, {\n            values: t,\n            dtype: n\n        }), r;\n    }, o.prototype.move = function(t, e, n, r) {\n        this.data.set(t, {\n            values: e,\n            dtype: r\n        });\n    }, o.prototype.numDataIds = function() {\n        return this.data.numDataIds();\n    }, o.prototype.read = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                return [\n                    2,\n                    this.readSync(t)\n                ];\n            });\n        });\n    }, o.prototype.readSync = function(t) {\n        var e = this.data.get(t), n = e.dtype, r = e.complexTensors;\n        return \"complex64\" === n ? Aa(this.readSync(r.real.dataId), this.readSync(r.imag.dataId)) : this.data.get(t).values;\n    }, o.prototype.bufferSync = function(t) {\n        var e = this.readSync(t.dataId), n = e;\n        if (\"string\" === t.dtype) try {\n            n = e.map(function(t) {\n                return ot(t);\n            });\n        } catch (t) {\n            throw new Error(\"Failed to decode encoded string bytes into utf-8\");\n        }\n        return er(t.shape, t.dtype, n);\n    }, o.prototype.makeOutput = function(t, e, n) {\n        var r = this.write(t, e, n);\n        return Lt.makeTensorFromDataId(r, e, n, this);\n    }, o.prototype.disposeData = function(t) {\n        if (this.data.has(t)) {\n            var e = this.data.get(t).complexTensors;\n            null != e && (e.real.dispose(), e.imag.dispose()), this.data.delete(t);\n        }\n    }, o.prototype.time = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                return e = et(), t(), [\n                    2,\n                    {\n                        kernelMs: et() - e\n                    }\n                ];\n            });\n        });\n    }, o.prototype.memory = function() {\n        return {\n            unreliable: !0,\n            reasons: [\n                \"The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.\"\n            ]\n        };\n    }, o.prototype.complex = function(t, e) {\n        var n = this.makeOutput(null, t.shape, \"complex64\");\n        return this.data.get(n.dataId).complexTensors = {\n            real: Lt.keep(t.clone()),\n            imag: Lt.keep(e.clone())\n        }, n;\n    }, o.prototype.real = function(t) {\n        return this.data.get(t.dataId).complexTensors.real.clone();\n    }, o.prototype.imag = function(t) {\n        return this.data.get(t.dataId).complexTensors.imag.clone();\n    }, o.prototype.slice = function(t, e, n) {\n        if (df(t, \"slice\"), $o(t.shape, e, n)) {\n            var r = Qo(e, t.strides), o = k(n);\n            return Fn(this.readSync(t.dataId).subarray(r, r + o), n, t.dtype);\n        }\n        for(var a = er(n, t.dtype), i = this.bufferSync(t), s = 0; s < a.size; ++s){\n            var u = a.indexToLoc(s).map(function(t, n) {\n                return t + e[n];\n            });\n            a.values[s] = i.get.apply(i, u);\n        }\n        return a.toTensor();\n    }, o.prototype.stridedSlice = function(t, e, n, r) {\n        df(t, \"stridedSlice\");\n        var o = jo(e, n, r);\n        if (o.some(function(t) {\n            return 0 === t;\n        })) return Fn([], o);\n        for(var a = er(o, t.dtype), i = this.bufferSync(t), s = 0; s < a.size; s++){\n            for(var u = a.indexToLoc(s), c = new Array(u.length), l = 0; l < c.length; l++)c[l] = u[l] * r[l] + e[l];\n            a.set.apply(a, [\n                i.get.apply(i, c)\n            ].concat(u));\n        }\n        return a.toTensor();\n    }, o.prototype.diag = function(t) {\n        for(var e = this.readSync(t.dataId), n = er([\n            t.size,\n            t.size\n        ], t.dtype), r = n.values, o = 0; o < e.length; o++)r[o * t.size + o] = e[o];\n        return n.toTensor();\n    }, o.prototype.unstack = function(t, e) {\n        for(var n = t.shape[e], r = new Array(t.rank - 1), o = 0, a = 0; a < t.rank; a++)a !== e && (r[o++] = t.shape[a]);\n        var i = new Array(t.rank).fill(0), s = t.shape.slice();\n        s[e] = 1;\n        var u = new Array(n);\n        for(a = 0; a < u.length; a++)i[e] = a, u[a] = this.slice(t, i, s).reshape(r);\n        return u;\n    }, o.prototype.reverse = function(t, e) {\n        df(t, \"reverse\");\n        for(var n = er(t.shape, t.dtype), r = this.bufferSync(t), o = function(o) {\n            var a = n.indexToLoc(o), i = a.slice();\n            e.forEach(function(e) {\n                return i[e] = t.shape[e] - 1 - i[e];\n            }), n.set.apply(n, [\n                r.get.apply(r, i)\n            ].concat(a));\n        }, a = 0; a < n.size; a++)o(a);\n        return n.toTensor();\n    }, o.prototype.concat = function(t, e) {\n        var n = this;\n        if (\"complex64\" === t[0].dtype) {\n            var r = t.map(function(t) {\n                return Dn(t);\n            }), o = t.map(function(t) {\n                return Nn(t);\n            });\n            return Tn(this.concat(r, e), this.concat(o, e));\n        }\n        var a = t.map(function(t) {\n            var n = k(t.shape.slice(e));\n            return t.as2D(-1, n);\n        }), i = Sn(a.map(function(t) {\n            return t.shape;\n        }), 1), s = er(i, t[0].dtype).values;\n        if (1 === a[0].shape[0]) {\n            var u = 0;\n            a.forEach(function(t) {\n                s.set(n.readSync(t.dataId), u), u += t.size;\n            });\n        } else {\n            var c = 0;\n            a.forEach(function(t) {\n                for(var e = n.readSync(t.dataId), r = 0, o = 0; o < t.shape[0]; ++o)for(var a = o * i[1] + c, u = 0; u < t.shape[1]; ++u)s[a + u] = e[r++];\n                c += t.shape[1];\n            });\n        }\n        var l = Sn(t.map(function(t) {\n            return t.shape;\n        }), e);\n        return Fn(s, l, t[0].dtype);\n    }, o.prototype.neg = function(t) {\n        return df(t, \"neg\"), this.multiply(On(-1), t);\n    }, o.prototype.add = function(t, e) {\n        return \"complex64\" === t.dtype || \"complex64\" === e.dtype ? this.broadcastedBinaryComplexOp(t.cast(\"complex64\"), e.cast(\"complex64\"), function(t, e, n, r) {\n            return {\n                real: t + n,\n                imag: e + r\n            };\n        }) : this.broadcastedBinaryOp(t, e, Tt(t.dtype, e.dtype), function(t, e) {\n            return t + e;\n        });\n    }, o.prototype.addN = function(t) {\n        var e = this;\n        df(t, \"addN\");\n        for(var n = t.map(function(t) {\n            return e.readSync(t.dataId);\n        }), r = er(t[0].shape, t[0].dtype), o = r.values, a = 0; a < t.length; a++)for(var i = n[a], s = 0; s < o.length; s++)o[s] += i[s];\n        return r.toTensor();\n    }, o.prototype.softmax = function(t, e) {\n        var n = O([\n            e\n        ], t.shape), r = this.max(t, n), o = wn(r.shape, n), a = this.subtract(t, r.reshape(o)), i = this.exp(a), s = this.sum(i, n).reshape(o);\n        return Bo(i, s);\n    }, o.prototype.subtract = function(t, e) {\n        return \"complex64\" === t.dtype || \"complex64\" === e.dtype ? this.broadcastedBinaryComplexOp(t.cast(\"complex64\"), e.cast(\"complex64\"), function(t, e, n, r) {\n            return {\n                real: t - n,\n                imag: e - r\n            };\n        }) : this.broadcastedBinaryOp(t, e, Tt(t.dtype, e.dtype), function(t, e) {\n            return t - e;\n        });\n    }, o.prototype.pow = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"pow\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return Math.pow(t, e);\n        });\n    }, o.prototype.batchMatMul = function(t, e, n, r) {\n        df([\n            t,\n            e\n        ], \"matMul\");\n        for(var o = n ? t.shape[1] : t.shape[2], a = n ? t.shape[2] : t.shape[1], i = r ? e.shape[1] : e.shape[2], s = t.shape[0], u = this.readSync(t.dataId), c = this.readSync(e.dataId), l = n ? [\n            t.strides[0],\n            1,\n            t.strides[1]\n        ] : [\n            t.strides[0],\n            t.strides[1],\n            1\n        ], h = l[0], f = l[1], d = l[2], p = r ? [\n            1,\n            e.strides[1],\n            e.strides[0]\n        ] : [\n            e.strides[1],\n            1,\n            e.strides[0]\n        ], v = p[0], g = p[1], m = p[2], y = a * i, x = er([\n            s,\n            a,\n            i\n        ], t.dtype), b = x.values, w = this.blockSize, C = 0; C < s; C++)for(var E = 0; E < a; E += w)for(var R = 0; R < i; R += w)for(var I = 0; I < o; I += w)for(var k = Math.min(E + w, a), S = Math.min(R + w, i), A = Math.min(I + w, o), T = E; T < k; T++)for(var D = R; D < S; D++){\n            for(var N = 0, F = I; F < A; F++)N += u[C * h + T * f + F * d] * c[F * v + D * g + C * m];\n            b[C * y + (T * i + D)] += N;\n        }\n        return x.toTensor();\n    }, o.prototype.fusedBatchMatMul = function(t) {\n        var e = t.a, n = t.b, r = t.transposeA, o = t.transposeB, a = t.bias, i = t.activation, s = t.preluActivationWeights, u = this.batchMatMul(e, n, r, o);\n        return a && (u = this.add(u, a)), i && (u = gf(this, u, i, s)), u;\n    }, o.prototype.multiply = function(t, e) {\n        return \"complex64\" === t.dtype || \"complex64\" === e.dtype ? this.broadcastedBinaryComplexOp(t.cast(\"complex64\"), e.cast(\"complex64\"), function(t, e, n, r) {\n            return {\n                real: t * n - e * r,\n                imag: t * r + e * n\n            };\n        }) : this.broadcastedBinaryOp(t, e, Tt(t.dtype, e.dtype), function(t, e) {\n            return t * e;\n        });\n    }, o.prototype.floorDiv = function(t, e) {\n        df([\n            t,\n            e\n        ], \"floorDiv\");\n        return this.broadcastedBinaryOp(t, e, \"int32\", function(t, e) {\n            return Math.floor(t / e);\n        });\n    }, o.prototype.sum = function(t, e) {\n        df(t, \"sum\"), Cn(\"sum\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, Tt(t.dtype, \"int32\")), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = 0, f = 0; f < i; ++f)h += u[l + f];\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.prod = function(t, e) {\n        df(t, \"sum\");\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, Tt(t.dtype, \"int32\")), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = 1, f = 0; f < i; ++f)h *= u[l + f];\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.unsortedSegmentSum = function(t, e, n) {\n        df(t, \"unsortedSegmentSum\");\n        for(var r = [], o = t.rank - e.rank, a = 0; a < o; ++a)e = e.expandDims(a + 1);\n        for(a = 0; a < n; ++a){\n            var i = On(a, \"int32\"), s = Kc(i, e).asType(\"float32\").mul(t).sum(0);\n            r.push(s);\n        }\n        return hr(r);\n    }, o.prototype.argMin = function(t, e) {\n        df(t, \"argMin\");\n        var n = [\n            e\n        ];\n        Cn(\"argMin\", n, t.rank);\n        for(var r = bn(t.shape, n), o = r[0], a = r[1], i = Gn(o, \"int32\"), s = k(a), u = this.readSync(i.dataId), c = this.readSync(t.dataId), l = 0; l < u.length; ++l){\n            for(var h = l * s, f = c[h], d = 0, p = 0; p < s; ++p){\n                var v = c[h + p];\n                v < f && (f = v, d = p);\n            }\n            u[l] = d;\n        }\n        return i;\n    }, o.prototype.argMax = function(t, e) {\n        df(t, \"argMax\");\n        var n = [\n            e\n        ];\n        Cn(\"argMax\", n, t.rank);\n        for(var r = bn(t.shape, n), o = r[0], a = r[1], i = Gn(o, \"int32\"), s = k(a), u = this.readSync(i.dataId), c = this.readSync(t.dataId), l = 0; l < u.length; ++l){\n            for(var h = l * s, f = c[h], d = 0, p = 0; p < s; ++p){\n                var v = c[h + p];\n                v > f && (f = v, d = p);\n            }\n            u[l] = d;\n        }\n        return i;\n    }, o.prototype.cumsum = function(t, e, n, r) {\n        if (df(t, \"cumsum\"), e !== t.rank - 1) throw new Error(\"backend.cumsum in CPU expects an inner-most axis=\" + (t.rank - 1) + \" but got axis=\" + e);\n        for(var o = Tt(t.dtype, \"int32\"), a = Gn(t.shape, o), i = this.readSync(a.dataId), s = this.readSync(t.dataId), u = t.shape[t.rank - 1], c = r ? function(t, e) {\n            return t + u - e - 1;\n        } : function(t, e) {\n            return t + e;\n        }, l = 0; l < s.length; l += u)for(var h = 0; h < u; h++){\n            var f = c(l, h);\n            if (0 === h) i[f] = n ? 0 : s[f];\n            else {\n                var d = c(l, h - 1);\n                i[f] = n ? s[d] + i[d] : s[f] + i[d];\n            }\n        }\n        return a;\n    }, o.prototype.equal = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"equal\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t === e ? 1 : 0;\n        });\n    }, o.prototype.notEqual = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"notEqual\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t !== e ? 1 : 0;\n        });\n    }, o.prototype.less = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"less\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t < e ? 1 : 0;\n        });\n    }, o.prototype.lessEqual = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"lessEqual\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t <= e ? 1 : 0;\n        });\n    }, o.prototype.greater = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"greater\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t > e ? 1 : 0;\n        });\n    }, o.prototype.greaterEqual = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"greaterEqual\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t >= e ? 1 : 0;\n        });\n    }, o.prototype.logicalNot = function(t) {\n        df(t, \"logicalNot\");\n        for(var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r)n[r] = e[r] ? 0 : 1;\n        return this.makeOutput(n, t.shape, \"bool\");\n    }, o.prototype.logicalAnd = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"logicalAnd\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t && e;\n        });\n    }, o.prototype.logicalOr = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"logicalOr\"), this.broadcastedBinaryOp(t, e, \"bool\", function(t, e) {\n            return t || e;\n        });\n    }, o.prototype.select = function(t, e, n) {\n        df([\n            t,\n            e,\n            n\n        ], \"select\");\n        for(var r = this.readSync(t.dataId), o = this.readSync(e.dataId), a = this.readSync(n.dataId), i = Gn(e.shape, Tt(e.dtype, n.dtype)), s = this.readSync(i.dataId), u = 0, c = 0 === t.rank || t.rank > 1 || 1 === e.rank ? 1 : k(e.shape.slice(1)), l = 0; l < r.length; l++)for(var h = 0; h < c; h++)1 === r[l] ? s[u++] = o[l] : s[u++] = a[l];\n        return i;\n    }, o.prototype.where = function(t) {\n        df([\n            t\n        ], \"where\");\n        var e = this.readSync(t.dataId);\n        return Ga(t.shape, e);\n    }, o.prototype.topk = function(t, e, n) {\n        return df(t, \"topk\"), za(this.readSync(t.dataId), t.shape, t.dtype, e);\n    }, o.prototype.min = function(t, e) {\n        df(t, \"min\"), Cn(\"min\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, t.dtype), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = u[l], f = 0; f < i; ++f){\n                var d = u[l + f];\n                d < h && (h = d);\n            }\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.minimum = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"minimum\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return Math.min(t, e);\n        });\n    }, o.prototype.mod = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"mod\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            var n = t % e;\n            return t < 0 && e < 0 || t >= 0 && e >= 0 ? n : (n + e) % e;\n        });\n    }, o.prototype.max = function(t, e) {\n        df(t, \"max\"), Cn(\"max\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, t.dtype), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = u[l], f = 0; f < i; ++f){\n                var d = u[l + f];\n                d > h && (h = d);\n            }\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.maximum = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"maximum\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return Math.max(t, e);\n        });\n    }, o.prototype.all = function(t, e) {\n        df(t, \"all\"), Cn(\"all\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, t.dtype), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = u[l], f = 0; f < i; ++f){\n                var d = u[l + f];\n                h = h && d;\n            }\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.any = function(t, e) {\n        df(t, \"any\"), Cn(\"any\", e, t.rank);\n        for(var n = bn(t.shape, e), r = n[0], o = n[1], a = Gn(r, t.dtype), i = k(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), c = 0; c < s.length; ++c){\n            for(var l = c * i, h = u[l], f = 0; f < i; ++f){\n                var d = u[l + f];\n                h = h || d;\n            }\n            s[c] = h;\n        }\n        return a;\n    }, o.prototype.squaredDifference = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"squaredDifference\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            var n = t - e;\n            return n * n;\n        });\n    }, o.prototype.ceil = function(t) {\n        df(t, \"ceil\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = Math.ceil(e[r]);\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.floor = function(t) {\n        df(t, \"floor\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = Math.floor(e[r]);\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.sign = function(t) {\n        df(t, \"x\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)e[r] < 0 ? n[r] = -1 : e[r] > 0 ? n[r] = 1 : n[r] = 0;\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.isNaN = function(t) {\n        df(t, \"x\");\n        for(var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r)Number.isNaN(e[r]) && (n[r] = 1);\n        return this.makeOutput(n, t.shape, \"bool\");\n    }, o.prototype.isInf = function(t) {\n        df(t, \"x\");\n        for(var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r)Math.abs(e[r]) === 1 / 0 && (n[r] = 1);\n        return this.makeOutput(n, t.shape, \"bool\");\n    }, o.prototype.isFinite = function(t) {\n        df(t, \"x\");\n        for(var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r)Number.isFinite(e[r]) && (n[r] = 1);\n        return this.makeOutput(n, t.shape, \"bool\");\n    }, o.prototype.round = function(t) {\n        df(t, \"round\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = Math.floor(e[r]);\n            e[r] - o < .5 ? n[r] = Math.floor(e[r]) : e[r] - o > .5 ? n[r] = Math.ceil(e[r]) : n[r] = o % 2 == 0 ? o : o + 1;\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.exp = function(t) {\n        df(t, \"exp\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = Math.exp(e[r]);\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.expm1 = function(t) {\n        df(t, \"expm1\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = Math.expm1(e[r]);\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.log = function(t) {\n        df(t, \"log\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = e[r];\n            n[r] = Math.log(o);\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.log1p = function(t) {\n        df(t, \"log1p\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = e[r];\n            n[r] = Math.log1p(o);\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.sqrt = function(t) {\n        df(t, \"sqrt\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = e[r];\n            n[r] = Math.sqrt(o);\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.rsqrt = function(t) {\n        df(t, \"rsqrt\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r){\n            var o = e[r];\n            n[r] = 1 / Math.sqrt(o);\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.reciprocal = function(t) {\n        df(t, \"reciprocal\");\n        for(var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r)n[r] = 1 / e[r];\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.linear = function(t) {\n        return t;\n    }, o.prototype.relu = function(t) {\n        df(t, \"relu\");\n        for(var e = Gn(t.shape, t.dtype), n = this.readSync(e.dataId), r = this.readSync(t.dataId), o = 0; o < r.length; ++o)n[o] = Math.max(0, r[o]);\n        return e;\n    }, o.prototype.relu6 = function(t) {\n        df(t, \"relu\");\n        for(var e = Gn(t.shape, t.dtype), n = this.readSync(e.dataId), r = this.readSync(t.dataId), o = 0; o < r.length; ++o)n[o] = Math.min(Math.max(0, r[o]), 6);\n        return e;\n    }, o.prototype.prelu = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"prelu\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return t < 0 ? e * t : t;\n        });\n    }, o.prototype.elu = function(t) {\n        df(t, \"elu\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r){\n            var o = n[r];\n            e[r] = o >= 0 ? o : Math.exp(o) - 1;\n        }\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.eluDer = function(t, e) {\n        df([\n            t,\n            e\n        ], \"eluDer\");\n        for(var n = new Float32Array(e.size), r = this.readSync(e.dataId), o = this.readSync(t.dataId), a = 0; a < r.length; ++a){\n            var i = r[a];\n            n[a] = i >= 1 ? o[a] : o[a] * (i + 1);\n        }\n        return this.makeOutput(n, e.shape, \"float32\");\n    }, o.prototype.selu = function(t) {\n        df(t, \"selu\");\n        for(var e = su, n = uu, r = new Float32Array(t.size), o = this.readSync(t.dataId), a = 0; a < o.length; ++a){\n            var i = o[a];\n            r[a] = i >= 0 ? n * i : e * (Math.exp(i) - 1);\n        }\n        return this.makeOutput(r, t.shape, \"float32\");\n    }, o.prototype.clip = function(t, e, n) {\n        df(t, \"clip\");\n        for(var r = new Float32Array(t.size), o = this.readSync(t.dataId), a = 0; a < o.length; ++a){\n            var i = o[a];\n            r[a] = i > n ? n : i < e ? e : i;\n        }\n        return this.makeOutput(r, t.shape, \"float32\");\n    }, o.prototype.abs = function(t) {\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.abs(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.complexAbs = function(t) {\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < t.size; ++r){\n            var o = n[2 * r], a = n[2 * r + 1];\n            e[r] = Math.hypot(o, a);\n        }\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.int = function(t) {\n        df(t, \"int\");\n        for(var e = new Int32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = n[r];\n        return this.makeOutput(e, t.shape, \"int32\");\n    }, o.prototype.sigmoid = function(t) {\n        df(t, \"sigmoid\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = 1 / (1 + Math.exp(-n[r]));\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.softplus = function(t) {\n        df(t, \"softplus\");\n        for(var e = Math.log(1.1920928955078125e-7) + 2, n = new Float32Array(t.size), r = this.readSync(t.dataId), o = 0; o < r.length; ++o){\n            var a = r[o] > -e, i = r[o] < e, s = Math.exp(r[o]), u = void 0;\n            u = i ? s : a ? r[o] : Math.log(1 + s), n[o] = u;\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.sin = function(t) {\n        df(t, \"sin\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.sin(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.cos = function(t) {\n        df(t, \"cos\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.cos(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.tan = function(t) {\n        df(t, \"tan\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.tan(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.asin = function(t) {\n        df(t, \"asin\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.asin(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.acos = function(t) {\n        df(t, \"acos\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.acos(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.atan = function(t) {\n        df(t, \"atan\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.atan(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.atan2 = function(t, e) {\n        return df([\n            t,\n            e\n        ], \"atan2\"), this.broadcastedBinaryOp(t, e, t.dtype, function(t, e) {\n            return Math.atan2(t, e);\n        });\n    }, o.prototype.sinh = function(t) {\n        df(t, \"sinh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.sinh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.cosh = function(t) {\n        df(t, \"cosh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.cosh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.tanh = function(t) {\n        df(t, \"tanh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = T(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.asinh = function(t) {\n        df(t, \"asinh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.asinh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.acosh = function(t) {\n        df(t, \"acosh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.acosh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.atanh = function(t) {\n        df(t, \"atanh\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r)e[r] = Math.atanh(n[r]);\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.erf = function(t) {\n        df(t, \"erf\");\n        for(var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r){\n            var o = Math.sign(n[r]), a = Math.abs(n[r]), i = 1 / (1 + .3275911 * a);\n            e[r] = o * (1 - ((((1.061405429 * i - 1.453152027) * i + 1.421413741) * i - .284496736) * i + .254829592) * i * Math.exp(-a * a));\n        }\n        return this.makeOutput(e, t.shape, \"float32\");\n    }, o.prototype.step = function(t, e) {\n        void 0 === e && (e = 0), df(t, \"step\");\n        for(var n = new Float32Array(t.size), r = this.readSync(t.dataId), o = 0; o < r.length; ++o){\n            var a = r[o];\n            isNaN(a) ? n[o] = NaN : n[o] = a > 0 ? 1 : e;\n        }\n        return this.makeOutput(n, t.shape, \"float32\");\n    }, o.prototype.fusedConv2d = function(t) {\n        var e = t.input, n = t.filter, r = t.convInfo, o = t.bias, a = t.activation, i = t.preluActivationWeights, s = this.conv2d(e, n, r);\n        return o && (s = this.add(s, o)), a && (s = gf(this, s, a, i)), s;\n    }, o.prototype.conv2d = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"conv2d\");\n        for(var r = n.filterHeight, o = n.filterWidth, a = n.dilationHeight, i = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, c = \"channelsLast\" === n.dataFormat, l = er(n.outShape, t.dtype), h = t.strides[0], f = c ? t.strides[1] : t.strides[2], d = c ? t.strides[2] : 1, p = c ? 1 : t.strides[1], v = l.strides[0], g = c ? l.strides[1] : l.strides[2], m = c ? l.strides[2] : 1, y = c ? 1 : l.strides[1], x = this.readSync(t.dataId), b = this.readSync(e.dataId), w = l.values, C = 0; C < n.batchSize; ++C)for(var E = C * h, R = C * v, I = 0; I < n.outHeight; ++I)for(var k = R + I * g, S = I * n.strideHeight - u, A = 0; A < r; A++){\n            var T = S + A * a;\n            if (!(T < 0 || T >= n.inHeight)) for(var D = A * e.strides[0], N = E + T * f, F = 0; F < n.outWidth; ++F)for(var _ = k + F * m, O = F * n.strideWidth - s, M = 0; M < o; M++){\n                var B = O + M * i;\n                if (!(B < 0 || B >= n.inWidth)) for(var P = N + B * d, L = D + M * e.strides[1], W = 0; W < n.inChannels; ++W){\n                    for(var U = x[P + W * p], V = 0; V < n.outChannels; ++V)w[_ + V * y] += U * b[L + V];\n                    L += n.outChannels;\n                }\n            }\n        }\n        return l.toTensor();\n    }, o.prototype.conv3d = function(t, e, n) {\n        for(var r = n.filterDepth, o = n.filterHeight, a = n.filterWidth, i = n.dilationDepth, s = n.dilationHeight, u = n.dilationWidth, c = n.padInfo.front, l = n.padInfo.left, h = n.padInfo.top, f = er(n.outShape, t.dtype), d = this.readSync(t.dataId), p = this.readSync(e.dataId), v = f.values, g = 0; g < n.batchSize; ++g)for(var m = g * t.strides[0], y = g * f.strides[0], x = 0; x < n.outDepth; ++x)for(var b = y + x * f.strides[1], w = x * n.strideDepth - c, C = 0; C < r; C++){\n            var E = w + C * i;\n            if (!(E < 0 || E >= n.inDepth)) for(var R = C * e.strides[0], I = m + E * t.strides[1], k = 0; k < n.outHeight; ++k)for(var S = b + k * f.strides[2], A = k * n.strideHeight - h, T = 0; T < o; T++){\n                var D = A + T * s;\n                if (!(D < 0 || D >= n.inHeight)) for(var N = R + T * e.strides[1], F = I + D * t.strides[2], _ = 0; _ < n.outWidth; ++_)for(var O = S + _ * n.outChannels, M = _ * n.strideWidth - l, B = 0; B < a; B++){\n                    var P = M + B * u;\n                    if (!(P < 0 || P >= n.inWidth)) for(var L = N + B * e.strides[2], W = F + P * n.inChannels, U = L, V = 0; V < n.inChannels; ++V){\n                        for(var z = d[W + V], G = 0; G < n.outChannels; ++G)v[O + G] += z * p[U + G];\n                        U += n.outChannels;\n                    }\n                }\n            }\n        }\n        return f.toTensor();\n    }, o.prototype.conv2dDerInput = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"conv2dDerInput\");\n        for(var r = er(n.inShape, \"float32\"), o = r.values, a = this.readSync(t.dataId), i = this.readSync(e.dataId), s = e.strides, u = s[0], c = s[1], l = s[2], h = n.batchSize, f = n.filterHeight, d = n.filterWidth, p = n.inChannels, v = n.inHeight, g = n.inWidth, m = n.outChannels, y = n.outHeight, x = n.outWidth, b = n.strideHeight, w = n.strideWidth, C = n.dataFormat, E = f - 1 - n.padInfo.top, R = d - 1 - n.padInfo.left, I = \"channelsLast\" === C, k = r.strides[0], S = I ? r.strides[1] : r.strides[2], A = I ? r.strides[2] : 1, T = I ? 1 : r.strides[1], D = t.strides[0], N = I ? t.strides[1] : t.strides[2], F = I ? t.strides[2] : 1, _ = I ? 1 : t.strides[1], O = 0; O < h; ++O)for(var M = 0; M < p; ++M)for(var B = 0; B < v; ++B)for(var P = B - E, L = Math.max(0, Math.ceil(P / b)), W = Math.min(y, (f + P) / b), U = 0; U < g; ++U){\n            for(var V = U - R, z = Math.max(0, Math.ceil(V / w)), G = Math.min(x, (d + V) / w), H = 0, q = L; q < W; ++q)for(var K = q * b - P, j = z; j < G; ++j)for(var X = D * O + N * q + F * j, Y = u * (f - 1 - K) + c * (d - 1 - (j * w - V)) + l * M, $ = 0; $ < m; ++$){\n                H += a[X + _ * $] * i[Y + $];\n            }\n            o[k * O + S * B + A * U + T * M] = H;\n        }\n        return r.toTensor();\n    }, o.prototype.conv3dDerInput = function(t, e, n) {\n        for(var r = er(n.inShape, \"float32\"), o = r.values, a = r.strides, i = a[0], s = a[1], u = a[2], c = a[3], l = this.readSync(t.dataId), h = t.strides, f = h[0], d = h[1], p = h[2], v = h[3], g = this.readSync(e.dataId), m = e.strides, y = m[0], x = m[1], b = m[2], w = m[3], C = n.batchSize, E = n.filterDepth, R = n.filterHeight, I = n.filterWidth, k = n.inChannels, S = n.inDepth, A = n.inHeight, T = n.inWidth, D = n.outChannels, N = n.outDepth, F = n.outHeight, _ = n.outWidth, O = n.strideDepth, M = n.strideHeight, B = n.strideWidth, P = E - 1 - n.padInfo.front, L = R - 1 - n.padInfo.top, W = I - 1 - n.padInfo.left, U = 0; U < C; ++U)for(var V = 0; V < k; ++V)for(var z = 0; z < S; ++z)for(var G = z - P, H = Math.max(0, Math.ceil(G / O)), q = Math.min(N, (E + G) / O), K = 0; K < A; ++K)for(var j = K - L, X = Math.max(0, Math.ceil(j / M)), Y = Math.min(F, (R + j) / M), $ = 0; $ < T; ++$){\n            for(var Q = $ - W, J = Math.max(0, Math.ceil(Q / B)), Z = Math.min(_, (I + Q) / B), tt = 0, et = H; et < q; ++et)for(var nt = et * O - G, rt = X; rt < Y; ++rt)for(var ot = rt * M - j, at = J; at < Z; ++at)for(var it = f * U + d * et + p * rt + v * at, st = y * (E - 1 - nt) + x * (R - 1 - ot) + b * (I - 1 - (at * B - Q)) + w * V, ut = 0; ut < D; ++ut){\n                tt += l[it + ut] * g[st + ut];\n            }\n            o[i * U + s * z + u * K + c * $ + V] = tt;\n        }\n        return r.toTensor();\n    }, o.prototype.conv2dDerFilter = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"conv2dDerFilter\");\n        for(var r = n.strideHeight, o = n.strideWidth, a = n.filterHeight, i = n.filterWidth, s = \"channelsLast\" === n.dataFormat, u = er(n.filterShape, \"float32\"), c = n.padInfo.left, l = n.padInfo.top, h = this.bufferSync(t), f = this.bufferSync(e), d = 0; d < a; ++d)for(var p = Math.max(0, Math.ceil((l - d) / r)), v = Math.min(n.outHeight, (n.inHeight + l - d) / r), g = 0; g < i; ++g)for(var m = Math.max(0, Math.ceil((c - g) / o)), y = Math.min(n.outWidth, (n.inWidth + c - g) / o), x = 0; x < n.inChannels; ++x)for(var b = 0; b < n.outChannels; ++b){\n            for(var w = 0, C = 0; C < n.batchSize; ++C)for(var E = p; E < v; ++E)for(var R = d + E * r - l, I = m; I < y; ++I){\n                var k = g + I * o - c;\n                w += s ? h.get(C, R, k, x) * f.get(C, E, I, b) : h.get(C, x, R, k) * f.get(C, b, E, I);\n            }\n            u.set(w, d, g, x, b);\n        }\n        return u.toTensor();\n    }, o.prototype.conv3dDerFilter = function(t, e, n) {\n        for(var r = n.strideDepth, o = n.strideHeight, a = n.strideWidth, i = n.filterDepth, s = n.filterHeight, u = n.filterWidth, c = er(n.filterShape, \"float32\"), l = c.values, h = c.strides, f = h[0], d = h[1], p = h[2], v = h[3], g = this.readSync(e.dataId), m = e.strides, y = m[0], x = m[1], b = m[2], w = m[3], C = this.readSync(t.dataId), E = t.strides, R = E[0], I = E[1], k = E[2], S = E[3], A = n.padInfo.front, T = n.padInfo.left, D = n.padInfo.top, N = 0; N < i; ++N)for(var F = Math.max(0, Math.ceil((A - N) / r)), _ = Math.min(n.outDepth, (n.inDepth + A - N) / r), O = N * f, M = 0; M < s; ++M)for(var B = Math.max(0, Math.ceil((D - M) / o)), P = Math.min(n.outHeight, (n.inHeight + D - M) / o), L = M * d + O, W = 0; W < u; ++W)for(var U = Math.max(0, Math.ceil((T - W) / a)), V = Math.min(n.outWidth, (n.inWidth + T - W) / a), z = W * p + L, G = 0; G < n.inChannels; ++G)for(var H = G * v + z, q = 0; q < n.outChannels; ++q){\n            for(var K = 0, j = 0; j < n.batchSize; ++j)for(var X = j * R, Y = j * y, $ = F; $ < _; ++$)for(var Q = (N + $ * r - A) * I + X, J = $ * x + Y, Z = B; Z < P; ++Z)for(var tt = (M + Z * o - D) * k + Q, et = Z * b + J, nt = U; nt < V; ++nt){\n                var rt = nt * w + et;\n                K += C[(W + nt * a - T) * S + tt + G] * g[rt + q];\n            }\n            l[H + q] = K;\n        }\n        return c.toTensor();\n    }, o.prototype.fusedDepthwiseConv2D = function(t) {\n        var e = t.input, n = t.filter, r = t.convInfo, o = t.bias, a = t.activation, i = t.preluActivationWeights, s = this.depthwiseConv2D(e, n, r);\n        return o && (s = this.add(s, o)), a && (s = gf(this, s, a, i)), s;\n    }, o.prototype.depthwiseConv2D = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"depthwiseConv2D\");\n        for(var r = n.filterHeight, o = n.filterWidth, a = n.dilationHeight, i = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, c = n.outChannels / n.inChannels, l = er(n.outShape, t.dtype), h = this.readSync(t.dataId), f = this.readSync(e.dataId), d = l.values, p = 0; p < n.batchSize; ++p)for(var v = p * t.strides[0], g = p * l.strides[0], m = 0; m < n.outHeight; ++m)for(var y = g + m * l.strides[1], x = m * n.strideHeight - s, b = 0; b < r; ++b){\n            var w = x + b * a;\n            if (!(w < 0 || w >= n.inHeight)) for(var C = b * e.strides[0], E = v + w * t.strides[1], R = 0; R < n.outWidth; ++R)for(var I = y + R * l.strides[2], k = R * n.strideWidth - u, S = 0; S < o; ++S){\n                var A = k + S * i;\n                if (!(A < 0 || A >= n.inWidth)) for(var T = C + S * e.strides[1], D = E + A * n.inChannels, N = I, F = T, _ = 0; _ < n.inChannels; ++_){\n                    for(var O = h[D + _], M = 0; M < c; ++M)d[N + M] += O * f[F + M];\n                    N += c, F += c;\n                }\n            }\n        }\n        return l.toTensor();\n    }, o.prototype.depthwiseConv2DDerInput = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"depthwiseConv2DDerInput\");\n        for(var r = er(n.inShape, \"float32\"), o = r.values, a = r.strides, i = a[0], s = a[1], u = a[2], c = this.readSync(t.dataId), l = t.strides, h = l[0], f = l[1], d = l[2], p = this.readSync(e.dataId), v = e.strides, g = v[0], m = v[1], y = v[2], x = n.batchSize, b = n.filterHeight, w = n.filterWidth, C = n.inChannels, E = n.inHeight, R = n.inWidth, I = n.outChannels, k = n.outHeight, S = n.outWidth, A = n.strideHeight, T = n.strideWidth, D = b - 1 - n.padInfo.top, N = w - 1 - n.padInfo.left, F = I / C, _ = 0; _ < x; ++_)for(var O = 0; O < C; ++O)for(var M = 0; M < E; ++M)for(var B = M - D, P = Math.max(0, Math.ceil(B / A)), L = Math.min(k, (b + B) / A), W = 0; W < R; ++W){\n            for(var U = W - N, V = Math.max(0, Math.ceil(U / T)), z = Math.min(S, (w + U) / T), G = 0, H = P; H < L; ++H)for(var q = H * A - B, K = V; K < z; ++K)for(var j = h * _ + f * H + d * K, X = g * (b - 1 - q) + m * (w - 1 - (K * T - U)) + y * O, Y = 0; Y < F; ++Y){\n                G += c[j + (O * F + Y)] * p[X + Y];\n            }\n            o[i * _ + s * M + u * W + O] = G;\n        }\n        return r.toTensor();\n    }, o.prototype.depthwiseConv2DDerFilter = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"depthwiseConv2DDerFilter\");\n        for(var r = n.strideHeight, o = n.strideWidth, a = n.filterHeight, i = n.filterWidth, s = er(n.filterShape, \"float32\"), u = n.padInfo.left, c = n.padInfo.top, l = n.outChannels / n.inChannels, h = this.bufferSync(t), f = this.bufferSync(e), d = 0; d < a; ++d)for(var p = Math.max(0, Math.ceil((c - d) / r)), v = Math.min(n.outHeight, (n.inHeight + c - d) / r), g = 0; g < i; ++g)for(var m = Math.max(0, Math.ceil((u - g) / o)), y = Math.min(n.outWidth, (n.inWidth + u - g) / o), x = 0; x < n.outChannels; ++x){\n            for(var b = Math.trunc(x / l), w = x % l, C = 0, E = 0; E < n.batchSize; ++E)for(var R = p; R < v; ++R)for(var I = d + R * r - c, k = m; k < y; ++k){\n                var S = g + k * o - u;\n                C += h.get(E, I, S, b) * f.get(E, R, k, x);\n            }\n            s.set(C, d, g, b, w);\n        }\n        return s.toTensor();\n    }, o.prototype.tile = function(t, e) {\n        return df(t, \"tile\"), Va(this.bufferSync(t), e);\n    }, o.prototype.pad = function(t, e, n) {\n        df(t, \"pad\");\n        var r = e.map(function(e, n) {\n            return e[0] + t.shape[n] + e[1];\n        }), o = e.map(function(t) {\n            return t[0];\n        }), a = this.bufferSync(t), i = er(r, t.dtype);\n        0 !== n && i.values.fill(n);\n        for(var s = 0; s < t.size; s++){\n            var u = a.indexToLoc(s), c = u.map(function(t, e) {\n                return t + o[e];\n            });\n            i.set.apply(i, [\n                a.get.apply(a, u)\n            ].concat(c));\n        }\n        return i.toTensor();\n    }, o.prototype.gather = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"gather\");\n        var r = t.shape.slice(), o = this.readSync(e.dataId);\n        r[n] = o.length;\n        for(var a = er(r, t.dtype), i = this.bufferSync(t), s = 0; s < a.size; ++s){\n            var u = a.indexToLoc(s), c = u.slice();\n            c[n] = o[u[n]];\n            var l = i.locToIndex(c);\n            a.values[s] = i.values[l];\n        }\n        return a.toTensor();\n    }, o.prototype.batchToSpaceND = function(t, e, n) {\n        df([\n            t\n        ], \"batchToSpaceND\");\n        var r = e.reduce(function(t, e) {\n            return t * e;\n        }), o = pr(t.shape, e, r), a = vr(o.length, e.length), i = gr(t.shape, e, r), s = mr(n, e.length), u = yr(i, n, e.length);\n        return ua(t.reshape(o), a).reshape(i).slice(s, u);\n    }, o.prototype.spaceToBatchND = function(t, e, n) {\n        df([\n            t\n        ], \"spaceToBatchND\");\n        var r = e.reduce(function(t, e) {\n            return t * e;\n        }), o = [\n            [\n                0,\n                0\n            ]\n        ];\n        o.push.apply(o, n);\n        for(var a = 1 + e.length; a < t.shape.length; ++a)o.push([\n            0,\n            0\n        ]);\n        var i = t.pad(o), s = pr(i.shape, e, r, !1), u = vr(s.length, e.length, !1), c = gr(i.shape, e, r, !1);\n        return ua(i.reshape(s), u).reshape(c);\n    }, o.prototype.maxPool = function(t, e) {\n        return df(t, \"maxPool\"), pf(this.readSync(t.dataId), t.shape, t.dtype, t.strides, e, \"max\").toTensor();\n    }, o.prototype.maxPoolBackprop = function(t, e, n, r) {\n        df([\n            e,\n            n\n        ], \"maxPoolBackprop\");\n        for(var o = this.readSync(e.dataId), a = er(r.outShape, e.dtype, vf(o, e.shape, e.dtype, r).values), i = r.strideHeight, s = r.strideWidth, u = r.dilationHeight, c = r.dilationWidth, l = r.effectiveFilterHeight, h = r.effectiveFilterWidth, f = h - 1 - r.padInfo.left, d = l - 1 - r.padInfo.top, p = er(e.shape, \"float32\"), v = this.bufferSync(t), g = 0; g < r.batchSize; ++g)for(var m = 0; m < r.inChannels; ++m)for(var y = 0; y < r.inHeight; ++y)for(var x = 0; x < r.inWidth; ++x){\n            for(var b = y - d, w = x - f, C = 0, E = 0; E < l; E += u){\n                var R = (b + E) / i;\n                if (!(R < 0 || R >= r.outHeight || Math.floor(R) !== R)) for(var I = 0; I < h; I += c){\n                    var k = (w + I) / s;\n                    if (!(k < 0 || k >= r.outWidth || Math.floor(k) !== k)) {\n                        var S = l * h - 1 - a.get(g, R, k, m) === E * h + I ? 1 : 0;\n                        if (0 !== S) C += v.get(g, R, k, m) * S;\n                    }\n                }\n            }\n            p.set(C, g, y, x, m);\n        }\n        return p.toTensor();\n    }, o.prototype.avgPoolBackprop = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"avgPoolBackprop\");\n        for(var r = n.strideHeight, o = n.strideWidth, a = n.filterHeight, i = n.filterWidth, s = n.dilationHeight, u = n.dilationWidth, c = n.effectiveFilterHeight, l = n.effectiveFilterWidth, h = l - 1 - n.padInfo.left, f = c - 1 - n.padInfo.top, d = er(e.shape, \"float32\"), p = 1 / (a * i), v = this.bufferSync(t), g = 0; g < n.batchSize; ++g)for(var m = 0; m < n.inChannels; ++m)for(var y = 0; y < n.inHeight; ++y)for(var x = 0; x < n.inWidth; ++x){\n            for(var b = y - f, w = x - h, C = 0, E = 0; E < c; E += s){\n                var R = (b + E) / r;\n                if (!(R < 0 || R >= n.outHeight || Math.floor(R) !== R)) for(var I = 0; I < l; I += u){\n                    var k = (w + I) / o;\n                    if (!(k < 0 || k >= n.outWidth || Math.floor(k) !== k)) C += v.get(g, R, k, m);\n                }\n            }\n            d.set(C * p, g, y, x, m);\n        }\n        return d.toTensor();\n    }, o.prototype.pool3d = function(t, e, n) {\n        df(t, \"pool3d\");\n        for(var r = e.strideDepth, o = e.strideHeight, a = e.strideWidth, i = e.dilationDepth, s = e.dilationHeight, u = e.dilationWidth, c = e.effectiveFilterDepth, l = e.effectiveFilterHeight, h = e.effectiveFilterWidth, f = e.padInfo.front, d = e.padInfo.top, p = e.padInfo.left, v = \"max\" === n ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, g = this.readSync(t.dataId), m = er(e.outShape, t.dtype), y = m.values, x = e.outShape[1] * e.outShape[2] * e.outShape[3] * e.outShape[4], b = e.outShape[2] * e.outShape[3] * e.outShape[4], w = e.outShape[3] * e.outShape[4], C = e.outShape[4], E = 0; E < e.batchSize; ++E)for(var R = E * x, I = E * t.strides[0], k = 0; k < e.inChannels; ++k)for(var S = 0; S < e.outDepth; ++S){\n            for(var A = S * r - f, T = A; T < 0;)T += i;\n            for(var D = Math.min(e.inDepth, c + A), N = R + S * b, F = 0; F < e.outHeight; ++F){\n                for(var _ = F * o - d, O = _; O < 0;)O += s;\n                for(var M = Math.min(e.inHeight, l + _), B = N + F * w, P = 0; P < e.outWidth; ++P){\n                    for(var L = P * a - p, W = L; W < 0;)W += u;\n                    for(var U = Math.min(e.inWidth, h + L), V = B + P * C, z = v, G = 0, H = 0, q = T; q < D; q += i){\n                        for(var K = I + q * t.strides[1], j = O; j < M; j += s){\n                            for(var X = K + j * t.strides[2], Y = W; Y < U; Y += u){\n                                var $ = g[X + Y * t.strides[3] + k];\n                                if (\"max\" === n && $ > z ? z = $ : \"avg\" === n && (G += $, H++), isNaN(z)) break;\n                            }\n                            if (isNaN(z)) break;\n                        }\n                        if (isNaN(z)) break;\n                    }\n                    y[V + k] = \"avg\" === n ? G / H : z;\n                }\n            }\n        }\n        return m.toTensor();\n    }, o.prototype.avgPool3d = function(t, e) {\n        return df(t, \"avgPool3d\"), this.pool3d(t, e, \"avg\").toFloat();\n    }, o.prototype.avgPool3dBackprop = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"avgPool3dBackprop\");\n        for(var r = n.strideDepth, o = n.strideHeight, a = n.strideWidth, i = n.filterDepth, s = n.filterHeight, u = n.filterWidth, c = n.dilationDepth, l = n.dilationHeight, h = n.dilationWidth, f = n.effectiveFilterDepth, d = n.effectiveFilterHeight, p = n.effectiveFilterWidth, v = f - 1 - n.padInfo.front, g = p - 1 - n.padInfo.left, m = d - 1 - n.padInfo.top, y = er(e.shape, \"float32\"), x = 1 / (i * s * u), b = this.bufferSync(t), w = 0; w < n.batchSize; ++w)for(var C = 0; C < n.inChannels; ++C)for(var E = 0; E < n.inDepth; ++E)for(var R = 0; R < n.inHeight; ++R)for(var I = 0; I < n.inWidth; ++I){\n            for(var k = E - v, S = R - m, A = I - g, T = 0, D = 0; D < f; D += c){\n                var N = (k + D) / r;\n                if (!(N < 0 || N >= n.outDepth || Math.floor(N) !== N)) for(var F = 0; F < d; F += l){\n                    var _ = (S + F) / o;\n                    if (!(_ < 0 || _ >= n.outHeight || Math.floor(_) !== _)) for(var O = 0; O < p; O += h){\n                        var M = (A + O) / a;\n                        if (!(M < 0 || M >= n.outWidth || Math.floor(M) !== M)) T += b.get(w, N, _, M, C);\n                    }\n                }\n            }\n            y.set(T * x, w, E, R, I, C);\n        }\n        return y.toTensor();\n    }, o.prototype.maxPool3d = function(t, e) {\n        return df(t, \"maxPool3d\"), this.pool3d(t, e, \"max\").toFloat();\n    }, o.prototype.maxPool3dPositions = function(t, e) {\n        for(var n = er(e.outShape, \"int32\"), r = e.strideDepth, o = e.strideHeight, a = e.strideWidth, i = e.dilationDepth, s = e.dilationHeight, u = e.dilationWidth, c = e.effectiveFilterDepth, l = e.effectiveFilterHeight, h = e.effectiveFilterWidth, f = e.padInfo.front, d = e.padInfo.top, p = e.padInfo.left, v = this.bufferSync(t), g = 0; g < e.batchSize; ++g)for(var m = 0; m < e.inChannels; ++m)for(var y = 0; y < e.outDepth; ++y){\n            for(var x = y * r - f, b = x; b < 0;)b += i;\n            for(var w = Math.min(e.inDepth, c + x), C = 0; C < e.outHeight; ++C){\n                for(var E = C * o - d, R = E; R < 0;)R += s;\n                for(var I = Math.min(e.inHeight, l + E), k = 0; k < e.outWidth; ++k){\n                    for(var S = k * a - p, A = S; A < 0;)A += u;\n                    for(var T = Math.min(e.inWidth, h + S), D = Number.NEGATIVE_INFINITY, N = -1, F = b; F < w; F += i)for(var _ = F - x, O = R; O < I; O += s)for(var M = O - E, B = A; B < T; B += u){\n                        var P = B - S, L = v.get(g, F, O, B, m);\n                        L >= D && (D = L, N = _ * l * h + M * l + P);\n                    }\n                    n.set(N, g, y, C, k, m);\n                }\n            }\n        }\n        return n.toTensor();\n    }, o.prototype.maxPool3dBackprop = function(t, e, n, r) {\n        df([\n            e,\n            n\n        ], \"maxPool3dBackprop\");\n        for(var o = this.maxPool3dPositions(e, r), a = r.strideDepth, i = r.strideHeight, s = r.strideWidth, u = r.dilationDepth, c = r.dilationHeight, l = r.dilationWidth, h = r.effectiveFilterDepth, f = r.effectiveFilterHeight, d = r.effectiveFilterWidth, p = h - 1 - r.padInfo.front, v = d - 1 - r.padInfo.left, g = f - 1 - r.padInfo.top, m = er(e.shape, \"float32\"), y = this.bufferSync(o), x = this.bufferSync(t), b = 0; b < r.batchSize; ++b)for(var w = 0; w < r.inChannels; ++w)for(var C = 0; C < r.inDepth; ++C)for(var E = 0; E < r.inHeight; ++E)for(var R = 0; R < r.inWidth; ++R){\n            for(var I = C - p, k = E - g, S = R - v, A = 0, T = 0; T < h; T += u){\n                var D = (I + T) / a;\n                if (!(D < 0 || D >= r.outDepth || Math.floor(D) !== D)) for(var N = 0; N < f; N += c){\n                    var F = (k + N) / i;\n                    if (!(F < 0 || F >= r.outHeight || Math.floor(F) !== F)) for(var _ = 0; _ < d; _ += l){\n                        var O = (S + _) / s;\n                        if (!(O < 0 || O >= r.outWidth || Math.floor(O) !== O)) {\n                            var M = h * f * d - 1 - y.get(b, D, F, O, w) === T * f * d + N * d + _ ? 1 : 0;\n                            if (0 !== M) A += x.get(b, D, F, O, w) * M;\n                        }\n                    }\n                }\n            }\n            m.set(A, b, C, E, R, w);\n        }\n        return m.toTensor();\n    }, o.prototype.cast = function(t, e) {\n        return Ra(t, e, this);\n    }, o.prototype.reshape = function(t, e) {\n        return Ia(t, e);\n    }, o.prototype.avgPool = function(t, e) {\n        return df(t, \"avgPool\"), df(t, \"maxPool\"), pf(this.readSync(t.dataId), t.shape, t.dtype, t.strides, e, \"avg\").toTensor().toFloat();\n    }, o.prototype.resizeBilinear = function(t, e, n, r) {\n        df(t, \"resizeBilinear\");\n        for(var o = t.shape, a = o[0], i = o[1], s = o[2], u = o[3], c = this.readSync(t.dataId), l = new Float32Array(k([\n            a,\n            e,\n            n,\n            u\n        ])), h = [\n            r && e > 1 ? i - 1 : i,\n            r && n > 1 ? s - 1 : s\n        ], f = [\n            r && e > 1 ? e - 1 : e,\n            r && n > 1 ? n - 1 : n\n        ], d = 0, p = h[0] / f[0], v = h[1] / f[1], g = 0; g < a; g++)for(var m = 0; m < e; m++)for(var y = p * m, x = Math.floor(y), b = y - x, w = Math.min(i - 1, Math.ceil(y)), C = g * t.strides[0] + x * t.strides[1], E = g * t.strides[0] + w * t.strides[1], R = 0; R < n; R++)for(var I = v * R, S = Math.floor(I), A = I - S, T = Math.min(s - 1, Math.ceil(I)), D = C + S * t.strides[2], N = E + S * t.strides[2], F = C + T * t.strides[2], _ = E + T * t.strides[2], O = 0; O < u; O++){\n            var M = c[D + O], B = c[N + O], P = M + (c[F + O] - M) * A, L = P + (B + (c[_ + O] - B) * A - P) * b;\n            l[d++] = L;\n        }\n        return Fn(l, [\n            a,\n            e,\n            n,\n            u\n        ]);\n    }, o.prototype.resizeBilinearBackprop = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"resizeBilinearBackprop\");\n        for(var r = e.shape, o = r[0], a = r[1], i = r[2], s = r[3], u = t.shape, c = u[1], l = u[2], h = new Float32Array(o * a * i * s), f = [\n            n && c > 1 ? a - 1 : a,\n            n && l > 1 ? i - 1 : i\n        ], d = [\n            n && c > 1 ? c - 1 : c,\n            n && l > 1 ? l - 1 : l\n        ], p = f[0] / d[0], v = f[1] / d[1], g = this.readSync(t.dataId), m = 0, y = 0; y < o; y++)for(var x = y * e.strides[0], b = 0; b < c; b++)for(var w = b * p, C = Math.floor(w), E = Math.min(Math.ceil(w), a - 1), R = x + C * e.strides[1], I = x + E * e.strides[1], k = w - C, S = 1 - k, A = 0; A < l; A++)for(var T = A * v, D = Math.floor(T), N = Math.min(Math.ceil(T), i - 1), F = T - D, _ = 1 - F, O = R + D * e.strides[2], M = R + N * e.strides[2], B = I + D * e.strides[2], P = I + N * e.strides[2], L = S * _, W = S * F, U = k * _, V = k * F, z = 0; z < s; z++){\n            var G = g[m++];\n            h[O + z] += G * L, h[M + z] += G * W, h[B + z] += G * U, h[P + z] += G * V;\n        }\n        return Ln(h, [\n            o,\n            i,\n            a,\n            s\n        ], e.dtype);\n    }, o.prototype.resizeNearestNeighbor = function(t, e, n, r) {\n        df(t, \"resizeNearestNeighbor\");\n        for(var o = t.shape, a = o[0], i = o[1], s = o[2], u = o[3], c = this.readSync(t.dataId), l = new Float32Array(a * e * n * u), h = [\n            r && e > 1 ? i - 1 : i,\n            r && n > 1 ? s - 1 : s\n        ], f = [\n            r && e > 1 ? e - 1 : e,\n            r && n > 1 ? n - 1 : n\n        ], d = h[0] / f[0], p = h[1] / f[1], v = 0, g = 0; g < a; g++)for(var m = g * t.strides[0], y = 0; y < e; y++)for(var x = d * y, b = m + Math.min(i - 1, r ? Math.round(x) : Math.floor(x)) * t.strides[1], w = 0; w < n; w++)for(var C = p * w, E = b + Math.min(s - 1, r ? Math.round(C) : Math.floor(C)) * t.strides[2], R = 0; R < u; R++){\n            var I = c[E + R];\n            l[v++] = I;\n        }\n        return Fn(l, [\n            a,\n            e,\n            n,\n            u\n        ], t.dtype);\n    }, o.prototype.resizeNearestNeighborBackprop = function(t, e, n) {\n        df([\n            t,\n            e\n        ], \"resizeNearestNeighborBackprop\");\n        for(var r = e.shape, o = r[0], a = r[1], i = r[2], s = r[3], u = t.shape, c = u[1], l = u[2], h = new Float32Array(o * a * i * s), f = this.readSync(t.dataId), d = [\n            n && c > 1 ? a - 1 : a,\n            n && l > 1 ? i - 1 : i\n        ], p = [\n            n && c > 1 ? c - 1 : c,\n            n && l > 1 ? l - 1 : l\n        ], v = d[0] / p[0], g = d[1] / p[1], m = 1 / v, y = 1 / g, x = 2 * Math.ceil(m) + 2, b = 2 * Math.ceil(y) + 2, w = 0; w < o; w++)for(var C = w * e.strides[0], E = 0; E < a; E++)for(var R = C + E * e.strides[1], I = Math.floor(E * m), k = Math.floor(I - x / 2), S = 0; S < i; S++)for(var A = R + S * e.strides[2], T = Math.floor(S * y), D = Math.floor(T - b / 2), N = 0; N < s; N++){\n            for(var F = 0, _ = 0; _ < x; _++){\n                var O = _ + k;\n                if (!(O < 0 || O >= c)) {\n                    var M = C + O * t.strides[1], B = O * v;\n                    if (E === Math.min(a - 1, n ? Math.round(B) : Math.floor(B))) for(var P = 0; P < b; P++){\n                        var L = P + D;\n                        if (!(L < 0 || L >= l)) {\n                            var W = M + L * t.strides[2], U = L * g;\n                            S === Math.min(i - 1, n ? Math.round(U) : Math.floor(U)) && (F += f[W + N]);\n                        }\n                    }\n                }\n            }\n            h[A + N] = F;\n        }\n        return Ln(h, e.shape, e.dtype);\n    }, o.prototype.batchNormalization = function(t, e, n, r, o, a) {\n        df([\n            t,\n            e,\n            n,\n            o,\n            a\n        ], \"batchNorm\");\n        for(var i = this.readSync(t.dataId), s = this.readSync(e.dataId), u = this.readSync(n.dataId), c = o ? this.readSync(o.dataId) : new Float32Array([\n            1\n        ]), l = a ? this.readSync(a.dataId) : new Float32Array([\n            0\n        ]), h = new Float32Array(i.length), f = l.length, d = c.length, p = u.length, v = s.length, g = 0, m = 0, y = 0, x = 0, b = 0; b < i.length; ++b)h[b] = l[g++] + (i[b] - s[m++]) * c[y++] / Math.sqrt(u[x++] + r), g >= f && (g = 0), m >= v && (m = 0), y >= d && (y = 0), x >= p && (x = 0);\n        return Ln(h, t.shape);\n    }, o.prototype.localResponseNormalization4D = function(t, e, n, r, o) {\n        df(t, \"localResponseNormalization4D\");\n        var a = t.shape[3], i = a - 1, s = this.readSync(t.dataId), u = t.size, c = new Float32Array(u);\n        function l(t) {\n            for(var n = t % a, r = t - n + Math.max(0, n - e), o = t - n + Math.min(n + e, i), u = 0; r <= o; r++){\n                var c = s[r];\n                u += c * c;\n            }\n            return u;\n        }\n        for(var h = 0; h < u; h++){\n            var f = l(h), d = s[h] * Math.pow(n + r * f, -o);\n            c[h] = d;\n        }\n        return Ln(c, t.shape);\n    }, o.prototype.LRNGrad = function(t, e, n, r, o, a, i) {\n        df(t, \"LRNGrad\");\n        for(var s = t.shape[3], u = this.readSync(t.dataId), c = this.readSync(e.dataId), l = this.readSync(n.dataId), h = new Float32Array(t.size), f = t.size, d = 0; d < f; d++){\n            for(var p = d % s, v = d - p + Math.max(0, p - r), g = d - p + Math.min(s, p + r + 1), m = 0, y = v; y < g; y++)m += Math.pow(c[y], 2);\n            m = a * m + o;\n            for(y = v; y < g; y++){\n                var x = -2 * a * i * c[y] * l[d] / m;\n                d === y && (x += Math.pow(m, -i)), x *= u[d], h[y] += x;\n            }\n        }\n        return Ln(h, t.shape);\n    }, o.prototype.multinomial = function(t, e, n, r) {\n        df(t, \"multinomial\");\n        for(var o = e ? t : ia(t), a = o.shape[0], i = o.shape[1], s = Gn([\n            a,\n            n\n        ], \"int32\"), u = this.readSync(s.dataId), c = this.readSync(o.dataId), l = 0; l < a; ++l){\n            var h = l * i, f = new Float32Array(i - 1);\n            f[0] = c[h];\n            for(var d = 1; d < f.length; ++d)f[d] = f[d - 1] + c[h + d];\n            for(var p = Yu(r.toString()), v = l * n, g = 0; g < n; ++g){\n                var m = p();\n                u[v + g] = f.length;\n                for(var y = 0; y < f.length; y++)if (m < f[y]) {\n                    u[v + g] = y;\n                    break;\n                }\n            }\n        }\n        return s;\n    }, o.prototype.oneHot = function(t, e, n, r) {\n        df(t, \"oneHot\");\n        var o = new Float32Array(t.size * e);\n        o.fill(r);\n        for(var a = this.readSync(t.dataId), i = 0; i < t.size; ++i)a[i] >= 0 && a[i] < e && (o[i * e + a[i]] = n);\n        return Bn(o, [\n            t.size,\n            e\n        ], \"int32\");\n    }, o.prototype.nonMaxSuppression = function(t, e, n, r, o) {\n        return df(t, \"nonMaxSuppression\"), Oa(this.readSync(t.dataId), this.readSync(e.dataId), n, r, o);\n    }, o.prototype.fft = function(t) {\n        return this.fftBatch(t, !1);\n    }, o.prototype.ifft = function(t) {\n        return this.fftBatch(t, !0);\n    }, o.prototype.fftBatch = function(t, e) {\n        for(var n = t.shape[0], r = t.shape[1], o = er(t.shape, \"float32\"), a = er(t.shape, \"float32\"), i = Dn(t).as2D(n, r), s = Nn(t).as2D(n, r), u = 0; u < n; u++)for(var c = i.slice([\n            u,\n            0\n        ], [\n            1,\n            r\n        ]), l = s.slice([\n            u,\n            0\n        ], [\n            1,\n            r\n        ]), h = Tn(c, l), f = this.readSync(this.fftImpl(h, e).dataId), d = 0; d < r; d++){\n            var p = Ta(f, d);\n            o.values[u * r + d] = p.real, a.values[u * r + d] = p.imag;\n        }\n        return Tn(o.toTensor(), a.toTensor()).as2D(n, r);\n    }, o.prototype.fftImpl = function(t, e) {\n        var n = t.as1D(), r = n.size;\n        if (this.isExponentOf2(r)) {\n            var o = this.fftRadix2(n, r, e).as2D(t.shape[0], t.shape[1]);\n            return e && (o = Tn(Dn(o).div(On(r)), Nn(o).div(On(r)))), o;\n        }\n        var a = this.readSync(t.dataId), i = function(t) {\n            for(var e = new Float32Array(t.length / 2), n = new Float32Array(t.length / 2), r = 0; r < t.length; r += 2)e[r / 2] = t[r], n[r / 2] = t[r + 1];\n            return {\n                real: e,\n                imag: n\n            };\n        }(this.fourierTransformByMatmul(a, r, e));\n        return Tn(i.real, i.imag).as2D(t.shape[0], t.shape[1]);\n    }, o.prototype.isExponentOf2 = function(t) {\n        return 0 == (t & t - 1);\n    }, o.prototype.fftRadix2 = function(t, e, n) {\n        if (1 === e) return t;\n        var r = this.readSync(t.dataId), o = e / 2, a = function(t) {\n            for(var e = Math.ceil(t.length / 4), n = new Float32Array(e), r = new Float32Array(e), o = 0; o < t.length; o += 4)n[Math.floor(o / 4)] = t[o], r[Math.floor(o / 4)] = t[o + 1];\n            return {\n                real: n,\n                imag: r\n            };\n        }(r), i = Tn(a.real, a.imag).as1D(), s = function(t) {\n            for(var e = Math.floor(t.length / 4), n = new Float32Array(e), r = new Float32Array(e), o = 2; o < t.length; o += 4)n[Math.floor(o / 4)] = t[o], r[Math.floor(o / 4)] = t[o + 1];\n            return {\n                real: n,\n                imag: r\n            };\n        }(r), u = Tn(s.real, s.imag).as1D();\n        i = this.fftRadix2(i, o, n), u = this.fftRadix2(u, o, n);\n        var c = function(t, e) {\n            for(var n = new Float32Array(t / 2), r = new Float32Array(t / 2), o = 0; o < Math.ceil(t / 2); o++){\n                var a = (e ? 2 : -2) * Math.PI * (o / t);\n                n[o] = Math.cos(a), r[o] = Math.sin(a);\n            }\n            return {\n                real: n,\n                imag: r\n            };\n        }(e, n), l = Tn(c.real, c.imag).mul(u), h = i.add(l), f = i.sub(l), d = Dn(h).concat(Dn(f)), p = Nn(h).concat(Nn(f));\n        return Tn(d, p).as1D();\n    }, o.prototype.fourierTransformByMatmul = function(t, e, n) {\n        for(var r = new Float32Array(2 * e), o = 0; o < e; o++){\n            for(var a = 0, i = 0, s = 0; s < e; s++){\n                var u = Na(o * s, e, n), c = Ta(t, s);\n                a += c.real * u.real - c.imag * u.imag, i += c.real * u.imag + c.imag * u.real;\n            }\n            n && (a /= e, i /= e), Da(r, a, i, o);\n        }\n        return r;\n    }, o.prototype.depthToSpace = function(t, e, n) {\n        C(\"NHWC\" === n, function() {\n            return \"Only NHWC dataFormat supported on CPU for depthToSpace. Got \" + n;\n        }), C(e > 1, function() {\n            return \"blockSize should be > 1 for depthToSpace, but was: \" + e;\n        });\n        for(var r = t.shape[0], o = t.shape[1], a = t.shape[2], i = t.shape[3], s = o * e, u = a * e, c = i / (e * e), l = this.readSync(t.dataId), h = new Float32Array(r * s * u * c), f = 0, d = 0; d < r; ++d)for(var p = 0; p < s; ++p)for(var v = Math.floor(p / e), g = p % e, m = 0; m < u; ++m)for(var y = Math.floor(m / e), x = (g * e + m % e) * c, b = 0; b < c; ++b){\n            var w = b + x + i * (y + a * (v + o * d));\n            h[f++] = l[w];\n        }\n        return Ln(h, [\n            r,\n            s,\n            u,\n            c\n        ]);\n    }, o.prototype.broadcastedBinaryOp = function(t, e, n, r) {\n        var o = Pr(t.shape, e.shape), a = er(o, n), i = this.readSync(t.dataId), s = this.readSync(e.dataId), u = Mr(t.shape, o), c = Mr(e.shape, o), l = a.values;\n        if (u.length + c.length === 0) for(var h = 0; h < l.length; ++h)l[h] = r(i[h % i.length], s[h % s.length]);\n        else {\n            var f = this.bufferSync(t), d = this.bufferSync(e), p = function(n) {\n                var o = a.indexToLoc(n), h = o.slice(-t.rank);\n                u.forEach(function(t) {\n                    return h[t] = 0;\n                });\n                var p = f.locToIndex(h), v = o.slice(-e.rank);\n                c.forEach(function(t) {\n                    return v[t] = 0;\n                });\n                var g = d.locToIndex(v);\n                l[n] = r(i[p], s[g]);\n            };\n            for(h = 0; h < l.length; ++h)p(h);\n        }\n        return a.toTensor();\n    }, o.prototype.broadcastedBinaryComplexOp = function(t, e, n) {\n        var r = Pr(t.shape, e.shape), o = er(r, \"float32\"), a = er(r, \"float32\"), i = this.readSync(t.dataId), s = this.readSync(e.dataId), u = Mr(t.shape, r), c = Mr(e.shape, r), l = o.values, h = a.values;\n        if (u.length + c.length === 0) for(var f = 0; f < l.length; f++){\n            var d = f % i.length, p = f % s.length, v = n(i[2 * d], i[2 * d + 1], s[2 * p], s[2 * p + 1]);\n            l[f] = v.real, h[f] = v.imag;\n        }\n        else {\n            var g = this.bufferSync(this.data.get(t.dataId).complexTensors.real), m = this.bufferSync(this.data.get(e.dataId).complexTensors.real), y = function(r) {\n                var a = o.indexToLoc(r), f = a.slice(-t.rank);\n                u.forEach(function(t) {\n                    return f[t] = 0;\n                });\n                var d = g.locToIndex(f), p = a.slice(-e.rank);\n                c.forEach(function(t) {\n                    return p[t] = 0;\n                });\n                var v = m.locToIndex(p), y = n(i[2 * d], i[2 * d + 1], s[2 * v], s[2 * v + 1]);\n                l[r] = y.real, h[r] = y.imag;\n            };\n            for(f = 0; f < l.length; f++)y(f);\n        }\n        return this.complex(o.toTensor(), a.toTensor());\n    }, o.prototype.split = function(t, e, n) {\n        return Ua(t, e, n);\n    }, o.prototype.dispose = function() {}, o.prototype.floatPrecision = function() {\n        return 32;\n    }, o.prototype.epsilon = function() {\n        return 1e-7;\n    }, o.prototype.cropAndResize = function(t, e, n, r, o, a) {\n        for(var i = t.shape, s = i[0], u = i[1], c = i[2], l = i[3], h = e.shape[0], f = r[0], d = r[1], p = er([\n            h,\n            f,\n            d,\n            l\n        ], \"float32\"), v = this.readSync(e.dataId), g = this.readSync(n.dataId), m = this.readSync(t.dataId), y = t.strides, x = p.strides, b = 0; b < h; b++){\n            var w = 4 * b, C = v[w], E = v[w + 1], R = v[w + 2], I = v[w + 3], k = g[b];\n            if (!(k >= s)) for(var S = f > 1 ? (R - C) * (u - 1) / (f - 1) : 0, A = d > 1 ? (I - E) * (c - 1) / (d - 1) : 0, T = 0; T < f; T++){\n                var D = f > 1 ? C * (u - 1) + T * S : .5 * (C + R) * (u - 1);\n                if (D < 0 || D > u - 1) for(var N = 0; N < d; N++)for(var F = 0; F < l; F++){\n                    var _ = F + N * x[2] + T * x[1] + b * x[0];\n                    p.values[_] = a;\n                }\n                else if (\"bilinear\" === o) {\n                    var O = Math.floor(D), M = Math.ceil(D), B = D - O;\n                    for(N = 0; N < d; N++){\n                        if ((q = d > 1 ? E * (c - 1) + N * A : .5 * (E + I) * (c - 1)) < 0 || q > c - 1) for(F = 0; F < l; F++){\n                            _ = F + N * x[2] + T * x[1] + b * x[0];\n                            p.values[_] = a;\n                        }\n                        else {\n                            var P = Math.floor(q), L = Math.ceil(q), W = q - P;\n                            for(F = 0; F < l; F++){\n                                var U = m[_ = F + P * y[2] + O * y[1] + k * y[0]], V = m[_ = F + L * y[2] + O * y[1] + k * y[0]], z = m[_ = F + P * y[2] + M * y[1] + k * y[0]], G = U + (V - U) * W, H = z + (m[_ = F + L * y[2] + M * y[1] + k * y[0]] - z) * W;\n                                _ = F + N * x[2] + T * x[1] + b * x[0], p.values[_] = G + (H - G) * B;\n                            }\n                        }\n                    }\n                } else for(N = 0; N < d; ++N){\n                    var q;\n                    if ((q = d > 1 ? E * (c - 1) + N * A : .5 * (E + I) * (c - 1)) < 0 || q > c - 1) for(F = 0; F < l; F++){\n                        _ = F + N * x[2] + T * x[1] + b * x[0];\n                        p.values[_] = a;\n                    }\n                    else {\n                        var K = Math.round(q), j = Math.round(D);\n                        for(F = 0; F < l; F++){\n                            var X = F + K * y[2] + j * y[1] + k * y[0], Y = F + N * x[2] + T * x[1] + b * x[0];\n                            p.values[Y] = m[X];\n                        }\n                    }\n                }\n            }\n        }\n        return p.toTensor();\n    }, o.prototype.sparseToDense = function(t, e, n, r) {\n        var o = Go(0, t, n), a = o.sliceRank, i = o.numUpdates, s = o.sliceSize, u = o.strides, c = o.outputSize;\n        return this.scatter(t, e, n, c, s, i, a, u, r, !1);\n    }, o.prototype.gatherND = function(t, e) {\n        var n = e.shape, r = n[n.length - 1], o = Po(t, e), a = o[0], i = o[1], s = o[2], u = o[3];\n        if (0 === i) return Fn([], a, t.dtype);\n        for(var c = new mt([\n            i,\n            s\n        ], t.dtype), l = this.readSync(e.dataId), h = this.readSync(t.dataId), f = 0; f < i; f++){\n            for(var d = [], p = 0, v = 0; v < r; v++){\n                var g = l[f * r + v];\n                p += g * u[v], d.push(g);\n            }\n            if (p < 0 || p >= t.size / s) throw new Error(\"Invalid indices: \" + d + \" does not index into \" + t.shape);\n            for(var m = 0; m < s; m++)c.values[f * s + m] = h[p * s + m];\n        }\n        return c.toTensor().reshape(a);\n    }, o.prototype.scatterND = function(t, e, n) {\n        var r = Go(0, t, n), o = r.sliceRank, a = r.numUpdates, i = r.sliceSize, s = r.strides, u = r.outputSize, c = On(0);\n        return this.scatter(t, e, n, u, i, a, o, s, c, !0);\n    }, o.prototype.fill = function(t, e, n) {\n        var r = P(n = n || j(e), k(t));\n        return r.fill(e), Lt.makeTensor(r, t, n, this);\n    }, o.prototype.onesLike = function(t) {\n        if (\"string\" === t.dtype) throw new Error(\"onesLike is not supported for string tensors\");\n        return this.fill(t.shape, 1, t.dtype);\n    }, o.prototype.zerosLike = function(t) {\n        var e = P(t.dtype, k(t.shape));\n        return this.makeOutput(e, t.shape, t.dtype);\n    }, o.prototype.linspace = function(t, e, n) {\n        return ka(t, e, n);\n    }, o.prototype.scatter = function(t, e, n, r, o, a, i, s, u, c) {\n        var l = [\n            r / o,\n            o\n        ], h = this.readSync(t.dataId), f = this.readSync(e.dataId);\n        if (0 === r) return Fn([], n, e.dtype);\n        var d = new mt(l, e.dtype);\n        d.values.fill(this.readSync(u.dataId)[0]);\n        for(var p = 0; p < a; p++){\n            for(var v = [], g = 0, m = 0; m < i; m++){\n                var y = h[p * i + m];\n                v.push(y), g += y * s[m];\n            }\n            if (g < 0 || g >= r / o) throw new Error(\"Invalid indices: \" + v + \" does not index into \" + n);\n            for(var x = 0; x < o; x++)c ? d.values[g * o + x] += f[p * o + x] : d.values[g * o + x] = 0 === e.rank ? f[0] : f[p * o + x];\n        }\n        return d.toTensor().reshape(n);\n    }, o;\n}(la);\nfunction yf(t, e) {\n    return {\n        kernelName: t,\n        backendName: \"cpu\",\n        kernelFunc: function(n) {\n            var r = n.inputs, o = n.backend, a = r, i = a.a, s = a.b, u = o;\n            df([\n                i,\n                s\n            ], t);\n            var c = u.data.get(i.dataId).values, l = u.data.get(s.dataId).values, h = e(i.shape, s.shape, c, l, i.dtype), f = h[0], d = h[1];\n            return {\n                dataId: u.write(f, d, i.dtype),\n                shape: d,\n                dtype: i.dtype\n            };\n        }\n    };\n}\nfunction xf(t) {\n    return function(e, n, r, o, a) {\n        var i = Pr(e, n), s = i.length, u = $(i), c = B(a, k(i)), l = e.length, h = n.length, f = $(e), d = $(n), p = Mr(e, i), v = Mr(n, i);\n        if (p.length + v.length === 0) for(var g = 0; g < c.length; ++g)c[g] = t(r[g % r.length], o[g % o.length]);\n        else {\n            var m = function(e) {\n                var n = it(e, s, u), a = n.slice(-l);\n                p.forEach(function(t) {\n                    return a[t] = 0;\n                });\n                var i = at(a, l, f), g = n.slice(-h);\n                v.forEach(function(t) {\n                    return g[t] = 0;\n                });\n                var m = at(g, h, d);\n                c[e] = t(r[i], o[m]);\n            };\n            for(g = 0; g < c.length; ++g)m(g);\n        }\n        return [\n            c,\n            i\n        ];\n    };\n}\nLt.registerBackend(\"cpu\", function() {\n    return new mf;\n}, 1);\nvar bf = xf(function(t, e) {\n    return t / e;\n}), wf = yf(wr, bf);\nvar Cf = {\n    kernelName: \"MaxPoolWithArgmax\",\n    backendName: \"cpu\",\n    kernelFunc: function(t) {\n        var e = t.inputs, n = t.attrs, r = t.backend, o = e.x, a = n, i = a.filterSize, s = a.strides, u = a.pad, c = a.includeBatchInIndex, l = r;\n        df(o, \"MaxPoolWithArgmax\");\n        var h = l.data.get(o.dataId).values, f = fa(o.shape, i, s, [\n            1,\n            1\n        ], u), d = function(t, e, n, r, o) {\n            var a = pf(t, 0, n, $(e), o, \"max\"), i = vf(t, e, n, o, !0, r);\n            return [\n                a.values,\n                i.values\n            ];\n        }(h, o.shape, o.dtype, c, f), p = d[0], v = d[1], g = l.write(p, f.outShape, o.dtype), m = l.write(v, f.outShape, o.dtype);\n        return [\n            {\n                dataId: g,\n                shape: f.outShape,\n                dtype: o.dtype\n            },\n            {\n                dataId: m,\n                shape: f.outShape,\n                dtype: \"int32\"\n            }\n        ];\n    }\n}, Ef = {\n    kernelName: \"NonMaxSuppressionV5\",\n    backendName: \"cpu\",\n    kernelFunc: function(t) {\n        var e = t.inputs, n = t.backend, r = t.attrs, o = e, a = o.boxes, i = o.scores, s = r, u = s.maxOutputSize, c = s.iouThreshold, l = s.scoreThreshold, h = s.softNmsSigma, f = n;\n        df(a, \"NonMaxSuppressionWithScore\");\n        var d = Ma(f.data.get(a.dataId).values, f.data.get(i.dataId).values, u, c, l, h);\n        return [\n            d.selectedIndices,\n            d.selectedScores\n        ];\n    }\n}, Rf = {\n    kernelName: \"Square\",\n    backendName: \"cpu\",\n    kernelFunc: function(t) {\n        var e = t.inputs, n = t.backend, r = e.x, o = n;\n        df(r, \"square\");\n        for(var a = o.data.get(r.dataId).values, i = new Float32Array(a.length), s = 0; s < a.length; ++s){\n            var u = a[s];\n            i[s] = u * u;\n        }\n        return {\n            dataId: o.write(i, r.shape, r.dtype),\n            shape: r.shape,\n            dtype: r.dtype\n        };\n    }\n}, If = xf(function(t, e) {\n    var n = t - e;\n    return n * n;\n});\nfunction kf(t, e, n, r, o) {\n    for(var a = k(e), i = e.length, s = $(e), u = $(o), c = B(n, k(o)), l = 0; l < a; ++l){\n        for(var h = it(l, i, s), f = new Array(h.length), d = 0; d < f.length; d++)f[d] = h[r[d]];\n        c[at(f, i, u)] = t[l];\n    }\n    return c;\n}\nfor(var Sf = 0, Af = [\n    Ef,\n    Rf,\n    yf(Er, If),\n    wf,\n    {\n        kernelName: \"Transpose\",\n        backendName: \"cpu\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.attrs, r = t.backend, o = e.x, a = n.perm, i = r;\n            df(o, \"transpose\");\n            for(var s = o.shape.length, u = new Array(s), c = 0; c < u.length; c++)u[c] = o.shape[a[c]];\n            var l = kf(i.data.get(o.dataId).values, o.shape, o.dtype, a, u);\n            return {\n                dataId: i.write(l, u, o.dtype),\n                shape: u,\n                dtype: o.dtype\n            };\n        }\n    },\n    Cf\n]; Sf < Af.length; Sf++){\n    d(Af[Sf]);\n}\nvar Tf, Df = function(t) {\n    this.variableNames = [\n        \"A\"\n    ];\n    var e = Ya(), n = t[0], r = t[1];\n    this.outputShape = t, this.userCode = \"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(\" + r + \".0, \" + n + \".0);\\n\\n        vec4 values = \" + e.texture2D + \"(A, uv);\\n        float value;\\n        if (depth == 0) {\\n          value = values.r;\\n        } else if (depth == 1) {\\n          value = values.g;\\n        } else if (depth == 2) {\\n          value = values.b;\\n        } else if (depth == 3) {\\n          value = values.a;\\n        }\\n\\n        setOutput(floor(value * 255.0 + 0.5));\\n      }\\n    \";\n}, Nf = function(t) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !1, this.packedOutput = !0;\n    var e = Ya(), n = t[0], r = t[1];\n    this.outputShape = t, this.userCode = \"\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n\\n        vec4 result = vec4(0.);\\n\\n        for(int row=0; row<=1; row++) {\\n          for(int col=0; col<=1; col++) {\\n            texC = coords[1] + row;\\n            depth = coords[2] + col;\\n\\n            vec2 uv = (vec2(texC, texR) + halfCR) /\\n                       vec2(\" + r + \".0, \" + n + \".0);\\n            vec4 values = \" + e.texture2D + \"(A, uv);\\n            float value;\\n            if (depth == 0) {\\n              value = values.r;\\n            } else if (depth == 1) {\\n              value = values.g;\\n            } else if (depth == 2) {\\n              value = values.b;\\n            } else if (depth == 3) {\\n              value = values.a;\\n            }\\n\\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\\n          }\\n        }\\n\\n        \" + e.output + \" = result;\\n      }\\n    \";\n};\nvar Ff = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ];\n    for(var n = new Array(t.length), r = 0; r < n.length; r++)n[r] = t[e[r]];\n    this.outputShape = n, this.rank = n.length;\n    var o = ui(this.rank), a = function(t) {\n        var e = t.length;\n        if (e > 6) throw Error(\"Transpose for rank \" + e + \" is not yet supported\");\n        for(var n = [\n            \"resRC.x\",\n            \"resRC.y\",\n            \"resRC.z\",\n            \"resRC.w\",\n            \"resRC.u\",\n            \"resRC.v\"\n        ], r = new Array(e), o = 0; o < t.length; o++)r[t[o]] = n[o];\n        return r.join();\n    }(e);\n    this.userCode = \"\\n    void main() {\\n      \" + o + \" resRC = getOutputCoords();\\n      setOutput(getA(\" + a + \"));\\n    }\\n    \";\n};\nvar _f = function(t, e) {\n    this.variableNames = [\n        \"A\"\n    ], this.packedInputs = !0, this.packedOutput = !0;\n    for(var n = new Array(t.length), r = 0; r < n.length; r++)n[r] = t[e[r]];\n    if (this.outputShape = n, this.rank = n.length, this.rank > 6) throw Error(\"Packed transpose for rank \" + this.rank + \" is not yet supported.\");\n    var o = ui(this.rank), a = ja(\"rc\", this.rank), i = new Array(this.rank);\n    for(r = 0; r < e.length; r++)i[e[r]] = a[r];\n    var s = \"vec2(\" + i.slice(-2).join() + \")\", u = \"++\" + a[this.rank - 1] + \" < \" + n[this.rank - 1], c = \"getChannel(getA(\" + i.join() + \"), \" + s + \")\";\n    this.userCode = \"\\n    void main() {\\n      \" + o + \" rc = getOutputCoords();\\n      vec4 result = vec4(0.);\\n      result[0] = \" + c + \";\\n      if(\" + u + \") {\\n        result[1] = \" + c + \";\\n      }\\n      --\" + a[this.rank - 1] + \";\\n      if(++\" + a[this.rank - 2] + \" < \" + n[this.rank - 2] + \") {\\n        result[2] = \" + c + \";\\n        if(\" + u + \") {\\n          result[3] = \" + c + \";\\n        }\\n      }\\n      setOutput(result);\\n    }\\n    \";\n};\nfor(var Of = 0, Mf = [\n    {\n        kernelName: \"FromPixels\",\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = t.attrs, o = e.pixels, a = r.numChannels, s = \"undefined\" != typeof HTMLVideoElement && o instanceof HTMLVideoElement, u = \"undefined\" != typeof HTMLImageElement && o instanceof HTMLImageElement, c = s ? [\n                o.videoWidth,\n                o.videoHeight\n            ] : [\n                o.width,\n                o.height\n            ], l = c[0], h = c[1], f = [\n                h,\n                l\n            ], d = [\n                h,\n                l,\n                a\n            ];\n            (u || s) && (null == Tf && (Tf = document.createElement(\"canvas\").getContext(\"2d\")), Tf.canvas.width = l, Tf.canvas.height = h, Tf.drawImage(o, 0, 0, l, h), o = Tf.canvas);\n            var p = n.makeTensorInfo(f, \"int32\");\n            n.texData.get(p.dataId).usage = zt.PIXELS, n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId), o);\n            var v = i().getBool(\"WEBGL_PACK\") ? new Nf(d) : new Df(d), g = n.runWebGLProgram(v, [\n                p\n            ], \"int32\");\n            return n.disposeData(p.dataId), g;\n        }\n    },\n    {\n        kernelName: wr,\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = e;\n            return function(t, e, n) {\n                var r = new Ri(Ci, t.shape, e.shape);\n                return i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") && (r = new Si(Ii, t.shape, e.shape, !0)), n.runWebGLProgram(r, [\n                    t,\n                    e\n                ], \"float32\");\n            }(r.a, r.b, n);\n        }\n    },\n    {\n        kernelName: \"NonMaxSuppressionV5\",\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = t.attrs;\n            dn(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");\n            var o = e, a = o.boxes, i = o.scores, s = r, u = s.maxOutputSize, c = s.iouThreshold, l = s.scoreThreshold, h = s.softNmsSigma, f = n, d = Ma(f.readSync(a.dataId), f.readSync(i.dataId), u, c, l, h);\n            return [\n                d.selectedIndices,\n                d.selectedScores\n            ];\n        }\n    },\n    {\n        kernelName: \"Square\",\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = e.x, o = n, a = new cu(r.shape, \"return x * x;\");\n            return o.runWebGLProgram(a, [\n                r\n            ], r.dtype);\n        }\n    },\n    {\n        kernelName: Er,\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.backend, r = e, o = r.a, a = r.b, s = n, u = i().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\") ? new Si(\"return (a - b) * (a - b);\", o.shape, a.shape) : new Ri(\"return (a - b) * (a - b);\", o.shape, a.shape);\n            return s.compileAndRun(u, [\n                o,\n                a\n            ]);\n        }\n    },\n    {\n        kernelName: \"Transpose\",\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            for(var e, n = t.inputs, r = t.attrs, o = t.backend, a = n.x, s = r.perm, u = o, c = a.shape.length, l = new Array(c), h = 0; h < l.length; h++)l[h] = a.shape[s[h]];\n            if (u.shouldExecuteOnCPU([\n                a\n            ])) {\n                var f = kf(u.texData.get(a.dataId).values, a.shape, a.dtype, s, l);\n                e = u.makeTensorInfo(l, a.dtype), u.texData.get(e.dataId).values = f;\n            } else e = function(t, e, n) {\n                var r = i().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\") ? new _f(t.shape, e) : new Ff(t.shape, e);\n                return n.runWebGLProgram(r, [\n                    t\n                ], t.dtype);\n            }(a, s, u);\n            return e;\n        }\n    },\n    {\n        kernelName: \"MaxPoolWithArgmax\",\n        backendName: \"webgl\",\n        kernelFunc: function(t) {\n            var e = t.inputs, n = t.attrs, r = t.backend, o = e.x, a = n, i = a.filterSize, s = a.strides, u = a.pad, c = a.includeBatchInIndex, l = r;\n            C(4 === o.shape.length, function() {\n                return \"Error in maxPool: input must be rank 4 but got rank \" + o.shape.length + \".\";\n            });\n            var h = [\n                1,\n                1\n            ];\n            C(Ca(s, h), function() {\n                return \"Error in maxPool: Either strides or dilations must be 1. Got strides \" + s + \" and dilations '\" + h + \"'\";\n            });\n            var f = fa(o.shape, i, s, h, u), d = function(t, e, n, r) {\n                var o = new Ws(n, \"max\", !1), a = r.runWebGLProgram(o, [\n                    t\n                ], \"float32\");\n                return o = new Ws(n, \"max\", !0, !0, e), [\n                    a,\n                    r.runWebGLProgram(o, [\n                        t\n                    ], \"float32\")\n                ];\n            }(o, c, f, l);\n            return [\n                d[0],\n                d[1]\n            ];\n        }\n    }\n]; Of < Mf.length; Of++){\n    d(Mf[Of]);\n}\nfor(var Bf = 0, Pf = [\n    {\n        kernelName: xr,\n        inputsToSave: [\n            \"a\",\n            \"b\"\n        ],\n        gradFunc: function(t, e) {\n            var n = e[0], r = e[1], o = Pr(n.shape, r.shape);\n            return {\n                a: function() {\n                    var e = t, r = Br(n.shape, o);\n                    return r.length > 0 && (e = e.sum(r)), e.reshape(n.shape);\n                },\n                b: function() {\n                    var e = t, n = Br(r.shape, o);\n                    return n.length > 0 && (e = e.sum(n)), e.reshape(r.shape);\n                }\n            };\n        }\n    },\n    {\n        kernelName: \"AddN\",\n        saveAllInputs: !0,\n        gradFunc: function(t, e) {\n            var n = {};\n            return e.forEach(function(e, r) {\n                n[r] = function() {\n                    return t.clone();\n                };\n            }), n;\n        }\n    },\n    {\n        kernelName: Sr,\n        gradFunc: function(t, e, n) {\n            for(var r = n, o = r.inputShape, a = r.shape, i = Array.from(a), s = o.length - 1; s >= 0; s--)if (o[s] === a[s]) i[s] = 1;\n            else if (1 !== o[s]) throw new Error(\"broadcastTo(): [\" + o + \"] cannot be broadcast to [\" + a + \"].\");\n            var u = [];\n            for(s = 0; s < i.length; s++)i[s] > 1 && u.push(s);\n            return {\n                x: function() {\n                    return t.sum(u, !0);\n                }\n            };\n        }\n    },\n    {\n        kernelName: wr,\n        inputsToSave: [\n            \"a\",\n            \"b\"\n        ],\n        gradFunc: function(t, e) {\n            var n = e[0], r = e[1], o = Pr(n.shape, r.shape);\n            return {\n                a: function() {\n                    var e = Bo(t, r.toFloat()), a = Br(n.shape, o);\n                    return a.length > 0 ? th(e, a).reshape(n.shape) : e;\n                },\n                b: function() {\n                    var e = t.mul(n.toFloat()), a = Br(r.shape, o);\n                    a.length > 0 && (e = th(e, a).reshape(r.shape));\n                    var i = Gc(r);\n                    return no(Bo(e, i.toFloat()));\n                }\n            };\n        }\n    },\n    {\n        kernelName: \"FusedBatchNorm\",\n        inputsToSave: [\n            \"x\",\n            \"mean\",\n            \"variance\",\n            \"scale\"\n        ],\n        gradFunc: function(t, e, n) {\n            var r = n.varianceEpsilon, o = e[0], a = e[1], i = e[2], s = e[3], u = Ju(o), c = null == s ? On(1) : s, l = Br(a.shape, u.shape), h = [];\n            if (1 === a.rank) {\n                for(var f = 0; f < u.shape.length - 1; ++f)h.push(u.shape[f]);\n                h.push(1);\n            }\n            var d = Oo(o, a), p = To(t, c), v = ao(Or(i, On(r))), g = To(To(To(v, v), v), On(-.5));\n            return {\n                x: function() {\n                    return 1 === a.rank ? ur(To(To(t, wc(v.as4D(1, 1, 1, a.shape[0]), h)), c), o.shape) : ur(To(To(t, v), c), o.shape);\n                },\n                mean: function() {\n                    var t = To(To(v, On(-1)), p);\n                    return 1 === a.rank && (t = th(t, l)), ur(t, a.shape);\n                },\n                variance: function() {\n                    var t = To(To(g, d), p);\n                    return 1 === a.rank && (t = th(t, l)), ur(t, a.shape);\n                },\n                scale: function() {\n                    var e = To(d, v), n = To(t, e);\n                    return 1 === a.rank && (n = th(n, l)), ur(n, a.shape);\n                },\n                offset: function() {\n                    var e = t;\n                    return 1 === a.rank && (e = th(e, l)), ur(e, a.shape);\n                }\n            };\n        }\n    },\n    {\n        kernelName: Tr,\n        gradFunc: function(t) {\n            return {\n                x: function() {\n                    return t.toFloat();\n                }\n            };\n        }\n    },\n    {\n        kernelName: Ar,\n        inputsToSave: [\n            \"indices\"\n        ],\n        gradFunc: function(t, e) {\n            var n = e[0];\n            return {\n                indices: function() {\n                    return Gn(n.shape, \"float32\");\n                }\n            };\n        }\n    },\n    {\n        kernelName: Nr,\n        inputsToSave: [\n            \"x\"\n        ],\n        gradFunc: function(t, e, n) {\n            var r = e[0], o = n.paddings.map(function(t) {\n                return t[0];\n            });\n            return {\n                x: function() {\n                    return t.slice(o, r.shape);\n                }\n            };\n        }\n    },\n    {\n        kernelName: \"Square\",\n        inputsToSave: [\n            \"x\"\n        ],\n        gradFunc: function(t, e) {\n            var n = e[0];\n            return {\n                x: function() {\n                    return t.mul(n.toFloat().mul(2));\n                }\n            };\n        }\n    },\n    {\n        kernelName: Er,\n        inputsToSave: [\n            \"a\",\n            \"b\"\n        ],\n        gradFunc: function(t, e) {\n            var n = e[0], r = e[1], o = On(2);\n            return {\n                a: function() {\n                    return To(t, To(o, Oo(n, r)));\n                },\n                b: function() {\n                    return To(t, To(o, Oo(r, n)));\n                }\n            };\n        }\n    },\n    {\n        kernelName: Dr,\n        inputsToSave: [\n            \"x\"\n        ],\n        gradFunc: function(t, e, n) {\n            var r = e[0], o = n.reps;\n            return {\n                x: function() {\n                    var e = Xn(r);\n                    if (1 === r.rank) for(var n = 0; n < o[0]; ++n)e = e.add(t.slice([\n                        n * r.shape[0]\n                    ], [\n                        r.shape[0]\n                    ]));\n                    else if (2 === r.rank) for(n = 0; n < o[0]; ++n)for(var a = 0; a < o[1]; ++a)e = e.add(t.slice([\n                        n * r.shape[0],\n                        a * r.shape[1]\n                    ], [\n                        r.shape[0],\n                        r.shape[1]\n                    ]));\n                    else if (3 === r.rank) for(n = 0; n < o[0]; ++n)for(a = 0; a < o[1]; ++a)for(var i = 0; i < o[2]; ++i)e = e.add(t.slice([\n                        n * r.shape[0],\n                        a * r.shape[1],\n                        i * r.shape[2]\n                    ], [\n                        r.shape[0],\n                        r.shape[1],\n                        r.shape[2]\n                    ]));\n                    else {\n                        if (4 !== r.rank) throw new Error(\"Gradient for tile operation is not implemented for rank-\" + r.rank + \" tensors yet.\");\n                        for(n = 0; n < o[0]; ++n)for(a = 0; a < o[1]; ++a)for(i = 0; i < o[2]; ++i)for(var s = 0; s < o[3]; ++s)e = e.add(t.slice([\n                            n * r.shape[0],\n                            a * r.shape[1],\n                            i * r.shape[2],\n                            s * r.shape[3]\n                        ], [\n                            r.shape[0],\n                            r.shape[1],\n                            r.shape[2],\n                            r.shape[3]\n                        ]));\n                    }\n                    return e;\n                }\n            };\n        }\n    },\n    {\n        kernelName: \"Transpose\",\n        gradFunc: function(t, e, n) {\n            var r = Rn(n.perm);\n            return {\n                x: function() {\n                    return ua(t, r);\n                }\n            };\n        }\n    }\n]; Bf < Pf.length; Bf++){\n    p(Pf[Bf]);\n}\nvar Lf = function() {\n    function t() {}\n    return t.prototype.fetch = function(t, e) {\n        return fetch(t, e);\n    }, t.prototype.now = function() {\n        return performance.now();\n    }, t.prototype.encode = function(t, e) {\n        if (\"utf-8\" !== e && \"utf8\" !== e) throw new Error(\"Browser's encoder only supports utf-8, but got \" + e);\n        return null == this.textEncoder && (this.textEncoder = new TextEncoder), this.textEncoder.encode(t);\n    }, t.prototype.decode = function(t, e) {\n        return new TextDecoder(e).decode(t);\n    }, t;\n}();\ni().get(\"IS_BROWSER\") && i().setPlatform(\"browser\", new Lf);\nvar Wf, Uf = function() {\n    return __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/@tensorflow/tfjs-core/node_modules/node-fetch/lib/index.es.js\");\n}, Vf = function() {\n    function t() {\n        this.util = __webpack_require__(/*! util */ \"util\"), this.textEncoder = new this.util.TextEncoder;\n    }\n    return t.prototype.fetch = function(t, e) {\n        return null != i().global.fetch ? i().global.fetch(t, e) : (null == Wf && (Wf = Uf()), Wf(t, e));\n    }, t.prototype.now = function() {\n        var t = process.hrtime();\n        return 1e3 * t[0] + t[1] / 1e6;\n    }, t.prototype.encode = function(t, e) {\n        if (\"utf-8\" !== e && \"utf8\" !== e) throw new Error(\"Node built-in encoder only supports utf-8, but got \" + e);\n        return this.textEncoder.encode(t);\n    }, t.prototype.decode = function(t, e) {\n        return 0 === t.length ? \"\" : new this.util.TextDecoder(e).decode(t);\n    }, t;\n}();\ni().get(\"IS_NODE\") && i().setPlatform(\"node\", new Vf);\nvar zf = {\n    float32: 4,\n    int32: 4,\n    uint16: 2,\n    uint8: 1,\n    bool: 1\n}, Gf = 4;\nfunction Hf(t, e) {\n    for(var n = {}, r = 0, o = function(e) {\n        var o = e.name, a = e.dtype, i = e.shape, s = k(i), u = void 0;\n        if ((\"quantization\" in e)) {\n            var c = e.quantization;\n            if (\"uint8\" !== c.dtype && \"uint16\" !== c.dtype) throw new Error(\"Weight \" + e.name + \" has unknown quantization dtype \" + c.dtype + \". Supported quantization dtypes are: 'uint8' and 'uint16'.\");\n            var l = zf[c.dtype], h = t.slice(r, r + s * l), f = \"uint8\" === c.dtype ? new Uint8Array(h) : new Uint16Array(h);\n            if (\"float32\" === a) u = Float32Array.from(f, function(t) {\n                return t * c.scale + c.min;\n            });\n            else {\n                if (\"int32\" !== a) throw new Error(\"Unsupported dtype in weight '\" + o + \"': \" + a);\n                u = Int32Array.from(f, function(t) {\n                    return Math.round(t * c.scale + c.min);\n                });\n            }\n            r += s * l;\n        } else if (\"string\" === a) {\n            var d = k(e.shape);\n            u = [];\n            for(var p = 0; p < d; p++){\n                var v = new Uint32Array(t.slice(r, r + Gf))[0];\n                r += Gf;\n                var g = new Uint8Array(t.slice(r, r + v));\n                u.push(g), r += v;\n            }\n        } else {\n            var m = zf[a];\n            h = t.slice(r, r + s * m);\n            if (\"float32\" === a) u = new Float32Array(h);\n            else if (\"int32\" === a) u = new Int32Array(h);\n            else {\n                if (\"bool\" !== a) throw new Error(\"Unsupported dtype in weight '\" + o + \"': \" + a);\n                u = new Uint8Array(h);\n            }\n            r += s * m;\n        }\n        n[o] = Fn(u, i, a);\n    }, a = 0, i = e; a < i.length; a++){\n        o(i[a]);\n    }\n    return n;\n}\nfunction qf(t) {\n    if (null === t) throw new Error(\"Invalid input value: \" + JSON.stringify(t));\n    var e = 0, n = [];\n    t.forEach(function(t) {\n        if (e += t.byteLength, n.push(t.byteLength === t.buffer.byteLength ? t : new t.constructor(t)), !(t instanceof Float32Array || t instanceof Int32Array || t instanceof Uint8Array)) throw new Error(\"Unsupported TypedArray subtype: \" + t.constructor.name);\n    });\n    var r = new Uint8Array(e), o = 0;\n    return n.forEach(function(t) {\n        r.set(new Uint8Array(t.buffer), o), o += t.byteLength;\n    }), r.buffer;\n}\nvar Kf = \"undefined\" != typeof Buffer && (\"undefined\" == typeof Blob || \"undefined\" == typeof atob || \"undefined\" == typeof btoa);\nfunction jf(t) {\n    return Kf ? Buffer.byteLength(t) : new Blob([\n        t\n    ]).size;\n}\nfunction Xf(t) {\n    var e = 0;\n    t.forEach(function(t) {\n        e += t.byteLength;\n    });\n    var n = new Uint8Array(e), r = 0;\n    return t.forEach(function(t) {\n        n.set(new Uint8Array(t), r), r += t.byteLength;\n    }), n.buffer;\n}\nfunction Yf(t) {\n    for(t = t.trim(); t.endsWith(\"/\");)t = t.slice(0, t.length - 1);\n    var e = t.split(\"/\");\n    return e[e.length - 1];\n}\nfunction $f(t) {\n    if (t.modelTopology instanceof ArrayBuffer) throw new Error(\"Expected JSON model topology, received ArrayBuffer.\");\n    return {\n        dateSaved: new Date,\n        modelTopologyType: \"JSON\",\n        modelTopologyBytes: null == t.modelTopology ? 0 : jf(JSON.stringify(t.modelTopology)),\n        weightSpecsBytes: null == t.weightSpecs ? 0 : jf(JSON.stringify(t.weightSpecs)),\n        weightDataBytes: null == t.weightData ? 0 : t.weightData.byteLength\n    };\n}\nvar Qf = function() {\n    function t() {\n        this.saveRouters = [], this.loadRouters = [];\n    }\n    return t.getInstance = function() {\n        return null == t.instance && (t.instance = new t), t.instance;\n    }, t.registerSaveRouter = function(e) {\n        t.getInstance().saveRouters.push(e);\n    }, t.registerLoadRouter = function(e) {\n        t.getInstance().loadRouters.push(e);\n    }, t.getSaveHandlers = function(e) {\n        return t.getHandlers(e, \"save\");\n    }, t.getLoadHandlers = function(e, n) {\n        return t.getHandlers(e, \"load\", n);\n    }, t.getHandlers = function(e, n, r) {\n        var o = [];\n        return (\"load\" === n ? t.getInstance().loadRouters : t.getInstance().saveRouters).forEach(function(t) {\n            var n = t(e, r);\n            null !== n && o.push(n);\n        }), o;\n    }, t;\n}(), Jf = \"://\", Zf = function() {\n    function t() {\n        this.managers = {};\n    }\n    return t.getInstance = function() {\n        return null == t.instance && (t.instance = new t), t.instance;\n    }, t.registerManager = function(e, n) {\n        C(null != e, function() {\n            return \"scheme must not be undefined or null.\";\n        }), e.endsWith(Jf) && (e = e.slice(0, e.indexOf(Jf))), C(e.length > 0, function() {\n            return \"scheme must not be an empty string.\";\n        });\n        var r = t.getInstance();\n        C(null == r.managers[e], function() {\n            return \"A model store manager is already registered for scheme '\" + e + \"'.\";\n        }), r.managers[e] = n;\n    }, t.getManager = function(t) {\n        var e = this.getInstance().managers[t];\n        if (null == e) throw new Error(\"Cannot find model manager for scheme '\" + t + \"'\");\n        return e;\n    }, t.getSchemes = function() {\n        return Object.keys(this.getInstance().managers);\n    }, t;\n}();\nfunction td(t) {\n    if (-1 === t.indexOf(Jf)) throw new Error(\"The url string provided does not contain a scheme. Supported schemes are: \" + Zf.getSchemes().join(\",\"));\n    return {\n        scheme: t.split(Jf)[0],\n        path: t.split(Jf)[1]\n    };\n}\nfunction ed(t, e, o) {\n    return void 0 === o && (o = !1), n(this, void 0, void 0, function() {\n        var n, a, i, s, u, c, l, h, f;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return C(t !== e, function() {\n                        return \"Old path and new path are the same: '\" + t + \"'\";\n                    }), C((n = Qf.getLoadHandlers(t)).length > 0, function() {\n                        return \"Copying failed because no load handler is found for source URL \" + t + \".\";\n                    }), C(n.length < 2, function() {\n                        return \"Copying failed because more than one (\" + n.length + \") load handlers for source URL \" + t + \".\";\n                    }), a = n[0], C((i = Qf.getSaveHandlers(e)).length > 0, function() {\n                        return \"Copying failed because no save handler is found for destination URL \" + e + \".\";\n                    }), C(i.length < 2, function() {\n                        return \"Copying failed because more than one (\" + n.length + \") save handlers for destination URL \" + e + \".\";\n                    }), s = i[0], u = td(t).scheme, c = td(t).path, l = u === td(t).scheme, [\n                        4,\n                        a.load()\n                    ];\n                case 1:\n                    return h = r.sent(), o && l ? [\n                        4,\n                        Zf.getManager(u).removeModel(c)\n                    ] : [\n                        3,\n                        3\n                    ];\n                case 2:\n                    r.sent(), r.label = 3;\n                case 3:\n                    return [\n                        4,\n                        s.save(h)\n                    ];\n                case 4:\n                    return f = r.sent(), !o || l ? [\n                        3,\n                        6\n                    ] : [\n                        4,\n                        Zf.getManager(u).removeModel(c)\n                    ];\n                case 5:\n                    r.sent(), r.label = 6;\n                case 6:\n                    return [\n                        2,\n                        f.modelArtifactsInfo\n                    ];\n            }\n        });\n    });\n}\nvar nd = \"models_store\", rd = \"model_info_store\";\nfunction od() {\n    if (!i().getBool(\"IS_BROWSER\")) throw new Error(\"Failed to obtain IndexedDB factory because the current environmentis not a web browser.\");\n    var t = window || self, e = t.indexedDB || t.mozIndexedDB || t.webkitIndexedDB || t.msIndexedDB || t.shimIndexedDB;\n    if (null == e) throw new Error(\"The current browser does not appear to support IndexedDB.\");\n    return e;\n}\nfunction ad(t) {\n    var e = t.result;\n    e.createObjectStore(nd, {\n        keyPath: \"modelPath\"\n    }), e.createObjectStore(rd, {\n        keyPath: \"modelPath\"\n    });\n}\nvar id = function() {\n    function t(t) {\n        if (this.indexedDB = od(), null == t || !t) throw new Error(\"For IndexedDB, modelPath must not be null, undefined or empty.\");\n        this.modelPath = t;\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                if (t.modelTopology instanceof ArrayBuffer) throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");\n                return [\n                    2,\n                    this.databaseAction(this.modelPath, t)\n                ];\n            });\n        });\n    }, t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                return [\n                    2,\n                    this.databaseAction(this.modelPath)\n                ];\n            });\n        });\n    }, t.prototype.databaseAction = function(t, e) {\n        var n = this;\n        return new Promise(function(t, r) {\n            var o = n.indexedDB.open(\"tensorflowjs\", 1);\n            o.onupgradeneeded = function() {\n                return ad(o);\n            }, o.onsuccess = function() {\n                var a = o.result;\n                if (null == e) {\n                    var i = a.transaction(nd, \"readonly\"), s = i.objectStore(nd).get(n.modelPath);\n                    s.onsuccess = function() {\n                        if (null == s.result) return a.close(), r(new Error(\"Cannot find model with path '\" + n.modelPath + \"' in IndexedDB.\"));\n                        t(s.result.modelArtifacts);\n                    }, s.onerror = function(t) {\n                        return a.close(), r(s.error);\n                    }, i.oncomplete = function() {\n                        return a.close();\n                    };\n                } else {\n                    var u, c = $f(e), l = a.transaction(rd, \"readwrite\"), h = l.objectStore(rd), f = h.put({\n                        modelPath: n.modelPath,\n                        modelArtifactsInfo: c\n                    });\n                    f.onsuccess = function() {\n                        var o = (u = a.transaction(nd, \"readwrite\")).objectStore(nd).put({\n                            modelPath: n.modelPath,\n                            modelArtifacts: e,\n                            modelArtifactsInfo: c\n                        });\n                        o.onsuccess = function() {\n                            return t({\n                                modelArtifactsInfo: c\n                            });\n                        }, o.onerror = function(t) {\n                            var e = (h = l.objectStore(rd)).delete(n.modelPath);\n                            e.onsuccess = function() {\n                                return a.close(), r(o.error);\n                            }, e.onerror = function(t) {\n                                return a.close(), r(o.error);\n                            };\n                        };\n                    }, f.onerror = function(t) {\n                        return a.close(), r(f.error);\n                    }, l.oncomplete = function() {\n                        null == u ? a.close() : u.oncomplete = function() {\n                            return a.close();\n                        };\n                    };\n                }\n            }, o.onerror = function(t) {\n                return r(o.error);\n            };\n        });\n    }, t.URL_SCHEME = \"indexeddb://\", t;\n}(), sd = function(t) {\n    return i().getBool(\"IS_BROWSER\") && !Array.isArray(t) && t.startsWith(id.URL_SCHEME) ? (e = t.slice(id.URL_SCHEME.length), new id(e)) : null;\n    var e;\n};\nQf.registerSaveRouter(sd), Qf.registerLoadRouter(sd);\nvar ud = function() {\n    function t() {\n        this.indexedDB = od();\n    }\n    return t.prototype.listModels = function() {\n        return n(this, void 0, void 0, function() {\n            var t = this;\n            return r(this, function(e) {\n                return [\n                    2,\n                    new Promise(function(e, n) {\n                        var r = t.indexedDB.open(\"tensorflowjs\", 1);\n                        r.onupgradeneeded = function() {\n                            return ad(r);\n                        }, r.onsuccess = function() {\n                            var t = r.result, o = t.transaction(rd, \"readonly\"), a = o.objectStore(rd).getAll();\n                            a.onsuccess = function() {\n                                for(var t = {}, n = 0, r = a.result; n < r.length; n++){\n                                    var o = r[n];\n                                    t[o.modelPath] = o.modelArtifactsInfo;\n                                }\n                                e(t);\n                            }, a.onerror = function(e) {\n                                return t.close(), n(a.error);\n                            }, o.oncomplete = function() {\n                                return t.close();\n                            };\n                        }, r.onerror = function(t) {\n                            return n(r.error);\n                        };\n                    })\n                ];\n            });\n        });\n    }, t.prototype.removeModel = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e = this;\n            return r(this, function(n) {\n                var r;\n                return t = (r = t).startsWith(id.URL_SCHEME) ? r.slice(id.URL_SCHEME.length) : r, [\n                    2,\n                    new Promise(function(n, r) {\n                        var o = e.indexedDB.open(\"tensorflowjs\", 1);\n                        o.onupgradeneeded = function() {\n                            return ad(o);\n                        }, o.onsuccess = function() {\n                            var e, a = o.result, i = a.transaction(rd, \"readwrite\"), s = i.objectStore(rd), u = s.get(t);\n                            u.onsuccess = function() {\n                                if (null == u.result) return a.close(), r(new Error(\"Cannot find model with path '\" + t + \"' in IndexedDB.\"));\n                                var o = s.delete(t), i = function() {\n                                    var o = (e = a.transaction(nd, \"readwrite\")).objectStore(nd).delete(t);\n                                    o.onsuccess = function() {\n                                        return n(u.result.modelArtifactsInfo);\n                                    }, o.onerror = function(t) {\n                                        return r(u.error);\n                                    };\n                                };\n                                o.onsuccess = i, o.onerror = function(t) {\n                                    return i(), a.close(), r(u.error);\n                                };\n                            }, u.onerror = function(t) {\n                                return a.close(), r(u.error);\n                            }, i.oncomplete = function() {\n                                null == e ? a.close() : e.oncomplete = function() {\n                                    return a.close();\n                                };\n                            };\n                        }, o.onerror = function(t) {\n                            return r(o.error);\n                        };\n                    })\n                ];\n            });\n        });\n    }, t;\n}();\nif (i().getBool(\"IS_BROWSER\")) try {\n    Zf.registerManager(id.URL_SCHEME, new ud);\n} catch (t) {}\nvar cd = \"/\", ld = \"tensorflowjs_models\", hd = \"info\", fd = \"model_topology\", dd = \"weight_specs\", pd = \"weight_data\", vd = \"model_metadata\";\nfunction gd(t) {\n    return {\n        info: [\n            ld,\n            t,\n            hd\n        ].join(cd),\n        topology: [\n            ld,\n            t,\n            fd\n        ].join(cd),\n        weightSpecs: [\n            ld,\n            t,\n            dd\n        ].join(cd),\n        weightData: [\n            ld,\n            t,\n            pd\n        ].join(cd),\n        modelMetadata: [\n            ld,\n            t,\n            vd\n        ].join(cd)\n    };\n}\nfunction md(t) {\n    var e = t.split(cd);\n    if (e.length < 3) throw new Error(\"Invalid key format: \" + t);\n    return e.slice(1, e.length - 1).join(cd);\n}\nvar yd = function() {\n    function t(t) {\n        if (!i().getBool(\"IS_BROWSER\") || \"undefined\" == \"undefined\" || 0) throw new Error(\"The current environment does not support local storage.\");\n        if (this.LS = window.localStorage, null == t || !t) throw new Error(\"For local storage, modelPath must not be null, undefined or empty.\");\n        this.modelPath = t, this.keys = gd(this.modelPath);\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o;\n            return r(this, function(r) {\n                if (t.modelTopology instanceof ArrayBuffer) throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");\n                e = JSON.stringify(t.modelTopology), n = JSON.stringify(t.weightSpecs), o = $f(t);\n                try {\n                    return this.LS.setItem(this.keys.info, JSON.stringify(o)), this.LS.setItem(this.keys.topology, e), this.LS.setItem(this.keys.weightSpecs, n), this.LS.setItem(this.keys.weightData, function(t) {\n                        if (Kf) return Buffer.from(t).toString(\"base64\");\n                        for(var e = new Uint8Array(t), n = \"\", r = 0, o = e.length; r < o; r++)n += String.fromCharCode(e[r]);\n                        return btoa(n);\n                    }(t.weightData)), this.LS.setItem(this.keys.modelMetadata, JSON.stringify({\n                        format: t.format,\n                        generatedBy: t.generatedBy,\n                        convertedBy: t.convertedBy,\n                        userDefinedMetadata: t.userDefinedMetadata\n                    })), [\n                        2,\n                        {\n                            modelArtifactsInfo: o\n                        }\n                    ];\n                } catch (t) {\n                    throw this.LS.removeItem(this.keys.info), this.LS.removeItem(this.keys.topology), this.LS.removeItem(this.keys.weightSpecs), this.LS.removeItem(this.keys.weightData), this.LS.removeItem(this.keys.modelMetadata), new Error(\"Failed to save model '\" + this.modelPath + \"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=\" + o.modelTopologyBytes + \", weightSpecsBytes=\" + o.weightSpecsBytes + \", weightDataBytes=\" + o.weightDataBytes + \".\");\n                }\n                return [\n                    2\n                ];\n            });\n        });\n    }, t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n, o, a, i, s;\n            return r(this, function(r) {\n                if (null == (t = JSON.parse(this.LS.getItem(this.keys.info)))) throw new Error(\"In local storage, there is no model with name '\" + this.modelPath + \"'\");\n                if (\"JSON\" !== t.modelTopologyType) throw new Error(\"BrowserLocalStorage does not support loading non-JSON model topology yet.\");\n                if (e = {}, null == (n = JSON.parse(this.LS.getItem(this.keys.topology)))) throw new Error(\"In local storage, the topology of model '\" + this.modelPath + \"' is missing.\");\n                if (e.modelTopology = n, null == (o = JSON.parse(this.LS.getItem(this.keys.weightSpecs)))) throw new Error(\"In local storage, the weight specs of model '\" + this.modelPath + \"' are missing.\");\n                if (e.weightSpecs = o, null != (a = this.LS.getItem(this.keys.modelMetadata)) && (i = JSON.parse(a), e.format = i.format, e.generatedBy = i.generatedBy, e.convertedBy = i.convertedBy, e.userDefinedMetadata = i.userDefinedMetadata), null == (s = this.LS.getItem(this.keys.weightData))) throw new Error(\"In local storage, the binary weight values of model '\" + this.modelPath + \"' are missing.\");\n                return e.weightData = function(t) {\n                    if (Kf) {\n                        var e = Buffer.from(t, \"base64\");\n                        return e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);\n                    }\n                    for(var n = atob(t), r = new Uint8Array(n.length), o = 0; o < n.length; ++o)r.set([\n                        n.charCodeAt(o)\n                    ], o);\n                    return r.buffer;\n                }(s), [\n                    2,\n                    e\n                ];\n            });\n        });\n    }, t.URL_SCHEME = \"localstorage://\", t;\n}(), xd = function(t) {\n    return i().getBool(\"IS_BROWSER\") && !Array.isArray(t) && t.startsWith(yd.URL_SCHEME) ? (e = t.slice(yd.URL_SCHEME.length), new yd(e)) : null;\n    var e;\n};\nQf.registerSaveRouter(xd), Qf.registerLoadRouter(xd);\nvar bd = function() {\n    function t() {\n        C(i().getBool(\"IS_BROWSER\"), function() {\n            return \"Current environment is not a web browser\";\n        }), C( true || 0, function() {\n            return \"Current browser does not appear to support localStorage\";\n        }), this.LS = window.localStorage;\n    }\n    return t.prototype.listModels = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n, o, a, i;\n            return r(this, function(r) {\n                for(t = {}, e = ld + cd, n = cd + hd, o = 0; o < this.LS.length; ++o)(a = this.LS.key(o)).startsWith(e) && a.endsWith(n) && (i = md(a), t[i] = JSON.parse(this.LS.getItem(a)));\n                return [\n                    2,\n                    t\n                ];\n            });\n        });\n    }, t.prototype.removeModel = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n;\n            return r(this, function(r) {\n                var o;\n                if (t = (o = t).startsWith(yd.URL_SCHEME) ? o.slice(yd.URL_SCHEME.length) : o, e = gd(t), null == this.LS.getItem(e.info)) throw new Error(\"Cannot find model at path '\" + t + \"'\");\n                return n = JSON.parse(this.LS.getItem(e.info)), this.LS.removeItem(e.info), this.LS.removeItem(e.topology), this.LS.removeItem(e.weightSpecs), this.LS.removeItem(e.weightData), [\n                    2,\n                    n\n                ];\n            });\n        });\n    }, t;\n}();\nif (i().getBool(\"IS_BROWSER\")) try {\n    Zf.registerManager(yd.URL_SCHEME, new bd);\n} catch (t) {}\nvar wd = \"model\", Cd = \".json\", Ed = \".weights.bin\";\nfunction Rd(t) {\n    return new Promise(function(t) {\n        return setTimeout(t);\n    }).then(t);\n}\nvar Id = function() {\n    function t(e) {\n        if (!i().getBool(\"IS_BROWSER\")) throw new Error(\"browserDownloads() cannot proceed because the current environment is not a browser.\");\n        e.startsWith(t.URL_SCHEME) && (e = e.slice(t.URL_SCHEME.length)), null != e && 0 !== e.length || (e = wd), this.modelTopologyFileName = e + Cd, this.weightDataFileName = e + Ed;\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a, i, s;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (\"undefined\" == typeof document) throw new Error(\"Browser downloads are not supported in this environment since `document` is not present\");\n                        if (e = window.URL.createObjectURL(new Blob([\n                            t.weightData\n                        ], {\n                            type: \"application/octet-stream\"\n                        })), !(t.modelTopology instanceof ArrayBuffer)) return [\n                            3,\n                            1\n                        ];\n                        throw new Error(\"BrowserDownloads.save() does not support saving model topology in binary formats yet.\");\n                    case 1:\n                        return n = [\n                            {\n                                paths: [\n                                    \"./\" + this.weightDataFileName\n                                ],\n                                weights: t.weightSpecs\n                            }\n                        ], o = {\n                            modelTopology: t.modelTopology,\n                            format: t.format,\n                            generatedBy: t.generatedBy,\n                            convertedBy: t.convertedBy,\n                            weightsManifest: n\n                        }, a = window.URL.createObjectURL(new Blob([\n                            JSON.stringify(o)\n                        ], {\n                            type: \"application/json\"\n                        })), (i = null == this.jsonAnchor ? document.createElement(\"a\") : this.jsonAnchor).download = this.modelTopologyFileName, i.href = a, [\n                            4,\n                            Rd(function() {\n                                return i.dispatchEvent(new MouseEvent(\"click\"));\n                            })\n                        ];\n                    case 2:\n                        return r.sent(), null == t.weightData ? [\n                            3,\n                            4\n                        ] : ((s = null == this.weightDataAnchor ? document.createElement(\"a\") : this.weightDataAnchor).download = this.weightDataFileName, s.href = e, [\n                            4,\n                            Rd(function() {\n                                return s.dispatchEvent(new MouseEvent(\"click\"));\n                            })\n                        ]);\n                    case 3:\n                        r.sent(), r.label = 4;\n                    case 4:\n                        return [\n                            2,\n                            {\n                                modelArtifactsInfo: $f(t)\n                            }\n                        ];\n                }\n            });\n        });\n    }, t.URL_SCHEME = \"downloads://\", t;\n}(), kd = function() {\n    function t(t) {\n        if (null == t || t.length < 1) throw new Error(\"When calling browserFiles, at least 1 file is required, but received \" + t);\n        this.files = t;\n    }\n    return t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n = this;\n            return r(this, function(r) {\n                return t = this.files[0], e = this.files.slice(1), [\n                    2,\n                    new Promise(function(r, o) {\n                        var a = new FileReader;\n                        a.onload = function(a) {\n                            var i = JSON.parse(a.target.result), s = i.modelTopology;\n                            if (null != s) {\n                                0 === e.length && r({\n                                    modelTopology: s\n                                });\n                                var u = i.weightsManifest;\n                                if (null != u) {\n                                    var c;\n                                    try {\n                                        c = n.checkManifestAndWeightFiles(u, e);\n                                    } catch (t) {\n                                        return void o(t);\n                                    }\n                                    var l = [], h = [], f = [];\n                                    u.forEach(function(t) {\n                                        t.paths.forEach(function(t) {\n                                            h.push(t), f.push(null);\n                                        }), l.push.apply(l, t.weights);\n                                    }), u.forEach(function(t) {\n                                        t.paths.forEach(function(t) {\n                                            var e = new FileReader;\n                                            e.onload = function(e) {\n                                                var n = e.target.result, o = h.indexOf(t);\n                                                f[o] = n, -1 === f.indexOf(null) && r({\n                                                    modelTopology: s,\n                                                    weightSpecs: l,\n                                                    weightData: Xf(f),\n                                                    format: i.format,\n                                                    generatedBy: i.generatedBy,\n                                                    convertedBy: i.convertedBy,\n                                                    userDefinedMetadata: i.userDefinedMetadata\n                                                });\n                                            }, e.onerror = function(e) {\n                                                return o(\"Failed to weights data from file of path '\" + t + \"'.\");\n                                            }, e.readAsArrayBuffer(c[t]);\n                                        });\n                                    });\n                                } else o(new Error(\"weightManifest field is missing from file \" + t.name));\n                            } else o(new Error(\"modelTopology field is missing from file \" + t.name));\n                        }, a.onerror = function(e) {\n                            return o(\"Failed to read model topology and weights manifest JSON from file '\" + t.name + \"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.\");\n                        }, a.readAsText(t);\n                    })\n                ];\n            });\n        });\n    }, t.prototype.checkManifestAndWeightFiles = function(t, e) {\n        for(var n = [], r = e.map(function(t) {\n            return Yf(t.name);\n        }), o = {}, a = 0, i = t; a < i.length; a++){\n            i[a].paths.forEach(function(t) {\n                var a = Yf(t);\n                if (-1 !== n.indexOf(a)) throw new Error(\"Duplicate file basename found in weights manifest: '\" + a + \"'\");\n                if (n.push(a), -1 === r.indexOf(a)) throw new Error(\"Weight file with basename '\" + a + \"' is not provided.\");\n                o[t] = e[r.indexOf(a)];\n            });\n        }\n        if (n.length !== e.length) throw new Error(\"Mismatch in the number of files in weights manifest (\" + n.length + \") and the number of weight files provided (\" + e.length + \").\");\n        return o;\n    }, t;\n}();\nfunction Sd(t, e, n, r) {\n    !function(t) {\n        C(null != t && Array.isArray(t) && t.length > 0, function() {\n            return \"promises must be a none empty array\";\n        });\n    }(t), function(t, e) {\n        C(t >= 0 && t <= 1, function() {\n            return \"Progress fraction must be in range [0, 1], but got startFraction \" + t;\n        }), C(e >= 0 && e <= 1, function() {\n            return \"Progress fraction must be in range [0, 1], but got endFraction \" + e;\n        }), C(e >= t, function() {\n            return \"startFraction must be no more than endFraction, but got startFraction \" + t + \" and endFraction \" + e;\n        });\n    }(n = null == n ? 0 : n, r = null == r ? 1 : r);\n    var o = 0;\n    return Promise.all(t.map(function(a) {\n        return a.then(function(a) {\n            var i = n + ++o / t.length * (r - n);\n            return e(i), a;\n        }), a;\n    }));\n}\nfunction Ad(t, e) {\n    return n(this, void 0, void 0, function() {\n        var n, o, a, s, u, c, l, h, f;\n        return r(this, function(r) {\n            switch(r.label){\n                case 0:\n                    return null == e && (e = {}), n = null == e.fetchFunc ? i().platform.fetch : e.fetchFunc, o = t.map(function(t) {\n                        return n(t, e.requestInit, {\n                            isBinary: !0\n                        });\n                    }), a = 0, s = .5, null != e.onProgress ? [\n                        3,\n                        2\n                    ] : [\n                        4,\n                        Promise.all(o)\n                    ];\n                case 1:\n                    return u = r.sent(), [\n                        3,\n                        4\n                    ];\n                case 2:\n                    return [\n                        4,\n                        Sd(o, e.onProgress, a, s)\n                    ];\n                case 3:\n                    u = r.sent(), r.label = 4;\n                case 4:\n                    return c = u.map(function(t) {\n                        return t.arrayBuffer();\n                    }), l = .5, h = 1, null != e.onProgress ? [\n                        3,\n                        6\n                    ] : [\n                        4,\n                        Promise.all(c)\n                    ];\n                case 5:\n                    return f = r.sent(), [\n                        3,\n                        8\n                    ];\n                case 6:\n                    return [\n                        4,\n                        Sd(c, e.onProgress, l, h)\n                    ];\n                case 7:\n                    f = r.sent(), r.label = 8;\n                case 8:\n                    return [\n                        2,\n                        f\n                    ];\n            }\n        });\n    });\n}\nfunction Td(t) {\n    var e = this;\n    return function(o, a, i) {\n        return void 0 === a && (a = \"\"), n(e, void 0, void 0, function() {\n            var e, n, s, u, c, l, h, f, d, p;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (e = o.map(function() {\n                            return !1;\n                        }), n = {}, s = null != i ? i.map(function() {\n                            return !1;\n                        }) : [], u = [], o.forEach(function(t, r) {\n                            var o = 0;\n                            t.weights.forEach(function(t) {\n                                var a = \"quantization\" in t ? t.quantization.dtype : t.dtype, c = zf[a] * k(t.shape), l = function() {\n                                    e[r] = !0, null == n[r] && (n[r] = []), n[r].push({\n                                        manifestEntry: t,\n                                        groupOffset: o,\n                                        sizeBytes: c\n                                    });\n                                };\n                                null != i ? i.forEach(function(e, n) {\n                                    e === t.name && (l(), s[n] = !0);\n                                }) : l(), u.push(t.name), o += c;\n                            });\n                        }), !s.every(function(t) {\n                            return t;\n                        })) throw c = i.filter(function(t, e) {\n                            return !s[e];\n                        }), new Error(\"Could not find weights in manifest with names: \" + c.join(\", \") + \". \\nManifest JSON has weights with names: \" + u.join(\", \") + \".\");\n                        return l = e.reduce(function(t, e, n) {\n                            return e && t.push(n), t;\n                        }, []), h = [], l.forEach(function(t) {\n                            o[t].paths.forEach(function(t) {\n                                var e = a + (a.endsWith(\"/\") ? \"\" : \"/\") + t;\n                                h.push(e);\n                            });\n                        }), [\n                            4,\n                            t(h)\n                        ];\n                    case 1:\n                        return f = r.sent(), d = {}, p = 0, l.forEach(function(t) {\n                            for(var e = o[t].paths.length, r = 0, a = 0; a < e; a++)r += f[p + a].byteLength;\n                            for(var i = new ArrayBuffer(r), s = new Uint8Array(i), u = 0, c = 0; c < e; c++){\n                                var l = new Uint8Array(f[p + c]);\n                                s.set(l, u), u += l.byteLength;\n                            }\n                            n[t].forEach(function(t) {\n                                var e = Hf(i.slice(t.groupOffset, t.groupOffset + t.sizeBytes), [\n                                    t.manifestEntry\n                                ]);\n                                for(var n in e)d[n] = e[n];\n                            }), p += e;\n                        }), [\n                            2,\n                            d\n                        ];\n                }\n            });\n        });\n    };\n}\nQf.registerSaveRouter(function(t) {\n    return i().getBool(\"IS_BROWSER\") && !Array.isArray(t) && t.startsWith(Id.URL_SCHEME) ? function(t) {\n        void 0 === t && (t = \"model\");\n        return new Id(t);\n    }(t.slice(Id.URL_SCHEME.length)) : null;\n});\nvar Dd = function() {\n    function t(t, e) {\n        if (this.DEFAULT_METHOD = \"POST\", null == e && (e = {}), this.weightPathPrefix = e.weightPathPrefix, this.onProgress = e.onProgress, null != e.fetchFunc ? (C(\"function\" == typeof e.fetchFunc, function() {\n            return \"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\";\n        }), this.fetch = e.fetchFunc) : this.fetch = i().platform.fetch, C(null != t && t.length > 0, function() {\n            return \"URL path for http must not be null, undefined or empty.\";\n        }), Array.isArray(t) && C(2 === t.length, function() {\n            return \"URL paths for http must have a length of 2, (actual length is \" + t.length + \").\";\n        }), this.path = t, null != e.requestInit && null != e.requestInit.body) throw new Error(\"requestInit is expected to have no pre-existing body, but has one.\");\n        this.requestInit = e.requestInit || {};\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (t.modelTopology instanceof ArrayBuffer) throw new Error(\"BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.\");\n                        return (e = Object.assign({\n                            method: this.DEFAULT_METHOD\n                        }, this.requestInit)).body = new FormData, n = [\n                            {\n                                paths: [\n                                    \"./model.weights.bin\"\n                                ],\n                                weights: t.weightSpecs\n                            }\n                        ], o = {\n                            modelTopology: t.modelTopology,\n                            format: t.format,\n                            generatedBy: t.generatedBy,\n                            convertedBy: t.convertedBy,\n                            userDefinedMetadata: t.userDefinedMetadata,\n                            weightsManifest: n\n                        }, e.body.append(\"model.json\", new Blob([\n                            JSON.stringify(o)\n                        ], {\n                            type: \"application/json\"\n                        }), \"model.json\"), null != t.weightData && e.body.append(\"model.weights.bin\", new Blob([\n                            t.weightData\n                        ], {\n                            type: \"application/octet-stream\"\n                        }), \"model.weights.bin\"), [\n                            4,\n                            this.fetch(this.path, e)\n                        ];\n                    case 1:\n                        if ((a = r.sent()).ok) return [\n                            2,\n                            {\n                                modelArtifactsInfo: $f(t),\n                                responses: [\n                                    a\n                                ]\n                            }\n                        ];\n                        throw new Error(\"BrowserHTTPRequest.save() failed due to HTTP response status \" + a.status + \".\");\n                }\n            });\n        });\n    }, t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n, o, a, i, s, u, c, l, h, f;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            this.fetch(this.path, this.requestInit)\n                        ];\n                    case 1:\n                        if (!(t = r.sent()).ok) throw new Error(\"Request to \" + this.path + \" failed with status code \" + t.status + \". Please verify this URL points to the model JSON of the model to load.\");\n                        r.label = 2;\n                    case 2:\n                        return r.trys.push([\n                            2,\n                            4,\n                            ,\n                            5\n                        ]), [\n                            4,\n                            t.json()\n                        ];\n                    case 3:\n                        return e = r.sent(), [\n                            3,\n                            5\n                        ];\n                    case 4:\n                        throw r.sent(), n = \"Failed to parse model JSON of response from \" + this.path + \".\", this.path.endsWith(\".pb\") ? n += \" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.\" : n += \" Please make sure the server is serving valid JSON for this request.\", new Error(n);\n                    case 5:\n                        if (o = e.modelTopology, a = e.weightsManifest, i = e.generatedBy, s = e.convertedBy, u = e.format, c = e.userDefinedMetadata, null == o && null == a) throw new Error(\"The JSON from HTTP path \" + this.path + \" contains neither model topology or manifest for weights.\");\n                        return null == a ? [\n                            3,\n                            7\n                        ] : [\n                            4,\n                            this.loadWeights(a)\n                        ];\n                    case 6:\n                        f = r.sent(), l = f[0], h = f[1], r.label = 7;\n                    case 7:\n                        return [\n                            2,\n                            {\n                                modelTopology: o,\n                                weightSpecs: l,\n                                weightData: h,\n                                userDefinedMetadata: c,\n                                generatedBy: i,\n                                convertedBy: s,\n                                format: u\n                            }\n                        ];\n                }\n            });\n        });\n    }, t.prototype.loadWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n, o, a, i, s, u, c, l, h, f;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        for(e = Array.isArray(this.path) ? this.path[1] : this.path, n = function(t) {\n                            var e = t.lastIndexOf(\"/\"), n = t.lastIndexOf(\"?\"), r = t.substring(0, e), o = n > e ? t.substring(n) : \"\";\n                            return [\n                                r + \"/\",\n                                o\n                            ];\n                        }(e), o = n[0], a = n[1], i = this.weightPathPrefix || o, s = [], u = 0, c = t; u < c.length; u++)l = c[u], s.push.apply(s, l.weights);\n                        return h = [], t.forEach(function(t) {\n                            t.paths.forEach(function(t) {\n                                h.push(i + t + a);\n                            });\n                        }), [\n                            4,\n                            Ad(h, {\n                                requestInit: this.requestInit,\n                                fetchFunc: this.fetch,\n                                onProgress: this.onProgress\n                            })\n                        ];\n                    case 1:\n                        return f = r.sent(), [\n                            2,\n                            [\n                                s,\n                                Xf(f)\n                            ]\n                        ];\n                }\n            });\n        });\n    }, t.URL_SCHEME_REGEX = /^https?:\\/\\//, t;\n}();\nfunction Nd(t) {\n    return null != t.match(Dd.URL_SCHEME_REGEX);\n}\nvar Fd = function(t, e) {\n    if (\"undefined\" == typeof fetch) return null;\n    return (Array.isArray(t) ? t.every(function(t) {\n        return Nd(t);\n    }) : Nd(t)) ? _d(t, {\n        onProgress: e\n    }) : null;\n};\nfunction _d(t, e) {\n    return new Dd(t, e);\n}\nQf.registerSaveRouter(Fd), Qf.registerLoadRouter(Fd);\nvar Od = function() {\n    function t(t) {\n        this.modelArtifacts = t;\n    }\n    return t.prototype.load = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                return [\n                    2,\n                    this.modelArtifacts\n                ];\n            });\n        });\n    }, t;\n}(), Md = function() {\n    function t(t) {\n        this.saveHandler = t;\n    }\n    return t.prototype.save = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                return [\n                    2,\n                    this.saveHandler(t)\n                ];\n            });\n        });\n    }, t;\n}();\nvar Bd = Object.freeze({\n    browserFiles: function(t) {\n        return new kd(t);\n    },\n    browserHTTPRequest: function(t, e) {\n        return _d(t, e);\n    },\n    concatenateArrayBuffers: Xf,\n    decodeWeights: Hf,\n    encodeWeights: function(t, e) {\n        return n(this, void 0, void 0, function() {\n            var o, a, i, s, u, c = this;\n            return r(this, function(l) {\n                switch(l.label){\n                    case 0:\n                        for(o = [], a = [], i = Array.isArray(t) ? t.map(function(t) {\n                            return t.name;\n                        }) : Object.keys(t), s = function(s) {\n                            var u = i[s], l = Array.isArray(t) ? t[s].tensor : t[u];\n                            if (\"float32\" !== l.dtype && \"int32\" !== l.dtype && \"bool\" !== l.dtype && \"string\" !== l.dtype) throw new Error(\"Unsupported dtype in weight '\" + u + \"': \" + l.dtype);\n                            var h = {\n                                name: u,\n                                shape: l.shape,\n                                dtype: l.dtype\n                            };\n                            if (\"string\" === l.dtype) {\n                                var f = new Promise(function(t) {\n                                    return n(c, void 0, void 0, function() {\n                                        var e, n, o, a, i, s, u;\n                                        return r(this, function(r) {\n                                            switch(r.label){\n                                                case 0:\n                                                    return [\n                                                        4,\n                                                        l.bytes()\n                                                    ];\n                                                case 1:\n                                                    for(e = r.sent(), n = e.reduce(function(t, e) {\n                                                        return t + e.length;\n                                                    }, 0) + Gf * e.length, o = new Uint8Array(n), a = 0, i = 0; i < e.length; i++)s = e[i], u = new Uint8Array(new Uint32Array([\n                                                        s.length\n                                                    ]).buffer), o.set(u, a), a += Gf, o.set(s, a), a += s.length;\n                                                    return t(o), [\n                                                        2\n                                                    ];\n                                            }\n                                        });\n                                    });\n                                });\n                                a.push(f);\n                            } else a.push(l.data());\n                            null != e && (h.group = e), o.push(h);\n                        }, u = 0; u < i.length; ++u)s(u);\n                        return [\n                            4,\n                            Promise.all(a)\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            {\n                                data: qf(l.sent()),\n                                specs: o\n                            }\n                        ];\n                }\n            });\n        });\n    },\n    fromMemory: function(t, e, n, r) {\n        return 1 === arguments.length ? null != t.modelTopology || null != t.weightSpecs ? new Od(t) : (console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"), new Od({\n            modelTopology: t\n        })) : (console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"), new Od({\n            modelTopology: t,\n            weightSpecs: e,\n            weightData: n,\n            trainingConfig: r\n        }));\n    },\n    getLoadHandlers: function(t, e) {\n        return Qf.getLoadHandlers(t, e);\n    },\n    getModelArtifactsInfoForJSON: $f,\n    getSaveHandlers: function(t) {\n        return Qf.getSaveHandlers(t);\n    },\n    http: _d,\n    isHTTPScheme: Nd,\n    loadWeights: function(t, e, o, a) {\n        return void 0 === e && (e = \"\"), n(this, void 0, void 0, function() {\n            return r(this, function(n) {\n                return [\n                    2,\n                    Td(function(t) {\n                        return Ad(t, {\n                            requestInit: a\n                        });\n                    })(t, e, o)\n                ];\n            });\n        });\n    },\n    registerLoadRouter: function(t) {\n        return Qf.registerLoadRouter(t);\n    },\n    registerSaveRouter: function(t) {\n        return Qf.registerSaveRouter(t);\n    },\n    weightsLoaderFactory: Td,\n    withSaveHandler: function(t) {\n        return new Md(t);\n    },\n    copyModel: function(t, e) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(n) {\n                return !1, [\n                    2,\n                    ed(t, e, !1)\n                ];\n            });\n        });\n    },\n    listModels: function() {\n        return n(this, void 0, void 0, function() {\n            var t, e, n, o, a, i, s;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        t = Zf.getSchemes(), e = {}, n = 0, o = t, r.label = 1;\n                    case 1:\n                        return n < o.length ? (a = o[n], [\n                            4,\n                            Zf.getManager(a).listModels()\n                        ]) : [\n                            3,\n                            4\n                        ];\n                    case 2:\n                        for(s in i = r.sent())e[a + Jf + s] = i[s];\n                        r.label = 3;\n                    case 3:\n                        return n++, [\n                            3,\n                            1\n                        ];\n                    case 4:\n                        return [\n                            2,\n                            e\n                        ];\n                }\n            });\n        });\n    },\n    moveModel: function(t, e) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(n) {\n                return !0, [\n                    2,\n                    ed(t, e, !0)\n                ];\n            });\n        });\n    },\n    removeModel: function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                return e = td(t), [\n                    2,\n                    Zf.getManager(e.scheme).removeModel(e.path)\n                ];\n            });\n        });\n    }\n});\nvar Pd, Ld = An({\n    confusionMatrix_: function(t, e, n) {\n        var r = gn(t, \"labels\", \"confusionMatrix\"), o = gn(e, \"predictions\", \"confusionMatrix\");\n        C(null == n || n > 0 && Number.isInteger(n), function() {\n            return \"If provided, numClasses must be a positive integer, but got \" + n;\n        }), C(1 === r.rank, function() {\n            return \"Expected the rank of labels to be 1, but got \" + r.rank;\n        }), C(1 === o.rank, function() {\n            return \"Expected the rank of predictions to be 1, but got \" + o.rank;\n        }), C(r.shape[0] === o.shape[0], function() {\n            return \"Mismatch in the number of examples: \" + r.shape[0] + \" vs. \" + o.shape[0] + \". Labels and predictions should have the same number of elements.\";\n        }), C(n > 0 && Number.isInteger(n), function() {\n            return \"numClasses is required to be a positive integer, but got \" + n;\n        });\n        var a = Rc(r.asType(\"int32\"), n), i = Rc(o.asType(\"int32\"), n);\n        return a.transpose().matMul(i).asType(\"int32\");\n    }\n}), Wd = Object.freeze({\n    confusionMatrix: Ld\n});\nvar Ud = An({\n    fromPixels_: function(t, e) {\n        if (void 0 === e && (e = 3), e > 4) throw new Error(\"Cannot construct Tensor with more than 4 channels from pixels.\");\n        if (null == t) throw new Error(\"pixels passed to tf.browser.fromPixels() can not be null\");\n        var n = !1, r = !1, o = !1, a = !1, i = !1;\n        if (t.data instanceof Uint8Array) n = !0;\n        else if (\"undefined\" != typeof ImageData && t instanceof ImageData) r = !0;\n        else if (\"undefined\" != typeof HTMLVideoElement && t instanceof HTMLVideoElement) o = !0;\n        else if (\"undefined\" != typeof HTMLImageElement && t instanceof HTMLImageElement) a = !0;\n        else {\n            if (null == t.getContext) throw new Error(\"pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was \" + t.constructor.name);\n            i = !0;\n        }\n        if (o) {\n            if (o && t.readyState < 2) throw new Error(\"The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.\");\n        }\n        if (null != l(\"FromPixels\", Lt.backendName)) return Lt.runKernel(\"FromPixels\", {\n            pixels: t\n        }, {\n            numChannels: e\n        });\n        var s, u, c = o ? [\n            t.videoWidth,\n            t.videoHeight\n        ] : [\n            t.width,\n            t.height\n        ], h = c[0], f = c[1];\n        if (i ? s = t.getContext(\"2d\").getImageData(0, 0, h, f).data : r || n ? s = t.data : (a || o) && (null == Pd && (Pd = document.createElement(\"canvas\").getContext(\"2d\")), Pd.canvas.width = h, Pd.canvas.height = f, Pd.drawImage(t, 0, 0, h, f), s = Pd.getImageData(0, 0, h, f).data), 4 === e) u = new Int32Array(s);\n        else {\n            var d = h * f;\n            u = new Int32Array(d * e);\n            for(var p = 0; p < d; p++)for(var v = 0; v < e; ++v)u[p * e + v] = s[4 * p + v];\n        }\n        return Pn(u, [\n            f,\n            h,\n            e\n        ], \"int32\");\n    }\n}), Vd = Object.freeze({\n    toPixels: function(t, e) {\n        return n(this, void 0, void 0, function() {\n            var n, o, a, i, s, u, c, l, h, f, d, p, v, g, m, y, x, b, w, C, E, R, I;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        if (n = gn(t, \"img\", \"toPixels\"), t instanceof wt || (n = n.toInt()), 2 !== n.rank && 3 !== n.rank) throw new Error(\"toPixels only supports rank 2 or 3 tensors, got rank \" + n.rank + \".\");\n                        if (o = n.shape.slice(0, 2), a = o[0], i = o[1], (s = 2 === n.rank ? 1 : n.shape[2]) > 4 || 2 === s) throw new Error(\"toPixels only supports depth of size 1, 3 or 4 but got \" + s);\n                        return [\n                            4,\n                            n.data()\n                        ];\n                    case 1:\n                        return u = r.sent(), c = n.min(), l = n.max(), [\n                            4,\n                            Promise.all([\n                                c.data(),\n                                l.data()\n                            ])\n                        ];\n                    case 2:\n                        if (h = r.sent(), f = h[0], d = h[1], p = f[0], v = d[0], c.dispose(), l.dispose(), \"float32\" === n.dtype) {\n                            if (p < 0 || v > 1) throw new Error(\"Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [\" + p + \" - \" + v + \"].\");\n                        } else {\n                            if (\"int32\" !== n.dtype) throw new Error(\"Unsupported type for toPixels: \" + n.dtype + \". Please use float32 or int32 tensors.\");\n                            if (p < 0 || v > 255) throw new Error(\"Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [\" + p + \" - \" + v + \"].\");\n                        }\n                        for(g = \"float32\" === n.dtype ? 255 : 1, m = new Uint8ClampedArray(i * a * 4), y = 0; y < a * i; ++y)x = void 0, b = void 0, w = void 0, C = void 0, 1 === s ? (x = u[y] * g, b = u[y] * g, w = u[y] * g, C = 255) : 3 === s ? (x = u[3 * y] * g, b = u[3 * y + 1] * g, w = u[3 * y + 2] * g, C = 255) : 4 === s && (x = u[4 * y] * g, b = u[4 * y + 1] * g, w = u[4 * y + 2] * g, C = u[4 * y + 3] * g), m[(E = 4 * y) + 0] = Math.round(x), m[E + 1] = Math.round(b), m[E + 2] = Math.round(w), m[E + 3] = Math.round(C);\n                        return null != e && (e.width = i, e.height = a, R = e.getContext(\"2d\"), I = new ImageData(m, i, a), R.putImageData(I, 0, 0)), n !== t && n.dispose(), [\n                            2,\n                            m\n                        ];\n                }\n            });\n        });\n    },\n    fromPixels: Ud\n}), zd = function() {\n    function t() {}\n    return t.prototype.getClassName = function() {\n        return this.constructor.className;\n    }, t.fromConfig = function(t, e) {\n        return new t(e);\n    }, t;\n}(), Gd = function() {\n    function t() {\n        this.classNameMap = {};\n    }\n    return t.getMap = function() {\n        return null == t.instance && (t.instance = new t), t.instance;\n    }, t.register = function(e) {\n        t.getMap().classNameMap[e.className] = [\n            e,\n            e.fromConfig\n        ];\n    }, t;\n}();\nfunction Hd(t) {\n    C(null != t.className, function() {\n        return \"Class being registered does not have the static className property defined.\";\n    }), C(\"string\" == typeof t.className, function() {\n        return \"className is required to be a string, but got type \" + typeof t.className;\n    }), C(t.className.length > 0, function() {\n        return \"Class being registered has an empty-string as its className, which is disallowed.\";\n    }), Gd.register(t);\n}\nvar qd = Object.freeze({\n    Serializable: zd,\n    SerializationMap: Gd,\n    registerClass: Hd\n}), Kd = \"1.7.4\";\nvar jd = Object.freeze({\n    gpgpu_util: Rs,\n    webgl_util: Ge,\n    forceHalfFloat: function() {\n        i().set(\"WEBGL_FORCE_F16_TEXTURES\", !0);\n    },\n    MathBackendWebGL: Uu,\n    setWebGLContext: Kt,\n    GPGPUContext: Is\n}), Xd = function(t) {\n    function o() {\n        return null !== t && t.apply(this, arguments) || this;\n    }\n    return e(o, t), o.prototype.minimize = function(t, e, n) {\n        void 0 === e && (e = !1);\n        var r = this.computeGradients(t, n), o = r.value, a = r.grads;\n        if (null != n) {\n            var i = n.map(function(t) {\n                return {\n                    name: t.name,\n                    tensor: a[t.name]\n                };\n            });\n            this.applyGradients(i);\n        } else this.applyGradients(a);\n        return tn(a), e ? o : (o.dispose(), null);\n    }, Object.defineProperty(o.prototype, \"iterations\", {\n        get: function() {\n            return null == this.iterations_ && (this.iterations_ = 0), this.iterations_;\n        },\n        enumerable: !0,\n        configurable: !0\n    }), o.prototype.incrementIterations = function() {\n        this.iterations_ = this.iterations + 1;\n    }, o.prototype.computeGradients = function(t, e) {\n        return ra(t, e);\n    }, o.prototype.dispose = function() {\n        null != this.iterations_ && tn(this.iterations_);\n    }, o.prototype.saveIterations = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                return null == this.iterations_ && (this.iterations_ = 0), [\n                    2,\n                    {\n                        name: \"iter\",\n                        tensor: On(this.iterations_, \"int32\")\n                    }\n                ];\n            });\n        });\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                throw new Error(\"getWeights() is not implemented for this optimizer yet.\");\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                throw new Error(\"setWeights() is not implemented for this optimizer class \" + this.getClassName());\n            });\n        });\n    }, o.prototype.extractIterations = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return e = this, [\n                            4,\n                            t[0].tensor.data()\n                        ];\n                    case 1:\n                        return e.iterations_ = n.sent()[0], [\n                            2,\n                            t.slice(1)\n                        ];\n                }\n            });\n        });\n    }, o;\n}(zd);\nObject.defineProperty(Xd, Symbol.hasInstance, {\n    value: function(t) {\n        return null != t.minimize && null != t.computeGradients && null != t.applyGradients;\n    }\n});\nvar Yd = function(t) {\n    function o(e, n, r) {\n        void 0 === r && (r = null);\n        var o = t.call(this) || this;\n        return o.learningRate = e, o.rho = n, o.epsilon = r, o.accumulatedGrads = [], o.accumulatedUpdates = [], null == r && (o.epsilon = Lt.backend.epsilon()), o;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Lt.registeredVariables[n];\n            null == e.accumulatedGrads[r] && (e.accumulatedGrads[r] = {\n                originalName: n + \"/accum_grad\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            }), null == e.accumulatedUpdates[r] && (e.accumulatedUpdates[r] = {\n                originalName: n + \"/accum_var\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            });\n            var a = Array.isArray(t) ? t[r].tensor : t[n];\n            if (null != a) {\n                var i = e.accumulatedGrads[r].variable, s = e.accumulatedUpdates[r].variable;\n                Ze(function() {\n                    var t = i.mul(e.rho).add(a.square().mul(1 - e.rho)), n = s.add(e.epsilon).sqrt().div(i.add(e.epsilon).sqrt()).mul(a), r = s.mul(e.rho).add(n.square().mul(1 - e.rho));\n                    i.assign(t), s.assign(r);\n                    var u = n.mul(-e.learningRate).add(o);\n                    o.assign(u);\n                });\n            }\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        null != this.accumulatedUpdates && (tn(this.accumulatedGrads.map(function(t) {\n            return t.variable;\n        })), tn(this.accumulatedUpdates.map(function(t) {\n            return t.variable;\n        })));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return t = this.accumulatedGrads.concat(this.accumulatedUpdates), [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                e.sent()\n                            ].concat(t.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = n.sent(), e = t.length / 2, !1, this.accumulatedGrads = t.slice(0, e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), this.accumulatedUpdates = t.slice(e, 2 * e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            rho: this.rho,\n            epsilon: this.epsilon\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.rho, e.epsilon);\n    }, o.className = \"Adadelta\", o;\n}(Xd);\nHd(Yd);\nvar $d = function(t) {\n    function o(e, n) {\n        void 0 === n && (n = .1);\n        var r = t.call(this) || this;\n        return r.learningRate = e, r.initialAccumulatorValue = n, r.accumulatedGrads = [], r;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Lt.registeredVariables[n];\n            if (null == e.accumulatedGrads[r]) {\n                e.accumulatedGrads[r] = {\n                    originalName: n + \"/accumulator\",\n                    variable: Ze(function() {\n                        return Hn(o.shape, e.initialAccumulatorValue).variable(!1);\n                    })\n                };\n            }\n            var a = Array.isArray(t) ? t[r].tensor : t[n];\n            if (null != a) {\n                var i = e.accumulatedGrads[r].variable;\n                Ze(function() {\n                    var t = i.add(a.square());\n                    i.assign(t);\n                    var n = a.div(t.add(Lt.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);\n                    o.assign(n);\n                });\n            }\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        null != this.accumulatedGrads && tn(this.accumulatedGrads.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                switch(t.label){\n                    case 0:\n                        return [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                t.sent()\n                            ].concat(this.accumulatedGrads.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = e.sent(), !1, this.accumulatedGrads = t.map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            initialAccumulatorValue: this.initialAccumulatorValue\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.initialAccumulatorValue);\n    }, o.className = \"Adagrad\", o;\n}(Xd);\nHd($d);\nvar Qd = function(t) {\n    function o(e, n, r, o) {\n        void 0 === o && (o = null);\n        var a = t.call(this) || this;\n        return a.learningRate = e, a.beta1 = n, a.beta2 = r, a.epsilon = o, a.accumulatedFirstMoment = [], a.accumulatedSecondMoment = [], Ze(function() {\n            a.accBeta1 = On(n).variable(), a.accBeta2 = On(r).variable();\n        }), null == o && (a.epsilon = Lt.backend.epsilon()), a;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this, n = Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t);\n        Ze(function() {\n            var r = Oo(1, e.accBeta1), o = Oo(1, e.accBeta2);\n            n.forEach(function(n, a) {\n                var i = Lt.registeredVariables[n];\n                null == e.accumulatedFirstMoment[a] && (e.accumulatedFirstMoment[a] = {\n                    originalName: n + \"/m\",\n                    variable: Ze(function() {\n                        return Xn(i).variable(!1);\n                    })\n                }), null == e.accumulatedSecondMoment[a] && (e.accumulatedSecondMoment[a] = {\n                    originalName: n + \"/v\",\n                    variable: Ze(function() {\n                        return Xn(i).variable(!1);\n                    })\n                });\n                var s = Array.isArray(t) ? t[a].tensor : t[n];\n                if (null != s) {\n                    var u = e.accumulatedFirstMoment[a].variable, c = e.accumulatedSecondMoment[a].variable, l = u.mul(e.beta1).add(s.mul(1 - e.beta1)), h = c.mul(e.beta2).add(s.square().mul(1 - e.beta2)), f = l.div(r), d = h.div(o);\n                    u.assign(l), c.assign(h);\n                    var p = f.div(d.sqrt().add(e.epsilon)).mul(-e.learningRate).add(i);\n                    i.assign(p);\n                }\n            }), e.accBeta1.assign(e.accBeta1.mul(e.beta1)), e.accBeta2.assign(e.accBeta2.mul(e.beta2));\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        this.accBeta1.dispose(), this.accBeta2.dispose(), null != this.accumulatedFirstMoment && tn(this.accumulatedFirstMoment.map(function(t) {\n            return t.variable;\n        })), null != this.accumulatedSecondMoment && tn(this.accumulatedSecondMoment.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return t = this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment), [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                e.sent()\n                            ].concat(t.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e, n = this;\n            return r(this, function(r) {\n                switch(r.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = r.sent(), Ze(function() {\n                            n.accBeta1.assign(No(n.beta1, n.iterations_ + 1)), n.accBeta2.assign(No(n.beta2, n.iterations_ + 1));\n                        }), e = t.length / 2, !1, this.accumulatedFirstMoment = t.slice(0, e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), this.accumulatedSecondMoment = t.slice(e, 2 * e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            beta1: this.beta1,\n            beta2: this.beta2,\n            epsilon: this.epsilon\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);\n    }, o.className = \"Adam\", o;\n}(Xd);\nHd(Qd);\nvar Jd = function(t) {\n    function o(e, n, r, o, a) {\n        void 0 === o && (o = null), void 0 === a && (a = 0);\n        var i = t.call(this) || this;\n        return i.learningRate = e, i.beta1 = n, i.beta2 = r, i.epsilon = o, i.decay = a, i.accumulatedFirstMoment = [], i.accumulatedWeightedInfNorm = [], Ze(function() {\n            i.iteration = On(0).variable(), i.accBeta1 = On(n).variable();\n        }), null == o && (i.epsilon = Lt.backend.epsilon()), i;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this, n = Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t);\n        Ze(function() {\n            var r = Oo(1, e.accBeta1), o = Bo(-e.learningRate, e.iteration.mul(e.decay).add(1));\n            n.forEach(function(n, a) {\n                var i = Lt.registeredVariables[n];\n                null == e.accumulatedFirstMoment[a] && (e.accumulatedFirstMoment[a] = {\n                    originalName: n + \"/m\",\n                    variable: Xn(i).variable(!1)\n                }), null == e.accumulatedWeightedInfNorm[a] && (e.accumulatedWeightedInfNorm[a] = {\n                    originalName: n + \"/v\",\n                    variable: Xn(i).variable(!1)\n                });\n                var s = Array.isArray(t) ? t[a].tensor : t[n];\n                if (null != s) {\n                    var u = e.accumulatedFirstMoment[a].variable, c = e.accumulatedWeightedInfNorm[a].variable, l = u.mul(e.beta1).add(s.mul(1 - e.beta1)), h = c.mul(e.beta2), f = s.abs(), d = h.maximum(f);\n                    u.assign(l), c.assign(d);\n                    var p = o.div(r).mul(l.div(d.add(e.epsilon))).add(i);\n                    i.assign(p);\n                }\n            }), e.iteration.assign(e.iteration.add(1)), e.accBeta1.assign(e.accBeta1.mul(e.beta1));\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        this.accBeta1.dispose(), this.iteration.dispose(), null != this.accumulatedFirstMoment && tn(this.accumulatedFirstMoment.map(function(t) {\n            return t.variable;\n        })), null != this.accumulatedWeightedInfNorm && tn(this.accumulatedWeightedInfNorm.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                throw new Error(\"getWeights() is not implemented for Adamax yet.\");\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                throw new Error(\"setWeights() is not implemented for Adamax yet.\");\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            beta1: this.beta1,\n            beta2: this.beta2,\n            epsilon: this.epsilon,\n            decay: this.decay\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);\n    }, o.className = \"Adamax\", o;\n}(Xd);\nHd(Jd);\nvar Zd = function(t) {\n    function o(e) {\n        var n = t.call(this) || this;\n        return n.learningRate = e, n.setLearningRate(e), n;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Array.isArray(t) ? t[r].tensor : t[n];\n            if (null != o) {\n                var a = Lt.registeredVariables[n];\n                Ze(function() {\n                    var t = e.c.mul(o).add(a);\n                    a.assign(t);\n                });\n            }\n        }), this.incrementIterations();\n    }, o.prototype.setLearningRate = function(t) {\n        this.learningRate = t, null != this.c && this.c.dispose(), this.c = en(On(-t));\n    }, o.prototype.dispose = function() {\n        this.c.dispose();\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                switch(t.label){\n                    case 0:\n                        return [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                t.sent()\n                            ]\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        if (0 !== (t = e.sent()).length) throw new Error(\"SGD optimizer does not have settable weights.\");\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate);\n    }, o.className = \"SGD\", o;\n}(Xd);\nHd(Zd);\nvar tp = function(t) {\n    function o(e, n, r) {\n        void 0 === r && (r = !1);\n        var o = t.call(this, e) || this;\n        return o.learningRate = e, o.momentum = n, o.useNesterov = r, o.accumulations = [], o.m = On(o.momentum), o;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Lt.registeredVariables[n];\n            if (null == e.accumulations[r]) {\n                e.accumulations[r] = {\n                    originalName: n + \"/momentum\",\n                    variable: Ze(function() {\n                        return Xn(o).variable(!1);\n                    })\n                };\n            }\n            var a = e.accumulations[r].variable, i = Array.isArray(t) ? t[r].tensor : t[n];\n            null != i && Ze(function() {\n                var t, n = e.m.mul(a).add(i);\n                t = e.useNesterov ? e.c.mul(i.add(n.mul(e.m))).add(o) : e.c.mul(n).add(o), a.assign(n), o.assign(t);\n            });\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        this.m.dispose(), null != this.accumulations && tn(this.accumulations.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.setMomentum = function(t) {\n        this.momentum = t;\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(t) {\n                switch(t.label){\n                    case 0:\n                        return [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                t.sent()\n                            ].concat(this.accumulations.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = e.sent(), !1, this.accumulations = t.map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            momentum: this.momentum,\n            useNesterov: this.useNesterov\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.momentum, e.useNesterov);\n    }, o.className = \"Momentum\", o;\n}(Zd);\nHd(tp);\nvar ep = function(t) {\n    function o(e, n, r, o, a) {\n        void 0 === n && (n = .9), void 0 === r && (r = 0), void 0 === o && (o = null), void 0 === a && (a = !1);\n        var i = t.call(this) || this;\n        if (i.learningRate = e, i.decay = n, i.momentum = r, i.epsilon = o, i.accumulatedMeanSquares = [], i.accumulatedMoments = [], i.accumulatedMeanGrads = [], i.centered = a, null == o && (i.epsilon = Lt.backend.epsilon()), null == e) throw new Error(\"learningRate for RMSPropOptimizer must be defined.\");\n        return i;\n    }\n    return e(o, t), o.prototype.applyGradients = function(t) {\n        var e = this;\n        (Array.isArray(t) ? t.map(function(t) {\n            return t.name;\n        }) : Object.keys(t)).forEach(function(n, r) {\n            var o = Lt.registeredVariables[n];\n            null == e.accumulatedMeanSquares[r] && (e.accumulatedMeanSquares[r] = {\n                originalName: n + \"/rms\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            }), null == e.accumulatedMoments[r] && (e.accumulatedMoments[r] = {\n                originalName: n + \"/momentum\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            }), null == e.accumulatedMeanGrads[r] && e.centered && (e.accumulatedMeanGrads[r] = {\n                originalName: n + \"/mg\",\n                variable: Ze(function() {\n                    return Xn(o).variable(!1);\n                })\n            });\n            var a = Array.isArray(t) ? t[r].tensor : t[n];\n            if (null != a) {\n                var i = e.accumulatedMeanSquares[r].variable, s = e.accumulatedMoments[r].variable;\n                Ze(function() {\n                    var t = i.mul(e.decay).add(a.square().mul(1 - e.decay));\n                    if (e.centered) {\n                        var n = e.accumulatedMeanGrads[r].variable, u = n.mul(e.decay).add(a.mul(1 - e.decay)), c = s.mul(e.momentum).add(a.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));\n                        i.assign(t), n.assign(u), s.assign(c);\n                        var l = o.sub(c);\n                        o.assign(l);\n                    } else {\n                        var h = i.mul(e.decay).add(a.square().mul(1 - e.decay));\n                        c = s.mul(e.momentum).add(a.mul(e.learningRate).div(h.add(e.epsilon).sqrt()));\n                        i.assign(h), s.assign(c);\n                        l = o.sub(c);\n                        o.assign(l);\n                    }\n                });\n            }\n        }), this.incrementIterations();\n    }, o.prototype.dispose = function() {\n        null != this.accumulatedMeanSquares && tn(this.accumulatedMeanSquares.map(function(t) {\n            return t.variable;\n        })), null != this.accumulatedMeanGrads && this.centered && tn(this.accumulatedMeanGrads.map(function(t) {\n            return t.variable;\n        })), null != this.accumulatedMoments && tn(this.accumulatedMoments.map(function(t) {\n            return t.variable;\n        }));\n    }, o.prototype.getWeights = function() {\n        return n(this, void 0, void 0, function() {\n            var t;\n            return r(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return t = this.accumulatedMeanSquares.concat(this.accumulatedMoments), this.centered && t.push.apply(t, this.accumulatedMeanGrads), [\n                            4,\n                            this.saveIterations()\n                        ];\n                    case 1:\n                        return [\n                            2,\n                            [\n                                e.sent()\n                            ].concat(t.map(function(t) {\n                                return {\n                                    name: t.originalName,\n                                    tensor: t.variable\n                                };\n                            }))\n                        ];\n                }\n            });\n        });\n    }, o.prototype.setWeights = function(t) {\n        return n(this, void 0, void 0, function() {\n            var e;\n            return r(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        return [\n                            4,\n                            this.extractIterations(t)\n                        ];\n                    case 1:\n                        return t = n.sent(), e = this.centered ? t.length / 3 : t.length / 2, !1, this.accumulatedMeanSquares = t.slice(0, e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), this.accumulatedMoments = t.slice(e, 2 * e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        }), this.centered && (this.accumulatedMeanGrads = t.slice(2 * e, 3 * e).map(function(t) {\n                            return {\n                                originalName: t.name,\n                                variable: t.tensor.variable(!1)\n                            };\n                        })), [\n                            2\n                        ];\n                }\n            });\n        });\n    }, o.prototype.getConfig = function() {\n        return {\n            learningRate: this.learningRate,\n            decay: this.decay,\n            momentum: this.momentum,\n            epsilon: this.epsilon,\n            centered: this.centered\n        };\n    }, o.fromConfig = function(t, e) {\n        return new t(e.learningRate, e.decay, e.momentum, e.epsilon, e.centered);\n    }, o.className = \"RMSProp\", o;\n}(Xd);\nHd(ep);\nvar np = function() {\n    function t() {}\n    return t.sgd = function(t) {\n        return new Zd(t);\n    }, t.momentum = function(t, e, n) {\n        return void 0 === n && (n = !1), new tp(t, e, n);\n    }, t.rmsprop = function(t, e, n, r, o) {\n        return void 0 === e && (e = .9), void 0 === n && (n = 0), void 0 === r && (r = null), void 0 === o && (o = !1), new ep(t, e, n, r, o);\n    }, t.adam = function(t, e, n, r) {\n        return void 0 === t && (t = .001), void 0 === e && (e = .9), void 0 === n && (n = .999), void 0 === r && (r = null), new Qd(t, e, n, r);\n    }, t.adadelta = function(t, e, n) {\n        return void 0 === t && (t = .001), void 0 === e && (e = .95), void 0 === n && (n = null), new Yd(t, e, n);\n    }, t.adamax = function(t, e, n, r, o) {\n        return void 0 === t && (t = .002), void 0 === e && (e = .9), void 0 === n && (n = .999), void 0 === r && (r = null), void 0 === o && (o = 0), new Jd(t, e, n, r, o);\n    }, t.adagrad = function(t, e) {\n        return void 0 === e && (e = .1), new $d(t, e);\n    }, t;\n}(), rp = {\n    sgd: np.sgd,\n    momentum: np.momentum,\n    adadelta: np.adadelta,\n    adagrad: np.adagrad,\n    rmsprop: np.rmsprop,\n    adamax: np.adamax,\n    adam: np.adam\n}, op = \"undefined\" != typeof requestAnimationFrame ? requestAnimationFrame : \"undefined\" != typeof setImmediate ? setImmediate : function(t) {\n    return t();\n};\nfunction ap() {\n    return new Promise(function(t) {\n        return op(function() {\n            return t();\n        });\n    });\n}\nwt.prototype.add = function(t) {\n    return Or(this, t);\n}, wt.prototype.broadcastTo = function(t) {\n    return fc(this, t);\n}, wt.prototype.div = function(t) {\n    return Bo(this, t);\n}, wt.prototype.divNoNan = function(t) {\n    return bc(this, t);\n}, wt.prototype.squaredDifference = function(t) {\n    return Hc(this, t);\n}, wt.prototype.tile = function(t) {\n    return wc(this, t);\n}, wt.prototype.oneHot = function(t, e, n) {\n    return void 0 === e && (e = 1), void 0 === n && (n = 0), Rc(this, t, e, n);\n}, wt.prototype.transpose = function(t) {\n    return ua(this, t);\n}, wt.prototype.pad = function(t, e) {\n    return Ic(this, t, e);\n}, wt.prototype.batchNorm = function(t, e, n, r, o) {\n    return nc(this, t, e, n, r, o);\n}, xt = ff;\n //# sourceMappingURL=tf-core.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tensorflow/tfjs-core/dist/tf-core.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tensorflow/tfjs-core/node_modules/node-fetch/lib/index.es.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@tensorflow/tfjs-core/node_modules/node-fetch/lib/index.es.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FetchError: () => (/* binding */ FetchError),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   Response: () => (/* binding */ Response),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\n// (MIT licensed)\nconst BUFFER = Symbol(\"buffer\");\nconst TYPE = Symbol(\"type\");\nclass Blob {\n    constructor(){\n        this[TYPE] = \"\";\n        const blobParts = arguments[0];\n        const options = arguments[1];\n        const buffers = [];\n        if (blobParts) {\n            const a = blobParts;\n            const length = Number(a.length);\n            for(let i = 0; i < length; i++){\n                const element = a[i];\n                let buffer;\n                if (element instanceof Buffer) {\n                    buffer = element;\n                } else if (ArrayBuffer.isView(element)) {\n                    buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\n                } else if (element instanceof ArrayBuffer) {\n                    buffer = Buffer.from(element);\n                } else if (element instanceof Blob) {\n                    buffer = element[BUFFER];\n                } else {\n                    buffer = Buffer.from(typeof element === \"string\" ? element : String(element));\n                }\n                buffers.push(buffer);\n            }\n        }\n        this[BUFFER] = Buffer.concat(buffers);\n        let type = options && options.type !== undefined && String(options.type).toLowerCase();\n        if (type && !/[^\\u0020-\\u007E]/.test(type)) {\n            this[TYPE] = type;\n        }\n    }\n    get size() {\n        return this[BUFFER].length;\n    }\n    get type() {\n        return this[TYPE];\n    }\n    slice() {\n        const size = this.size;\n        const start = arguments[0];\n        const end = arguments[1];\n        let relativeStart, relativeEnd;\n        if (start === undefined) {\n            relativeStart = 0;\n        } else if (start < 0) {\n            relativeStart = Math.max(size + start, 0);\n        } else {\n            relativeStart = Math.min(start, size);\n        }\n        if (end === undefined) {\n            relativeEnd = size;\n        } else if (end < 0) {\n            relativeEnd = Math.max(size + end, 0);\n        } else {\n            relativeEnd = Math.min(end, size);\n        }\n        const span = Math.max(relativeEnd - relativeStart, 0);\n        const buffer = this[BUFFER];\n        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n        const blob = new Blob([], {\n            type: arguments[2]\n        });\n        blob[BUFFER] = slicedBuffer;\n        return blob;\n    }\n}\nObject.defineProperties(Blob.prototype, {\n    size: {\n        enumerable: true\n    },\n    type: {\n        enumerable: true\n    },\n    slice: {\n        enumerable: true\n    }\n});\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\n    value: \"Blob\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n});\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */ /**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */ function FetchError(message, type, systemError) {\n    Error.call(this, message);\n    this.message = message;\n    this.type = type;\n    // when err.type is `system`, err.code contains system error code\n    if (systemError) {\n        this.code = this.errno = systemError.code;\n    }\n    // hide custom error implementation details from end-users\n    Error.captureStackTrace(this, this.constructor);\n}\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = \"FetchError\";\n/**\n * body.js\n *\n * Body interface provides common methods for Request and Response\n */ const Stream = __webpack_require__(/*! stream */ \"stream\");\nvar _require = __webpack_require__(/*! stream */ \"stream\");\nconst PassThrough = _require.PassThrough;\nlet convert;\ntry {\n    convert = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'encoding'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n} catch (e) {}\nconst INTERNALS = Symbol(\"Body internals\");\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ function Body(body) {\n    var _this = this;\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref$size = _ref.size;\n    let size = _ref$size === undefined ? 0 : _ref$size;\n    var _ref$timeout = _ref.timeout;\n    let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\n    if (body == null) {\n        // body is undefined or null\n        body = null;\n    } else if (typeof body === \"string\") {\n    // body is string\n    } else if (isURLSearchParams(body)) {\n    // body is a URLSearchParams\n    } else if (body instanceof Blob) {\n    // body is blob\n    } else if (Buffer.isBuffer(body)) {\n    // body is buffer\n    } else if (Object.prototype.toString.call(body) === \"[object ArrayBuffer]\") {\n    // body is array buffer\n    } else if (body instanceof Stream) {\n    // body is stream\n    } else {\n        // none of the above\n        // coerce to string\n        body = String(body);\n    }\n    this[INTERNALS] = {\n        body,\n        disturbed: false,\n        error: null\n    };\n    this.size = size;\n    this.timeout = timeout;\n    if (body instanceof Stream) {\n        body.on(\"error\", function(err) {\n            _this[INTERNALS].error = new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, \"system\", err);\n        });\n    }\n}\nBody.prototype = {\n    get body () {\n        return this[INTERNALS].body;\n    },\n    get bodyUsed () {\n        return this[INTERNALS].disturbed;\n    },\n    /**\n  * Decode response as ArrayBuffer\n  *\n  * @return  Promise\n  */ arrayBuffer () {\n        return consumeBody.call(this).then(function(buf) {\n            return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n        });\n    },\n    /**\n  * Return raw response as Blob\n  *\n  * @return Promise\n  */ blob () {\n        let ct = this.headers && this.headers.get(\"content-type\") || \"\";\n        return consumeBody.call(this).then(function(buf) {\n            return Object.assign(// Prevent copying\n            new Blob([], {\n                type: ct.toLowerCase()\n            }), {\n                [BUFFER]: buf\n            });\n        });\n    },\n    /**\n  * Decode response as json\n  *\n  * @return  Promise\n  */ json () {\n        var _this2 = this;\n        return consumeBody.call(this).then(function(buffer) {\n            try {\n                return JSON.parse(buffer.toString());\n            } catch (err) {\n                return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, \"invalid-json\"));\n            }\n        });\n    },\n    /**\n  * Decode response as text\n  *\n  * @return  Promise\n  */ text () {\n        return consumeBody.call(this).then(function(buffer) {\n            return buffer.toString();\n        });\n    },\n    /**\n  * Decode response as buffer (non-spec api)\n  *\n  * @return  Promise\n  */ buffer () {\n        return consumeBody.call(this);\n    },\n    /**\n  * Decode response as text, while automatically detecting the encoding and\n  * trying to decode to UTF-8 (non-spec api)\n  *\n  * @return  Promise\n  */ textConverted () {\n        var _this3 = this;\n        return consumeBody.call(this).then(function(buffer) {\n            return convertBody(buffer, _this3.headers);\n        });\n    }\n};\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n    body: {\n        enumerable: true\n    },\n    bodyUsed: {\n        enumerable: true\n    },\n    arrayBuffer: {\n        enumerable: true\n    },\n    blob: {\n        enumerable: true\n    },\n    json: {\n        enumerable: true\n    },\n    text: {\n        enumerable: true\n    }\n});\nBody.mixIn = function(proto) {\n    for (const name of Object.getOwnPropertyNames(Body.prototype)){\n        // istanbul ignore else: future proof\n        if (!(name in proto)) {\n            const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\n            Object.defineProperty(proto, name, desc);\n        }\n    }\n};\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return  Promise\n */ function consumeBody() {\n    var _this4 = this;\n    if (this[INTERNALS].disturbed) {\n        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\n    }\n    this[INTERNALS].disturbed = true;\n    if (this[INTERNALS].error) {\n        return Body.Promise.reject(this[INTERNALS].error);\n    }\n    // body is null\n    if (this.body === null) {\n        return Body.Promise.resolve(Buffer.alloc(0));\n    }\n    // body is string\n    if (typeof this.body === \"string\") {\n        return Body.Promise.resolve(Buffer.from(this.body));\n    }\n    // body is blob\n    if (this.body instanceof Blob) {\n        return Body.Promise.resolve(this.body[BUFFER]);\n    }\n    // body is buffer\n    if (Buffer.isBuffer(this.body)) {\n        return Body.Promise.resolve(this.body);\n    }\n    // body is buffer\n    if (Object.prototype.toString.call(this.body) === \"[object ArrayBuffer]\") {\n        return Body.Promise.resolve(Buffer.from(this.body));\n    }\n    // istanbul ignore if: should never happen\n    if (!(this.body instanceof Stream)) {\n        return Body.Promise.resolve(Buffer.alloc(0));\n    }\n    // body is stream\n    // get ready to actually consume the body\n    let accum = [];\n    let accumBytes = 0;\n    let abort = false;\n    return new Body.Promise(function(resolve, reject) {\n        let resTimeout;\n        // allow timeout on slow response body\n        if (_this4.timeout) {\n            resTimeout = setTimeout(function() {\n                abort = true;\n                reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, \"body-timeout\"));\n            }, _this4.timeout);\n        }\n        // handle stream error, such as incorrect content-encoding\n        _this4.body.on(\"error\", function(err) {\n            reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, \"system\", err));\n        });\n        _this4.body.on(\"data\", function(chunk) {\n            if (abort || chunk === null) {\n                return;\n            }\n            if (_this4.size && accumBytes + chunk.length > _this4.size) {\n                abort = true;\n                reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, \"max-size\"));\n                return;\n            }\n            accumBytes += chunk.length;\n            accum.push(chunk);\n        });\n        _this4.body.on(\"end\", function() {\n            if (abort) {\n                return;\n            }\n            clearTimeout(resTimeout);\n            try {\n                resolve(Buffer.concat(accum));\n            } catch (err) {\n                // handle streams that have accumulated too much data (issue #414)\n                reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, \"system\", err));\n            }\n        });\n    });\n}\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */ function convertBody(buffer, headers) {\n    if (typeof convert !== \"function\") {\n        throw new Error(\"The package `encoding` must be installed to use the textConverted() function\");\n    }\n    const ct = headers.get(\"content-type\");\n    let charset = \"utf-8\";\n    let res, str;\n    // header\n    if (ct) {\n        res = /charset=([^;]*)/i.exec(ct);\n    }\n    // no charset in content type, peek at response body for at most 1024 bytes\n    str = buffer.slice(0, 1024).toString();\n    // html5\n    if (!res && str) {\n        res = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n    }\n    // html4\n    if (!res && str) {\n        res = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n        if (res) {\n            res = /charset=(.*)/i.exec(res.pop());\n        }\n    }\n    // xml\n    if (!res && str) {\n        res = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n    }\n    // found charset\n    if (res) {\n        charset = res.pop();\n        // prevent decode issues when sites use incorrect encoding\n        // ref: https://hsivonen.fi/encoding-menu/\n        if (charset === \"gb2312\" || charset === \"gbk\") {\n            charset = \"gb18030\";\n        }\n    }\n    // turn raw buffers into a single utf-8 buffer\n    return convert(buffer, \"UTF-8\", charset).toString();\n}\n/**\n * Detect a URLSearchParams object\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\n *\n * @param   Object  obj     Object to detect by type or brand\n * @return  String\n */ function isURLSearchParams(obj) {\n    // Duck-typing as a necessary condition.\n    if (typeof obj !== \"object\" || typeof obj.append !== \"function\" || typeof obj.delete !== \"function\" || typeof obj.get !== \"function\" || typeof obj.getAll !== \"function\" || typeof obj.has !== \"function\" || typeof obj.set !== \"function\") {\n        return false;\n    }\n    // Brand-checking and more duck-typing as optional condition.\n    return obj.constructor.name === \"URLSearchParams\" || Object.prototype.toString.call(obj) === \"[object URLSearchParams]\" || typeof obj.sort === \"function\";\n}\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */ function clone(instance) {\n    let p1, p2;\n    let body = instance.body;\n    // don't allow cloning a used body\n    if (instance.bodyUsed) {\n        throw new Error(\"cannot clone body after it is used\");\n    }\n    // check that body is a stream and not form-data object\n    // note: we can't clone the form-data object without having it as a dependency\n    if (body instanceof Stream && typeof body.getBoundary !== \"function\") {\n        // tee instance body\n        p1 = new PassThrough();\n        p2 = new PassThrough();\n        body.pipe(p1);\n        body.pipe(p2);\n        // set instance body to teed body and return the other teed body\n        instance[INTERNALS].body = p1;\n        body = p2;\n    }\n    return body;\n}\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param   Mixed  instance  Response or Request instance\n */ function extractContentType(instance) {\n    const body = instance.body;\n    // istanbul ignore if: Currently, because of a guard in Request, body\n    // can never be null. Included here for completeness.\n    if (body === null) {\n        // body is null\n        return null;\n    } else if (typeof body === \"string\") {\n        // body is string\n        return \"text/plain;charset=UTF-8\";\n    } else if (isURLSearchParams(body)) {\n        // body is a URLSearchParams\n        return \"application/x-www-form-urlencoded;charset=UTF-8\";\n    } else if (body instanceof Blob) {\n        // body is blob\n        return body.type || null;\n    } else if (Buffer.isBuffer(body)) {\n        // body is buffer\n        return null;\n    } else if (Object.prototype.toString.call(body) === \"[object ArrayBuffer]\") {\n        // body is array buffer\n        return null;\n    } else if (typeof body.getBoundary === \"function\") {\n        // detect form data input from form-data module\n        return `multipart/form-data;boundary=${body.getBoundary()}`;\n    } else {\n        // body is stream\n        // can't really do much about this\n        return null;\n    }\n}\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param   Body    instance   Instance of Body\n * @return  Number?            Number of bytes, or null if not possible\n */ function getTotalBytes(instance) {\n    const body = instance.body;\n    // istanbul ignore if: included for completion\n    if (body === null) {\n        // body is null\n        return 0;\n    } else if (typeof body === \"string\") {\n        // body is string\n        return Buffer.byteLength(body);\n    } else if (isURLSearchParams(body)) {\n        // body is URLSearchParams\n        return Buffer.byteLength(String(body));\n    } else if (body instanceof Blob) {\n        // body is blob\n        return body.size;\n    } else if (Buffer.isBuffer(body)) {\n        // body is buffer\n        return body.length;\n    } else if (Object.prototype.toString.call(body) === \"[object ArrayBuffer]\") {\n        // body is array buffer\n        return body.byteLength;\n    } else if (body && typeof body.getLengthSync === \"function\") {\n        // detect form data input from form-data module\n        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\n        body.hasKnownLength && body.hasKnownLength()) {\n            // 2.x\n            return body.getLengthSync();\n        }\n        return null;\n    } else {\n        // body is stream\n        // can't really do much about this\n        return null;\n    }\n}\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param   Body    instance   Instance of Body\n * @return  Void\n */ function writeToStream(dest, instance) {\n    const body = instance.body;\n    if (body === null) {\n        // body is null\n        dest.end();\n    } else if (typeof body === \"string\") {\n        // body is string\n        dest.write(body);\n        dest.end();\n    } else if (isURLSearchParams(body)) {\n        // body is URLSearchParams\n        dest.write(Buffer.from(String(body)));\n        dest.end();\n    } else if (body instanceof Blob) {\n        // body is blob\n        dest.write(body[BUFFER]);\n        dest.end();\n    } else if (Buffer.isBuffer(body)) {\n        // body is buffer\n        dest.write(body);\n        dest.end();\n    } else if (Object.prototype.toString.call(body) === \"[object ArrayBuffer]\") {\n        // body is array buffer\n        dest.write(Buffer.from(body));\n        dest.end();\n    } else {\n        // body is stream\n        body.pipe(dest);\n    }\n}\n// expose Promise\nBody.Promise = global.Promise;\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */ const invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\nfunction validateName(name) {\n    name = `${name}`;\n    if (invalidTokenRegex.test(name)) {\n        throw new TypeError(`${name} is not a legal HTTP header name`);\n    }\n}\nfunction validateValue(value) {\n    value = `${value}`;\n    if (invalidHeaderCharRegex.test(value)) {\n        throw new TypeError(`${value} is not a legal HTTP header value`);\n    }\n}\n/**\n * Find the key in the map object given a header name.\n *\n * Returns undefined if not found.\n *\n * @param   String  name  Header name\n * @return  String|Undefined\n */ function find(map, name) {\n    name = name.toLowerCase();\n    for(const key in map){\n        if (key.toLowerCase() === name) {\n            return key;\n        }\n    }\n    return undefined;\n}\nconst MAP = Symbol(\"map\");\nclass Headers {\n    /**\n  * Headers class\n  *\n  * @param   Object  headers  Response headers\n  * @return  Void\n  */ constructor(){\n        let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n        this[MAP] = Object.create(null);\n        if (init instanceof Headers) {\n            const rawHeaders = init.raw();\n            const headerNames = Object.keys(rawHeaders);\n            for (const headerName of headerNames){\n                for (const value of rawHeaders[headerName]){\n                    this.append(headerName, value);\n                }\n            }\n            return;\n        }\n        // We don't worry about converting prop to ByteString here as append()\n        // will handle it.\n        if (init == null) {\n        // no op\n        } else if (typeof init === \"object\") {\n            const method = init[Symbol.iterator];\n            if (method != null) {\n                if (typeof method !== \"function\") {\n                    throw new TypeError(\"Header pairs must be iterable\");\n                }\n                // sequence<sequence<ByteString>>\n                // Note: per spec we have to first exhaust the lists then process them\n                const pairs = [];\n                for (const pair of init){\n                    if (typeof pair !== \"object\" || typeof pair[Symbol.iterator] !== \"function\") {\n                        throw new TypeError(\"Each header pair must be iterable\");\n                    }\n                    pairs.push(Array.from(pair));\n                }\n                for (const pair of pairs){\n                    if (pair.length !== 2) {\n                        throw new TypeError(\"Each header pair must be a name/value tuple\");\n                    }\n                    this.append(pair[0], pair[1]);\n                }\n            } else {\n                // record<ByteString, ByteString>\n                for (const key of Object.keys(init)){\n                    const value = init[key];\n                    this.append(key, value);\n                }\n            }\n        } else {\n            throw new TypeError(\"Provided initializer must be an object\");\n        }\n    }\n    /**\n  * Return combined header value given name\n  *\n  * @param   String  name  Header name\n  * @return  Mixed\n  */ get(name) {\n        name = `${name}`;\n        validateName(name);\n        const key = find(this[MAP], name);\n        if (key === undefined) {\n            return null;\n        }\n        return this[MAP][key].join(\", \");\n    }\n    /**\n  * Iterate over all headers\n  *\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n  * @param   Boolean   thisArg   `this` context for callback function\n  * @return  Void\n  */ forEach(callback) {\n        let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n        let pairs = getHeaders(this);\n        let i = 0;\n        while(i < pairs.length){\n            var _pairs$i = pairs[i];\n            const name = _pairs$i[0], value = _pairs$i[1];\n            callback.call(thisArg, value, name, this);\n            pairs = getHeaders(this);\n            i++;\n        }\n    }\n    /**\n  * Overwrite header values given name\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */ set(name, value) {\n        name = `${name}`;\n        value = `${value}`;\n        validateName(name);\n        validateValue(value);\n        const key = find(this[MAP], name);\n        this[MAP][key !== undefined ? key : name] = [\n            value\n        ];\n    }\n    /**\n  * Append a value onto existing header\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */ append(name, value) {\n        name = `${name}`;\n        value = `${value}`;\n        validateName(name);\n        validateValue(value);\n        const key = find(this[MAP], name);\n        if (key !== undefined) {\n            this[MAP][key].push(value);\n        } else {\n            this[MAP][name] = [\n                value\n            ];\n        }\n    }\n    /**\n  * Check for header name existence\n  *\n  * @param   String   name  Header name\n  * @return  Boolean\n  */ has(name) {\n        name = `${name}`;\n        validateName(name);\n        return find(this[MAP], name) !== undefined;\n    }\n    /**\n  * Delete all header values given name\n  *\n  * @param   String  name  Header name\n  * @return  Void\n  */ delete(name) {\n        name = `${name}`;\n        validateName(name);\n        const key = find(this[MAP], name);\n        if (key !== undefined) {\n            delete this[MAP][key];\n        }\n    }\n    /**\n  * Return raw headers (non-spec api)\n  *\n  * @return  Object\n  */ raw() {\n        return this[MAP];\n    }\n    /**\n  * Get an iterator on keys.\n  *\n  * @return  Iterator\n  */ keys() {\n        return createHeadersIterator(this, \"key\");\n    }\n    /**\n  * Get an iterator on values.\n  *\n  * @return  Iterator\n  */ values() {\n        return createHeadersIterator(this, \"value\");\n    }\n    /**\n  * Get an iterator on entries.\n  *\n  * This is the default iterator of the Headers object.\n  *\n  * @return  Iterator\n  */ [Symbol.iterator]() {\n        return createHeadersIterator(this, \"key+value\");\n    }\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n    value: \"Headers\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n});\nObject.defineProperties(Headers.prototype, {\n    get: {\n        enumerable: true\n    },\n    forEach: {\n        enumerable: true\n    },\n    set: {\n        enumerable: true\n    },\n    append: {\n        enumerable: true\n    },\n    has: {\n        enumerable: true\n    },\n    delete: {\n        enumerable: true\n    },\n    keys: {\n        enumerable: true\n    },\n    values: {\n        enumerable: true\n    },\n    entries: {\n        enumerable: true\n    }\n});\nfunction getHeaders(headers) {\n    let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"key+value\";\n    const keys = Object.keys(headers[MAP]).sort();\n    return keys.map(kind === \"key\" ? function(k) {\n        return k.toLowerCase();\n    } : kind === \"value\" ? function(k) {\n        return headers[MAP][k].join(\", \");\n    } : function(k) {\n        return [\n            k.toLowerCase(),\n            headers[MAP][k].join(\", \")\n        ];\n    });\n}\nconst INTERNAL = Symbol(\"internal\");\nfunction createHeadersIterator(target, kind) {\n    const iterator = Object.create(HeadersIteratorPrototype);\n    iterator[INTERNAL] = {\n        target,\n        kind,\n        index: 0\n    };\n    return iterator;\n}\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n    next () {\n        // istanbul ignore if\n        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n            throw new TypeError(\"Value of `this` is not a HeadersIterator\");\n        }\n        var _INTERNAL = this[INTERNAL];\n        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;\n        const values = getHeaders(target, kind);\n        const len = values.length;\n        if (index >= len) {\n            return {\n                value: undefined,\n                done: true\n            };\n        }\n        this[INTERNAL].index = index + 1;\n        return {\n            value: values[index],\n            done: false\n        };\n    }\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n    value: \"HeadersIterator\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n});\n/**\n * Export the Headers object in a form that Node.js can consume.\n *\n * @param   Headers  headers\n * @return  Object\n */ function exportNodeCompatibleHeaders(headers) {\n    const obj = Object.assign({\n        __proto__: null\n    }, headers[MAP]);\n    // http.request() only supports string as Host header. This hack makes\n    // specifying custom Host header possible.\n    const hostHeaderKey = find(headers[MAP], \"Host\");\n    if (hostHeaderKey !== undefined) {\n        obj[hostHeaderKey] = obj[hostHeaderKey][0];\n    }\n    return obj;\n}\n/**\n * Create a Headers object from an object of headers, ignoring those that do\n * not conform to HTTP grammar productions.\n *\n * @param   Object  obj  Object of headers\n * @return  Headers\n */ function createHeadersLenient(obj) {\n    const headers = new Headers();\n    for (const name of Object.keys(obj)){\n        if (invalidTokenRegex.test(name)) {\n            continue;\n        }\n        if (Array.isArray(obj[name])) {\n            for (const val of obj[name]){\n                if (invalidHeaderCharRegex.test(val)) {\n                    continue;\n                }\n                if (headers[MAP][name] === undefined) {\n                    headers[MAP][name] = [\n                        val\n                    ];\n                } else {\n                    headers[MAP][name].push(val);\n                }\n            }\n        } else if (!invalidHeaderCharRegex.test(obj[name])) {\n            headers[MAP][name] = [\n                obj[name]\n            ];\n        }\n    }\n    return headers;\n}\n/**\n * response.js\n *\n * Response class provides content decoding\n */ var _require$1 = __webpack_require__(/*! http */ \"http\");\nconst STATUS_CODES = _require$1.STATUS_CODES;\nconst INTERNALS$1 = Symbol(\"Response internals\");\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */ class Response {\n    constructor(){\n        let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        Body.call(this, body, opts);\n        const status = opts.status || 200;\n        this[INTERNALS$1] = {\n            url: opts.url,\n            status,\n            statusText: opts.statusText || STATUS_CODES[status],\n            headers: new Headers(opts.headers)\n        };\n    }\n    get url() {\n        return this[INTERNALS$1].url;\n    }\n    get status() {\n        return this[INTERNALS$1].status;\n    }\n    /**\n  * Convenience property representing if the request ended normally\n  */ get ok() {\n        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n    }\n    get statusText() {\n        return this[INTERNALS$1].statusText;\n    }\n    get headers() {\n        return this[INTERNALS$1].headers;\n    }\n    /**\n  * Clone this response\n  *\n  * @return  Response\n  */ clone() {\n        return new Response(clone(this), {\n            url: this.url,\n            status: this.status,\n            statusText: this.statusText,\n            headers: this.headers,\n            ok: this.ok\n        });\n    }\n}\nBody.mixIn(Response.prototype);\nObject.defineProperties(Response.prototype, {\n    url: {\n        enumerable: true\n    },\n    status: {\n        enumerable: true\n    },\n    ok: {\n        enumerable: true\n    },\n    statusText: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    }\n});\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n    value: \"Response\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n});\n/**\n * request.js\n *\n * Request class contains server only options\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ var _require$2 = __webpack_require__(/*! url */ \"url\");\nconst format_url = _require$2.format;\nconst parse_url = _require$2.parse;\nconst INTERNALS$2 = Symbol(\"Request internals\");\n/**\n * Check if a value is an instance of Request.\n *\n * @param   Mixed   input\n * @return  Boolean\n */ function isRequest(input) {\n    return typeof input === \"object\" && typeof input[INTERNALS$2] === \"object\";\n}\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */ class Request {\n    constructor(input){\n        let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        let parsedURL;\n        // normalize input\n        if (!isRequest(input)) {\n            if (input && input.href) {\n                // in order to support Node.js' Url objects; though WHATWG's URL objects\n                // will fall into this branch also (since their `toString()` will return\n                // `href` property anyway)\n                parsedURL = parse_url(input.href);\n            } else {\n                // coerce input to a string before attempting to parse\n                parsedURL = parse_url(`${input}`);\n            }\n            input = {};\n        } else {\n            parsedURL = parse_url(input.url);\n        }\n        let method = init.method || input.method || \"GET\";\n        method = method.toUpperCase();\n        if ((init.body != null || isRequest(input) && input.body !== null) && (method === \"GET\" || method === \"HEAD\")) {\n            throw new TypeError(\"Request with GET/HEAD method cannot have body\");\n        }\n        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n        Body.call(this, inputBody, {\n            timeout: init.timeout || input.timeout || 0,\n            size: init.size || input.size || 0\n        });\n        const headers = new Headers(init.headers || input.headers || {});\n        if (init.body != null) {\n            const contentType = extractContentType(this);\n            if (contentType !== null && !headers.has(\"Content-Type\")) {\n                headers.append(\"Content-Type\", contentType);\n            }\n        }\n        this[INTERNALS$2] = {\n            method,\n            redirect: init.redirect || input.redirect || \"follow\",\n            headers,\n            parsedURL\n        };\n        // node-fetch-only options\n        this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n        this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n        this.counter = init.counter || input.counter || 0;\n        this.agent = init.agent || input.agent;\n    }\n    get method() {\n        return this[INTERNALS$2].method;\n    }\n    get url() {\n        return format_url(this[INTERNALS$2].parsedURL);\n    }\n    get headers() {\n        return this[INTERNALS$2].headers;\n    }\n    get redirect() {\n        return this[INTERNALS$2].redirect;\n    }\n    /**\n  * Clone this request\n  *\n  * @return  Request\n  */ clone() {\n        return new Request(this);\n    }\n}\nBody.mixIn(Request.prototype);\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n    value: \"Request\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n});\nObject.defineProperties(Request.prototype, {\n    method: {\n        enumerable: true\n    },\n    url: {\n        enumerable: true\n    },\n    headers: {\n        enumerable: true\n    },\n    redirect: {\n        enumerable: true\n    },\n    clone: {\n        enumerable: true\n    }\n});\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */ function getNodeRequestOptions(request) {\n    const parsedURL = request[INTERNALS$2].parsedURL;\n    const headers = new Headers(request[INTERNALS$2].headers);\n    // fetch step 1.3\n    if (!headers.has(\"Accept\")) {\n        headers.set(\"Accept\", \"*/*\");\n    }\n    // Basic fetch\n    if (!parsedURL.protocol || !parsedURL.hostname) {\n        throw new TypeError(\"Only absolute URLs are supported\");\n    }\n    if (!/^https?:$/.test(parsedURL.protocol)) {\n        throw new TypeError(\"Only HTTP(S) protocols are supported\");\n    }\n    // HTTP-network-or-cache fetch steps 2.4-2.7\n    let contentLengthValue = null;\n    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n        contentLengthValue = \"0\";\n    }\n    if (request.body != null) {\n        const totalBytes = getTotalBytes(request);\n        if (typeof totalBytes === \"number\") {\n            contentLengthValue = String(totalBytes);\n        }\n    }\n    if (contentLengthValue) {\n        headers.set(\"Content-Length\", contentLengthValue);\n    }\n    // HTTP-network-or-cache fetch step 2.11\n    if (!headers.has(\"User-Agent\")) {\n        headers.set(\"User-Agent\", \"node-fetch/1.0 (+https://github.com/bitinn/node-fetch)\");\n    }\n    // HTTP-network-or-cache fetch step 2.15\n    if (request.compress) {\n        headers.set(\"Accept-Encoding\", \"gzip,deflate\");\n    }\n    if (!headers.has(\"Connection\") && !request.agent) {\n        headers.set(\"Connection\", \"close\");\n    }\n    // HTTP-network fetch step 4.2\n    // chunked encoding is handled by Node.js\n    return Object.assign({}, parsedURL, {\n        method: request.method,\n        headers: exportNodeCompatibleHeaders(headers),\n        agent: request.agent\n    });\n}\n/**\n * index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */ const http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nvar _require$3 = __webpack_require__(/*! stream */ \"stream\");\nconst PassThrough$1 = _require$3.PassThrough;\nvar _require2 = __webpack_require__(/*! url */ \"url\");\nconst resolve_url = _require2.resolve;\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */ function fetch(url, opts) {\n    // allow custom promise\n    if (!fetch.Promise) {\n        throw new Error(\"native promise missing, set fetch.Promise to your favorite alternative\");\n    }\n    Body.Promise = fetch.Promise;\n    // wrap http.request into fetch\n    return new fetch.Promise(function(resolve, reject) {\n        // build request object\n        const request = new Request(url, opts);\n        const options = getNodeRequestOptions(request);\n        const send = (options.protocol === \"https:\" ? https : http).request;\n        // send request\n        const req = send(options);\n        let reqTimeout;\n        function finalize() {\n            req.abort();\n            clearTimeout(reqTimeout);\n        }\n        if (request.timeout) {\n            req.once(\"socket\", function(socket) {\n                reqTimeout = setTimeout(function() {\n                    reject(new FetchError(`network timeout at: ${request.url}`, \"request-timeout\"));\n                    finalize();\n                }, request.timeout);\n            });\n        }\n        req.on(\"error\", function(err) {\n            reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, \"system\", err));\n            finalize();\n        });\n        req.on(\"response\", function(res) {\n            clearTimeout(reqTimeout);\n            const headers = createHeadersLenient(res.headers);\n            // HTTP fetch step 5\n            if (fetch.isRedirect(res.statusCode)) {\n                // HTTP fetch step 5.2\n                const location = headers.get(\"Location\");\n                // HTTP fetch step 5.3\n                const locationURL = location === null ? null : resolve_url(request.url, location);\n                // HTTP fetch step 5.5\n                switch(request.redirect){\n                    case \"error\":\n                        reject(new FetchError(`redirect mode is set to error: ${request.url}`, \"no-redirect\"));\n                        finalize();\n                        return;\n                    case \"manual\":\n                        // node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n                        if (locationURL !== null) {\n                            headers.set(\"Location\", locationURL);\n                        }\n                        break;\n                    case \"follow\":\n                        // HTTP-redirect fetch step 2\n                        if (locationURL === null) {\n                            break;\n                        }\n                        // HTTP-redirect fetch step 5\n                        if (request.counter >= request.follow) {\n                            reject(new FetchError(`maximum redirect reached at: ${request.url}`, \"max-redirect\"));\n                            finalize();\n                            return;\n                        }\n                        // HTTP-redirect fetch step 6 (counter increment)\n                        // Create a new Request object.\n                        const requestOpts = {\n                            headers: new Headers(request.headers),\n                            follow: request.follow,\n                            counter: request.counter + 1,\n                            agent: request.agent,\n                            compress: request.compress,\n                            method: request.method,\n                            body: request.body\n                        };\n                        // HTTP-redirect fetch step 9\n                        if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n                            reject(new FetchError(\"Cannot follow redirect with body being a readable stream\", \"unsupported-redirect\"));\n                            finalize();\n                            return;\n                        }\n                        // HTTP-redirect fetch step 11\n                        if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === \"POST\") {\n                            requestOpts.method = \"GET\";\n                            requestOpts.body = undefined;\n                            requestOpts.headers.delete(\"content-length\");\n                        }\n                        // HTTP-redirect fetch step 15\n                        resolve(fetch(new Request(locationURL, requestOpts)));\n                        finalize();\n                        return;\n                }\n            }\n            // prepare response\n            let body = res.pipe(new PassThrough$1());\n            const response_options = {\n                url: request.url,\n                status: res.statusCode,\n                statusText: res.statusMessage,\n                headers: headers,\n                size: request.size,\n                timeout: request.timeout\n            };\n            // HTTP-network fetch step 12.1.1.3\n            const codings = headers.get(\"Content-Encoding\");\n            // HTTP-network fetch step 12.1.1.4: handle content codings\n            // in following scenarios we ignore compression support\n            // 1. compression support is disabled\n            // 2. HEAD request\n            // 3. no Content-Encoding header\n            // 4. no content response (204)\n            // 5. content not modified response (304)\n            if (!request.compress || request.method === \"HEAD\" || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n                resolve(new Response(body, response_options));\n                return;\n            }\n            // For Node v6+\n            // Be less strict when decoding compressed responses, since sometimes\n            // servers send slightly invalid responses that are still accepted\n            // by common browsers.\n            // Always using Z_SYNC_FLUSH is what cURL does.\n            const zlibOptions = {\n                flush: zlib.Z_SYNC_FLUSH,\n                finishFlush: zlib.Z_SYNC_FLUSH\n            };\n            // for gzip\n            if (codings == \"gzip\" || codings == \"x-gzip\") {\n                body = body.pipe(zlib.createGunzip(zlibOptions));\n                resolve(new Response(body, response_options));\n                return;\n            }\n            // for deflate\n            if (codings == \"deflate\" || codings == \"x-deflate\") {\n                // handle the infamous raw deflate response from old servers\n                // a hack for old IIS and Apache servers\n                const raw = res.pipe(new PassThrough$1());\n                raw.once(\"data\", function(chunk) {\n                    // see http://stackoverflow.com/questions/37519828\n                    if ((chunk[0] & 0x0F) === 0x08) {\n                        body = body.pipe(zlib.createInflate());\n                    } else {\n                        body = body.pipe(zlib.createInflateRaw());\n                    }\n                    resolve(new Response(body, response_options));\n                });\n                return;\n            }\n            // otherwise, use response as-is\n            resolve(new Response(body, response_options));\n        });\n        writeToStream(req, request);\n    });\n}\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */ fetch.isRedirect = function(code) {\n    return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n};\n// Needed for TypeScript.\nfetch.default = fetch;\n// expose Promise\nfetch.Promise = global.Promise;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fetch);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tensorflow/tfjs-core/node_modules/node-fetch/lib/index.es.js\n");

/***/ })

};
;
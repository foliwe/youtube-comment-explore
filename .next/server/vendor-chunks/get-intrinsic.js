"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/get-intrinsic";
exports.ids = ["vendor-chunks/get-intrinsic"];
exports.modules = {

/***/ "(rsc)/./node_modules/get-intrinsic/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-intrinsic/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar undefined1;\nvar $Object = __webpack_require__(/*! es-object-atoms */ \"(rsc)/./node_modules/es-object-atoms/index.js\");\nvar $Error = __webpack_require__(/*! es-errors */ \"(rsc)/./node_modules/es-errors/index.js\");\nvar $EvalError = __webpack_require__(/*! es-errors/eval */ \"(rsc)/./node_modules/es-errors/eval.js\");\nvar $RangeError = __webpack_require__(/*! es-errors/range */ \"(rsc)/./node_modules/es-errors/range.js\");\nvar $ReferenceError = __webpack_require__(/*! es-errors/ref */ \"(rsc)/./node_modules/es-errors/ref.js\");\nvar $SyntaxError = __webpack_require__(/*! es-errors/syntax */ \"(rsc)/./node_modules/es-errors/syntax.js\");\nvar $TypeError = __webpack_require__(/*! es-errors/type */ \"(rsc)/./node_modules/es-errors/type.js\");\nvar $URIError = __webpack_require__(/*! es-errors/uri */ \"(rsc)/./node_modules/es-errors/uri.js\");\nvar abs = __webpack_require__(/*! math-intrinsics/abs */ \"(rsc)/./node_modules/math-intrinsics/abs.js\");\nvar floor = __webpack_require__(/*! math-intrinsics/floor */ \"(rsc)/./node_modules/math-intrinsics/floor.js\");\nvar max = __webpack_require__(/*! math-intrinsics/max */ \"(rsc)/./node_modules/math-intrinsics/max.js\");\nvar min = __webpack_require__(/*! math-intrinsics/min */ \"(rsc)/./node_modules/math-intrinsics/min.js\");\nvar pow = __webpack_require__(/*! math-intrinsics/pow */ \"(rsc)/./node_modules/math-intrinsics/pow.js\");\nvar $Function = Function;\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function(expressionSyntax) {\n    try {\n        return $Function('\"use strict\"; return (' + expressionSyntax + \").constructor;\")();\n    } catch (e) {}\n};\nvar $gOPD = __webpack_require__(/*! gopd */ \"(rsc)/./node_modules/gopd/index.js\");\nvar $defineProperty = __webpack_require__(/*! es-define-property */ \"(rsc)/./node_modules/es-define-property/index.js\");\nvar throwTypeError = function() {\n    throw new $TypeError();\n};\nvar ThrowTypeError = $gOPD ? function() {\n    try {\n        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n        arguments.callee; // IE 8 does not throw here\n        return throwTypeError;\n    } catch (calleeThrows) {\n        try {\n            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n            return $gOPD(arguments, \"callee\").get;\n        } catch (gOPDthrows) {\n            return throwTypeError;\n        }\n    }\n}() : throwTypeError;\nvar hasSymbols = __webpack_require__(/*! has-symbols */ \"(rsc)/./node_modules/has-symbols/index.js\")();\nvar getDunderProto = __webpack_require__(/*! dunder-proto/get */ \"(rsc)/./node_modules/dunder-proto/get.js\");\nvar getProto = typeof Reflect === \"function\" && Reflect.getPrototypeOf || $Object.getPrototypeOf || getDunderProto;\nvar $apply = __webpack_require__(/*! call-bind-apply-helpers/functionApply */ \"(rsc)/./node_modules/call-bind-apply-helpers/functionApply.js\");\nvar $call = __webpack_require__(/*! call-bind-apply-helpers/functionCall */ \"(rsc)/./node_modules/call-bind-apply-helpers/functionCall.js\");\nvar needsEval = {};\nvar TypedArray = typeof Uint8Array === \"undefined\" || !getProto ? undefined : getProto(Uint8Array);\nvar INTRINSICS = {\n    __proto__: null,\n    \"%AggregateError%\": typeof AggregateError === \"undefined\" ? undefined : AggregateError,\n    \"%Array%\": Array,\n    \"%ArrayBuffer%\": typeof ArrayBuffer === \"undefined\" ? undefined : ArrayBuffer,\n    \"%ArrayIteratorPrototype%\": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,\n    \"%AsyncFromSyncIteratorPrototype%\": undefined,\n    \"%AsyncFunction%\": needsEval,\n    \"%AsyncGenerator%\": needsEval,\n    \"%AsyncGeneratorFunction%\": needsEval,\n    \"%AsyncIteratorPrototype%\": needsEval,\n    \"%Atomics%\": typeof Atomics === \"undefined\" ? undefined : Atomics,\n    \"%BigInt%\": typeof BigInt === \"undefined\" ? undefined : BigInt,\n    \"%BigInt64Array%\": typeof BigInt64Array === \"undefined\" ? undefined : BigInt64Array,\n    \"%BigUint64Array%\": typeof BigUint64Array === \"undefined\" ? undefined : BigUint64Array,\n    \"%Boolean%\": Boolean,\n    \"%DataView%\": typeof DataView === \"undefined\" ? undefined : DataView,\n    \"%Date%\": Date,\n    \"%decodeURI%\": decodeURI,\n    \"%decodeURIComponent%\": decodeURIComponent,\n    \"%encodeURI%\": encodeURI,\n    \"%encodeURIComponent%\": encodeURIComponent,\n    \"%Error%\": $Error,\n    \"%eval%\": eval,\n    \"%EvalError%\": $EvalError,\n    \"%Float32Array%\": typeof Float32Array === \"undefined\" ? undefined : Float32Array,\n    \"%Float64Array%\": typeof Float64Array === \"undefined\" ? undefined : Float64Array,\n    \"%FinalizationRegistry%\": typeof FinalizationRegistry === \"undefined\" ? undefined : FinalizationRegistry,\n    \"%Function%\": $Function,\n    \"%GeneratorFunction%\": needsEval,\n    \"%Int8Array%\": typeof Int8Array === \"undefined\" ? undefined : Int8Array,\n    \"%Int16Array%\": typeof Int16Array === \"undefined\" ? undefined : Int16Array,\n    \"%Int32Array%\": typeof Int32Array === \"undefined\" ? undefined : Int32Array,\n    \"%isFinite%\": isFinite,\n    \"%isNaN%\": isNaN,\n    \"%IteratorPrototype%\": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,\n    \"%JSON%\": typeof JSON === \"object\" ? JSON : undefined,\n    \"%Map%\": typeof Map === \"undefined\" ? undefined : Map,\n    \"%MapIteratorPrototype%\": typeof Map === \"undefined\" || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),\n    \"%Math%\": Math,\n    \"%Number%\": Number,\n    \"%Object%\": $Object,\n    \"%Object.getOwnPropertyDescriptor%\": $gOPD,\n    \"%parseFloat%\": parseFloat,\n    \"%parseInt%\": parseInt,\n    \"%Promise%\": typeof Promise === \"undefined\" ? undefined : Promise,\n    \"%Proxy%\": typeof Proxy === \"undefined\" ? undefined : Proxy,\n    \"%RangeError%\": $RangeError,\n    \"%ReferenceError%\": $ReferenceError,\n    \"%Reflect%\": typeof Reflect === \"undefined\" ? undefined : Reflect,\n    \"%RegExp%\": RegExp,\n    \"%Set%\": typeof Set === \"undefined\" ? undefined : Set,\n    \"%SetIteratorPrototype%\": typeof Set === \"undefined\" || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),\n    \"%SharedArrayBuffer%\": typeof SharedArrayBuffer === \"undefined\" ? undefined : SharedArrayBuffer,\n    \"%String%\": String,\n    \"%StringIteratorPrototype%\": hasSymbols && getProto ? getProto(\"\"[Symbol.iterator]()) : undefined,\n    \"%Symbol%\": hasSymbols ? Symbol : undefined,\n    \"%SyntaxError%\": $SyntaxError,\n    \"%ThrowTypeError%\": ThrowTypeError,\n    \"%TypedArray%\": TypedArray,\n    \"%TypeError%\": $TypeError,\n    \"%Uint8Array%\": typeof Uint8Array === \"undefined\" ? undefined : Uint8Array,\n    \"%Uint8ClampedArray%\": typeof Uint8ClampedArray === \"undefined\" ? undefined : Uint8ClampedArray,\n    \"%Uint16Array%\": typeof Uint16Array === \"undefined\" ? undefined : Uint16Array,\n    \"%Uint32Array%\": typeof Uint32Array === \"undefined\" ? undefined : Uint32Array,\n    \"%URIError%\": $URIError,\n    \"%WeakMap%\": typeof WeakMap === \"undefined\" ? undefined : WeakMap,\n    \"%WeakRef%\": typeof WeakRef === \"undefined\" ? undefined : WeakRef,\n    \"%WeakSet%\": typeof WeakSet === \"undefined\" ? undefined : WeakSet,\n    \"%Function.prototype.call%\": $call,\n    \"%Function.prototype.apply%\": $apply,\n    \"%Object.defineProperty%\": $defineProperty,\n    \"%Math.abs%\": abs,\n    \"%Math.floor%\": floor,\n    \"%Math.max%\": max,\n    \"%Math.min%\": min,\n    \"%Math.pow%\": pow\n};\nif (getProto) {\n    try {\n        null.error; // eslint-disable-line no-unused-expressions\n    } catch (e) {\n        // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229\n        var errorProto = getProto(getProto(e));\n        INTRINSICS[\"%Error.prototype%\"] = errorProto;\n    }\n}\nvar doEval = function doEval(name) {\n    var value;\n    if (name === \"%AsyncFunction%\") {\n        value = getEvalledConstructor(\"async function () {}\");\n    } else if (name === \"%GeneratorFunction%\") {\n        value = getEvalledConstructor(\"function* () {}\");\n    } else if (name === \"%AsyncGeneratorFunction%\") {\n        value = getEvalledConstructor(\"async function* () {}\");\n    } else if (name === \"%AsyncGenerator%\") {\n        var fn = doEval(\"%AsyncGeneratorFunction%\");\n        if (fn) {\n            value = fn.prototype;\n        }\n    } else if (name === \"%AsyncIteratorPrototype%\") {\n        var gen = doEval(\"%AsyncGenerator%\");\n        if (gen && getProto) {\n            value = getProto(gen.prototype);\n        }\n    }\n    INTRINSICS[name] = value;\n    return value;\n};\nvar LEGACY_ALIASES = {\n    __proto__: null,\n    \"%ArrayBufferPrototype%\": [\n        \"ArrayBuffer\",\n        \"prototype\"\n    ],\n    \"%ArrayPrototype%\": [\n        \"Array\",\n        \"prototype\"\n    ],\n    \"%ArrayProto_entries%\": [\n        \"Array\",\n        \"prototype\",\n        \"entries\"\n    ],\n    \"%ArrayProto_forEach%\": [\n        \"Array\",\n        \"prototype\",\n        \"forEach\"\n    ],\n    \"%ArrayProto_keys%\": [\n        \"Array\",\n        \"prototype\",\n        \"keys\"\n    ],\n    \"%ArrayProto_values%\": [\n        \"Array\",\n        \"prototype\",\n        \"values\"\n    ],\n    \"%AsyncFunctionPrototype%\": [\n        \"AsyncFunction\",\n        \"prototype\"\n    ],\n    \"%AsyncGenerator%\": [\n        \"AsyncGeneratorFunction\",\n        \"prototype\"\n    ],\n    \"%AsyncGeneratorPrototype%\": [\n        \"AsyncGeneratorFunction\",\n        \"prototype\",\n        \"prototype\"\n    ],\n    \"%BooleanPrototype%\": [\n        \"Boolean\",\n        \"prototype\"\n    ],\n    \"%DataViewPrototype%\": [\n        \"DataView\",\n        \"prototype\"\n    ],\n    \"%DatePrototype%\": [\n        \"Date\",\n        \"prototype\"\n    ],\n    \"%ErrorPrototype%\": [\n        \"Error\",\n        \"prototype\"\n    ],\n    \"%EvalErrorPrototype%\": [\n        \"EvalError\",\n        \"prototype\"\n    ],\n    \"%Float32ArrayPrototype%\": [\n        \"Float32Array\",\n        \"prototype\"\n    ],\n    \"%Float64ArrayPrototype%\": [\n        \"Float64Array\",\n        \"prototype\"\n    ],\n    \"%FunctionPrototype%\": [\n        \"Function\",\n        \"prototype\"\n    ],\n    \"%Generator%\": [\n        \"GeneratorFunction\",\n        \"prototype\"\n    ],\n    \"%GeneratorPrototype%\": [\n        \"GeneratorFunction\",\n        \"prototype\",\n        \"prototype\"\n    ],\n    \"%Int8ArrayPrototype%\": [\n        \"Int8Array\",\n        \"prototype\"\n    ],\n    \"%Int16ArrayPrototype%\": [\n        \"Int16Array\",\n        \"prototype\"\n    ],\n    \"%Int32ArrayPrototype%\": [\n        \"Int32Array\",\n        \"prototype\"\n    ],\n    \"%JSONParse%\": [\n        \"JSON\",\n        \"parse\"\n    ],\n    \"%JSONStringify%\": [\n        \"JSON\",\n        \"stringify\"\n    ],\n    \"%MapPrototype%\": [\n        \"Map\",\n        \"prototype\"\n    ],\n    \"%NumberPrototype%\": [\n        \"Number\",\n        \"prototype\"\n    ],\n    \"%ObjectPrototype%\": [\n        \"Object\",\n        \"prototype\"\n    ],\n    \"%ObjProto_toString%\": [\n        \"Object\",\n        \"prototype\",\n        \"toString\"\n    ],\n    \"%ObjProto_valueOf%\": [\n        \"Object\",\n        \"prototype\",\n        \"valueOf\"\n    ],\n    \"%PromisePrototype%\": [\n        \"Promise\",\n        \"prototype\"\n    ],\n    \"%PromiseProto_then%\": [\n        \"Promise\",\n        \"prototype\",\n        \"then\"\n    ],\n    \"%Promise_all%\": [\n        \"Promise\",\n        \"all\"\n    ],\n    \"%Promise_reject%\": [\n        \"Promise\",\n        \"reject\"\n    ],\n    \"%Promise_resolve%\": [\n        \"Promise\",\n        \"resolve\"\n    ],\n    \"%RangeErrorPrototype%\": [\n        \"RangeError\",\n        \"prototype\"\n    ],\n    \"%ReferenceErrorPrototype%\": [\n        \"ReferenceError\",\n        \"prototype\"\n    ],\n    \"%RegExpPrototype%\": [\n        \"RegExp\",\n        \"prototype\"\n    ],\n    \"%SetPrototype%\": [\n        \"Set\",\n        \"prototype\"\n    ],\n    \"%SharedArrayBufferPrototype%\": [\n        \"SharedArrayBuffer\",\n        \"prototype\"\n    ],\n    \"%StringPrototype%\": [\n        \"String\",\n        \"prototype\"\n    ],\n    \"%SymbolPrototype%\": [\n        \"Symbol\",\n        \"prototype\"\n    ],\n    \"%SyntaxErrorPrototype%\": [\n        \"SyntaxError\",\n        \"prototype\"\n    ],\n    \"%TypedArrayPrototype%\": [\n        \"TypedArray\",\n        \"prototype\"\n    ],\n    \"%TypeErrorPrototype%\": [\n        \"TypeError\",\n        \"prototype\"\n    ],\n    \"%Uint8ArrayPrototype%\": [\n        \"Uint8Array\",\n        \"prototype\"\n    ],\n    \"%Uint8ClampedArrayPrototype%\": [\n        \"Uint8ClampedArray\",\n        \"prototype\"\n    ],\n    \"%Uint16ArrayPrototype%\": [\n        \"Uint16Array\",\n        \"prototype\"\n    ],\n    \"%Uint32ArrayPrototype%\": [\n        \"Uint32Array\",\n        \"prototype\"\n    ],\n    \"%URIErrorPrototype%\": [\n        \"URIError\",\n        \"prototype\"\n    ],\n    \"%WeakMapPrototype%\": [\n        \"WeakMap\",\n        \"prototype\"\n    ],\n    \"%WeakSetPrototype%\": [\n        \"WeakSet\",\n        \"prototype\"\n    ]\n};\nvar bind = __webpack_require__(/*! function-bind */ \"(rsc)/./node_modules/function-bind/index.js\");\nvar hasOwn = __webpack_require__(/*! hasown */ \"(rsc)/./node_modules/hasown/index.js\");\nvar $concat = bind.call($call, Array.prototype.concat);\nvar $spliceApply = bind.call($apply, Array.prototype.splice);\nvar $replace = bind.call($call, String.prototype.replace);\nvar $strSlice = bind.call($call, String.prototype.slice);\nvar $exec = bind.call($call, RegExp.prototype.exec);\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */ \nvar stringToPath = function stringToPath(string) {\n    var first = $strSlice(string, 0, 1);\n    var last = $strSlice(string, -1);\n    if (first === \"%\" && last !== \"%\") {\n        throw new $SyntaxError(\"invalid intrinsic syntax, expected closing `%`\");\n    } else if (last === \"%\" && first !== \"%\") {\n        throw new $SyntaxError(\"invalid intrinsic syntax, expected opening `%`\");\n    }\n    var result = [];\n    $replace(string, rePropName, function(match, number, quote, subString) {\n        result[result.length] = quote ? $replace(subString, reEscapeChar, \"$1\") : number || match;\n    });\n    return result;\n};\n/* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n    var intrinsicName = name;\n    var alias;\n    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n        alias = LEGACY_ALIASES[intrinsicName];\n        intrinsicName = \"%\" + alias[0] + \"%\";\n    }\n    if (hasOwn(INTRINSICS, intrinsicName)) {\n        var value = INTRINSICS[intrinsicName];\n        if (value === needsEval) {\n            value = doEval(intrinsicName);\n        }\n        if (typeof value === \"undefined\" && !allowMissing) {\n            throw new $TypeError(\"intrinsic \" + name + \" exists, but is not available. Please file an issue!\");\n        }\n        return {\n            alias: alias,\n            name: intrinsicName,\n            value: value\n        };\n    }\n    throw new $SyntaxError(\"intrinsic \" + name + \" does not exist!\");\n};\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n    if (typeof name !== \"string\" || name.length === 0) {\n        throw new $TypeError(\"intrinsic name must be a non-empty string\");\n    }\n    if (arguments.length > 1 && typeof allowMissing !== \"boolean\") {\n        throw new $TypeError('\"allowMissing\" argument must be a boolean');\n    }\n    if ($exec(/^%?[^%]*%?$/, name) === null) {\n        throw new $SyntaxError(\"`%` may not be present anywhere but at the beginning and end of the intrinsic name\");\n    }\n    var parts = stringToPath(name);\n    var intrinsicBaseName = parts.length > 0 ? parts[0] : \"\";\n    var intrinsic = getBaseIntrinsic(\"%\" + intrinsicBaseName + \"%\", allowMissing);\n    var intrinsicRealName = intrinsic.name;\n    var value = intrinsic.value;\n    var skipFurtherCaching = false;\n    var alias = intrinsic.alias;\n    if (alias) {\n        intrinsicBaseName = alias[0];\n        $spliceApply(parts, $concat([\n            0,\n            1\n        ], alias));\n    }\n    for(var i = 1, isOwn = true; i < parts.length; i += 1){\n        var part = parts[i];\n        var first = $strSlice(part, 0, 1);\n        var last = $strSlice(part, -1);\n        if ((first === '\"' || first === \"'\" || first === \"`\" || last === '\"' || last === \"'\" || last === \"`\") && first !== last) {\n            throw new $SyntaxError(\"property names with quotes must have matching quotes\");\n        }\n        if (part === \"constructor\" || !isOwn) {\n            skipFurtherCaching = true;\n        }\n        intrinsicBaseName += \".\" + part;\n        intrinsicRealName = \"%\" + intrinsicBaseName + \"%\";\n        if (hasOwn(INTRINSICS, intrinsicRealName)) {\n            value = INTRINSICS[intrinsicRealName];\n        } else if (value != null) {\n            if (!(part in value)) {\n                if (!allowMissing) {\n                    throw new $TypeError(\"base intrinsic for \" + name + \" exists, but the property is not available.\");\n                }\n                return void undefined;\n            }\n            if ($gOPD && i + 1 >= parts.length) {\n                var desc = $gOPD(value, part);\n                isOwn = !!desc;\n                // By convention, when a data property is converted to an accessor\n                // property to emulate a data property that does not suffer from\n                // the override mistake, that accessor's getter is marked with\n                // an `originalValue` property. Here, when we detect this, we\n                // uphold the illusion by pretending to see that original data\n                // property, i.e., returning the value rather than the getter\n                // itself.\n                if (isOwn && \"get\" in desc && !(\"originalValue\" in desc.get)) {\n                    value = desc.get;\n                } else {\n                    value = value[part];\n                }\n            } else {\n                isOwn = hasOwn(value, part);\n                value = value[part];\n            }\n            if (isOwn && !skipFurtherCaching) {\n                INTRINSICS[intrinsicRealName] = value;\n            }\n        }\n    }\n    return value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/get-intrinsic/index.js\n");

/***/ })

};
;